[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar MeteorVersion = Package['sanjo:meteor-version'].MeteorVersion;\nvar PackageVersion = Package['package-version-parser'].PackageVersion;\n\n/* Package-scope variables */\nvar findUpwards, findAppDir, MeteorFilesHelpers;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_meteor-files-helpers/lib/meteor/files.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * Copied from Meteor tools/files.js.                                                                                 // 2\n *                                                                                                                    // 3\n * Includes:                                                                                                          // 4\n * - Helper to find the app root path                                                                                 // 5\n */                                                                                                                   // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                       // 8\nvar fs = Npm.require('fs');                                                                                           // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                   // 11\n// from the path until we find a path that satisfies the predicate.                                                   // 12\n//                                                                                                                    // 13\n// returns either the path to the lowest level directory that passed                                                  // 14\n// the test or null for none found. if starting path isn't given, use                                                 // 15\n// cwd.                                                                                                               // 16\nfindUpwards = function (predicate, startPath) {                                                                       // 17\n  var testDir = startPath || process.cwd();                                                                           // 18\n  while (testDir) {                                                                                                   // 19\n    if (predicate(testDir)) {                                                                                         // 20\n      break;                                                                                                          // 21\n    }                                                                                                                 // 22\n    var newDir = path.dirname(testDir);                                                                               // 23\n    if (newDir === testDir) {                                                                                         // 24\n      testDir = null;                                                                                                 // 25\n    } else {                                                                                                          // 26\n      testDir = newDir;                                                                                               // 27\n    }                                                                                                                 // 28\n  }                                                                                                                   // 29\n  if (!testDir)                                                                                                       // 30\n    return null;                                                                                                      // 31\n                                                                                                                      // 32\n  return testDir;                                                                                                     // 33\n};                                                                                                                    // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                 // 36\n// directory. If so, return the top-level app directory.                                                              // 37\nfindAppDir = function (filepath) {                                                                                    // 38\n  var isAppDir = function (filepath) {                                                                                // 39\n    // XXX once we are done with the transition to engine, this should                                                // 40\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                // 41\n    // 'release'))`                                                                                                   // 42\n                                                                                                                      // 43\n    // .meteor/packages can be a directory, if .meteor is a warehouse                                                 // 44\n    // directory.  since installing meteor initializes a warehouse at                                                 // 45\n    // $HOME/.meteor, we want to make sure your home directory (and all                                               // 46\n    // subdirectories therein) don't count as being within a meteor app.                                              // 47\n    try { // use try/catch to avoid the additional syscall to fs.existsSync                                           // 48\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                        // 49\n    } catch (e) {                                                                                                     // 50\n      return false;                                                                                                   // 51\n    }                                                                                                                 // 52\n  };                                                                                                                  // 53\n                                                                                                                      // 54\n  return findUpwards(isAppDir, filepath);                                                                             // 55\n};                                                                                                                    // 56\n                                                                                                                      // 57\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_meteor-files-helpers/meteor_files_helpers.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar path = Npm.require('path')                                                                                        // 1\nvar fs = Npm.require('fs')                                                                                            // 2\nvar readFile = Meteor.wrapAsync(fs.readFile, fs)                                                                      // 3\nvar exists = Meteor.wrapAsync(function (path, callback) {                                                             // 4\n  fs.exists(path, function (result) {                                                                                 // 5\n    callback(null, result)                                                                                            // 6\n  })                                                                                                                  // 7\n})                                                                                                                    // 8\n                                                                                                                      // 9\nMeteorFilesHelpers = {                                                                                                // 10\n  getAppPath: function () {                                                                                           // 11\n    var appPath = findAppDir();                                                                                       // 12\n    return appPath ? path.resolve(appPath) : null;                                                                    // 13\n  },                                                                                                                  // 14\n                                                                                                                      // 15\n  getMeteorToolPath: function () {                                                                                    // 16\n    return this._findMeteorToolDir(process.execPath);                                                                 // 17\n  },                                                                                                                  // 18\n                                                                                                                      // 19\n  _findMeteorToolDir: function (filepath) {                                                                           // 20\n    return findUpwards(this._isMeteorToolDir.bind(this), filepath);                                                   // 21\n  },                                                                                                                  // 22\n                                                                                                                      // 23\n  _isMeteorToolDir: function (filepath) {                                                                             // 24\n    try { // use try/catch to avoid the additional syscall to fs.existsSync                                           // 25\n      return fs.statSync(path.join(filepath, 'meteor')).isFile();                                                     // 26\n    } catch (e) {                                                                                                     // 27\n      return false;                                                                                                   // 28\n    }                                                                                                                 // 29\n  },                                                                                                                  // 30\n                                                                                                                      // 31\n  getMeteorInstallationPath: function () {                                                                            // 32\n    var meteorPath                                                                                                    // 33\n    if (isWindows()) {                                                                                                // 34\n      meteorPath = process.env.METEOR_INSTALLATION                                                                    // 35\n      if (meteorPath[meteorPath.length - 1] === '\\\\') {                                                               // 36\n        meteorPath = meteorPath.substr(0, meteorPath.length - 1)                                                      // 37\n      }                                                                                                               // 38\n                                                                                                                      // 39\n    } else {                                                                                                          // 40\n      meteorPath = path.resolve(MeteorFilesHelpers.getMeteorToolPath(), '../../../..')                                // 41\n    }                                                                                                                 // 42\n                                                                                                                      // 43\n    return meteorPath                                                                                                 // 44\n  },                                                                                                                  // 45\n                                                                                                                      // 46\n  getNodeModulePath: function (meteorPackageName, nodeModuleName) {                                                   // 47\n    var localIsopackPath = path.join(                                                                                 // 48\n      MeteorFilesHelpers.getAppPath(),                                                                                // 49\n      '.meteor', 'local', 'isopacks',                                                                                 // 50\n      getFilesystemMeteorPackageName(meteorPackageName)                                                               // 51\n    )                                                                                                                 // 52\n    if (exists(localIsopackPath)) {                                                                                   // 53\n      return path.join(localIsopackPath, 'npm', 'node_modules', nodeModuleName)                                       // 54\n    } else {                                                                                                          // 55\n      if (isWindows()) {                                                                                              // 56\n        return path.join(                                                                                             // 57\n          MeteorFilesHelpers.getMeteorInstallationPath(),                                                             // 58\n          'packages',                                                                                                 // 59\n          getFilesystemMeteorPackageName(meteorPackageName), MeteorFilesHelpers.getPackageVersion(meteorPackageName),\n          'npm', 'node_modules', nodeModuleName                                                                       // 61\n        )                                                                                                             // 62\n      } else {                                                                                                        // 63\n        return path.join(                                                                                             // 64\n          MeteorFilesHelpers.getAppPath(),                                                                            // 65\n          '.meteor', 'local', 'build', 'programs', 'server',                                                          // 66\n          'npm', getFilesystemMeteorPackageName(meteorPackageName),                                                   // 67\n          'node_modules', nodeModuleName                                                                              // 68\n        )                                                                                                             // 69\n      }                                                                                                               // 70\n    }                                                                                                                 // 71\n  },                                                                                                                  // 72\n                                                                                                                      // 73\n  getPackageServerAssetPath: function (meteorPackageName, assetPath) {                                                // 74\n    return path.join(                                                                                                 // 75\n      MeteorFilesHelpers.getAppPath(),                                                                                // 76\n      '.meteor', 'local', 'build', 'programs', 'server', 'assets', 'packages',                                        // 77\n      getFilesystemMeteorPackageName(meteorPackageName),                                                              // 78\n      assetPath                                                                                                       // 79\n    )                                                                                                                 // 80\n  },                                                                                                                  // 81\n                                                                                                                      // 82\n  getPackageVersions: _.memoize(function () {                                                                         // 83\n    var versionsFilePath = path.join(                                                                                 // 84\n      MeteorFilesHelpers.getAppPath(), '.meteor', 'versions'                                                          // 85\n    )                                                                                                                 // 86\n    var versionsContent = readFile(versionsFilePath, {encoding: 'utf8'})                                              // 87\n    var versionsHash = {}                                                                                             // 88\n    versionsContent.split(/\\r\\n|\\r|\\n/).forEach(function (packageConstraint) {                                        // 89\n      var parts = packageConstraint.split('@')                                                                        // 90\n      var packageName = parts[0]                                                                                      // 91\n      var packageVersion = parts[1]                                                                                   // 92\n      versionsHash[packageName] = packageVersion                                                                      // 93\n    })                                                                                                                // 94\n                                                                                                                      // 95\n    return versionsHash                                                                                               // 96\n  }),                                                                                                                 // 97\n                                                                                                                      // 98\n  getPackageVersion: function (packageName) {                                                                         // 99\n    var packageVersions = MeteorFilesHelpers.getPackageVersions()                                                     // 100\n                                                                                                                      // 101\n    return packageVersions[packageName]                                                                               // 102\n  },                                                                                                                  // 103\n                                                                                                                      // 104\n  isPackageInstalled: function (meteorPackageName, meteorPackageVersion) {                                            // 105\n    var packagePath = path.join(                                                                                      // 106\n      MeteorFilesHelpers.getMeteorInstallationPath(),                                                                 // 107\n      'packages',                                                                                                     // 108\n      getFilesystemMeteorPackageName(meteorPackageName)                                                               // 109\n    )                                                                                                                 // 110\n                                                                                                                      // 111\n    if (meteorPackageVersion) {                                                                                       // 112\n      packagePath = path.join(packagePath, meteorPackageVersion)                                                      // 113\n    }                                                                                                                 // 114\n                                                                                                                      // 115\n    return exists(packagePath)                                                                                        // 116\n  }                                                                                                                   // 117\n}                                                                                                                     // 118\n                                                                                                                      // 119\nfunction isWindows() {                                                                                                // 120\n  return process.platform === 'win32'                                                                                 // 121\n}                                                                                                                     // 122\n                                                                                                                      // 123\nfunction getFilesystemMeteorPackageName(meteorPackageName) {                                                          // 124\n  var meteorVersion = MeteorVersion.getSemanticVersion()                                                              // 125\n  return (meteorVersion && PackageVersion.lessThan(meteorVersion, '1.0.4')) ?                                         // 126\n    meteorPackageName :                                                                                               // 127\n    meteorPackageName.replace(':', '_')                                                                               // 128\n}                                                                                                                     // 129\n                                                                                                                      // 130\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sanjo:meteor-files-helpers'] = {\n  MeteorFilesHelpers: MeteorFilesHelpers\n};\n\n})();\n","servePath":"/packages/sanjo_meteor-files-helpers.js","sourceMap":{"version":3,"sources":["/packages/sanjo_meteor-files-helpers/lib/meteor/files.js","/packages/sanjo_meteor-files-helpers/meteor_files_helpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACxfile":"/packages/sanjo_meteor-files-helpers.js","sourcesContent":["/**\n * Copied from Meteor tools/files.js.\n *\n * Includes:\n * - Helper to find the app root path\n */\n\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\n\n// given a predicate function and a starting path, traverse upwards\n// from the path until we find a path that satisfies the predicate.\n//\n// returns either the path to the lowest level directory that passed\n// the test or null for none found. if starting path isn't given, use\n// cwd.\nfindUpwards = function (predicate, startPath) {\n  var testDir = startPath || process.cwd();\n  while (testDir) {\n    if (predicate(testDir)) {\n      break;\n    }\n    var newDir = path.dirname(testDir);\n    if (newDir === testDir) {\n      testDir = null;\n    } else {\n      testDir = newDir;\n    }\n  }\n  if (!testDir)\n    return null;\n\n  return testDir;\n};\n\n// Determine if 'filepath' (a path, or omit for cwd) is within an app\n// directory. If so, return the top-level app directory.\nfindAppDir = function (filepath) {\n  var isAppDir = function (filepath) {\n    // XXX once we are done with the transition to engine, this should\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',\n    // 'release'))`\n\n    // .meteor/packages can be a directory, if .meteor is a warehouse\n    // directory.  since installing meteor initializes a warehouse at\n    // $HOME/.meteor, we want to make sure your home directory (and all\n    // subdirectories therein) don't count as being within a meteor app.\n    try { // use try/catch to avoid the additional syscall to fs.existsSync\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return findUpwards(isAppDir, filepath);\n};\n","var path = Npm.require('path')\nvar fs = Npm.require('fs')\nvar readFile = Meteor.wrapAsync(fs.readFile, fs)\nvar exists = Meteor.wrapAsync(function (path, callback) {\n  fs.exists(path, function (result) {\n    callback(null, result)\n  })\n})\n\nMeteorFilesHelpers = {\n  getAppPath: function () {\n    var appPath = findAppDir();\n    return appPath ? path.resolve(appPath) : null;\n  },\n\n  getMeteorToolPath: function () {\n    return this._findMeteorToolDir(process.execPath);\n  },\n\n  _findMeteorToolDir: function (filepath) {\n    return findUpwards(this._isMeteorToolDir.bind(this), filepath);\n  },\n\n  _isMeteorToolDir: function (filepath) {\n    try { // use try/catch to avoid the additional syscall to fs.existsSync\n      return fs.statSync(path.join(filepath, 'meteor')).isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n\n  getMeteorInstallationPath: function () {\n    var meteorPath\n    if (isWindows()) {\n      meteorPath = process.env.METEOR_INSTALLATION\n      if (meteorPath[meteorPath.length - 1] === '\\\\') {\n        meteorPath = meteorPath.substr(0, meteorPath.length - 1)\n      }\n\n    } else {\n      meteorPath = path.resolve(MeteorFilesHelpers.getMeteorToolPath(), '../../../..')\n    }\n\n    return meteorPath\n  },\n\n  getNodeModulePath: function (meteorPackageName, nodeModuleName) {\n    var localIsopackPath = path.join(\n      MeteorFilesHelpers.getAppPath(),\n      '.meteor', 'local', 'isopacks',\n      getFilesystemMeteorPackageName(meteorPackageName)\n    )\n    if (exists(localIsopackPath)) {\n      return path.join(localIsopackPath, 'npm', 'node_modules', nodeModuleName)\n    } else {\n      if (isWindows()) {\n        return path.join(\n          MeteorFilesHelpers.getMeteorInstallationPath(),\n          'packages',\n          getFilesystemMeteorPackageName(meteorPackageName), MeteorFilesHelpers.getPackageVersion(meteorPackageName),\n          'npm', 'node_modules', nodeModuleName\n        )\n      } else {\n        return path.join(\n          MeteorFilesHelpers.getAppPath(),\n          '.meteor', 'local', 'build', 'programs', 'server',\n          'npm', getFilesystemMeteorPackageName(meteorPackageName),\n          'node_modules', nodeModuleName\n        )\n      }\n    }\n  },\n\n  getPackageServerAssetPath: function (meteorPackageName, assetPath) {\n    return path.join(\n      MeteorFilesHelpers.getAppPath(),\n      '.meteor', 'local', 'build', 'programs', 'server', 'assets', 'packages',\n      getFilesystemMeteorPackageName(meteorPackageName),\n      assetPath\n    )\n  },\n\n  getPackageVersions: _.memoize(function () {\n    var versionsFilePath = path.join(\n      MeteorFilesHelpers.getAppPath(), '.meteor', 'versions'\n    )\n    var versionsContent = readFile(versionsFilePath, {encoding: 'utf8'})\n    var versionsHash = {}\n    versionsContent.split(/\\r\\n|\\r|\\n/).forEach(function (packageConstraint) {\n      var parts = packageConstraint.split('@')\n      var packageName = parts[0]\n      var packageVersion = parts[1]\n      versionsHash[packageName] = packageVersion\n    })\n\n    return versionsHash\n  }),\n\n  getPackageVersion: function (packageName) {\n    var packageVersions = MeteorFilesHelpers.getPackageVersions()\n\n    return packageVersions[packageName]\n  },\n\n  isPackageInstalled: function (meteorPackageName, meteorPackageVersion) {\n    var packagePath = path.join(\n      MeteorFilesHelpers.getMeteorInstallationPath(),\n      'packages',\n      getFilesystemMeteorPackageName(meteorPackageName)\n    )\n\n    if (meteorPackageVersion) {\n      packagePath = path.join(packagePath, meteorPackageVersion)\n    }\n\n    return exists(packagePath)\n  }\n}\n\nfunction isWindows() {\n  return process.platform === 'win32'\n}\n\nfunction getFilesystemMeteorPackageName(meteorPackageName) {\n  var meteorVersion = MeteorVersion.getSemanticVersion()\n  return (meteorVersion && PackageVersion.lessThan(meteorVersion, '1.0.4')) ?\n    meteorPackageName :\n    meteorPackageName.replace(':', '_')\n}\n"]}}]