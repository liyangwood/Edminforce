[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Immutable;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cal_immutable/vendor/Immutable.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  // 1\n *  Copyright (c) 2014-2015, Facebook, Inc.                                                                          // 2\n *  All rights reserved.                                                                                             // 3\n *                                                                                                                   // 4\n *  This source code is licensed under the BSD-style license found in the                                            // 5\n *  LICENSE file in the root directory of this source tree. An additional grant                                      // 6\n *  of patent rights can be found in the PATENTS file in the same directory.                                         // 7\n */                                                                                                                  // 8\n                                                                                                                     // 9\nImmutable; // !!!for meteor to export                                                                                // 10\n                                                                                                                     // 11\n(function (global, factory) {                                                                                        // 12\n  //typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                      // 13\n  //    typeof define === 'function' && define.amd ? define(factory) :                                               // 14\n  //        global.Immutable = factory()                                                                             // 15\n                                                                                                                     // 16\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                        // 17\n      typeof define === 'function' && define.amd ? define(factory) :                                                 // 18\n          Immutable= factory()                                                                                       // 19\n                                                                                                                     // 20\n                                                                                                                     // 21\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;                                              // 22\n                                                                                                                     // 23\n  function createClass(ctor, superClass) {                                                                           // 24\n    if (superClass) {                                                                                                // 25\n      ctor.prototype = Object.create(superClass.prototype);                                                          // 26\n    }                                                                                                                // 27\n    ctor.prototype.constructor = ctor;                                                                               // 28\n  }                                                                                                                  // 29\n                                                                                                                     // 30\n  // Used for setting prototype methods that IE8 chokes on.                                                          // 31\n  var DELETE = 'delete';                                                                                             // 32\n                                                                                                                     // 33\n  // Constants describing the size of trie nodes.                                                                    // 34\n  var SHIFT = 5; // Resulted in best performance after ______?                                                       // 35\n  var SIZE = 1 << SHIFT;                                                                                             // 36\n  var MASK = SIZE - 1;                                                                                               // 37\n                                                                                                                     // 38\n  // A consistent shared value representing \"not set\" which equals nothing other                                     // 39\n  // than itself, and nothing that could be provided externally.                                                     // 40\n  var NOT_SET = {};                                                                                                  // 41\n                                                                                                                     // 42\n  // Boolean references, Rough equivalent of `bool &`.                                                               // 43\n  var CHANGE_LENGTH = { value: false };                                                                              // 44\n  var DID_ALTER = { value: false };                                                                                  // 45\n                                                                                                                     // 46\n  function MakeRef(ref) {                                                                                            // 47\n    ref.value = false;                                                                                               // 48\n    return ref;                                                                                                      // 49\n  }                                                                                                                  // 50\n                                                                                                                     // 51\n  function SetRef(ref) {                                                                                             // 52\n    ref && (ref.value = true);                                                                                       // 53\n  }                                                                                                                  // 54\n                                                                                                                     // 55\n  // A function which returns a value representing an \"owner\" for transient writes                                   // 56\n  // to tries. The return value will only ever equal itself, and will not equal                                      // 57\n  // the return of any subsequent call of this function.                                                             // 58\n  function OwnerID() {}                                                                                              // 59\n                                                                                                                     // 60\n  // http://jsperf.com/copy-array-inline                                                                             // 61\n  function arrCopy(arr, offset) {                                                                                    // 62\n    offset = offset || 0;                                                                                            // 63\n    var len = Math.max(0, arr.length - offset);                                                                      // 64\n    var newArr = new Array(len);                                                                                     // 65\n    for (var ii = 0; ii < len; ii++) {                                                                               // 66\n      newArr[ii] = arr[ii + offset];                                                                                 // 67\n    }                                                                                                                // 68\n    return newArr;                                                                                                   // 69\n  }                                                                                                                  // 70\n                                                                                                                     // 71\n  function ensureSize(iter) {                                                                                        // 72\n    if (iter.size === undefined) {                                                                                   // 73\n      iter.size = iter.__iterate(returnTrue);                                                                        // 74\n    }                                                                                                                // 75\n    return iter.size;                                                                                                // 76\n  }                                                                                                                  // 77\n                                                                                                                     // 78\n  function wrapIndex(iter, index) {                                                                                  // 79\n    // This implements \"is array index\" which the ECMAString spec defines as:                                        // 80\n    //     A String property name P is an array index if and only if                                                 // 81\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal                                          // 82\n    //     to 2^32âˆ’1.                                                                                              // 83\n    // However note that we're currently calling ToNumber() instead of ToUint32()                                    // 84\n    // which should be improved in the future, as floating point numbers should                                      // 85\n    // not be accepted as an array index.                                                                            // 86\n    if (typeof index !== 'number') {                                                                                 // 87\n      var numIndex = +index;                                                                                         // 88\n      if ('' + numIndex !== index) {                                                                                 // 89\n        return NaN;                                                                                                  // 90\n      }                                                                                                              // 91\n      index = numIndex;                                                                                              // 92\n    }                                                                                                                // 93\n    return index < 0 ? ensureSize(iter) + index : index;                                                             // 94\n  }                                                                                                                  // 95\n                                                                                                                     // 96\n  function returnTrue() {                                                                                            // 97\n    return true;                                                                                                     // 98\n  }                                                                                                                  // 99\n                                                                                                                     // 100\n  function wholeSlice(begin, end, size) {                                                                            // 101\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&                                                // 102\n        (end === undefined || (size !== undefined && end >= size));                                                  // 103\n  }                                                                                                                  // 104\n                                                                                                                     // 105\n  function resolveBegin(begin, size) {                                                                               // 106\n    return resolveIndex(begin, size, 0);                                                                             // 107\n  }                                                                                                                  // 108\n                                                                                                                     // 109\n  function resolveEnd(end, size) {                                                                                   // 110\n    return resolveIndex(end, size, size);                                                                            // 111\n  }                                                                                                                  // 112\n                                                                                                                     // 113\n  function resolveIndex(index, size, defaultIndex) {                                                                 // 114\n    return index === undefined ?                                                                                     // 115\n        defaultIndex :                                                                                               // 116\n        index < 0 ?                                                                                                  // 117\n            Math.max(0, size + index) :                                                                              // 118\n            size === undefined ?                                                                                     // 119\n                index :                                                                                              // 120\n                Math.min(size, index);                                                                               // 121\n  }                                                                                                                  // 122\n                                                                                                                     // 123\n  function Iterable(value) {                                                                                         // 124\n    return isIterable(value) ? value : Seq(value);                                                                   // 125\n  }                                                                                                                  // 126\n                                                                                                                     // 127\n                                                                                                                     // 128\n  createClass(KeyedIterable, Iterable);                                                                              // 129\n  function KeyedIterable(value) {                                                                                    // 130\n    return isKeyed(value) ? value : KeyedSeq(value);                                                                 // 131\n  }                                                                                                                  // 132\n                                                                                                                     // 133\n                                                                                                                     // 134\n  createClass(IndexedIterable, Iterable);                                                                            // 135\n  function IndexedIterable(value) {                                                                                  // 136\n    return isIndexed(value) ? value : IndexedSeq(value);                                                             // 137\n  }                                                                                                                  // 138\n                                                                                                                     // 139\n                                                                                                                     // 140\n  createClass(SetIterable, Iterable);                                                                                // 141\n  function SetIterable(value) {                                                                                      // 142\n    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);                                       // 143\n  }                                                                                                                  // 144\n                                                                                                                     // 145\n                                                                                                                     // 146\n                                                                                                                     // 147\n  function isIterable(maybeIterable) {                                                                               // 148\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);                                                 // 149\n  }                                                                                                                  // 150\n                                                                                                                     // 151\n  function isKeyed(maybeKeyed) {                                                                                     // 152\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);                                                          // 153\n  }                                                                                                                  // 154\n                                                                                                                     // 155\n  function isIndexed(maybeIndexed) {                                                                                 // 156\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);                                                    // 157\n  }                                                                                                                  // 158\n                                                                                                                     // 159\n  function isAssociative(maybeAssociative) {                                                                         // 160\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);                                                 // 161\n  }                                                                                                                  // 162\n                                                                                                                     // 163\n  function isOrdered(maybeOrdered) {                                                                                 // 164\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);                                                    // 165\n  }                                                                                                                  // 166\n                                                                                                                     // 167\n  Iterable.isIterable = isIterable;                                                                                  // 168\n  Iterable.isKeyed = isKeyed;                                                                                        // 169\n  Iterable.isIndexed = isIndexed;                                                                                    // 170\n  Iterable.isAssociative = isAssociative;                                                                            // 171\n  Iterable.isOrdered = isOrdered;                                                                                    // 172\n                                                                                                                     // 173\n  Iterable.Keyed = KeyedIterable;                                                                                    // 174\n  Iterable.Indexed = IndexedIterable;                                                                                // 175\n  Iterable.Set = SetIterable;                                                                                        // 176\n                                                                                                                     // 177\n                                                                                                                     // 178\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';                                                           // 179\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';                                                                 // 180\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';                                                             // 181\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';                                                             // 182\n                                                                                                                     // 183\n  /* global Symbol */                                                                                                // 184\n                                                                                                                     // 185\n  var ITERATE_KEYS = 0;                                                                                              // 186\n  var ITERATE_VALUES = 1;                                                                                            // 187\n  var ITERATE_ENTRIES = 2;                                                                                           // 188\n                                                                                                                     // 189\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                        // 190\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';                                                                           // 191\n                                                                                                                     // 192\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;                                                // 193\n                                                                                                                     // 194\n                                                                                                                     // 195\n  function src_Iterator__Iterator(next) {                                                                            // 196\n    this.next = next;                                                                                                // 197\n  }                                                                                                                  // 198\n                                                                                                                     // 199\n  src_Iterator__Iterator.prototype.toString = function() {                                                           // 200\n    return '[Iterator]';                                                                                             // 201\n  };                                                                                                                 // 202\n                                                                                                                     // 203\n                                                                                                                     // 204\n  src_Iterator__Iterator.KEYS = ITERATE_KEYS;                                                                        // 205\n  src_Iterator__Iterator.VALUES = ITERATE_VALUES;                                                                    // 206\n  src_Iterator__Iterator.ENTRIES = ITERATE_ENTRIES;                                                                  // 207\n                                                                                                                     // 208\n  src_Iterator__Iterator.prototype.inspect =                                                                         // 209\n      src_Iterator__Iterator.prototype.toSource = function () { return this.toString(); }                            // 210\n  src_Iterator__Iterator.prototype[ITERATOR_SYMBOL] = function () {                                                  // 211\n    return this;                                                                                                     // 212\n  };                                                                                                                 // 213\n                                                                                                                     // 214\n                                                                                                                     // 215\n  function iteratorValue(type, k, v, iteratorResult) {                                                               // 216\n    var value = type === 0 ? k : type === 1 ? v : [k, v];                                                            // 217\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {                                            // 218\n      value: value, done: false                                                                                      // 219\n    });                                                                                                              // 220\n    return iteratorResult;                                                                                           // 221\n  }                                                                                                                  // 222\n                                                                                                                     // 223\n  function iteratorDone() {                                                                                          // 224\n    return { value: undefined, done: true };                                                                         // 225\n  }                                                                                                                  // 226\n                                                                                                                     // 227\n  function hasIterator(maybeIterable) {                                                                              // 228\n    return !!getIteratorFn(maybeIterable);                                                                           // 229\n  }                                                                                                                  // 230\n                                                                                                                     // 231\n  function isIterator(maybeIterator) {                                                                               // 232\n    return maybeIterator && typeof maybeIterator.next === 'function';                                                // 233\n  }                                                                                                                  // 234\n                                                                                                                     // 235\n  function getIterator(iterable) {                                                                                   // 236\n    var iteratorFn = getIteratorFn(iterable);                                                                        // 237\n    return iteratorFn && iteratorFn.call(iterable);                                                                  // 238\n  }                                                                                                                  // 239\n                                                                                                                     // 240\n  function getIteratorFn(iterable) {                                                                                 // 241\n    var iteratorFn = iterable && (                                                                                   // 242\n            (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||                                              // 243\n            iterable[FAUX_ITERATOR_SYMBOL]                                                                           // 244\n        );                                                                                                           // 245\n    if (typeof iteratorFn === 'function') {                                                                          // 246\n      return iteratorFn;                                                                                             // 247\n    }                                                                                                                // 248\n  }                                                                                                                  // 249\n                                                                                                                     // 250\n  function isArrayLike(value) {                                                                                      // 251\n    return value && typeof value.length === 'number';                                                                // 252\n  }                                                                                                                  // 253\n                                                                                                                     // 254\n  createClass(Seq, Iterable);                                                                                        // 255\n  function Seq(value) {                                                                                              // 256\n    return value === null || value === undefined ? emptySequence() :                                                 // 257\n        isIterable(value) ? value.toSeq() : seqFromValue(value);                                                     // 258\n  }                                                                                                                  // 259\n                                                                                                                     // 260\n  Seq.of = function(/*...values*/) {                                                                                 // 261\n    return Seq(arguments);                                                                                           // 262\n  };                                                                                                                 // 263\n                                                                                                                     // 264\n  Seq.prototype.toSeq = function() {                                                                                 // 265\n    return this;                                                                                                     // 266\n  };                                                                                                                 // 267\n                                                                                                                     // 268\n  Seq.prototype.toString = function() {                                                                              // 269\n    return this.__toString('Seq {', '}');                                                                            // 270\n  };                                                                                                                 // 271\n                                                                                                                     // 272\n  Seq.prototype.cacheResult = function() {                                                                           // 273\n    if (!this._cache && this.__iterateUncached) {                                                                    // 274\n      this._cache = this.entrySeq().toArray();                                                                       // 275\n      this.size = this._cache.length;                                                                                // 276\n    }                                                                                                                // 277\n    return this;                                                                                                     // 278\n  };                                                                                                                 // 279\n                                                                                                                     // 280\n  // abstract __iterateUncached(fn, reverse)                                                                         // 281\n                                                                                                                     // 282\n  Seq.prototype.__iterate = function(fn, reverse) {                                                                  // 283\n    return seqIterate(this, fn, reverse, true);                                                                      // 284\n  };                                                                                                                 // 285\n                                                                                                                     // 286\n  // abstract __iteratorUncached(type, reverse)                                                                      // 287\n                                                                                                                     // 288\n  Seq.prototype.__iterator = function(type, reverse) {                                                               // 289\n    return seqIterator(this, type, reverse, true);                                                                   // 290\n  };                                                                                                                 // 291\n                                                                                                                     // 292\n                                                                                                                     // 293\n                                                                                                                     // 294\n  createClass(KeyedSeq, Seq);                                                                                        // 295\n  function KeyedSeq(value) {                                                                                         // 296\n    return value === null || value === undefined ?                                                                   // 297\n        emptySequence().toKeyedSeq() :                                                                               // 298\n        isIterable(value) ?                                                                                          // 299\n            (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :                                                // 300\n            keyedSeqFromValue(value);                                                                                // 301\n  }                                                                                                                  // 302\n                                                                                                                     // 303\n  KeyedSeq.prototype.toKeyedSeq = function() {                                                                       // 304\n    return this;                                                                                                     // 305\n  };                                                                                                                 // 306\n                                                                                                                     // 307\n                                                                                                                     // 308\n                                                                                                                     // 309\n  createClass(IndexedSeq, Seq);                                                                                      // 310\n  function IndexedSeq(value) {                                                                                       // 311\n    return value === null || value === undefined ? emptySequence() :                                                 // 312\n        !isIterable(value) ? indexedSeqFromValue(value) :                                                            // 313\n            isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();                                                // 314\n  }                                                                                                                  // 315\n                                                                                                                     // 316\n  IndexedSeq.of = function(/*...values*/) {                                                                          // 317\n    return IndexedSeq(arguments);                                                                                    // 318\n  };                                                                                                                 // 319\n                                                                                                                     // 320\n  IndexedSeq.prototype.toIndexedSeq = function() {                                                                   // 321\n    return this;                                                                                                     // 322\n  };                                                                                                                 // 323\n                                                                                                                     // 324\n  IndexedSeq.prototype.toString = function() {                                                                       // 325\n    return this.__toString('Seq [', ']');                                                                            // 326\n  };                                                                                                                 // 327\n                                                                                                                     // 328\n  IndexedSeq.prototype.__iterate = function(fn, reverse) {                                                           // 329\n    return seqIterate(this, fn, reverse, false);                                                                     // 330\n  };                                                                                                                 // 331\n                                                                                                                     // 332\n  IndexedSeq.prototype.__iterator = function(type, reverse) {                                                        // 333\n    return seqIterator(this, type, reverse, false);                                                                  // 334\n  };                                                                                                                 // 335\n                                                                                                                     // 336\n                                                                                                                     // 337\n                                                                                                                     // 338\n  createClass(SetSeq, Seq);                                                                                          // 339\n  function SetSeq(value) {                                                                                           // 340\n    return (                                                                                                         // 341\n        value === null || value === undefined ? emptySequence() :                                                    // 342\n            !isIterable(value) ? indexedSeqFromValue(value) :                                                        // 343\n                isKeyed(value) ? value.entrySeq() : value                                                            // 344\n    ).toSetSeq();                                                                                                    // 345\n  }                                                                                                                  // 346\n                                                                                                                     // 347\n  SetSeq.of = function(/*...values*/) {                                                                              // 348\n    return SetSeq(arguments);                                                                                        // 349\n  };                                                                                                                 // 350\n                                                                                                                     // 351\n  SetSeq.prototype.toSetSeq = function() {                                                                           // 352\n    return this;                                                                                                     // 353\n  };                                                                                                                 // 354\n                                                                                                                     // 355\n                                                                                                                     // 356\n                                                                                                                     // 357\n  Seq.isSeq = isSeq;                                                                                                 // 358\n  Seq.Keyed = KeyedSeq;                                                                                              // 359\n  Seq.Set = SetSeq;                                                                                                  // 360\n  Seq.Indexed = IndexedSeq;                                                                                          // 361\n                                                                                                                     // 362\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';                                                                     // 363\n                                                                                                                     // 364\n  Seq.prototype[IS_SEQ_SENTINEL] = true;                                                                             // 365\n                                                                                                                     // 366\n                                                                                                                     // 367\n                                                                                                                     // 368\n  // #pragma Root Sequences                                                                                          // 369\n                                                                                                                     // 370\n  createClass(ArraySeq, IndexedSeq);                                                                                 // 371\n  function ArraySeq(array) {                                                                                         // 372\n    this._array = array;                                                                                             // 373\n    this.size = array.length;                                                                                        // 374\n  }                                                                                                                  // 375\n                                                                                                                     // 376\n  ArraySeq.prototype.get = function(index, notSetValue) {                                                            // 377\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;                                      // 378\n  };                                                                                                                 // 379\n                                                                                                                     // 380\n  ArraySeq.prototype.__iterate = function(fn, reverse) {                                                             // 381\n    var array = this._array;                                                                                         // 382\n    var maxIndex = array.length - 1;                                                                                 // 383\n    for (var ii = 0; ii <= maxIndex; ii++) {                                                                         // 384\n      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {                                             // 385\n        return ii + 1;                                                                                               // 386\n      }                                                                                                              // 387\n    }                                                                                                                // 388\n    return ii;                                                                                                       // 389\n  };                                                                                                                 // 390\n                                                                                                                     // 391\n  ArraySeq.prototype.__iterator = function(type, reverse) {                                                          // 392\n    var array = this._array;                                                                                         // 393\n    var maxIndex = array.length - 1;                                                                                 // 394\n    var ii = 0;                                                                                                      // 395\n    return new src_Iterator__Iterator(function()                                                                     // 396\n        {return ii > maxIndex ?                                                                                      // 397\n            iteratorDone() :                                                                                         // 398\n            iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}                                        // 399\n    );                                                                                                               // 400\n  };                                                                                                                 // 401\n                                                                                                                     // 402\n                                                                                                                     // 403\n                                                                                                                     // 404\n  createClass(ObjectSeq, KeyedSeq);                                                                                  // 405\n  function ObjectSeq(object) {                                                                                       // 406\n    var keys = Object.keys(object);                                                                                  // 407\n    this._object = object;                                                                                           // 408\n    this._keys = keys;                                                                                               // 409\n    this.size = keys.length;                                                                                         // 410\n  }                                                                                                                  // 411\n                                                                                                                     // 412\n  ObjectSeq.prototype.get = function(key, notSetValue) {                                                             // 413\n    if (notSetValue !== undefined && !this.has(key)) {                                                               // 414\n      return notSetValue;                                                                                            // 415\n    }                                                                                                                // 416\n    return this._object[key];                                                                                        // 417\n  };                                                                                                                 // 418\n                                                                                                                     // 419\n  ObjectSeq.prototype.has = function(key) {                                                                          // 420\n    return this._object.hasOwnProperty(key);                                                                         // 421\n  };                                                                                                                 // 422\n                                                                                                                     // 423\n  ObjectSeq.prototype.__iterate = function(fn, reverse) {                                                            // 424\n    var object = this._object;                                                                                       // 425\n    var keys = this._keys;                                                                                           // 426\n    var maxIndex = keys.length - 1;                                                                                  // 427\n    for (var ii = 0; ii <= maxIndex; ii++) {                                                                         // 428\n      var key = keys[reverse ? maxIndex - ii : ii];                                                                  // 429\n      if (fn(object[key], key, this) === false) {                                                                    // 430\n        return ii + 1;                                                                                               // 431\n      }                                                                                                              // 432\n    }                                                                                                                // 433\n    return ii;                                                                                                       // 434\n  };                                                                                                                 // 435\n                                                                                                                     // 436\n  ObjectSeq.prototype.__iterator = function(type, reverse) {                                                         // 437\n    var object = this._object;                                                                                       // 438\n    var keys = this._keys;                                                                                           // 439\n    var maxIndex = keys.length - 1;                                                                                  // 440\n    var ii = 0;                                                                                                      // 441\n    return new src_Iterator__Iterator(function()  {                                                                  // 442\n      var key = keys[reverse ? maxIndex - ii : ii];                                                                  // 443\n      return ii++ > maxIndex ?                                                                                       // 444\n          iteratorDone() :                                                                                           // 445\n          iteratorValue(type, key, object[key]);                                                                     // 446\n    });                                                                                                              // 447\n  };                                                                                                                 // 448\n                                                                                                                     // 449\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;                                                                   // 450\n                                                                                                                     // 451\n                                                                                                                     // 452\n  createClass(IterableSeq, IndexedSeq);                                                                              // 453\n  function IterableSeq(iterable) {                                                                                   // 454\n    this._iterable = iterable;                                                                                       // 455\n    this.size = iterable.length || iterable.size;                                                                    // 456\n  }                                                                                                                  // 457\n                                                                                                                     // 458\n  IterableSeq.prototype.__iterateUncached = function(fn, reverse) {                                                  // 459\n    if (reverse) {                                                                                                   // 460\n      return this.cacheResult().__iterate(fn, reverse);                                                              // 461\n    }                                                                                                                // 462\n    var iterable = this._iterable;                                                                                   // 463\n    var iterator = getIterator(iterable);                                                                            // 464\n    var iterations = 0;                                                                                              // 465\n    if (isIterator(iterator)) {                                                                                      // 466\n      var step;                                                                                                      // 467\n      while (!(step = iterator.next()).done) {                                                                       // 468\n        if (fn(step.value, iterations++, this) === false) {                                                          // 469\n          break;                                                                                                     // 470\n        }                                                                                                            // 471\n      }                                                                                                              // 472\n    }                                                                                                                // 473\n    return iterations;                                                                                               // 474\n  };                                                                                                                 // 475\n                                                                                                                     // 476\n  IterableSeq.prototype.__iteratorUncached = function(type, reverse) {                                               // 477\n    if (reverse) {                                                                                                   // 478\n      return this.cacheResult().__iterator(type, reverse);                                                           // 479\n    }                                                                                                                // 480\n    var iterable = this._iterable;                                                                                   // 481\n    var iterator = getIterator(iterable);                                                                            // 482\n    if (!isIterator(iterator)) {                                                                                     // 483\n      return new src_Iterator__Iterator(iteratorDone);                                                               // 484\n    }                                                                                                                // 485\n    var iterations = 0;                                                                                              // 486\n    return new src_Iterator__Iterator(function()  {                                                                  // 487\n      var step = iterator.next();                                                                                    // 488\n      return step.done ? step : iteratorValue(type, iterations++, step.value);                                       // 489\n    });                                                                                                              // 490\n  };                                                                                                                 // 491\n                                                                                                                     // 492\n                                                                                                                     // 493\n                                                                                                                     // 494\n  createClass(IteratorSeq, IndexedSeq);                                                                              // 495\n  function IteratorSeq(iterator) {                                                                                   // 496\n    this._iterator = iterator;                                                                                       // 497\n    this._iteratorCache = [];                                                                                        // 498\n  }                                                                                                                  // 499\n                                                                                                                     // 500\n  IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {                                                  // 501\n    if (reverse) {                                                                                                   // 502\n      return this.cacheResult().__iterate(fn, reverse);                                                              // 503\n    }                                                                                                                // 504\n    var iterator = this._iterator;                                                                                   // 505\n    var cache = this._iteratorCache;                                                                                 // 506\n    var iterations = 0;                                                                                              // 507\n    while (iterations < cache.length) {                                                                              // 508\n      if (fn(cache[iterations], iterations++, this) === false) {                                                     // 509\n        return iterations;                                                                                           // 510\n      }                                                                                                              // 511\n    }                                                                                                                // 512\n    var step;                                                                                                        // 513\n    while (!(step = iterator.next()).done) {                                                                         // 514\n      var val = step.value;                                                                                          // 515\n      cache[iterations] = val;                                                                                       // 516\n      if (fn(val, iterations++, this) === false) {                                                                   // 517\n        break;                                                                                                       // 518\n      }                                                                                                              // 519\n    }                                                                                                                // 520\n    return iterations;                                                                                               // 521\n  };                                                                                                                 // 522\n                                                                                                                     // 523\n  IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {                                               // 524\n    if (reverse) {                                                                                                   // 525\n      return this.cacheResult().__iterator(type, reverse);                                                           // 526\n    }                                                                                                                // 527\n    var iterator = this._iterator;                                                                                   // 528\n    var cache = this._iteratorCache;                                                                                 // 529\n    var iterations = 0;                                                                                              // 530\n    return new src_Iterator__Iterator(function()  {                                                                  // 531\n      if (iterations >= cache.length) {                                                                              // 532\n        var step = iterator.next();                                                                                  // 533\n        if (step.done) {                                                                                             // 534\n          return step;                                                                                               // 535\n        }                                                                                                            // 536\n        cache[iterations] = step.value;                                                                              // 537\n      }                                                                                                              // 538\n      return iteratorValue(type, iterations, cache[iterations++]);                                                   // 539\n    });                                                                                                              // 540\n  };                                                                                                                 // 541\n                                                                                                                     // 542\n                                                                                                                     // 543\n                                                                                                                     // 544\n                                                                                                                     // 545\n  // # pragma Helper functions                                                                                       // 546\n                                                                                                                     // 547\n  function isSeq(maybeSeq) {                                                                                         // 548\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);                                                                // 549\n  }                                                                                                                  // 550\n                                                                                                                     // 551\n  var EMPTY_SEQ;                                                                                                     // 552\n                                                                                                                     // 553\n  function emptySequence() {                                                                                         // 554\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));                                                              // 555\n  }                                                                                                                  // 556\n                                                                                                                     // 557\n  function keyedSeqFromValue(value) {                                                                                // 558\n    var seq =                                                                                                        // 559\n        Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :                                                  // 560\n            isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :                                              // 561\n                hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :                                         // 562\n                    typeof value === 'object' ? new ObjectSeq(value) :                                               // 563\n                        undefined;                                                                                   // 564\n    if (!seq) {                                                                                                      // 565\n      throw new TypeError(                                                                                           // 566\n          'Expected Array or iterable object of [k, v] entries, '+                                                   // 567\n          'or keyed object: ' + value                                                                                // 568\n      );                                                                                                             // 569\n    }                                                                                                                // 570\n    return seq;                                                                                                      // 571\n  }                                                                                                                  // 572\n                                                                                                                     // 573\n  function indexedSeqFromValue(value) {                                                                              // 574\n    var seq = maybeIndexedSeqFromValue(value);                                                                       // 575\n    if (!seq) {                                                                                                      // 576\n      throw new TypeError(                                                                                           // 577\n          'Expected Array or iterable object of values: ' + value                                                    // 578\n      );                                                                                                             // 579\n    }                                                                                                                // 580\n    return seq;                                                                                                      // 581\n  }                                                                                                                  // 582\n                                                                                                                     // 583\n  function seqFromValue(value) {                                                                                     // 584\n    var seq = maybeIndexedSeqFromValue(value) ||                                                                     // 585\n        (typeof value === 'object' && new ObjectSeq(value));                                                         // 586\n    if (!seq) {                                                                                                      // 587\n      throw new TypeError(                                                                                           // 588\n          'Expected Array or iterable object of values, or keyed object: ' + value                                   // 589\n      );                                                                                                             // 590\n    }                                                                                                                // 591\n    return seq;                                                                                                      // 592\n  }                                                                                                                  // 593\n                                                                                                                     // 594\n  function maybeIndexedSeqFromValue(value) {                                                                         // 595\n    return (                                                                                                         // 596\n        isArrayLike(value) ? new ArraySeq(value) :                                                                   // 597\n            isIterator(value) ? new IteratorSeq(value) :                                                             // 598\n                hasIterator(value) ? new IterableSeq(value) :                                                        // 599\n                    undefined                                                                                        // 600\n    );                                                                                                               // 601\n  }                                                                                                                  // 602\n                                                                                                                     // 603\n  function seqIterate(seq, fn, reverse, useKeys) {                                                                   // 604\n    var cache = seq._cache;                                                                                          // 605\n    if (cache) {                                                                                                     // 606\n      var maxIndex = cache.length - 1;                                                                               // 607\n      for (var ii = 0; ii <= maxIndex; ii++) {                                                                       // 608\n        var entry = cache[reverse ? maxIndex - ii : ii];                                                             // 609\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {                                                  // 610\n          return ii + 1;                                                                                             // 611\n        }                                                                                                            // 612\n      }                                                                                                              // 613\n      return ii;                                                                                                     // 614\n    }                                                                                                                // 615\n    return seq.__iterateUncached(fn, reverse);                                                                       // 616\n  }                                                                                                                  // 617\n                                                                                                                     // 618\n  function seqIterator(seq, type, reverse, useKeys) {                                                                // 619\n    var cache = seq._cache;                                                                                          // 620\n    if (cache) {                                                                                                     // 621\n      var maxIndex = cache.length - 1;                                                                               // 622\n      var ii = 0;                                                                                                    // 623\n      return new src_Iterator__Iterator(function()  {                                                                // 624\n        var entry = cache[reverse ? maxIndex - ii : ii];                                                             // 625\n        return ii++ > maxIndex ?                                                                                     // 626\n            iteratorDone() :                                                                                         // 627\n            iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);                                              // 628\n      });                                                                                                            // 629\n    }                                                                                                                // 630\n    return seq.__iteratorUncached(type, reverse);                                                                    // 631\n  }                                                                                                                  // 632\n                                                                                                                     // 633\n  createClass(Collection, Iterable);                                                                                 // 634\n  function Collection() {                                                                                            // 635\n    throw TypeError('Abstract');                                                                                     // 636\n  }                                                                                                                  // 637\n                                                                                                                     // 638\n                                                                                                                     // 639\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}                                             // 640\n                                                                                                                     // 641\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}                                         // 642\n                                                                                                                     // 643\n  createClass(SetCollection, Collection);function SetCollection() {}                                                 // 644\n                                                                                                                     // 645\n                                                                                                                     // 646\n  Collection.Keyed = KeyedCollection;                                                                                // 647\n  Collection.Indexed = IndexedCollection;                                                                            // 648\n  Collection.Set = SetCollection;                                                                                    // 649\n                                                                                                                     // 650\n  /**                                                                                                                // 651\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map                                     // 652\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)     // 653\n   *                                                                                                                 // 654\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same                                     // 655\n   * value, which is different from the algorithm described by                                                       // 656\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).      // 657\n   *                                                                                                                 // 658\n   * This is extended further to allow Objects to describe the values they                                           // 659\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).                                                    // 660\n   *                                                                                                                 // 661\n   * Note: because of this extension, the key equality of Immutable.Map and the                                      // 662\n   * value equality of Immutable.Set will differ from ES6 Map and Set.                                               // 663\n   *                                                                                                                 // 664\n   * ### Defining custom values                                                                                      // 665\n   *                                                                                                                 // 666\n   * The easiest way to describe the value an object represents is by implementing                                   // 667\n   * `valueOf`. For example, `Date` represents a value by returning a unix                                           // 668\n   * timestamp for `valueOf`:                                                                                        // 669\n   *                                                                                                                 // 670\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...                                                 // 671\n   *     var date2 = new Date(1234567890000);                                                                        // 672\n   *     date1.valueOf(); // 1234567890000                                                                           // 673\n   *     assert( date1 !== date2 );                                                                                  // 674\n   *     assert( Immutable.is( date1, date2 ) );                                                                     // 675\n   *                                                                                                                 // 676\n   * Note: overriding `valueOf` may have other implications if you use this object                                   // 677\n   * where JavaScript expects a primitive, such as implicit string coercion.                                         // 678\n   *                                                                                                                 // 679\n   * For more complex types, especially collections, implementing `valueOf` may                                      // 680\n   * not be performant. An alternative is to implement `equals` and `hashCode`.                                      // 681\n   *                                                                                                                 // 682\n   * `equals` takes another object, presumably of similar type, and returns true                                     // 683\n   * if the it is equal. Equality is symmetrical, so the same result should be                                       // 684\n   * returned if this and the argument are flipped.                                                                  // 685\n   *                                                                                                                 // 686\n   *     assert( a.equals(b) === b.equals(a) );                                                                      // 687\n   *                                                                                                                 // 688\n   * `hashCode` returns a 32bit integer number representing the object which will                                    // 689\n   * be used to determine how to store the value object in a Map or Set. You must                                    // 690\n   * provide both or neither methods, one must not exist without the other.                                          // 691\n   *                                                                                                                 // 692\n   * Also, an important relationship between these methods must be upheld: if two                                    // 693\n   * values are equal, they *must* return the same hashCode. If the values are not                                   // 694\n   * equal, they might have the same hashCode; this is called a hash collision,                                      // 695\n   * and while undesirable for performance reasons, it is acceptable.                                                // 696\n   *                                                                                                                 // 697\n   *     if (a.equals(b)) {                                                                                          // 698\n   *       assert( a.hashCode() === b.hashCode() );                                                                  // 699\n   *     }                                                                                                           // 700\n   *                                                                                                                 // 701\n   * All Immutable collections implement `equals` and `hashCode`.                                                    // 702\n   *                                                                                                                 // 703\n   */                                                                                                                // 704\n  function is(valueA, valueB) {                                                                                      // 705\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {                                             // 706\n      return true;                                                                                                   // 707\n    }                                                                                                                // 708\n    if (!valueA || !valueB) {                                                                                        // 709\n      return false;                                                                                                  // 710\n    }                                                                                                                // 711\n    if (typeof valueA.valueOf === 'function' &&                                                                      // 712\n        typeof valueB.valueOf === 'function') {                                                                      // 713\n      valueA = valueA.valueOf();                                                                                     // 714\n      valueB = valueB.valueOf();                                                                                     // 715\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {                                           // 716\n        return true;                                                                                                 // 717\n      }                                                                                                              // 718\n      if (!valueA || !valueB) {                                                                                      // 719\n        return false;                                                                                                // 720\n      }                                                                                                              // 721\n    }                                                                                                                // 722\n    if (typeof valueA.equals === 'function' &&                                                                       // 723\n        typeof valueB.equals === 'function' &&                                                                       // 724\n        valueA.equals(valueB)) {                                                                                     // 725\n      return true;                                                                                                   // 726\n    }                                                                                                                // 727\n    return false;                                                                                                    // 728\n  }                                                                                                                  // 729\n                                                                                                                     // 730\n  function fromJS(json, converter) {                                                                                 // 731\n    return converter ?                                                                                               // 732\n        fromJSWith(converter, json, '', {'': json}) :                                                                // 733\n        fromJSDefault(json);                                                                                         // 734\n  }                                                                                                                  // 735\n                                                                                                                     // 736\n  function fromJSWith(converter, json, key, parentJSON) {                                                            // 737\n    if (Array.isArray(json)) {                                                                                       // 738\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }                                                                                                                // 740\n    if (isPlainObj(json)) {                                                                                          // 741\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }                                                                                                                // 743\n    return json;                                                                                                     // 744\n  }                                                                                                                  // 745\n                                                                                                                     // 746\n  function fromJSDefault(json) {                                                                                     // 747\n    if (Array.isArray(json)) {                                                                                       // 748\n      return IndexedSeq(json).map(fromJSDefault).toList();                                                           // 749\n    }                                                                                                                // 750\n    if (isPlainObj(json)) {                                                                                          // 751\n      return KeyedSeq(json).map(fromJSDefault).toMap();                                                              // 752\n    }                                                                                                                // 753\n    return json;                                                                                                     // 754\n  }                                                                                                                  // 755\n                                                                                                                     // 756\n  function isPlainObj(value) {                                                                                       // 757\n    return value && (value.constructor === Object || value.constructor === undefined);                               // 758\n  }                                                                                                                  // 759\n                                                                                                                     // 760\n  var src_Math__imul =                                                                                               // 761\n      typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?                                           // 762\n          Math.imul :                                                                                                // 763\n          function imul(a, b) {                                                                                      // 764\n            a = a | 0; // int                                                                                        // 765\n            b = b | 0; // int                                                                                        // 766\n            var c = a & 0xffff;                                                                                      // 767\n            var d = b & 0xffff;                                                                                      // 768\n            // Shift by 0 fixes the sign on the high part.                                                           // 769\n            return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int                           // 770\n          };                                                                                                         // 771\n                                                                                                                     // 772\n  // v8 has an optimization for storing 31-bit signed numbers.                                                       // 773\n  // Values which have either 00 or 11 as the high order bits qualify.                                               // 774\n  // This function drops the highest order bit in a signed number, maintaining                                       // 775\n  // the sign bit.                                                                                                   // 776\n  function smi(i32) {                                                                                                // 777\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);                                                          // 778\n  }                                                                                                                  // 779\n                                                                                                                     // 780\n  function hash(o) {                                                                                                 // 781\n    if (o === false || o === null || o === undefined) {                                                              // 782\n      return 0;                                                                                                      // 783\n    }                                                                                                                // 784\n    if (typeof o.valueOf === 'function') {                                                                           // 785\n      o = o.valueOf();                                                                                               // 786\n      if (o === false || o === null || o === undefined) {                                                            // 787\n        return 0;                                                                                                    // 788\n      }                                                                                                              // 789\n    }                                                                                                                // 790\n    if (o === true) {                                                                                                // 791\n      return 1;                                                                                                      // 792\n    }                                                                                                                // 793\n    var type = typeof o;                                                                                             // 794\n    if (type === 'number') {                                                                                         // 795\n      var h = o | 0;                                                                                                 // 796\n      if (h !== o) {                                                                                                 // 797\n        h ^= o * 0xFFFFFFFF;                                                                                         // 798\n      }                                                                                                              // 799\n      while (o > 0xFFFFFFFF) {                                                                                       // 800\n        o /= 0xFFFFFFFF;                                                                                             // 801\n        h ^= o;                                                                                                      // 802\n      }                                                                                                              // 803\n      return smi(h);                                                                                                 // 804\n    }                                                                                                                // 805\n    if (type === 'string') {                                                                                         // 806\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);                          // 807\n    }                                                                                                                // 808\n    if (typeof o.hashCode === 'function') {                                                                          // 809\n      return o.hashCode();                                                                                           // 810\n    }                                                                                                                // 811\n    return hashJSObj(o);                                                                                             // 812\n  }                                                                                                                  // 813\n                                                                                                                     // 814\n  function cachedHashString(string) {                                                                                // 815\n    var hash = stringHashCache[string];                                                                              // 816\n    if (hash === undefined) {                                                                                        // 817\n      hash = hashString(string);                                                                                     // 818\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {                                                   // 819\n        STRING_HASH_CACHE_SIZE = 0;                                                                                  // 820\n        stringHashCache = {};                                                                                        // 821\n      }                                                                                                              // 822\n      STRING_HASH_CACHE_SIZE++;                                                                                      // 823\n      stringHashCache[string] = hash;                                                                                // 824\n    }                                                                                                                // 825\n    return hash;                                                                                                     // 826\n  }                                                                                                                  // 827\n                                                                                                                     // 828\n  // http://jsperf.com/hashing-strings                                                                               // 829\n  function hashString(string) {                                                                                      // 830\n    // This is the hash from JVM                                                                                     // 831\n    // The hash code for a string is computed as                                                                     // 832\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],                                                   // 833\n    // where s[i] is the ith character of the string and n is the length of                                          // 834\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31                                     // 835\n    // (exclusive) by dropping high bits.                                                                            // 836\n    var hash = 0;                                                                                                    // 837\n    for (var ii = 0; ii < string.length; ii++) {                                                                     // 838\n      hash = 31 * hash + string.charCodeAt(ii) | 0;                                                                  // 839\n    }                                                                                                                // 840\n    return smi(hash);                                                                                                // 841\n  }                                                                                                                  // 842\n                                                                                                                     // 843\n  function hashJSObj(obj) {                                                                                          // 844\n    var hash;                                                                                                        // 845\n    if (usingWeakMap) {                                                                                              // 846\n      hash = weakMap.get(obj);                                                                                       // 847\n      if (hash !== undefined) {                                                                                      // 848\n        return hash;                                                                                                 // 849\n      }                                                                                                              // 850\n    }                                                                                                                // 851\n                                                                                                                     // 852\n    hash = obj[UID_HASH_KEY];                                                                                        // 853\n    if (hash !== undefined) {                                                                                        // 854\n      return hash;                                                                                                   // 855\n    }                                                                                                                // 856\n                                                                                                                     // 857\n    if (!canDefineProperty) {                                                                                        // 858\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];                                     // 859\n      if (hash !== undefined) {                                                                                      // 860\n        return hash;                                                                                                 // 861\n      }                                                                                                              // 862\n                                                                                                                     // 863\n      hash = getIENodeHash(obj);                                                                                     // 864\n      if (hash !== undefined) {                                                                                      // 865\n        return hash;                                                                                                 // 866\n      }                                                                                                              // 867\n    }                                                                                                                // 868\n                                                                                                                     // 869\n    hash = ++objHashUID;                                                                                             // 870\n    if (objHashUID & 0x40000000) {                                                                                   // 871\n      objHashUID = 0;                                                                                                // 872\n    }                                                                                                                // 873\n                                                                                                                     // 874\n    if (usingWeakMap) {                                                                                              // 875\n      weakMap.set(obj, hash);                                                                                        // 876\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {                                          // 877\n      throw new Error('Non-extensible objects are not allowed as keys.');                                            // 878\n    } else if (canDefineProperty) {                                                                                  // 879\n      Object.defineProperty(obj, UID_HASH_KEY, {                                                                     // 880\n        'enumerable': false,                                                                                         // 881\n        'configurable': false,                                                                                       // 882\n        'writable': false,                                                                                           // 883\n        'value': hash                                                                                                // 884\n      });                                                                                                            // 885\n    } else if (obj.propertyIsEnumerable !== undefined &&                                                             // 886\n        obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {                               // 887\n      // Since we can't define a non-enumerable property on the object                                               // 888\n      // we'll hijack one of the less-used non-enumerable properties to                                              // 889\n      // save our hash on it. Since this is a function it will not show up in                                        // 890\n      // `JSON.stringify` which is what we want.                                                                     // 891\n      obj.propertyIsEnumerable = function() {                                                                        // 892\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);                               // 893\n      };                                                                                                             // 894\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;                                                                 // 895\n    } else if (obj.nodeType !== undefined) {                                                                         // 896\n      // At this point we couldn't get the IE `uniqueID` to use as a hash                                            // 897\n      // and we couldn't use a non-enumerable property to exploit the                                                // 898\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node                                                // 899\n      // itself.                                                                                                     // 900\n      obj[UID_HASH_KEY] = hash;                                                                                      // 901\n    } else {                                                                                                         // 902\n      throw new Error('Unable to set a non-enumerable property on object.');                                         // 903\n    }                                                                                                                // 904\n                                                                                                                     // 905\n    return hash;                                                                                                     // 906\n  }                                                                                                                  // 907\n                                                                                                                     // 908\n  // Get references to ES5 object methods.                                                                           // 909\n  var isExtensible = Object.isExtensible;                                                                            // 910\n                                                                                                                     // 911\n  // True if Object.defineProperty works as expected. IE8 fails this test.                                           // 912\n  var canDefineProperty = (function() {                                                                              // 913\n    try {                                                                                                            // 914\n      Object.defineProperty({}, '@', {});                                                                            // 915\n      return true;                                                                                                   // 916\n    } catch (e) {                                                                                                    // 917\n      return false;                                                                                                  // 918\n    }                                                                                                                // 919\n  }());                                                                                                              // 920\n                                                                                                                     // 921\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it                                    // 922\n  // and avoid memory leaks from the IE cloneNode bug.                                                               // 923\n  function getIENodeHash(node) {                                                                                     // 924\n    if (node && node.nodeType > 0) {                                                                                 // 925\n      switch (node.nodeType) {                                                                                       // 926\n        case 1: // Element                                                                                           // 927\n          return node.uniqueID;                                                                                      // 928\n        case 9: // Document                                                                                          // 929\n          return node.documentElement && node.documentElement.uniqueID;                                              // 930\n      }                                                                                                              // 931\n    }                                                                                                                // 932\n  }                                                                                                                  // 933\n                                                                                                                     // 934\n  // If possible, use a WeakMap.                                                                                     // 935\n  var usingWeakMap = typeof WeakMap === 'function';                                                                  // 936\n  var weakMap;                                                                                                       // 937\n  if (usingWeakMap) {                                                                                                // 938\n    weakMap = new WeakMap();                                                                                         // 939\n  }                                                                                                                  // 940\n                                                                                                                     // 941\n  var objHashUID = 0;                                                                                                // 942\n                                                                                                                     // 943\n  var UID_HASH_KEY = '__immutablehash__';                                                                            // 944\n  if (typeof Symbol === 'function') {                                                                                // 945\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);                                                                             // 946\n  }                                                                                                                  // 947\n                                                                                                                     // 948\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;                                                                             // 949\n  var STRING_HASH_CACHE_MAX_SIZE = 255;                                                                              // 950\n  var STRING_HASH_CACHE_SIZE = 0;                                                                                    // 951\n  var stringHashCache = {};                                                                                          // 952\n                                                                                                                     // 953\n  function invariant(condition, error) {                                                                             // 954\n    if (!condition) throw new Error(error);                                                                          // 955\n  }                                                                                                                  // 956\n                                                                                                                     // 957\n  function assertNotInfinite(size) {                                                                                 // 958\n    invariant(                                                                                                       // 959\n        size !== Infinity,                                                                                           // 960\n        'Cannot perform this action with an infinite size.'                                                          // 961\n    );                                                                                                               // 962\n  }                                                                                                                  // 963\n                                                                                                                     // 964\n  createClass(ToKeyedSequence, KeyedSeq);                                                                            // 965\n  function ToKeyedSequence(indexed, useKeys) {                                                                       // 966\n    this._iter = indexed;                                                                                            // 967\n    this._useKeys = useKeys;                                                                                         // 968\n    this.size = indexed.size;                                                                                        // 969\n  }                                                                                                                  // 970\n                                                                                                                     // 971\n  ToKeyedSequence.prototype.get = function(key, notSetValue) {                                                       // 972\n    return this._iter.get(key, notSetValue);                                                                         // 973\n  };                                                                                                                 // 974\n                                                                                                                     // 975\n  ToKeyedSequence.prototype.has = function(key) {                                                                    // 976\n    return this._iter.has(key);                                                                                      // 977\n  };                                                                                                                 // 978\n                                                                                                                     // 979\n  ToKeyedSequence.prototype.valueSeq = function() {                                                                  // 980\n    return this._iter.valueSeq();                                                                                    // 981\n  };                                                                                                                 // 982\n                                                                                                                     // 983\n  ToKeyedSequence.prototype.reverse = function() {var this$0 = this;                                                 // 984\n    var reversedSequence = reverseFactory(this, true);                                                               // 985\n    if (!this._useKeys) {                                                                                            // 986\n      reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};                               // 987\n    }                                                                                                                // 988\n    return reversedSequence;                                                                                         // 989\n  };                                                                                                                 // 990\n                                                                                                                     // 991\n  ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;                                      // 992\n    var mappedSequence = mapFactory(this, mapper, context);                                                          // 993\n    if (!this._useKeys) {                                                                                            // 994\n      mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};                      // 995\n    }                                                                                                                // 996\n    return mappedSequence;                                                                                           // 997\n  };                                                                                                                 // 998\n                                                                                                                     // 999\n  ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                    // 1000\n    var ii;                                                                                                          // 1001\n    return this._iter.__iterate(                                                                                     // 1002\n        this._useKeys ?                                                                                              // 1003\n            function(v, k)  {return fn(v, k, this$0)} :                                                              // 1004\n            ((ii = reverse ? resolveSize(this) : 0),                                                                 // 1005\n                function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),                                         // 1006\n        reverse                                                                                                      // 1007\n    );                                                                                                               // 1008\n  };                                                                                                                 // 1009\n                                                                                                                     // 1010\n  ToKeyedSequence.prototype.__iterator = function(type, reverse) {                                                   // 1011\n    if (this._useKeys) {                                                                                             // 1012\n      return this._iter.__iterator(type, reverse);                                                                   // 1013\n    }                                                                                                                // 1014\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);                                                   // 1015\n    var ii = reverse ? resolveSize(this) : 0;                                                                        // 1016\n    return new src_Iterator__Iterator(function()  {                                                                  // 1017\n      var step = iterator.next();                                                                                    // 1018\n      return step.done ? step :                                                                                      // 1019\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);                                              // 1020\n    });                                                                                                              // 1021\n  };                                                                                                                 // 1022\n                                                                                                                     // 1023\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;                                                             // 1024\n                                                                                                                     // 1025\n                                                                                                                     // 1026\n  createClass(ToIndexedSequence, IndexedSeq);                                                                        // 1027\n  function ToIndexedSequence(iter) {                                                                                 // 1028\n    this._iter = iter;                                                                                               // 1029\n    this.size = iter.size;                                                                                           // 1030\n  }                                                                                                                  // 1031\n                                                                                                                     // 1032\n  ToIndexedSequence.prototype.includes = function(value) {                                                           // 1033\n    return this._iter.includes(value);                                                                               // 1034\n  };                                                                                                                 // 1035\n                                                                                                                     // 1036\n  ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                  // 1037\n    var iterations = 0;                                                                                              // 1038\n    return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);                         // 1039\n  };                                                                                                                 // 1040\n                                                                                                                     // 1041\n  ToIndexedSequence.prototype.__iterator = function(type, reverse) {                                                 // 1042\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);                                                   // 1043\n    var iterations = 0;                                                                                              // 1044\n    return new src_Iterator__Iterator(function()  {                                                                  // 1045\n      var step = iterator.next();                                                                                    // 1046\n      return step.done ? step :                                                                                      // 1047\n          iteratorValue(type, iterations++, step.value, step)                                                        // 1048\n    });                                                                                                              // 1049\n  };                                                                                                                 // 1050\n                                                                                                                     // 1051\n                                                                                                                     // 1052\n                                                                                                                     // 1053\n  createClass(ToSetSequence, SetSeq);                                                                                // 1054\n  function ToSetSequence(iter) {                                                                                     // 1055\n    this._iter = iter;                                                                                               // 1056\n    this.size = iter.size;                                                                                           // 1057\n  }                                                                                                                  // 1058\n                                                                                                                     // 1059\n  ToSetSequence.prototype.has = function(key) {                                                                      // 1060\n    return this._iter.includes(key);                                                                                 // 1061\n  };                                                                                                                 // 1062\n                                                                                                                     // 1063\n  ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                      // 1064\n    return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);                                    // 1065\n  };                                                                                                                 // 1066\n                                                                                                                     // 1067\n  ToSetSequence.prototype.__iterator = function(type, reverse) {                                                     // 1068\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);                                                   // 1069\n    return new src_Iterator__Iterator(function()  {                                                                  // 1070\n      var step = iterator.next();                                                                                    // 1071\n      return step.done ? step :                                                                                      // 1072\n          iteratorValue(type, step.value, step.value, step);                                                         // 1073\n    });                                                                                                              // 1074\n  };                                                                                                                 // 1075\n                                                                                                                     // 1076\n                                                                                                                     // 1077\n                                                                                                                     // 1078\n  createClass(FromEntriesSequence, KeyedSeq);                                                                        // 1079\n  function FromEntriesSequence(entries) {                                                                            // 1080\n    this._iter = entries;                                                                                            // 1081\n    this.size = entries.size;                                                                                        // 1082\n  }                                                                                                                  // 1083\n                                                                                                                     // 1084\n  FromEntriesSequence.prototype.entrySeq = function() {                                                              // 1085\n    return this._iter.toSeq();                                                                                       // 1086\n  };                                                                                                                 // 1087\n                                                                                                                     // 1088\n  FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                // 1089\n    return this._iter.__iterate(function(entry ) {                                                                   // 1090\n      // Check if entry exists first so array access doesn't throw for holes                                         // 1091\n      // in the parent iteration.                                                                                    // 1092\n      if (entry) {                                                                                                   // 1093\n        validateEntry(entry);                                                                                        // 1094\n        var indexedIterable = isIterable(entry);                                                                     // 1095\n        return fn(                                                                                                   // 1096\n            indexedIterable ? entry.get(1) : entry[1],                                                               // 1097\n            indexedIterable ? entry.get(0) : entry[0],                                                               // 1098\n            this$0                                                                                                   // 1099\n        );                                                                                                           // 1100\n      }                                                                                                              // 1101\n    }, reverse);                                                                                                     // 1102\n  };                                                                                                                 // 1103\n                                                                                                                     // 1104\n  FromEntriesSequence.prototype.__iterator = function(type, reverse) {                                               // 1105\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);                                                   // 1106\n    return new src_Iterator__Iterator(function()  {                                                                  // 1107\n      while (true) {                                                                                                 // 1108\n        var step = iterator.next();                                                                                  // 1109\n        if (step.done) {                                                                                             // 1110\n          return step;                                                                                               // 1111\n        }                                                                                                            // 1112\n        var entry = step.value;                                                                                      // 1113\n        // Check if entry exists first so array access doesn't throw for holes                                       // 1114\n        // in the parent iteration.                                                                                  // 1115\n        if (entry) {                                                                                                 // 1116\n          validateEntry(entry);                                                                                      // 1117\n          var indexedIterable = isIterable(entry);                                                                   // 1118\n          return iteratorValue(                                                                                      // 1119\n              type,                                                                                                  // 1120\n              indexedIterable ? entry.get(0) : entry[0],                                                             // 1121\n              indexedIterable ? entry.get(1) : entry[1],                                                             // 1122\n              step                                                                                                   // 1123\n          );                                                                                                         // 1124\n        }                                                                                                            // 1125\n      }                                                                                                              // 1126\n    });                                                                                                              // 1127\n  };                                                                                                                 // 1128\n                                                                                                                     // 1129\n                                                                                                                     // 1130\n  ToIndexedSequence.prototype.cacheResult =                                                                          // 1131\n      ToKeyedSequence.prototype.cacheResult =                                                                        // 1132\n          ToSetSequence.prototype.cacheResult =                                                                      // 1133\n              FromEntriesSequence.prototype.cacheResult =                                                            // 1134\n                  cacheResultThrough;                                                                                // 1135\n                                                                                                                     // 1136\n                                                                                                                     // 1137\n  function flipFactory(iterable) {                                                                                   // 1138\n    var flipSequence = makeSequence(iterable);                                                                       // 1139\n    flipSequence._iter = iterable;                                                                                   // 1140\n    flipSequence.size = iterable.size;                                                                               // 1141\n    flipSequence.flip = function()  {return iterable};                                                               // 1142\n    flipSequence.reverse = function () {                                                                             // 1143\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()                                        // 1144\n      reversedSequence.flip = function()  {return iterable.reverse()};                                               // 1145\n      return reversedSequence;                                                                                       // 1146\n    };                                                                                                               // 1147\n    flipSequence.has = function(key ) {return iterable.includes(key)};                                               // 1148\n    flipSequence.includes = function(key ) {return iterable.has(key)};                                               // 1149\n    flipSequence.cacheResult = cacheResultThrough;                                                                   // 1150\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;                                      // 1151\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);                       // 1152\n    }                                                                                                                // 1153\n    flipSequence.__iteratorUncached = function(type, reverse) {                                                      // 1154\n      if (type === ITERATE_ENTRIES) {                                                                                // 1155\n        var iterator = iterable.__iterator(type, reverse);                                                           // 1156\n        return new src_Iterator__Iterator(function()  {                                                              // 1157\n          var step = iterator.next();                                                                                // 1158\n          if (!step.done) {                                                                                          // 1159\n            var k = step.value[0];                                                                                   // 1160\n            step.value[0] = step.value[1];                                                                           // 1161\n            step.value[1] = k;                                                                                       // 1162\n          }                                                                                                          // 1163\n          return step;                                                                                               // 1164\n        });                                                                                                          // 1165\n      }                                                                                                              // 1166\n      return iterable.__iterator(                                                                                    // 1167\n          type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,                                                   // 1168\n          reverse                                                                                                    // 1169\n      );                                                                                                             // 1170\n    }                                                                                                                // 1171\n    return flipSequence;                                                                                             // 1172\n  }                                                                                                                  // 1173\n                                                                                                                     // 1174\n                                                                                                                     // 1175\n  function mapFactory(iterable, mapper, context) {                                                                   // 1176\n    var mappedSequence = makeSequence(iterable);                                                                     // 1177\n    mappedSequence.size = iterable.size;                                                                             // 1178\n    mappedSequence.has = function(key ) {return iterable.has(key)};                                                  // 1179\n    mappedSequence.get = function(key, notSetValue)  {                                                               // 1180\n      var v = iterable.get(key, NOT_SET);                                                                            // 1181\n      return v === NOT_SET ?                                                                                         // 1182\n          notSetValue :                                                                                              // 1183\n          mapper.call(context, v, key, iterable);                                                                    // 1184\n    };                                                                                                               // 1185\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;                                    // 1186\n      return iterable.__iterate(                                                                                     // 1187\n          function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},                        // 1188\n          reverse                                                                                                    // 1189\n      );                                                                                                             // 1190\n    }                                                                                                                // 1191\n    mappedSequence.__iteratorUncached = function (type, reverse) {                                                   // 1192\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);                                                  // 1193\n      return new src_Iterator__Iterator(function()  {                                                                // 1194\n        var step = iterator.next();                                                                                  // 1195\n        if (step.done) {                                                                                             // 1196\n          return step;                                                                                               // 1197\n        }                                                                                                            // 1198\n        var entry = step.value;                                                                                      // 1199\n        var key = entry[0];                                                                                          // 1200\n        return iteratorValue(                                                                                        // 1201\n            type,                                                                                                    // 1202\n            key,                                                                                                     // 1203\n            mapper.call(context, entry[1], key, iterable),                                                           // 1204\n            step                                                                                                     // 1205\n        );                                                                                                           // 1206\n      });                                                                                                            // 1207\n    }                                                                                                                // 1208\n    return mappedSequence;                                                                                           // 1209\n  }                                                                                                                  // 1210\n                                                                                                                     // 1211\n                                                                                                                     // 1212\n  function reverseFactory(iterable, useKeys) {                                                                       // 1213\n    var reversedSequence = makeSequence(iterable);                                                                   // 1214\n    reversedSequence._iter = iterable;                                                                               // 1215\n    reversedSequence.size = iterable.size;                                                                           // 1216\n    reversedSequence.reverse = function()  {return iterable};                                                        // 1217\n    if (iterable.flip) {                                                                                             // 1218\n      reversedSequence.flip = function () {                                                                          // 1219\n        var flipSequence = flipFactory(iterable);                                                                    // 1220\n        flipSequence.reverse = function()  {return iterable.flip()};                                                 // 1221\n        return flipSequence;                                                                                         // 1222\n      };                                                                                                             // 1223\n    }                                                                                                                // 1224\n    reversedSequence.get = function(key, notSetValue)                                                                // 1225\n    {return iterable.get(useKeys ? key : -1 - key, notSetValue)};                                                    // 1226\n    reversedSequence.has = function(key )                                                                            // 1227\n    {return iterable.has(useKeys ? key : -1 - key)};                                                                 // 1228\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};                                  // 1229\n    reversedSequence.cacheResult = cacheResultThrough;                                                               // 1230\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;                                          // 1231\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);                                // 1232\n    };                                                                                                               // 1233\n    reversedSequence.__iterator =                                                                                    // 1234\n        function(type, reverse)  {return iterable.__iterator(type, !reverse)};                                       // 1235\n    return reversedSequence;                                                                                         // 1236\n  }                                                                                                                  // 1237\n                                                                                                                     // 1238\n                                                                                                                     // 1239\n  function filterFactory(iterable, predicate, context, useKeys) {                                                    // 1240\n    var filterSequence = makeSequence(iterable);                                                                     // 1241\n    if (useKeys) {                                                                                                   // 1242\n      filterSequence.has = function(key ) {                                                                          // 1243\n        var v = iterable.get(key, NOT_SET);                                                                          // 1244\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);                                         // 1245\n      };                                                                                                             // 1246\n      filterSequence.get = function(key, notSetValue)  {                                                             // 1247\n        var v = iterable.get(key, NOT_SET);                                                                          // 1248\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?                                          // 1249\n            v : notSetValue;                                                                                         // 1250\n      };                                                                                                             // 1251\n    }                                                                                                                // 1252\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;                                    // 1253\n      var iterations = 0;                                                                                            // 1254\n      iterable.__iterate(function(v, k, c)  {                                                                        // 1255\n        if (predicate.call(context, v, k, c)) {                                                                      // 1256\n          iterations++;                                                                                              // 1257\n          return fn(v, useKeys ? k : iterations - 1, this$0);                                                        // 1258\n        }                                                                                                            // 1259\n      }, reverse);                                                                                                   // 1260\n      return iterations;                                                                                             // 1261\n    };                                                                                                               // 1262\n    filterSequence.__iteratorUncached = function (type, reverse) {                                                   // 1263\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);                                                  // 1264\n      var iterations = 0;                                                                                            // 1265\n      return new src_Iterator__Iterator(function()  {                                                                // 1266\n        while (true) {                                                                                               // 1267\n          var step = iterator.next();                                                                                // 1268\n          if (step.done) {                                                                                           // 1269\n            return step;                                                                                             // 1270\n          }                                                                                                          // 1271\n          var entry = step.value;                                                                                    // 1272\n          var key = entry[0];                                                                                        // 1273\n          var value = entry[1];                                                                                      // 1274\n          if (predicate.call(context, value, key, iterable)) {                                                       // 1275\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);                                   // 1276\n          }                                                                                                          // 1277\n        }                                                                                                            // 1278\n      });                                                                                                            // 1279\n    }                                                                                                                // 1280\n    return filterSequence;                                                                                           // 1281\n  }                                                                                                                  // 1282\n                                                                                                                     // 1283\n                                                                                                                     // 1284\n  function countByFactory(iterable, grouper, context) {                                                              // 1285\n    var groups = src_Map__Map().asMutable();                                                                         // 1286\n    iterable.__iterate(function(v, k)  {                                                                             // 1287\n      groups.update(                                                                                                 // 1288\n          grouper.call(context, v, k, iterable),                                                                     // 1289\n          0,                                                                                                         // 1290\n          function(a ) {return a + 1}                                                                                // 1291\n      );                                                                                                             // 1292\n    });                                                                                                              // 1293\n    return groups.asImmutable();                                                                                     // 1294\n  }                                                                                                                  // 1295\n                                                                                                                     // 1296\n                                                                                                                     // 1297\n  function groupByFactory(iterable, grouper, context) {                                                              // 1298\n    var isKeyedIter = isKeyed(iterable);                                                                             // 1299\n    var groups = (isOrdered(iterable) ? OrderedMap() : src_Map__Map()).asMutable();                                  // 1300\n    iterable.__iterate(function(v, k)  {                                                                             // 1301\n      groups.update(                                                                                                 // 1302\n          grouper.call(context, v, k, iterable),                                                                     // 1303\n          function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}                                   // 1304\n      );                                                                                                             // 1305\n    });                                                                                                              // 1306\n    var coerce = iterableClass(iterable);                                                                            // 1307\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});                                         // 1308\n  }                                                                                                                  // 1309\n                                                                                                                     // 1310\n                                                                                                                     // 1311\n  function sliceFactory(iterable, begin, end, useKeys) {                                                             // 1312\n    var originalSize = iterable.size;                                                                                // 1313\n                                                                                                                     // 1314\n    // Sanitize begin & end using this shorthand for ToInt32(argument)                                               // 1315\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32                                                   // 1316\n    if (begin !== undefined) {                                                                                       // 1317\n      begin = begin | 0;                                                                                             // 1318\n    }                                                                                                                // 1319\n    if (end !== undefined) {                                                                                         // 1320\n      end = end | 0;                                                                                                 // 1321\n    }                                                                                                                // 1322\n                                                                                                                     // 1323\n    if (wholeSlice(begin, end, originalSize)) {                                                                      // 1324\n      return iterable;                                                                                               // 1325\n    }                                                                                                                // 1326\n                                                                                                                     // 1327\n    var resolvedBegin = resolveBegin(begin, originalSize);                                                           // 1328\n    var resolvedEnd = resolveEnd(end, originalSize);                                                                 // 1329\n                                                                                                                     // 1330\n    // begin or end will be NaN if they were provided as negative numbers and                                        // 1331\n    // this iterable's size is unknown. In that case, cache first so there is                                        // 1332\n    // a known size and these do not resolve to NaN.                                                                 // 1333\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {                                            // 1334\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);                                      // 1335\n    }                                                                                                                // 1336\n                                                                                                                     // 1337\n    // Note: resolvedEnd is undefined when the original sequence's length is                                         // 1338\n    // unknown and this slice did not supply an end and should contain all                                           // 1339\n    // elements after resolvedBegin.                                                                                 // 1340\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.                                   // 1341\n    var resolvedSize = resolvedEnd - resolvedBegin;                                                                  // 1342\n    var sliceSize;                                                                                                   // 1343\n    if (resolvedSize === resolvedSize) {                                                                             // 1344\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;                                                               // 1345\n    }                                                                                                                // 1346\n                                                                                                                     // 1347\n    var sliceSeq = makeSequence(iterable);                                                                           // 1348\n                                                                                                                     // 1349\n    // If iterable.size is undefined, the size of the realized sliceSeq is                                           // 1350\n    // unknown at this point unless the number of items to slice is 0                                                // 1351\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;                           // 1352\n                                                                                                                     // 1353\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {                                                             // 1354\n      sliceSeq.get = function (index, notSetValue) {                                                                 // 1355\n        index = wrapIndex(this, index);                                                                              // 1356\n        return index >= 0 && index < sliceSize ?                                                                     // 1357\n            iterable.get(index + resolvedBegin, notSetValue) :                                                       // 1358\n            notSetValue;                                                                                             // 1359\n      }                                                                                                              // 1360\n    }                                                                                                                // 1361\n                                                                                                                     // 1362\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;                                           // 1363\n      if (sliceSize === 0) {                                                                                         // 1364\n        return 0;                                                                                                    // 1365\n      }                                                                                                              // 1366\n      if (reverse) {                                                                                                 // 1367\n        return this.cacheResult().__iterate(fn, reverse);                                                            // 1368\n      }                                                                                                              // 1369\n      var skipped = 0;                                                                                               // 1370\n      var isSkipping = true;                                                                                         // 1371\n      var iterations = 0;                                                                                            // 1372\n      iterable.__iterate(function(v, k)  {                                                                           // 1373\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {                                             // 1374\n          iterations++;                                                                                              // 1375\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&                                            // 1376\n              iterations !== sliceSize;                                                                              // 1377\n        }                                                                                                            // 1378\n      });                                                                                                            // 1379\n      return iterations;                                                                                             // 1380\n    };                                                                                                               // 1381\n                                                                                                                     // 1382\n    sliceSeq.__iteratorUncached = function(type, reverse) {                                                          // 1383\n      if (sliceSize !== 0 && reverse) {                                                                              // 1384\n        return this.cacheResult().__iterator(type, reverse);                                                         // 1385\n      }                                                                                                              // 1386\n      // Don't bother instantiating parent iterator if taking 0.                                                     // 1387\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);                                          // 1388\n      var skipped = 0;                                                                                               // 1389\n      var iterations = 0;                                                                                            // 1390\n      return new src_Iterator__Iterator(function()  {                                                                // 1391\n        while (skipped++ < resolvedBegin) {                                                                          // 1392\n          iterator.next();                                                                                           // 1393\n        }                                                                                                            // 1394\n        if (++iterations > sliceSize) {                                                                              // 1395\n          return iteratorDone();                                                                                     // 1396\n        }                                                                                                            // 1397\n        var step = iterator.next();                                                                                  // 1398\n        if (useKeys || type === ITERATE_VALUES) {                                                                    // 1399\n          return step;                                                                                               // 1400\n        } else if (type === ITERATE_KEYS) {                                                                          // 1401\n          return iteratorValue(type, iterations - 1, undefined, step);                                               // 1402\n        } else {                                                                                                     // 1403\n          return iteratorValue(type, iterations - 1, step.value[1], step);                                           // 1404\n        }                                                                                                            // 1405\n      });                                                                                                            // 1406\n    }                                                                                                                // 1407\n                                                                                                                     // 1408\n    return sliceSeq;                                                                                                 // 1409\n  }                                                                                                                  // 1410\n                                                                                                                     // 1411\n                                                                                                                     // 1412\n  function takeWhileFactory(iterable, predicate, context) {                                                          // 1413\n    var takeSequence = makeSequence(iterable);                                                                       // 1414\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;                                       // 1415\n      if (reverse) {                                                                                                 // 1416\n        return this.cacheResult().__iterate(fn, reverse);                                                            // 1417\n      }                                                                                                              // 1418\n      var iterations = 0;                                                                                            // 1419\n      iterable.__iterate(function(v, k, c)                                                                           // 1420\n          {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}                              // 1421\n      );                                                                                                             // 1422\n      return iterations;                                                                                             // 1423\n    };                                                                                                               // 1424\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;                                    // 1425\n      if (reverse) {                                                                                                 // 1426\n        return this.cacheResult().__iterator(type, reverse);                                                         // 1427\n      }                                                                                                              // 1428\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);                                                  // 1429\n      var iterating = true;                                                                                          // 1430\n      return new src_Iterator__Iterator(function()  {                                                                // 1431\n        if (!iterating) {                                                                                            // 1432\n          return iteratorDone();                                                                                     // 1433\n        }                                                                                                            // 1434\n        var step = iterator.next();                                                                                  // 1435\n        if (step.done) {                                                                                             // 1436\n          return step;                                                                                               // 1437\n        }                                                                                                            // 1438\n        var entry = step.value;                                                                                      // 1439\n        var k = entry[0];                                                                                            // 1440\n        var v = entry[1];                                                                                            // 1441\n        if (!predicate.call(context, v, k, this$0)) {                                                                // 1442\n          iterating = false;                                                                                         // 1443\n          return iteratorDone();                                                                                     // 1444\n        }                                                                                                            // 1445\n        return type === ITERATE_ENTRIES ? step :                                                                     // 1446\n            iteratorValue(type, k, v, step);                                                                         // 1447\n      });                                                                                                            // 1448\n    };                                                                                                               // 1449\n    return takeSequence;                                                                                             // 1450\n  }                                                                                                                  // 1451\n                                                                                                                     // 1452\n                                                                                                                     // 1453\n  function skipWhileFactory(iterable, predicate, context, useKeys) {                                                 // 1454\n    var skipSequence = makeSequence(iterable);                                                                       // 1455\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;                                      // 1456\n      if (reverse) {                                                                                                 // 1457\n        return this.cacheResult().__iterate(fn, reverse);                                                            // 1458\n      }                                                                                                              // 1459\n      var isSkipping = true;                                                                                         // 1460\n      var iterations = 0;                                                                                            // 1461\n      iterable.__iterate(function(v, k, c)  {                                                                        // 1462\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {                                      // 1463\n          iterations++;                                                                                              // 1464\n          return fn(v, useKeys ? k : iterations - 1, this$0);                                                        // 1465\n        }                                                                                                            // 1466\n      });                                                                                                            // 1467\n      return iterations;                                                                                             // 1468\n    };                                                                                                               // 1469\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;                                    // 1470\n      if (reverse) {                                                                                                 // 1471\n        return this.cacheResult().__iterator(type, reverse);                                                         // 1472\n      }                                                                                                              // 1473\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);                                                  // 1474\n      var skipping = true;                                                                                           // 1475\n      var iterations = 0;                                                                                            // 1476\n      return new src_Iterator__Iterator(function()  {                                                                // 1477\n        var step, k, v;                                                                                              // 1478\n        do {                                                                                                         // 1479\n          step = iterator.next();                                                                                    // 1480\n          if (step.done) {                                                                                           // 1481\n            if (useKeys || type === ITERATE_VALUES) {                                                                // 1482\n              return step;                                                                                           // 1483\n            } else if (type === ITERATE_KEYS) {                                                                      // 1484\n              return iteratorValue(type, iterations++, undefined, step);                                             // 1485\n            } else {                                                                                                 // 1486\n              return iteratorValue(type, iterations++, step.value[1], step);                                         // 1487\n            }                                                                                                        // 1488\n          }                                                                                                          // 1489\n          var entry = step.value;                                                                                    // 1490\n          k = entry[0];                                                                                              // 1491\n          v = entry[1];                                                                                              // 1492\n          skipping && (skipping = predicate.call(context, v, k, this$0));                                            // 1493\n        } while (skipping);                                                                                          // 1494\n        return type === ITERATE_ENTRIES ? step :                                                                     // 1495\n            iteratorValue(type, k, v, step);                                                                         // 1496\n      });                                                                                                            // 1497\n    };                                                                                                               // 1498\n    return skipSequence;                                                                                             // 1499\n  }                                                                                                                  // 1500\n                                                                                                                     // 1501\n                                                                                                                     // 1502\n  function concatFactory(iterable, values) {                                                                         // 1503\n    var isKeyedIterable = isKeyed(iterable);                                                                         // 1504\n    var iters = [iterable].concat(values).map(function(v ) {                                                         // 1505\n      if (!isIterable(v)) {                                                                                          // 1506\n        v = isKeyedIterable ?                                                                                        // 1507\n            keyedSeqFromValue(v) :                                                                                   // 1508\n            indexedSeqFromValue(Array.isArray(v) ? v : [v]);                                                         // 1509\n      } else if (isKeyedIterable) {                                                                                  // 1510\n        v = KeyedIterable(v);                                                                                        // 1511\n      }                                                                                                              // 1512\n      return v;                                                                                                      // 1513\n    }).filter(function(v ) {return v.size !== 0});                                                                   // 1514\n                                                                                                                     // 1515\n    if (iters.length === 0) {                                                                                        // 1516\n      return iterable;                                                                                               // 1517\n    }                                                                                                                // 1518\n                                                                                                                     // 1519\n    if (iters.length === 1) {                                                                                        // 1520\n      var singleton = iters[0];                                                                                      // 1521\n      if (singleton === iterable ||                                                                                  // 1522\n          isKeyedIterable && isKeyed(singleton) ||                                                                   // 1523\n          isIndexed(iterable) && isIndexed(singleton)) {                                                             // 1524\n        return singleton;                                                                                            // 1525\n      }                                                                                                              // 1526\n    }                                                                                                                // 1527\n                                                                                                                     // 1528\n    var concatSeq = new ArraySeq(iters);                                                                             // 1529\n    if (isKeyedIterable) {                                                                                           // 1530\n      concatSeq = concatSeq.toKeyedSeq();                                                                            // 1531\n    } else if (!isIndexed(iterable)) {                                                                               // 1532\n      concatSeq = concatSeq.toSetSeq();                                                                              // 1533\n    }                                                                                                                // 1534\n    concatSeq = concatSeq.flatten(true);                                                                             // 1535\n    concatSeq.size = iters.reduce(                                                                                   // 1536\n        function(sum, seq)  {                                                                                        // 1537\n          if (sum !== undefined) {                                                                                   // 1538\n            var size = seq.size;                                                                                     // 1539\n            if (size !== undefined) {                                                                                // 1540\n              return sum + size;                                                                                     // 1541\n            }                                                                                                        // 1542\n          }                                                                                                          // 1543\n        },                                                                                                           // 1544\n        0                                                                                                            // 1545\n    );                                                                                                               // 1546\n    return concatSeq;                                                                                                // 1547\n  }                                                                                                                  // 1548\n                                                                                                                     // 1549\n                                                                                                                     // 1550\n  function flattenFactory(iterable, depth, useKeys) {                                                                // 1551\n    var flatSequence = makeSequence(iterable);                                                                       // 1552\n    flatSequence.__iterateUncached = function(fn, reverse) {                                                         // 1553\n      var iterations = 0;                                                                                            // 1554\n      var stopped = false;                                                                                           // 1555\n      function flatDeep(iter, currentDepth) {var this$0 = this;                                                      // 1556\n        iter.__iterate(function(v, k)  {                                                                             // 1557\n          if ((!depth || currentDepth < depth) && isIterable(v)) {                                                   // 1558\n            flatDeep(v, currentDepth + 1);                                                                           // 1559\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {                                          // 1560\n            stopped = true;                                                                                          // 1561\n          }                                                                                                          // 1562\n          return !stopped;                                                                                           // 1563\n        }, reverse);                                                                                                 // 1564\n      }                                                                                                              // 1565\n      flatDeep(iterable, 0);                                                                                         // 1566\n      return iterations;                                                                                             // 1567\n    }                                                                                                                // 1568\n    flatSequence.__iteratorUncached = function(type, reverse) {                                                      // 1569\n      var iterator = iterable.__iterator(type, reverse);                                                             // 1570\n      var stack = [];                                                                                                // 1571\n      var iterations = 0;                                                                                            // 1572\n      return new src_Iterator__Iterator(function()  {                                                                // 1573\n        while (iterator) {                                                                                           // 1574\n          var step = iterator.next();                                                                                // 1575\n          if (step.done !== false) {                                                                                 // 1576\n            iterator = stack.pop();                                                                                  // 1577\n            continue;                                                                                                // 1578\n          }                                                                                                          // 1579\n          var v = step.value;                                                                                        // 1580\n          if (type === ITERATE_ENTRIES) {                                                                            // 1581\n            v = v[1];                                                                                                // 1582\n          }                                                                                                          // 1583\n          if ((!depth || stack.length < depth) && isIterable(v)) {                                                   // 1584\n            stack.push(iterator);                                                                                    // 1585\n            iterator = v.__iterator(type, reverse);                                                                  // 1586\n          } else {                                                                                                   // 1587\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);                                      // 1588\n          }                                                                                                          // 1589\n        }                                                                                                            // 1590\n        return iteratorDone();                                                                                       // 1591\n      });                                                                                                            // 1592\n    }                                                                                                                // 1593\n    return flatSequence;                                                                                             // 1594\n  }                                                                                                                  // 1595\n                                                                                                                     // 1596\n                                                                                                                     // 1597\n  function flatMapFactory(iterable, mapper, context) {                                                               // 1598\n    var coerce = iterableClass(iterable);                                                                            // 1599\n    return iterable.toSeq().map(                                                                                     // 1600\n        function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}                                        // 1601\n    ).flatten(true);                                                                                                 // 1602\n  }                                                                                                                  // 1603\n                                                                                                                     // 1604\n                                                                                                                     // 1605\n  function interposeFactory(iterable, separator) {                                                                   // 1606\n    var interposedSequence = makeSequence(iterable);                                                                 // 1607\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;                                                 // 1608\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;                                 // 1609\n      var iterations = 0;                                                                                            // 1610\n      iterable.__iterate(function(v, k)                                                                              // 1611\n          {return (!iterations || fn(separator, iterations++, this$0) !== false) &&                                  // 1612\n              fn(v, iterations++, this$0) !== false},                                                                // 1613\n          reverse                                                                                                    // 1614\n      );                                                                                                             // 1615\n      return iterations;                                                                                             // 1616\n    };                                                                                                               // 1617\n    interposedSequence.__iteratorUncached = function(type, reverse) {                                                // 1618\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);                                                   // 1619\n      var iterations = 0;                                                                                            // 1620\n      var step;                                                                                                      // 1621\n      return new src_Iterator__Iterator(function()  {                                                                // 1622\n        if (!step || iterations % 2) {                                                                               // 1623\n          step = iterator.next();                                                                                    // 1624\n          if (step.done) {                                                                                           // 1625\n            return step;                                                                                             // 1626\n          }                                                                                                          // 1627\n        }                                                                                                            // 1628\n        return iterations % 2 ?                                                                                      // 1629\n            iteratorValue(type, iterations++, separator) :                                                           // 1630\n            iteratorValue(type, iterations++, step.value, step);                                                     // 1631\n      });                                                                                                            // 1632\n    };                                                                                                               // 1633\n    return interposedSequence;                                                                                       // 1634\n  }                                                                                                                  // 1635\n                                                                                                                     // 1636\n                                                                                                                     // 1637\n  function sortFactory(iterable, comparator, mapper) {                                                               // 1638\n    if (!comparator) {                                                                                               // 1639\n      comparator = defaultComparator;                                                                                // 1640\n    }                                                                                                                // 1641\n    var isKeyedIterable = isKeyed(iterable);                                                                         // 1642\n    var index = 0;                                                                                                   // 1643\n    var entries = iterable.toSeq().map(                                                                              // 1644\n        function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}                                // 1645\n    ).toArray();                                                                                                     // 1646\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(                            // 1647\n        isKeyedIterable ?                                                                                            // 1648\n            function(v, i)  { entries[i].length = 2; } :                                                             // 1649\n            function(v, i)  { entries[i] = v[1]; }                                                                   // 1650\n    );                                                                                                               // 1651\n    return isKeyedIterable ? KeyedSeq(entries) :                                                                     // 1652\n        isIndexed(iterable) ? IndexedSeq(entries) :                                                                  // 1653\n            SetSeq(entries);                                                                                         // 1654\n  }                                                                                                                  // 1655\n                                                                                                                     // 1656\n                                                                                                                     // 1657\n  function maxFactory(iterable, comparator, mapper) {                                                                // 1658\n    if (!comparator) {                                                                                               // 1659\n      comparator = defaultComparator;                                                                                // 1660\n    }                                                                                                                // 1661\n    if (mapper) {                                                                                                    // 1662\n      var entry = iterable.toSeq()                                                                                   // 1663\n          .map(function(v, k)  {return [v, mapper(v, k, iterable)]})                                                 // 1664\n          .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});                              // 1665\n      return entry && entry[0];                                                                                      // 1666\n    } else {                                                                                                         // 1667\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});                         // 1668\n    }                                                                                                                // 1669\n  }                                                                                                                  // 1670\n                                                                                                                     // 1671\n  function maxCompare(comparator, a, b) {                                                                            // 1672\n    var comp = comparator(b, a);                                                                                     // 1673\n    // b is considered the new max if the comparator declares them equal, but                                        // 1674\n    // they are not equal and b is in fact a nullish value.                                                          // 1675\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;                        // 1676\n  }                                                                                                                  // 1677\n                                                                                                                     // 1678\n                                                                                                                     // 1679\n  function zipWithFactory(keyIter, zipper, iters) {                                                                  // 1680\n    var zipSequence = makeSequence(keyIter);                                                                         // 1681\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();                                  // 1682\n    // Note: this a generic base implementation of __iterate in terms of                                             // 1683\n    // __iterator which may be more generically useful in the future.                                                // 1684\n    zipSequence.__iterate = function(fn, reverse) {                                                                  // 1685\n      /* generic:                                                                                                    // 1686\n       var iterator = this.__iterator(ITERATE_ENTRIES, reverse);                                                     // 1687\n       var step;                                                                                                     // 1688\n       var iterations = 0;                                                                                           // 1689\n       while (!(step = iterator.next()).done) {                                                                      // 1690\n       iterations++;                                                                                                 // 1691\n       if (fn(step.value[1], step.value[0], this) === false) {                                                       // 1692\n       break;                                                                                                        // 1693\n       }                                                                                                             // 1694\n       }                                                                                                             // 1695\n       return iterations;                                                                                            // 1696\n       */                                                                                                            // 1697\n      // indexed:                                                                                                    // 1698\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);                                                       // 1699\n      var step;                                                                                                      // 1700\n      var iterations = 0;                                                                                            // 1701\n      while (!(step = iterator.next()).done) {                                                                       // 1702\n        if (fn(step.value, iterations++, this) === false) {                                                          // 1703\n          break;                                                                                                     // 1704\n        }                                                                                                            // 1705\n      }                                                                                                              // 1706\n      return iterations;                                                                                             // 1707\n    };                                                                                                               // 1708\n    zipSequence.__iteratorUncached = function(type, reverse) {                                                       // 1709\n      var iterators = iters.map(function(i )                                                                         // 1710\n          {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}                                         // 1711\n      );                                                                                                             // 1712\n      var iterations = 0;                                                                                            // 1713\n      var isDone = false;                                                                                            // 1714\n      return new src_Iterator__Iterator(function()  {                                                                // 1715\n        var steps;                                                                                                   // 1716\n        if (!isDone) {                                                                                               // 1717\n          steps = iterators.map(function(i ) {return i.next()});                                                     // 1718\n          isDone = steps.some(function(s ) {return s.done});                                                         // 1719\n        }                                                                                                            // 1720\n        if (isDone) {                                                                                                // 1721\n          return iteratorDone();                                                                                     // 1722\n        }                                                                                                            // 1723\n        return iteratorValue(                                                                                        // 1724\n            type,                                                                                                    // 1725\n            iterations++,                                                                                            // 1726\n            zipper.apply(null, steps.map(function(s ) {return s.value}))                                             // 1727\n        );                                                                                                           // 1728\n      });                                                                                                            // 1729\n    };                                                                                                               // 1730\n    return zipSequence                                                                                               // 1731\n  }                                                                                                                  // 1732\n                                                                                                                     // 1733\n                                                                                                                     // 1734\n  // #pragma Helper Functions                                                                                        // 1735\n                                                                                                                     // 1736\n  function reify(iter, seq) {                                                                                        // 1737\n    return isSeq(iter) ? seq : iter.constructor(seq);                                                                // 1738\n  }                                                                                                                  // 1739\n                                                                                                                     // 1740\n  function validateEntry(entry) {                                                                                    // 1741\n    if (entry !== Object(entry)) {                                                                                   // 1742\n      throw new TypeError('Expected [K, V] tuple: ' + entry);                                                        // 1743\n    }                                                                                                                // 1744\n  }                                                                                                                  // 1745\n                                                                                                                     // 1746\n  function resolveSize(iter) {                                                                                       // 1747\n    assertNotInfinite(iter.size);                                                                                    // 1748\n    return ensureSize(iter);                                                                                         // 1749\n  }                                                                                                                  // 1750\n                                                                                                                     // 1751\n  function iterableClass(iterable) {                                                                                 // 1752\n    return isKeyed(iterable) ? KeyedIterable :                                                                       // 1753\n        isIndexed(iterable) ? IndexedIterable :                                                                      // 1754\n            SetIterable;                                                                                             // 1755\n  }                                                                                                                  // 1756\n                                                                                                                     // 1757\n  function makeSequence(iterable) {                                                                                  // 1758\n    return Object.create(                                                                                            // 1759\n        (                                                                                                            // 1760\n            isKeyed(iterable) ? KeyedSeq :                                                                           // 1761\n                isIndexed(iterable) ? IndexedSeq :                                                                   // 1762\n                    SetSeq                                                                                           // 1763\n        ).prototype                                                                                                  // 1764\n    );                                                                                                               // 1765\n  }                                                                                                                  // 1766\n                                                                                                                     // 1767\n  function cacheResultThrough() {                                                                                    // 1768\n    if (this._iter.cacheResult) {                                                                                    // 1769\n      this._iter.cacheResult();                                                                                      // 1770\n      this.size = this._iter.size;                                                                                   // 1771\n      return this;                                                                                                   // 1772\n    } else {                                                                                                         // 1773\n      return Seq.prototype.cacheResult.call(this);                                                                   // 1774\n    }                                                                                                                // 1775\n  }                                                                                                                  // 1776\n                                                                                                                     // 1777\n  function defaultComparator(a, b) {                                                                                 // 1778\n    return a > b ? 1 : a < b ? -1 : 0;                                                                               // 1779\n  }                                                                                                                  // 1780\n                                                                                                                     // 1781\n  function forceIterator(keyPath) {                                                                                  // 1782\n    var iter = getIterator(keyPath);                                                                                 // 1783\n    if (!iter) {                                                                                                     // 1784\n      // Array might not be iterable in this environment, so we need a fallback                                      // 1785\n      // to our wrapped type.                                                                                        // 1786\n      if (!isArrayLike(keyPath)) {                                                                                   // 1787\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);                                          // 1788\n      }                                                                                                              // 1789\n      iter = getIterator(Iterable(keyPath));                                                                         // 1790\n    }                                                                                                                // 1791\n    return iter;                                                                                                     // 1792\n  }                                                                                                                  // 1793\n                                                                                                                     // 1794\n  createClass(src_Map__Map, KeyedCollection);                                                                        // 1795\n                                                                                                                     // 1796\n  // @pragma Construction                                                                                            // 1797\n                                                                                                                     // 1798\n  function src_Map__Map(value) {                                                                                     // 1799\n    return value === null || value === undefined ? emptyMap() :                                                      // 1800\n        isMap(value) && !isOrdered(value) ? value :                                                                  // 1801\n            emptyMap().withMutations(function(map ) {                                                                // 1802\n              var iter = KeyedIterable(value);                                                                       // 1803\n              assertNotInfinite(iter.size);                                                                          // 1804\n              iter.forEach(function(v, k)  {return map.set(k, v)});                                                  // 1805\n            });                                                                                                      // 1806\n  }                                                                                                                  // 1807\n                                                                                                                     // 1808\n  src_Map__Map.prototype.toString = function() {                                                                     // 1809\n    return this.__toString('Map {', '}');                                                                            // 1810\n  };                                                                                                                 // 1811\n                                                                                                                     // 1812\n  // @pragma Access                                                                                                  // 1813\n                                                                                                                     // 1814\n  src_Map__Map.prototype.get = function(k, notSetValue) {                                                            // 1815\n    return this._root ?                                                                                              // 1816\n        this._root.get(0, undefined, k, notSetValue) :                                                               // 1817\n        notSetValue;                                                                                                 // 1818\n  };                                                                                                                 // 1819\n                                                                                                                     // 1820\n  // @pragma Modification                                                                                            // 1821\n                                                                                                                     // 1822\n  src_Map__Map.prototype.set = function(k, v) {                                                                      // 1823\n    return updateMap(this, k, v);                                                                                    // 1824\n  };                                                                                                                 // 1825\n                                                                                                                     // 1826\n  src_Map__Map.prototype.setIn = function(keyPath, v) {                                                              // 1827\n    return this.updateIn(keyPath, NOT_SET, function()  {return v});                                                  // 1828\n  };                                                                                                                 // 1829\n                                                                                                                     // 1830\n  src_Map__Map.prototype.remove = function(k) {                                                                      // 1831\n    return updateMap(this, k, NOT_SET);                                                                              // 1832\n  };                                                                                                                 // 1833\n                                                                                                                     // 1834\n  src_Map__Map.prototype.deleteIn = function(keyPath) {                                                              // 1835\n    return this.updateIn(keyPath, function()  {return NOT_SET});                                                     // 1836\n  };                                                                                                                 // 1837\n                                                                                                                     // 1838\n  src_Map__Map.prototype.update = function(k, notSetValue, updater) {                                                // 1839\n    return arguments.length === 1 ?                                                                                  // 1840\n        k(this) :                                                                                                    // 1841\n        this.updateIn([k], notSetValue, updater);                                                                    // 1842\n  };                                                                                                                 // 1843\n                                                                                                                     // 1844\n  src_Map__Map.prototype.updateIn = function(keyPath, notSetValue, updater) {                                        // 1845\n    if (!updater) {                                                                                                  // 1846\n      updater = notSetValue;                                                                                         // 1847\n      notSetValue = undefined;                                                                                       // 1848\n    }                                                                                                                // 1849\n    var updatedValue = updateInDeepMap(                                                                              // 1850\n        this,                                                                                                        // 1851\n        forceIterator(keyPath),                                                                                      // 1852\n        notSetValue,                                                                                                 // 1853\n        updater                                                                                                      // 1854\n    );                                                                                                               // 1855\n    return updatedValue === NOT_SET ? undefined : updatedValue;                                                      // 1856\n  };                                                                                                                 // 1857\n                                                                                                                     // 1858\n  src_Map__Map.prototype.clear = function() {                                                                        // 1859\n    if (this.size === 0) {                                                                                           // 1860\n      return this;                                                                                                   // 1861\n    }                                                                                                                // 1862\n    if (this.__ownerID) {                                                                                            // 1863\n      this.size = 0;                                                                                                 // 1864\n      this._root = null;                                                                                             // 1865\n      this.__hash = undefined;                                                                                       // 1866\n      this.__altered = true;                                                                                         // 1867\n      return this;                                                                                                   // 1868\n    }                                                                                                                // 1869\n    return emptyMap();                                                                                               // 1870\n  };                                                                                                                 // 1871\n                                                                                                                     // 1872\n  // @pragma Composition                                                                                             // 1873\n                                                                                                                     // 1874\n  src_Map__Map.prototype.merge = function(/*...iters*/) {                                                            // 1875\n    return mergeIntoMapWith(this, undefined, arguments);                                                             // 1876\n  };                                                                                                                 // 1877\n                                                                                                                     // 1878\n  src_Map__Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);                       // 1879\n    return mergeIntoMapWith(this, merger, iters);                                                                    // 1880\n  };                                                                                                                 // 1881\n                                                                                                                     // 1882\n  src_Map__Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);                        // 1883\n    return this.updateIn(                                                                                            // 1884\n        keyPath,                                                                                                     // 1885\n        emptyMap(),                                                                                                  // 1886\n        function(m ) {return typeof m.merge === 'function' ?                                                         // 1887\n            m.merge.apply(m, iters) :                                                                                // 1888\n            iters[iters.length - 1]}                                                                                 // 1889\n    );                                                                                                               // 1890\n  };                                                                                                                 // 1891\n                                                                                                                     // 1892\n  src_Map__Map.prototype.mergeDeep = function(/*...iters*/) {                                                        // 1893\n    return mergeIntoMapWith(this, deepMerger(undefined), arguments);                                                 // 1894\n  };                                                                                                                 // 1895\n                                                                                                                     // 1896\n  src_Map__Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);                   // 1897\n    return mergeIntoMapWith(this, deepMerger(merger), iters);                                                        // 1898\n  };                                                                                                                 // 1899\n                                                                                                                     // 1900\n  src_Map__Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);                    // 1901\n    return this.updateIn(                                                                                            // 1902\n        keyPath,                                                                                                     // 1903\n        emptyMap(),                                                                                                  // 1904\n        function(m ) {return typeof m.mergeDeep === 'function' ?                                                     // 1905\n            m.mergeDeep.apply(m, iters) :                                                                            // 1906\n            iters[iters.length - 1]}                                                                                 // 1907\n    );                                                                                                               // 1908\n  };                                                                                                                 // 1909\n                                                                                                                     // 1910\n  src_Map__Map.prototype.sort = function(comparator) {                                                               // 1911\n    // Late binding                                                                                                  // 1912\n    return OrderedMap(sortFactory(this, comparator));                                                                // 1913\n  };                                                                                                                 // 1914\n                                                                                                                     // 1915\n  src_Map__Map.prototype.sortBy = function(mapper, comparator) {                                                     // 1916\n    // Late binding                                                                                                  // 1917\n    return OrderedMap(sortFactory(this, comparator, mapper));                                                        // 1918\n  };                                                                                                                 // 1919\n                                                                                                                     // 1920\n  // @pragma Mutability                                                                                              // 1921\n                                                                                                                     // 1922\n  src_Map__Map.prototype.withMutations = function(fn) {                                                              // 1923\n    var mutable = this.asMutable();                                                                                  // 1924\n    fn(mutable);                                                                                                     // 1925\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;                                      // 1926\n  };                                                                                                                 // 1927\n                                                                                                                     // 1928\n  src_Map__Map.prototype.asMutable = function() {                                                                    // 1929\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());                                                // 1930\n  };                                                                                                                 // 1931\n                                                                                                                     // 1932\n  src_Map__Map.prototype.asImmutable = function() {                                                                  // 1933\n    return this.__ensureOwner();                                                                                     // 1934\n  };                                                                                                                 // 1935\n                                                                                                                     // 1936\n  src_Map__Map.prototype.wasAltered = function() {                                                                   // 1937\n    return this.__altered;                                                                                           // 1938\n  };                                                                                                                 // 1939\n                                                                                                                     // 1940\n  src_Map__Map.prototype.__iterator = function(type, reverse) {                                                      // 1941\n    return new MapIterator(this, type, reverse);                                                                     // 1942\n  };                                                                                                                 // 1943\n                                                                                                                     // 1944\n  src_Map__Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                       // 1945\n    var iterations = 0;                                                                                              // 1946\n    this._root && this._root.iterate(function(entry ) {                                                              // 1947\n      iterations++;                                                                                                  // 1948\n      return fn(entry[1], entry[0], this$0);                                                                         // 1949\n    }, reverse);                                                                                                     // 1950\n    return iterations;                                                                                               // 1951\n  };                                                                                                                 // 1952\n                                                                                                                     // 1953\n  src_Map__Map.prototype.__ensureOwner = function(ownerID) {                                                         // 1954\n    if (ownerID === this.__ownerID) {                                                                                // 1955\n      return this;                                                                                                   // 1956\n    }                                                                                                                // 1957\n    if (!ownerID) {                                                                                                  // 1958\n      this.__ownerID = ownerID;                                                                                      // 1959\n      this.__altered = false;                                                                                        // 1960\n      return this;                                                                                                   // 1961\n    }                                                                                                                // 1962\n    return makeMap(this.size, this._root, ownerID, this.__hash);                                                     // 1963\n  };                                                                                                                 // 1964\n                                                                                                                     // 1965\n                                                                                                                     // 1966\n  function isMap(maybeMap) {                                                                                         // 1967\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);                                                                // 1968\n  }                                                                                                                  // 1969\n                                                                                                                     // 1970\n  src_Map__Map.isMap = isMap;                                                                                        // 1971\n                                                                                                                     // 1972\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';                                                                     // 1973\n                                                                                                                     // 1974\n  var MapPrototype = src_Map__Map.prototype;                                                                         // 1975\n  MapPrototype[IS_MAP_SENTINEL] = true;                                                                              // 1976\n  MapPrototype[DELETE] = MapPrototype.remove;                                                                        // 1977\n  MapPrototype.removeIn = MapPrototype.deleteIn;                                                                     // 1978\n                                                                                                                     // 1979\n                                                                                                                     // 1980\n  // #pragma Trie Nodes                                                                                              // 1981\n                                                                                                                     // 1982\n                                                                                                                     // 1983\n                                                                                                                     // 1984\n  function ArrayMapNode(ownerID, entries) {                                                                          // 1985\n    this.ownerID = ownerID;                                                                                          // 1986\n    this.entries = entries;                                                                                          // 1987\n  }                                                                                                                  // 1988\n                                                                                                                     // 1989\n  ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {                                          // 1990\n    var entries = this.entries;                                                                                      // 1991\n    for (var ii = 0, len = entries.length; ii < len; ii++) {                                                         // 1992\n      if (is(key, entries[ii][0])) {                                                                                 // 1993\n        return entries[ii][1];                                                                                       // 1994\n      }                                                                                                              // 1995\n    }                                                                                                                // 1996\n    return notSetValue;                                                                                              // 1997\n  };                                                                                                                 // 1998\n                                                                                                                     // 1999\n  ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {           // 2000\n    var removed = value === NOT_SET;                                                                                 // 2001\n                                                                                                                     // 2002\n    var entries = this.entries;                                                                                      // 2003\n    var idx = 0;                                                                                                     // 2004\n    for (var len = entries.length; idx < len; idx++) {                                                               // 2005\n      if (is(key, entries[idx][0])) {                                                                                // 2006\n        break;                                                                                                       // 2007\n      }                                                                                                              // 2008\n    }                                                                                                                // 2009\n    var exists = idx < len;                                                                                          // 2010\n                                                                                                                     // 2011\n    if (exists ? entries[idx][1] === value : removed) {                                                              // 2012\n      return this;                                                                                                   // 2013\n    }                                                                                                                // 2014\n                                                                                                                     // 2015\n    SetRef(didAlter);                                                                                                // 2016\n    (removed || !exists) && SetRef(didChangeSize);                                                                   // 2017\n                                                                                                                     // 2018\n    if (removed && entries.length === 1) {                                                                           // 2019\n      return; // undefined                                                                                           // 2020\n    }                                                                                                                // 2021\n                                                                                                                     // 2022\n    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {                                               // 2023\n      return createNodes(ownerID, entries, key, value);                                                              // 2024\n    }                                                                                                                // 2025\n                                                                                                                     // 2026\n    var isEditable = ownerID && ownerID === this.ownerID;                                                            // 2027\n    var newEntries = isEditable ? entries : arrCopy(entries);                                                        // 2028\n                                                                                                                     // 2029\n    if (exists) {                                                                                                    // 2030\n      if (removed) {                                                                                                 // 2031\n        idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());                                   // 2032\n      } else {                                                                                                       // 2033\n        newEntries[idx] = [key, value];                                                                              // 2034\n      }                                                                                                              // 2035\n    } else {                                                                                                         // 2036\n      newEntries.push([key, value]);                                                                                 // 2037\n    }                                                                                                                // 2038\n                                                                                                                     // 2039\n    if (isEditable) {                                                                                                // 2040\n      this.entries = newEntries;                                                                                     // 2041\n      return this;                                                                                                   // 2042\n    }                                                                                                                // 2043\n                                                                                                                     // 2044\n    return new ArrayMapNode(ownerID, newEntries);                                                                    // 2045\n  };                                                                                                                 // 2046\n                                                                                                                     // 2047\n                                                                                                                     // 2048\n                                                                                                                     // 2049\n                                                                                                                     // 2050\n  function BitmapIndexedNode(ownerID, bitmap, nodes) {                                                               // 2051\n    this.ownerID = ownerID;                                                                                          // 2052\n    this.bitmap = bitmap;                                                                                            // 2053\n    this.nodes = nodes;                                                                                              // 2054\n  }                                                                                                                  // 2055\n                                                                                                                     // 2056\n  BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {                                     // 2057\n    if (keyHash === undefined) {                                                                                     // 2058\n      keyHash = hash(key);                                                                                           // 2059\n    }                                                                                                                // 2060\n    var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));                                           // 2061\n    var bitmap = this.bitmap;                                                                                        // 2062\n    return (bitmap & bit) === 0 ? notSetValue :                                                                      // 2063\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);                      // 2064\n  };                                                                                                                 // 2065\n                                                                                                                     // 2066\n  BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {      // 2067\n    if (keyHash === undefined) {                                                                                     // 2068\n      keyHash = hash(key);                                                                                           // 2069\n    }                                                                                                                // 2070\n    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;                                            // 2071\n    var bit = 1 << keyHashFrag;                                                                                      // 2072\n    var bitmap = this.bitmap;                                                                                        // 2073\n    var exists = (bitmap & bit) !== 0;                                                                               // 2074\n                                                                                                                     // 2075\n    if (!exists && value === NOT_SET) {                                                                              // 2076\n      return this;                                                                                                   // 2077\n    }                                                                                                                // 2078\n                                                                                                                     // 2079\n    var idx = popCount(bitmap & (bit - 1));                                                                          // 2080\n    var nodes = this.nodes;                                                                                          // 2081\n    var node = exists ? nodes[idx] : undefined;                                                                      // 2082\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);            // 2083\n                                                                                                                     // 2084\n    if (newNode === node) {                                                                                          // 2085\n      return this;                                                                                                   // 2086\n    }                                                                                                                // 2087\n                                                                                                                     // 2088\n    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {                                             // 2089\n      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);                                              // 2090\n    }                                                                                                                // 2091\n                                                                                                                     // 2092\n    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {                                    // 2093\n      return nodes[idx ^ 1];                                                                                         // 2094\n    }                                                                                                                // 2095\n                                                                                                                     // 2096\n    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {                                            // 2097\n      return newNode;                                                                                                // 2098\n    }                                                                                                                // 2099\n                                                                                                                     // 2100\n    var isEditable = ownerID && ownerID === this.ownerID;                                                            // 2101\n    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;                                         // 2102\n    var newNodes = exists ? newNode ?                                                                                // 2103\n        setIn(nodes, idx, newNode, isEditable) :                                                                     // 2104\n        spliceOut(nodes, idx, isEditable) :                                                                          // 2105\n        spliceIn(nodes, idx, newNode, isEditable);                                                                   // 2106\n                                                                                                                     // 2107\n    if (isEditable) {                                                                                                // 2108\n      this.bitmap = newBitmap;                                                                                       // 2109\n      this.nodes = newNodes;                                                                                         // 2110\n      return this;                                                                                                   // 2111\n    }                                                                                                                // 2112\n                                                                                                                     // 2113\n    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);                                                      // 2114\n  };                                                                                                                 // 2115\n                                                                                                                     // 2116\n                                                                                                                     // 2117\n                                                                                                                     // 2118\n                                                                                                                     // 2119\n  function HashArrayMapNode(ownerID, count, nodes) {                                                                 // 2120\n    this.ownerID = ownerID;                                                                                          // 2121\n    this.count = count;                                                                                              // 2122\n    this.nodes = nodes;                                                                                              // 2123\n  }                                                                                                                  // 2124\n                                                                                                                     // 2125\n  HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {                                      // 2126\n    if (keyHash === undefined) {                                                                                     // 2127\n      keyHash = hash(key);                                                                                           // 2128\n    }                                                                                                                // 2129\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;                                                    // 2130\n    var node = this.nodes[idx];                                                                                      // 2131\n    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;                                  // 2132\n  };                                                                                                                 // 2133\n                                                                                                                     // 2134\n  HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {       // 2135\n    if (keyHash === undefined) {                                                                                     // 2136\n      keyHash = hash(key);                                                                                           // 2137\n    }                                                                                                                // 2138\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;                                                    // 2139\n    var removed = value === NOT_SET;                                                                                 // 2140\n    var nodes = this.nodes;                                                                                          // 2141\n    var node = nodes[idx];                                                                                           // 2142\n                                                                                                                     // 2143\n    if (removed && !node) {                                                                                          // 2144\n      return this;                                                                                                   // 2145\n    }                                                                                                                // 2146\n                                                                                                                     // 2147\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);            // 2148\n    if (newNode === node) {                                                                                          // 2149\n      return this;                                                                                                   // 2150\n    }                                                                                                                // 2151\n                                                                                                                     // 2152\n    var newCount = this.count;                                                                                       // 2153\n    if (!node) {                                                                                                     // 2154\n      newCount++;                                                                                                    // 2155\n    } else if (!newNode) {                                                                                           // 2156\n      newCount--;                                                                                                    // 2157\n      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {                                                                      // 2158\n        return packNodes(ownerID, nodes, newCount, idx);                                                             // 2159\n      }                                                                                                              // 2160\n    }                                                                                                                // 2161\n                                                                                                                     // 2162\n    var isEditable = ownerID && ownerID === this.ownerID;                                                            // 2163\n    var newNodes = setIn(nodes, idx, newNode, isEditable);                                                           // 2164\n                                                                                                                     // 2165\n    if (isEditable) {                                                                                                // 2166\n      this.count = newCount;                                                                                         // 2167\n      this.nodes = newNodes;                                                                                         // 2168\n      return this;                                                                                                   // 2169\n    }                                                                                                                // 2170\n                                                                                                                     // 2171\n    return new HashArrayMapNode(ownerID, newCount, newNodes);                                                        // 2172\n  };                                                                                                                 // 2173\n                                                                                                                     // 2174\n                                                                                                                     // 2175\n                                                                                                                     // 2176\n                                                                                                                     // 2177\n  function HashCollisionNode(ownerID, keyHash, entries) {                                                            // 2178\n    this.ownerID = ownerID;                                                                                          // 2179\n    this.keyHash = keyHash;                                                                                          // 2180\n    this.entries = entries;                                                                                          // 2181\n  }                                                                                                                  // 2182\n                                                                                                                     // 2183\n  HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {                                     // 2184\n    var entries = this.entries;                                                                                      // 2185\n    for (var ii = 0, len = entries.length; ii < len; ii++) {                                                         // 2186\n      if (is(key, entries[ii][0])) {                                                                                 // 2187\n        return entries[ii][1];                                                                                       // 2188\n      }                                                                                                              // 2189\n    }                                                                                                                // 2190\n    return notSetValue;                                                                                              // 2191\n  };                                                                                                                 // 2192\n                                                                                                                     // 2193\n  HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {      // 2194\n    if (keyHash === undefined) {                                                                                     // 2195\n      keyHash = hash(key);                                                                                           // 2196\n    }                                                                                                                // 2197\n                                                                                                                     // 2198\n    var removed = value === NOT_SET;                                                                                 // 2199\n                                                                                                                     // 2200\n    if (keyHash !== this.keyHash) {                                                                                  // 2201\n      if (removed) {                                                                                                 // 2202\n        return this;                                                                                                 // 2203\n      }                                                                                                              // 2204\n      SetRef(didAlter);                                                                                              // 2205\n      SetRef(didChangeSize);                                                                                         // 2206\n      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);                                             // 2207\n    }                                                                                                                // 2208\n                                                                                                                     // 2209\n    var entries = this.entries;                                                                                      // 2210\n    var idx = 0;                                                                                                     // 2211\n    for (var len = entries.length; idx < len; idx++) {                                                               // 2212\n      if (is(key, entries[idx][0])) {                                                                                // 2213\n        break;                                                                                                       // 2214\n      }                                                                                                              // 2215\n    }                                                                                                                // 2216\n    var exists = idx < len;                                                                                          // 2217\n                                                                                                                     // 2218\n    if (exists ? entries[idx][1] === value : removed) {                                                              // 2219\n      return this;                                                                                                   // 2220\n    }                                                                                                                // 2221\n                                                                                                                     // 2222\n    SetRef(didAlter);                                                                                                // 2223\n    (removed || !exists) && SetRef(didChangeSize);                                                                   // 2224\n                                                                                                                     // 2225\n    if (removed && len === 2) {                                                                                      // 2226\n      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);                                                 // 2227\n    }                                                                                                                // 2228\n                                                                                                                     // 2229\n    var isEditable = ownerID && ownerID === this.ownerID;                                                            // 2230\n    var newEntries = isEditable ? entries : arrCopy(entries);                                                        // 2231\n                                                                                                                     // 2232\n    if (exists) {                                                                                                    // 2233\n      if (removed) {                                                                                                 // 2234\n        idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());                                   // 2235\n      } else {                                                                                                       // 2236\n        newEntries[idx] = [key, value];                                                                              // 2237\n      }                                                                                                              // 2238\n    } else {                                                                                                         // 2239\n      newEntries.push([key, value]);                                                                                 // 2240\n    }                                                                                                                // 2241\n                                                                                                                     // 2242\n    if (isEditable) {                                                                                                // 2243\n      this.entries = newEntries;                                                                                     // 2244\n      return this;                                                                                                   // 2245\n    }                                                                                                                // 2246\n                                                                                                                     // 2247\n    return new HashCollisionNode(ownerID, this.keyHash, newEntries);                                                 // 2248\n  };                                                                                                                 // 2249\n                                                                                                                     // 2250\n                                                                                                                     // 2251\n                                                                                                                     // 2252\n                                                                                                                     // 2253\n  function ValueNode(ownerID, keyHash, entry) {                                                                      // 2254\n    this.ownerID = ownerID;                                                                                          // 2255\n    this.keyHash = keyHash;                                                                                          // 2256\n    this.entry = entry;                                                                                              // 2257\n  }                                                                                                                  // 2258\n                                                                                                                     // 2259\n  ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {                                             // 2260\n    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;                                                     // 2261\n  };                                                                                                                 // 2262\n                                                                                                                     // 2263\n  ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {              // 2264\n    var removed = value === NOT_SET;                                                                                 // 2265\n    var keyMatch = is(key, this.entry[0]);                                                                           // 2266\n    if (keyMatch ? value === this.entry[1] : removed) {                                                              // 2267\n      return this;                                                                                                   // 2268\n    }                                                                                                                // 2269\n                                                                                                                     // 2270\n    SetRef(didAlter);                                                                                                // 2271\n                                                                                                                     // 2272\n    if (removed) {                                                                                                   // 2273\n      SetRef(didChangeSize);                                                                                         // 2274\n      return; // undefined                                                                                           // 2275\n    }                                                                                                                // 2276\n                                                                                                                     // 2277\n    if (keyMatch) {                                                                                                  // 2278\n      if (ownerID && ownerID === this.ownerID) {                                                                     // 2279\n        this.entry[1] = value;                                                                                       // 2280\n        return this;                                                                                                 // 2281\n      }                                                                                                              // 2282\n      return new ValueNode(ownerID, this.keyHash, [key, value]);                                                     // 2283\n    }                                                                                                                // 2284\n                                                                                                                     // 2285\n    SetRef(didChangeSize);                                                                                           // 2286\n    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);                                             // 2287\n  };                                                                                                                 // 2288\n                                                                                                                     // 2289\n                                                                                                                     // 2290\n                                                                                                                     // 2291\n  // #pragma Iterators                                                                                               // 2292\n                                                                                                                     // 2293\n  ArrayMapNode.prototype.iterate =                                                                                   // 2294\n      HashCollisionNode.prototype.iterate = function (fn, reverse) {                                                 // 2295\n        var entries = this.entries;                                                                                  // 2296\n        for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {                                      // 2297\n          if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {                                                 // 2298\n            return false;                                                                                            // 2299\n          }                                                                                                          // 2300\n        }                                                                                                            // 2301\n      }                                                                                                              // 2302\n                                                                                                                     // 2303\n  BitmapIndexedNode.prototype.iterate =                                                                              // 2304\n      HashArrayMapNode.prototype.iterate = function (fn, reverse) {                                                  // 2305\n        var nodes = this.nodes;                                                                                      // 2306\n        for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {                                        // 2307\n          var node = nodes[reverse ? maxIndex - ii : ii];                                                            // 2308\n          if (node && node.iterate(fn, reverse) === false) {                                                         // 2309\n            return false;                                                                                            // 2310\n          }                                                                                                          // 2311\n        }                                                                                                            // 2312\n      }                                                                                                              // 2313\n                                                                                                                     // 2314\n  ValueNode.prototype.iterate = function (fn, reverse) {                                                             // 2315\n    return fn(this.entry);                                                                                           // 2316\n  }                                                                                                                  // 2317\n                                                                                                                     // 2318\n  createClass(MapIterator, src_Iterator__Iterator);                                                                  // 2319\n                                                                                                                     // 2320\n  function MapIterator(map, type, reverse) {                                                                         // 2321\n    this._type = type;                                                                                               // 2322\n    this._reverse = reverse;                                                                                         // 2323\n    this._stack = map._root && mapIteratorFrame(map._root);                                                          // 2324\n  }                                                                                                                  // 2325\n                                                                                                                     // 2326\n  MapIterator.prototype.next = function() {                                                                          // 2327\n    var type = this._type;                                                                                           // 2328\n    var stack = this._stack;                                                                                         // 2329\n    while (stack) {                                                                                                  // 2330\n      var node = stack.node;                                                                                         // 2331\n      var index = stack.index++;                                                                                     // 2332\n      var maxIndex;                                                                                                  // 2333\n      if (node.entry) {                                                                                              // 2334\n        if (index === 0) {                                                                                           // 2335\n          return mapIteratorValue(type, node.entry);                                                                 // 2336\n        }                                                                                                            // 2337\n      } else if (node.entries) {                                                                                     // 2338\n        maxIndex = node.entries.length - 1;                                                                          // 2339\n        if (index <= maxIndex) {                                                                                     // 2340\n          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);                     // 2341\n        }                                                                                                            // 2342\n      } else {                                                                                                       // 2343\n        maxIndex = node.nodes.length - 1;                                                                            // 2344\n        if (index <= maxIndex) {                                                                                     // 2345\n          var subNode = node.nodes[this._reverse ? maxIndex - index : index];                                        // 2346\n          if (subNode) {                                                                                             // 2347\n            if (subNode.entry) {                                                                                     // 2348\n              return mapIteratorValue(type, subNode.entry);                                                          // 2349\n            }                                                                                                        // 2350\n            stack = this._stack = mapIteratorFrame(subNode, stack);                                                  // 2351\n          }                                                                                                          // 2352\n          continue;                                                                                                  // 2353\n        }                                                                                                            // 2354\n      }                                                                                                              // 2355\n      stack = this._stack = this._stack.__prev;                                                                      // 2356\n    }                                                                                                                // 2357\n    return iteratorDone();                                                                                           // 2358\n  };                                                                                                                 // 2359\n                                                                                                                     // 2360\n                                                                                                                     // 2361\n  function mapIteratorValue(type, entry) {                                                                           // 2362\n    return iteratorValue(type, entry[0], entry[1]);                                                                  // 2363\n  }                                                                                                                  // 2364\n                                                                                                                     // 2365\n  function mapIteratorFrame(node, prev) {                                                                            // 2366\n    return {                                                                                                         // 2367\n      node: node,                                                                                                    // 2368\n      index: 0,                                                                                                      // 2369\n      __prev: prev                                                                                                   // 2370\n    };                                                                                                               // 2371\n  }                                                                                                                  // 2372\n                                                                                                                     // 2373\n  function makeMap(size, root, ownerID, hash) {                                                                      // 2374\n    var map = Object.create(MapPrototype);                                                                           // 2375\n    map.size = size;                                                                                                 // 2376\n    map._root = root;                                                                                                // 2377\n    map.__ownerID = ownerID;                                                                                         // 2378\n    map.__hash = hash;                                                                                               // 2379\n    map.__altered = false;                                                                                           // 2380\n    return map;                                                                                                      // 2381\n  }                                                                                                                  // 2382\n                                                                                                                     // 2383\n  var EMPTY_MAP;                                                                                                     // 2384\n  function emptyMap() {                                                                                              // 2385\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));                                                                    // 2386\n  }                                                                                                                  // 2387\n                                                                                                                     // 2388\n  function updateMap(map, k, v) {                                                                                    // 2389\n    var newRoot;                                                                                                     // 2390\n    var newSize;                                                                                                     // 2391\n    if (!map._root) {                                                                                                // 2392\n      if (v === NOT_SET) {                                                                                           // 2393\n        return map;                                                                                                  // 2394\n      }                                                                                                              // 2395\n      newSize = 1;                                                                                                   // 2396\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);                                                           // 2397\n    } else {                                                                                                         // 2398\n      var didChangeSize = MakeRef(CHANGE_LENGTH);                                                                    // 2399\n      var didAlter = MakeRef(DID_ALTER);                                                                             // 2400\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);                   // 2401\n      if (!didAlter.value) {                                                                                         // 2402\n        return map;                                                                                                  // 2403\n      }                                                                                                              // 2404\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);                                       // 2405\n    }                                                                                                                // 2406\n    if (map.__ownerID) {                                                                                             // 2407\n      map.size = newSize;                                                                                            // 2408\n      map._root = newRoot;                                                                                           // 2409\n      map.__hash = undefined;                                                                                        // 2410\n      map.__altered = true;                                                                                          // 2411\n      return map;                                                                                                    // 2412\n    }                                                                                                                // 2413\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();                                                         // 2414\n  }                                                                                                                  // 2415\n                                                                                                                     // 2416\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {                          // 2417\n    if (!node) {                                                                                                     // 2418\n      if (value === NOT_SET) {                                                                                       // 2419\n        return node;                                                                                                 // 2420\n      }                                                                                                              // 2421\n      SetRef(didAlter);                                                                                              // 2422\n      SetRef(didChangeSize);                                                                                         // 2423\n      return new ValueNode(ownerID, keyHash, [key, value]);                                                          // 2424\n    }                                                                                                                // 2425\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);                                // 2426\n  }                                                                                                                  // 2427\n                                                                                                                     // 2428\n  function isLeafNode(node) {                                                                                        // 2429\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;                                 // 2430\n  }                                                                                                                  // 2431\n                                                                                                                     // 2432\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {                                                     // 2433\n    if (node.keyHash === keyHash) {                                                                                  // 2434\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);                                           // 2435\n    }                                                                                                                // 2436\n                                                                                                                     // 2437\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;                                         // 2438\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;                                                   // 2439\n                                                                                                                     // 2440\n    var newNode;                                                                                                     // 2441\n    var nodes = idx1 === idx2 ?                                                                                      // 2442\n        [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :                                              // 2443\n        ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);       // 2444\n                                                                                                                     // 2445\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);                                         // 2446\n  }                                                                                                                  // 2447\n                                                                                                                     // 2448\n  function createNodes(ownerID, entries, key, value) {                                                               // 2449\n    if (!ownerID) {                                                                                                  // 2450\n      ownerID = new OwnerID();                                                                                       // 2451\n    }                                                                                                                // 2452\n    var node = new ValueNode(ownerID, hash(key), [key, value]);                                                      // 2453\n    for (var ii = 0; ii < entries.length; ii++) {                                                                    // 2454\n      var entry = entries[ii];                                                                                       // 2455\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);                                                 // 2456\n    }                                                                                                                // 2457\n    return node;                                                                                                     // 2458\n  }                                                                                                                  // 2459\n                                                                                                                     // 2460\n  function packNodes(ownerID, nodes, count, excluding) {                                                             // 2461\n    var bitmap = 0;                                                                                                  // 2462\n    var packedII = 0;                                                                                                // 2463\n    var packedNodes = new Array(count);                                                                              // 2464\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {                                       // 2465\n      var node = nodes[ii];                                                                                          // 2466\n      if (node !== undefined && ii !== excluding) {                                                                  // 2467\n        bitmap |= bit;                                                                                               // 2468\n        packedNodes[packedII++] = node;                                                                              // 2469\n      }                                                                                                              // 2470\n    }                                                                                                                // 2471\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);                                                      // 2472\n  }                                                                                                                  // 2473\n                                                                                                                     // 2474\n  function expandNodes(ownerID, nodes, bitmap, including, node) {                                                    // 2475\n    var count = 0;                                                                                                   // 2476\n    var expandedNodes = new Array(SIZE);                                                                             // 2477\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {                                                            // 2478\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;                                                   // 2479\n    }                                                                                                                // 2480\n    expandedNodes[including] = node;                                                                                 // 2481\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);                                                  // 2482\n  }                                                                                                                  // 2483\n                                                                                                                     // 2484\n  function mergeIntoMapWith(map, merger, iterables) {                                                                // 2485\n    var iters = [];                                                                                                  // 2486\n    for (var ii = 0; ii < iterables.length; ii++) {                                                                  // 2487\n      var value = iterables[ii];                                                                                     // 2488\n      var iter = KeyedIterable(value);                                                                               // 2489\n      if (!isIterable(value)) {                                                                                      // 2490\n        iter = iter.map(function(v ) {return fromJS(v)});                                                            // 2491\n      }                                                                                                              // 2492\n      iters.push(iter);                                                                                              // 2493\n    }                                                                                                                // 2494\n    return mergeIntoCollectionWith(map, merger, iters);                                                              // 2495\n  }                                                                                                                  // 2496\n                                                                                                                     // 2497\n  function deepMerger(merger) {                                                                                      // 2498\n    return function(existing, value, key)                                                                            // 2499\n    {return existing && existing.mergeDeepWith && isIterable(value) ?                                                // 2500\n        existing.mergeDeepWith(merger, value) :                                                                      // 2501\n        merger ? merger(existing, value, key) : value};                                                              // 2502\n  }                                                                                                                  // 2503\n                                                                                                                     // 2504\n  function mergeIntoCollectionWith(collection, merger, iters) {                                                      // 2505\n    iters = iters.filter(function(x ) {return x.size !== 0});                                                        // 2506\n    if (iters.length === 0) {                                                                                        // 2507\n      return collection;                                                                                             // 2508\n    }                                                                                                                // 2509\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {                                      // 2510\n      return collection.constructor(iters[0]);                                                                       // 2511\n    }                                                                                                                // 2512\n    return collection.withMutations(function(collection ) {                                                          // 2513\n      var mergeIntoMap = merger ?                                                                                    // 2514\n          function(value, key)  {                                                                                    // 2515\n            collection.update(key, NOT_SET, function(existing )                                                      // 2516\n                {return existing === NOT_SET ? value : merger(existing, value, key)}                                 // 2517\n            );                                                                                                       // 2518\n          } :                                                                                                        // 2519\n          function(value, key)  {                                                                                    // 2520\n            collection.set(key, value);                                                                              // 2521\n          }                                                                                                          // 2522\n      for (var ii = 0; ii < iters.length; ii++) {                                                                    // 2523\n        iters[ii].forEach(mergeIntoMap);                                                                             // 2524\n      }                                                                                                              // 2525\n    });                                                                                                              // 2526\n  }                                                                                                                  // 2527\n                                                                                                                     // 2528\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {                                            // 2529\n    var isNotSet = existing === NOT_SET;                                                                             // 2530\n    var step = keyPathIter.next();                                                                                   // 2531\n    if (step.done) {                                                                                                 // 2532\n      var existingValue = isNotSet ? notSetValue : existing;                                                         // 2533\n      var newValue = updater(existingValue);                                                                         // 2534\n      return newValue === existingValue ? existing : newValue;                                                       // 2535\n    }                                                                                                                // 2536\n    invariant(                                                                                                       // 2537\n        isNotSet || (existing && existing.set),                                                                      // 2538\n        'invalid keyPath'                                                                                            // 2539\n    );                                                                                                               // 2540\n    var key = step.value;                                                                                            // 2541\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);                                              // 2542\n    var nextUpdated = updateInDeepMap(                                                                               // 2543\n        nextExisting,                                                                                                // 2544\n        keyPathIter,                                                                                                 // 2545\n        notSetValue,                                                                                                 // 2546\n        updater                                                                                                      // 2547\n    );                                                                                                               // 2548\n    return nextUpdated === nextExisting ? existing :                                                                 // 2549\n        nextUpdated === NOT_SET ? existing.remove(key) :                                                             // 2550\n            (isNotSet ? emptyMap() : existing).set(key, nextUpdated);                                                // 2551\n  }                                                                                                                  // 2552\n                                                                                                                     // 2553\n  function popCount(x) {                                                                                             // 2554\n    x = x - ((x >> 1) & 0x55555555);                                                                                 // 2555\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);                                                                  // 2556\n    x = (x + (x >> 4)) & 0x0f0f0f0f;                                                                                 // 2557\n    x = x + (x >> 8);                                                                                                // 2558\n    x = x + (x >> 16);                                                                                               // 2559\n    return x & 0x7f;                                                                                                 // 2560\n  }                                                                                                                  // 2561\n                                                                                                                     // 2562\n  function setIn(array, idx, val, canEdit) {                                                                         // 2563\n    var newArray = canEdit ? array : arrCopy(array);                                                                 // 2564\n    newArray[idx] = val;                                                                                             // 2565\n    return newArray;                                                                                                 // 2566\n  }                                                                                                                  // 2567\n                                                                                                                     // 2568\n  function spliceIn(array, idx, val, canEdit) {                                                                      // 2569\n    var newLen = array.length + 1;                                                                                   // 2570\n    if (canEdit && idx + 1 === newLen) {                                                                             // 2571\n      array[idx] = val;                                                                                              // 2572\n      return array;                                                                                                  // 2573\n    }                                                                                                                // 2574\n    var newArray = new Array(newLen);                                                                                // 2575\n    var after = 0;                                                                                                   // 2576\n    for (var ii = 0; ii < newLen; ii++) {                                                                            // 2577\n      if (ii === idx) {                                                                                              // 2578\n        newArray[ii] = val;                                                                                          // 2579\n        after = -1;                                                                                                  // 2580\n      } else {                                                                                                       // 2581\n        newArray[ii] = array[ii + after];                                                                            // 2582\n      }                                                                                                              // 2583\n    }                                                                                                                // 2584\n    return newArray;                                                                                                 // 2585\n  }                                                                                                                  // 2586\n                                                                                                                     // 2587\n  function spliceOut(array, idx, canEdit) {                                                                          // 2588\n    var newLen = array.length - 1;                                                                                   // 2589\n    if (canEdit && idx === newLen) {                                                                                 // 2590\n      array.pop();                                                                                                   // 2591\n      return array;                                                                                                  // 2592\n    }                                                                                                                // 2593\n    var newArray = new Array(newLen);                                                                                // 2594\n    var after = 0;                                                                                                   // 2595\n    for (var ii = 0; ii < newLen; ii++) {                                                                            // 2596\n      if (ii === idx) {                                                                                              // 2597\n        after = 1;                                                                                                   // 2598\n      }                                                                                                              // 2599\n      newArray[ii] = array[ii + after];                                                                              // 2600\n    }                                                                                                                // 2601\n    return newArray;                                                                                                 // 2602\n  }                                                                                                                  // 2603\n                                                                                                                     // 2604\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;                                                                                 // 2605\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;                                                                            // 2606\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;                                                                            // 2607\n                                                                                                                     // 2608\n  createClass(List, IndexedCollection);                                                                              // 2609\n                                                                                                                     // 2610\n  // @pragma Construction                                                                                            // 2611\n                                                                                                                     // 2612\n  function List(value) {                                                                                             // 2613\n    var empty = emptyList();                                                                                         // 2614\n    if (value === null || value === undefined) {                                                                     // 2615\n      return empty;                                                                                                  // 2616\n    }                                                                                                                // 2617\n    if (isList(value)) {                                                                                             // 2618\n      return value;                                                                                                  // 2619\n    }                                                                                                                // 2620\n    var iter = IndexedIterable(value);                                                                               // 2621\n    var size = iter.size;                                                                                            // 2622\n    if (size === 0) {                                                                                                // 2623\n      return empty;                                                                                                  // 2624\n    }                                                                                                                // 2625\n    assertNotInfinite(size);                                                                                         // 2626\n    if (size > 0 && size < SIZE) {                                                                                   // 2627\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));                                              // 2628\n    }                                                                                                                // 2629\n    return empty.withMutations(function(list ) {                                                                     // 2630\n      list.setSize(size);                                                                                            // 2631\n      iter.forEach(function(v, i)  {return list.set(i, v)});                                                         // 2632\n    });                                                                                                              // 2633\n  }                                                                                                                  // 2634\n                                                                                                                     // 2635\n  List.of = function(/*...values*/) {                                                                                // 2636\n    return this(arguments);                                                                                          // 2637\n  };                                                                                                                 // 2638\n                                                                                                                     // 2639\n  List.prototype.toString = function() {                                                                             // 2640\n    return this.__toString('List [', ']');                                                                           // 2641\n  };                                                                                                                 // 2642\n                                                                                                                     // 2643\n  // @pragma Access                                                                                                  // 2644\n                                                                                                                     // 2645\n  List.prototype.get = function(index, notSetValue) {                                                                // 2646\n    index = wrapIndex(this, index);                                                                                  // 2647\n    if (index >= 0 && index < this.size) {                                                                           // 2648\n      index += this._origin;                                                                                         // 2649\n      var node = listNodeFor(this, index);                                                                           // 2650\n      return node && node.array[index & MASK];                                                                       // 2651\n    }                                                                                                                // 2652\n    return notSetValue;                                                                                              // 2653\n  };                                                                                                                 // 2654\n                                                                                                                     // 2655\n  // @pragma Modification                                                                                            // 2656\n                                                                                                                     // 2657\n  List.prototype.set = function(index, value) {                                                                      // 2658\n    return updateList(this, index, value);                                                                           // 2659\n  };                                                                                                                 // 2660\n                                                                                                                     // 2661\n  List.prototype.remove = function(index) {                                                                          // 2662\n    return !this.has(index) ? this :                                                                                 // 2663\n        index === 0 ? this.shift() :                                                                                 // 2664\n            index === this.size - 1 ? this.pop() :                                                                   // 2665\n                this.splice(index, 1);                                                                               // 2666\n  };                                                                                                                 // 2667\n                                                                                                                     // 2668\n  List.prototype.clear = function() {                                                                                // 2669\n    if (this.size === 0) {                                                                                           // 2670\n      return this;                                                                                                   // 2671\n    }                                                                                                                // 2672\n    if (this.__ownerID) {                                                                                            // 2673\n      this.size = this._origin = this._capacity = 0;                                                                 // 2674\n      this._level = SHIFT;                                                                                           // 2675\n      this._root = this._tail = null;                                                                                // 2676\n      this.__hash = undefined;                                                                                       // 2677\n      this.__altered = true;                                                                                         // 2678\n      return this;                                                                                                   // 2679\n    }                                                                                                                // 2680\n    return emptyList();                                                                                              // 2681\n  };                                                                                                                 // 2682\n                                                                                                                     // 2683\n  List.prototype.push = function(/*...values*/) {                                                                    // 2684\n    var values = arguments;                                                                                          // 2685\n    var oldSize = this.size;                                                                                         // 2686\n    return this.withMutations(function(list ) {                                                                      // 2687\n      setListBounds(list, 0, oldSize + values.length);                                                               // 2688\n      for (var ii = 0; ii < values.length; ii++) {                                                                   // 2689\n        list.set(oldSize + ii, values[ii]);                                                                          // 2690\n      }                                                                                                              // 2691\n    });                                                                                                              // 2692\n  };                                                                                                                 // 2693\n                                                                                                                     // 2694\n  List.prototype.pop = function() {                                                                                  // 2695\n    return setListBounds(this, 0, -1);                                                                               // 2696\n  };                                                                                                                 // 2697\n                                                                                                                     // 2698\n  List.prototype.unshift = function(/*...values*/) {                                                                 // 2699\n    var values = arguments;                                                                                          // 2700\n    return this.withMutations(function(list ) {                                                                      // 2701\n      setListBounds(list, -values.length);                                                                           // 2702\n      for (var ii = 0; ii < values.length; ii++) {                                                                   // 2703\n        list.set(ii, values[ii]);                                                                                    // 2704\n      }                                                                                                              // 2705\n    });                                                                                                              // 2706\n  };                                                                                                                 // 2707\n                                                                                                                     // 2708\n  List.prototype.shift = function() {                                                                                // 2709\n    return setListBounds(this, 1);                                                                                   // 2710\n  };                                                                                                                 // 2711\n                                                                                                                     // 2712\n  // @pragma Composition                                                                                             // 2713\n                                                                                                                     // 2714\n  List.prototype.merge = function(/*...iters*/) {                                                                    // 2715\n    return mergeIntoListWith(this, undefined, arguments);                                                            // 2716\n  };                                                                                                                 // 2717\n                                                                                                                     // 2718\n  List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);                               // 2719\n    return mergeIntoListWith(this, merger, iters);                                                                   // 2720\n  };                                                                                                                 // 2721\n                                                                                                                     // 2722\n  List.prototype.mergeDeep = function(/*...iters*/) {                                                                // 2723\n    return mergeIntoListWith(this, deepMerger(undefined), arguments);                                                // 2724\n  };                                                                                                                 // 2725\n                                                                                                                     // 2726\n  List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);                           // 2727\n    return mergeIntoListWith(this, deepMerger(merger), iters);                                                       // 2728\n  };                                                                                                                 // 2729\n                                                                                                                     // 2730\n  List.prototype.setSize = function(size) {                                                                          // 2731\n    return setListBounds(this, 0, size);                                                                             // 2732\n  };                                                                                                                 // 2733\n                                                                                                                     // 2734\n  // @pragma Iteration                                                                                               // 2735\n                                                                                                                     // 2736\n  List.prototype.slice = function(begin, end) {                                                                      // 2737\n    var size = this.size;                                                                                            // 2738\n    if (wholeSlice(begin, end, size)) {                                                                              // 2739\n      return this;                                                                                                   // 2740\n    }                                                                                                                // 2741\n    return setListBounds(                                                                                            // 2742\n        this,                                                                                                        // 2743\n        resolveBegin(begin, size),                                                                                   // 2744\n        resolveEnd(end, size)                                                                                        // 2745\n    );                                                                                                               // 2746\n  };                                                                                                                 // 2747\n                                                                                                                     // 2748\n  List.prototype.__iterator = function(type, reverse) {                                                              // 2749\n    var index = 0;                                                                                                   // 2750\n    var values = iterateList(this, reverse);                                                                         // 2751\n    return new src_Iterator__Iterator(function()  {                                                                  // 2752\n      var value = values();                                                                                          // 2753\n      return value === DONE ?                                                                                        // 2754\n          iteratorDone() :                                                                                           // 2755\n          iteratorValue(type, index++, value);                                                                       // 2756\n    });                                                                                                              // 2757\n  };                                                                                                                 // 2758\n                                                                                                                     // 2759\n  List.prototype.__iterate = function(fn, reverse) {                                                                 // 2760\n    var index = 0;                                                                                                   // 2761\n    var values = iterateList(this, reverse);                                                                         // 2762\n    var value;                                                                                                       // 2763\n    while ((value = values()) !== DONE) {                                                                            // 2764\n      if (fn(value, index++, this) === false) {                                                                      // 2765\n        break;                                                                                                       // 2766\n      }                                                                                                              // 2767\n    }                                                                                                                // 2768\n    return index;                                                                                                    // 2769\n  };                                                                                                                 // 2770\n                                                                                                                     // 2771\n  List.prototype.__ensureOwner = function(ownerID) {                                                                 // 2772\n    if (ownerID === this.__ownerID) {                                                                                // 2773\n      return this;                                                                                                   // 2774\n    }                                                                                                                // 2775\n    if (!ownerID) {                                                                                                  // 2776\n      this.__ownerID = ownerID;                                                                                      // 2777\n      return this;                                                                                                   // 2778\n    }                                                                                                                // 2779\n    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);        // 2780\n  };                                                                                                                 // 2781\n                                                                                                                     // 2782\n                                                                                                                     // 2783\n  function isList(maybeList) {                                                                                       // 2784\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);                                                             // 2785\n  }                                                                                                                  // 2786\n                                                                                                                     // 2787\n  List.isList = isList;                                                                                              // 2788\n                                                                                                                     // 2789\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';                                                                   // 2790\n                                                                                                                     // 2791\n  var ListPrototype = List.prototype;                                                                                // 2792\n  ListPrototype[IS_LIST_SENTINEL] = true;                                                                            // 2793\n  ListPrototype[DELETE] = ListPrototype.remove;                                                                      // 2794\n  ListPrototype.setIn = MapPrototype.setIn;                                                                          // 2795\n  ListPrototype.deleteIn =                                                                                           // 2796\n      ListPrototype.removeIn = MapPrototype.removeIn;                                                                // 2797\n  ListPrototype.update = MapPrototype.update;                                                                        // 2798\n  ListPrototype.updateIn = MapPrototype.updateIn;                                                                    // 2799\n  ListPrototype.mergeIn = MapPrototype.mergeIn;                                                                      // 2800\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;                                                              // 2801\n  ListPrototype.withMutations = MapPrototype.withMutations;                                                          // 2802\n  ListPrototype.asMutable = MapPrototype.asMutable;                                                                  // 2803\n  ListPrototype.asImmutable = MapPrototype.asImmutable;                                                              // 2804\n  ListPrototype.wasAltered = MapPrototype.wasAltered;                                                                // 2805\n                                                                                                                     // 2806\n                                                                                                                     // 2807\n                                                                                                                     // 2808\n  function VNode(array, ownerID) {                                                                                   // 2809\n    this.array = array;                                                                                              // 2810\n    this.ownerID = ownerID;                                                                                          // 2811\n  }                                                                                                                  // 2812\n                                                                                                                     // 2813\n  // TODO: seems like these methods are very similar                                                                 // 2814\n                                                                                                                     // 2815\n  VNode.prototype.removeBefore = function(ownerID, level, index) {                                                   // 2816\n    if (index === level ? 1 << level : 0 || this.array.length === 0) {                                               // 2817\n      return this;                                                                                                   // 2818\n    }                                                                                                                // 2819\n    var originIndex = (index >>> level) & MASK;                                                                      // 2820\n    if (originIndex >= this.array.length) {                                                                          // 2821\n      return new VNode([], ownerID);                                                                                 // 2822\n    }                                                                                                                // 2823\n    var removingFirst = originIndex === 0;                                                                           // 2824\n    var newChild;                                                                                                    // 2825\n    if (level > 0) {                                                                                                 // 2826\n      var oldChild = this.array[originIndex];                                                                        // 2827\n      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);                                   // 2828\n      if (newChild === oldChild && removingFirst) {                                                                  // 2829\n        return this;                                                                                                 // 2830\n      }                                                                                                              // 2831\n    }                                                                                                                // 2832\n    if (removingFirst && !newChild) {                                                                                // 2833\n      return this;                                                                                                   // 2834\n    }                                                                                                                // 2835\n    var editable = editableVNode(this, ownerID);                                                                     // 2836\n    if (!removingFirst) {                                                                                            // 2837\n      for (var ii = 0; ii < originIndex; ii++) {                                                                     // 2838\n        editable.array[ii] = undefined;                                                                              // 2839\n      }                                                                                                              // 2840\n    }                                                                                                                // 2841\n    if (newChild) {                                                                                                  // 2842\n      editable.array[originIndex] = newChild;                                                                        // 2843\n    }                                                                                                                // 2844\n    return editable;                                                                                                 // 2845\n  };                                                                                                                 // 2846\n                                                                                                                     // 2847\n  VNode.prototype.removeAfter = function(ownerID, level, index) {                                                    // 2848\n    if (index === (level ? 1 << level : 0) || this.array.length === 0) {                                             // 2849\n      return this;                                                                                                   // 2850\n    }                                                                                                                // 2851\n    var sizeIndex = ((index - 1) >>> level) & MASK;                                                                  // 2852\n    if (sizeIndex >= this.array.length) {                                                                            // 2853\n      return this;                                                                                                   // 2854\n    }                                                                                                                // 2855\n                                                                                                                     // 2856\n    var newChild;                                                                                                    // 2857\n    if (level > 0) {                                                                                                 // 2858\n      var oldChild = this.array[sizeIndex];                                                                          // 2859\n      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);                                    // 2860\n      if (newChild === oldChild && sizeIndex === this.array.length - 1) {                                            // 2861\n        return this;                                                                                                 // 2862\n      }                                                                                                              // 2863\n    }                                                                                                                // 2864\n                                                                                                                     // 2865\n    var editable = editableVNode(this, ownerID);                                                                     // 2866\n    editable.array.splice(sizeIndex + 1);                                                                            // 2867\n    if (newChild) {                                                                                                  // 2868\n      editable.array[sizeIndex] = newChild;                                                                          // 2869\n    }                                                                                                                // 2870\n    return editable;                                                                                                 // 2871\n  };                                                                                                                 // 2872\n                                                                                                                     // 2873\n                                                                                                                     // 2874\n                                                                                                                     // 2875\n  var DONE = {};                                                                                                     // 2876\n                                                                                                                     // 2877\n  function iterateList(list, reverse) {                                                                              // 2878\n    var left = list._origin;                                                                                         // 2879\n    var right = list._capacity;                                                                                      // 2880\n    var tailPos = getTailOffset(right);                                                                              // 2881\n    var tail = list._tail;                                                                                           // 2882\n                                                                                                                     // 2883\n    return iterateNodeOrLeaf(list._root, list._level, 0);                                                            // 2884\n                                                                                                                     // 2885\n    function iterateNodeOrLeaf(node, level, offset) {                                                                // 2886\n      return level === 0 ?                                                                                           // 2887\n          iterateLeaf(node, offset) :                                                                                // 2888\n          iterateNode(node, level, offset);                                                                          // 2889\n    }                                                                                                                // 2890\n                                                                                                                     // 2891\n    function iterateLeaf(node, offset) {                                                                             // 2892\n      var array = offset === tailPos ? tail && tail.array : node && node.array;                                      // 2893\n      var from = offset > left ? 0 : left - offset;                                                                  // 2894\n      var to = right - offset;                                                                                       // 2895\n      if (to > SIZE) {                                                                                               // 2896\n        to = SIZE;                                                                                                   // 2897\n      }                                                                                                              // 2898\n      return function()  {                                                                                           // 2899\n        if (from === to) {                                                                                           // 2900\n          return DONE;                                                                                               // 2901\n        }                                                                                                            // 2902\n        var idx = reverse ? --to : from++;                                                                           // 2903\n        return array && array[idx];                                                                                  // 2904\n      };                                                                                                             // 2905\n    }                                                                                                                // 2906\n                                                                                                                     // 2907\n    function iterateNode(node, level, offset) {                                                                      // 2908\n      var values;                                                                                                    // 2909\n      var array = node && node.array;                                                                                // 2910\n      var from = offset > left ? 0 : (left - offset) >> level;                                                       // 2911\n      var to = ((right - offset) >> level) + 1;                                                                      // 2912\n      if (to > SIZE) {                                                                                               // 2913\n        to = SIZE;                                                                                                   // 2914\n      }                                                                                                              // 2915\n      return function()  {                                                                                           // 2916\n        do {                                                                                                         // 2917\n          if (values) {                                                                                              // 2918\n            var value = values();                                                                                    // 2919\n            if (value !== DONE) {                                                                                    // 2920\n              return value;                                                                                          // 2921\n            }                                                                                                        // 2922\n            values = null;                                                                                           // 2923\n          }                                                                                                          // 2924\n          if (from === to) {                                                                                         // 2925\n            return DONE;                                                                                             // 2926\n          }                                                                                                          // 2927\n          var idx = reverse ? --to : from++;                                                                         // 2928\n          values = iterateNodeOrLeaf(                                                                                // 2929\n              array && array[idx], level - SHIFT, offset + (idx << level)                                            // 2930\n          );                                                                                                         // 2931\n        } while (true);                                                                                              // 2932\n      };                                                                                                             // 2933\n    }                                                                                                                // 2934\n  }                                                                                                                  // 2935\n                                                                                                                     // 2936\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {                                            // 2937\n    var list = Object.create(ListPrototype);                                                                         // 2938\n    list.size = capacity - origin;                                                                                   // 2939\n    list._origin = origin;                                                                                           // 2940\n    list._capacity = capacity;                                                                                       // 2941\n    list._level = level;                                                                                             // 2942\n    list._root = root;                                                                                               // 2943\n    list._tail = tail;                                                                                               // 2944\n    list.__ownerID = ownerID;                                                                                        // 2945\n    list.__hash = hash;                                                                                              // 2946\n    list.__altered = false;                                                                                          // 2947\n    return list;                                                                                                     // 2948\n  }                                                                                                                  // 2949\n                                                                                                                     // 2950\n  var EMPTY_LIST;                                                                                                    // 2951\n  function emptyList() {                                                                                             // 2952\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));                                                       // 2953\n  }                                                                                                                  // 2954\n                                                                                                                     // 2955\n  function updateList(list, index, value) {                                                                          // 2956\n    index = wrapIndex(list, index);                                                                                  // 2957\n                                                                                                                     // 2958\n    if (index !== index) {                                                                                           // 2959\n      return list;                                                                                                   // 2960\n    }                                                                                                                // 2961\n                                                                                                                     // 2962\n    if (index >= list.size || index < 0) {                                                                           // 2963\n      return list.withMutations(function(list ) {                                                                    // 2964\n        index < 0 ?                                                                                                  // 2965\n            setListBounds(list, index).set(0, value) :                                                               // 2966\n            setListBounds(list, 0, index + 1).set(index, value)                                                      // 2967\n      });                                                                                                            // 2968\n    }                                                                                                                // 2969\n                                                                                                                     // 2970\n    index += list._origin;                                                                                           // 2971\n                                                                                                                     // 2972\n    var newTail = list._tail;                                                                                        // 2973\n    var newRoot = list._root;                                                                                        // 2974\n    var didAlter = MakeRef(DID_ALTER);                                                                               // 2975\n    if (index >= getTailOffset(list._capacity)) {                                                                    // 2976\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);                                     // 2977\n    } else {                                                                                                         // 2978\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);                           // 2979\n    }                                                                                                                // 2980\n                                                                                                                     // 2981\n    if (!didAlter.value) {                                                                                           // 2982\n      return list;                                                                                                   // 2983\n    }                                                                                                                // 2984\n                                                                                                                     // 2985\n    if (list.__ownerID) {                                                                                            // 2986\n      list._root = newRoot;                                                                                          // 2987\n      list._tail = newTail;                                                                                          // 2988\n      list.__hash = undefined;                                                                                       // 2989\n      list.__altered = true;                                                                                         // 2990\n      return list;                                                                                                   // 2991\n    }                                                                                                                // 2992\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);                                    // 2993\n  }                                                                                                                  // 2994\n                                                                                                                     // 2995\n  function updateVNode(node, ownerID, level, index, value, didAlter) {                                               // 2996\n    var idx = (index >>> level) & MASK;                                                                              // 2997\n    var nodeHas = node && idx < node.array.length;                                                                   // 2998\n    if (!nodeHas && value === undefined) {                                                                           // 2999\n      return node;                                                                                                   // 3000\n    }                                                                                                                // 3001\n                                                                                                                     // 3002\n    var newNode;                                                                                                     // 3003\n                                                                                                                     // 3004\n    if (level > 0) {                                                                                                 // 3005\n      var lowerNode = node && node.array[idx];                                                                       // 3006\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);                     // 3007\n      if (newLowerNode === lowerNode) {                                                                              // 3008\n        return node;                                                                                                 // 3009\n      }                                                                                                              // 3010\n      newNode = editableVNode(node, ownerID);                                                                        // 3011\n      newNode.array[idx] = newLowerNode;                                                                             // 3012\n      return newNode;                                                                                                // 3013\n    }                                                                                                                // 3014\n                                                                                                                     // 3015\n    if (nodeHas && node.array[idx] === value) {                                                                      // 3016\n      return node;                                                                                                   // 3017\n    }                                                                                                                // 3018\n                                                                                                                     // 3019\n    SetRef(didAlter);                                                                                                // 3020\n                                                                                                                     // 3021\n    newNode = editableVNode(node, ownerID);                                                                          // 3022\n    if (value === undefined && idx === newNode.array.length - 1) {                                                   // 3023\n      newNode.array.pop();                                                                                           // 3024\n    } else {                                                                                                         // 3025\n      newNode.array[idx] = value;                                                                                    // 3026\n    }                                                                                                                // 3027\n    return newNode;                                                                                                  // 3028\n  }                                                                                                                  // 3029\n                                                                                                                     // 3030\n  function editableVNode(node, ownerID) {                                                                            // 3031\n    if (ownerID && node && ownerID === node.ownerID) {                                                               // 3032\n      return node;                                                                                                   // 3033\n    }                                                                                                                // 3034\n    return new VNode(node ? node.array.slice() : [], ownerID);                                                       // 3035\n  }                                                                                                                  // 3036\n                                                                                                                     // 3037\n  function listNodeFor(list, rawIndex) {                                                                             // 3038\n    if (rawIndex >= getTailOffset(list._capacity)) {                                                                 // 3039\n      return list._tail;                                                                                             // 3040\n    }                                                                                                                // 3041\n    if (rawIndex < 1 << (list._level + SHIFT)) {                                                                     // 3042\n      var node = list._root;                                                                                         // 3043\n      var level = list._level;                                                                                       // 3044\n      while (node && level > 0) {                                                                                    // 3045\n        node = node.array[(rawIndex >>> level) & MASK];                                                              // 3046\n        level -= SHIFT;                                                                                              // 3047\n      }                                                                                                              // 3048\n      return node;                                                                                                   // 3049\n    }                                                                                                                // 3050\n  }                                                                                                                  // 3051\n                                                                                                                     // 3052\n  function setListBounds(list, begin, end) {                                                                         // 3053\n    // Sanitize begin & end using this shorthand for ToInt32(argument)                                               // 3054\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32                                                   // 3055\n    if (begin !== undefined) {                                                                                       // 3056\n      begin = begin | 0;                                                                                             // 3057\n    }                                                                                                                // 3058\n    if (end !== undefined) {                                                                                         // 3059\n      end = end | 0;                                                                                                 // 3060\n    }                                                                                                                // 3061\n    var owner = list.__ownerID || new OwnerID();                                                                     // 3062\n    var oldOrigin = list._origin;                                                                                    // 3063\n    var oldCapacity = list._capacity;                                                                                // 3064\n    var newOrigin = oldOrigin + begin;                                                                               // 3065\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;               // 3066\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {                                                    // 3067\n      return list;                                                                                                   // 3068\n    }                                                                                                                // 3069\n                                                                                                                     // 3070\n    // If it's going to end after it starts, it's empty.                                                             // 3071\n    if (newOrigin >= newCapacity) {                                                                                  // 3072\n      return list.clear();                                                                                           // 3073\n    }                                                                                                                // 3074\n                                                                                                                     // 3075\n    var newLevel = list._level;                                                                                      // 3076\n    var newRoot = list._root;                                                                                        // 3077\n                                                                                                                     // 3078\n    // New origin might need creating a higher root.                                                                 // 3079\n    var offsetShift = 0;                                                                                             // 3080\n    while (newOrigin + offsetShift < 0) {                                                                            // 3081\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);                       // 3082\n      newLevel += SHIFT;                                                                                             // 3083\n      offsetShift += 1 << newLevel;                                                                                  // 3084\n    }                                                                                                                // 3085\n    if (offsetShift) {                                                                                               // 3086\n      newOrigin += offsetShift;                                                                                      // 3087\n      oldOrigin += offsetShift;                                                                                      // 3088\n      newCapacity += offsetShift;                                                                                    // 3089\n      oldCapacity += offsetShift;                                                                                    // 3090\n    }                                                                                                                // 3091\n                                                                                                                     // 3092\n    var oldTailOffset = getTailOffset(oldCapacity);                                                                  // 3093\n    var newTailOffset = getTailOffset(newCapacity);                                                                  // 3094\n                                                                                                                     // 3095\n    // New size might need creating a higher root.                                                                   // 3096\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {                                                               // 3097\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);                                  // 3098\n      newLevel += SHIFT;                                                                                             // 3099\n    }                                                                                                                // 3100\n                                                                                                                     // 3101\n    // Locate or create the new tail.                                                                                // 3102\n    var oldTail = list._tail;                                                                                        // 3103\n    var newTail = newTailOffset < oldTailOffset ?                                                                    // 3104\n        listNodeFor(list, newCapacity - 1) :                                                                         // 3105\n        newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;                                              // 3106\n                                                                                                                     // 3107\n    // Merge Tail into tree.                                                                                         // 3108\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {               // 3109\n      newRoot = editableVNode(newRoot, owner);                                                                       // 3110\n      var node = newRoot;                                                                                            // 3111\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {                                                    // 3112\n        var idx = (oldTailOffset >>> level) & MASK;                                                                  // 3113\n        node = node.array[idx] = editableVNode(node.array[idx], owner);                                              // 3114\n      }                                                                                                              // 3115\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;                                                        // 3116\n    }                                                                                                                // 3117\n                                                                                                                     // 3118\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.                                  // 3119\n    if (newCapacity < oldCapacity) {                                                                                 // 3120\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);                                               // 3121\n    }                                                                                                                // 3122\n                                                                                                                     // 3123\n    // If the new origin is within the tail, then we do not need a root.                                             // 3124\n    if (newOrigin >= newTailOffset) {                                                                                // 3125\n      newOrigin -= newTailOffset;                                                                                    // 3126\n      newCapacity -= newTailOffset;                                                                                  // 3127\n      newLevel = SHIFT;                                                                                              // 3128\n      newRoot = null;                                                                                                // 3129\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);                                                // 3130\n                                                                                                                     // 3131\n      // Otherwise, if the root has been trimmed, garbage collect.                                                   // 3132\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {                                             // 3133\n      offsetShift = 0;                                                                                               // 3134\n                                                                                                                     // 3135\n      // Identify the new top root node of the subtree of the old root.                                              // 3136\n      while (newRoot) {                                                                                              // 3137\n        var beginIndex = (newOrigin >>> newLevel) & MASK;                                                            // 3138\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {                                                    // 3139\n          break;                                                                                                     // 3140\n        }                                                                                                            // 3141\n        if (beginIndex) {                                                                                            // 3142\n          offsetShift += (1 << newLevel) * beginIndex;                                                               // 3143\n        }                                                                                                            // 3144\n        newLevel -= SHIFT;                                                                                           // 3145\n        newRoot = newRoot.array[beginIndex];                                                                         // 3146\n      }                                                                                                              // 3147\n                                                                                                                     // 3148\n      // Trim the new sides of the new root.                                                                         // 3149\n      if (newRoot && newOrigin > oldOrigin) {                                                                        // 3150\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);                                    // 3151\n      }                                                                                                              // 3152\n      if (newRoot && newTailOffset < oldTailOffset) {                                                                // 3153\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);                                 // 3154\n      }                                                                                                              // 3155\n      if (offsetShift) {                                                                                             // 3156\n        newOrigin -= offsetShift;                                                                                    // 3157\n        newCapacity -= offsetShift;                                                                                  // 3158\n      }                                                                                                              // 3159\n    }                                                                                                                // 3160\n                                                                                                                     // 3161\n    if (list.__ownerID) {                                                                                            // 3162\n      list.size = newCapacity - newOrigin;                                                                           // 3163\n      list._origin = newOrigin;                                                                                      // 3164\n      list._capacity = newCapacity;                                                                                  // 3165\n      list._level = newLevel;                                                                                        // 3166\n      list._root = newRoot;                                                                                          // 3167\n      list._tail = newTail;                                                                                          // 3168\n      list.__hash = undefined;                                                                                       // 3169\n      list.__altered = true;                                                                                         // 3170\n      return list;                                                                                                   // 3171\n    }                                                                                                                // 3172\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);                                             // 3173\n  }                                                                                                                  // 3174\n                                                                                                                     // 3175\n  function mergeIntoListWith(list, merger, iterables) {                                                              // 3176\n    var iters = [];                                                                                                  // 3177\n    var maxSize = 0;                                                                                                 // 3178\n    for (var ii = 0; ii < iterables.length; ii++) {                                                                  // 3179\n      var value = iterables[ii];                                                                                     // 3180\n      var iter = IndexedIterable(value);                                                                             // 3181\n      if (iter.size > maxSize) {                                                                                     // 3182\n        maxSize = iter.size;                                                                                         // 3183\n      }                                                                                                              // 3184\n      if (!isIterable(value)) {                                                                                      // 3185\n        iter = iter.map(function(v ) {return fromJS(v)});                                                            // 3186\n      }                                                                                                              // 3187\n      iters.push(iter);                                                                                              // 3188\n    }                                                                                                                // 3189\n    if (maxSize > list.size) {                                                                                       // 3190\n      list = list.setSize(maxSize);                                                                                  // 3191\n    }                                                                                                                // 3192\n    return mergeIntoCollectionWith(list, merger, iters);                                                             // 3193\n  }                                                                                                                  // 3194\n                                                                                                                     // 3195\n  function getTailOffset(size) {                                                                                     // 3196\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);                                                      // 3197\n  }                                                                                                                  // 3198\n                                                                                                                     // 3199\n  createClass(OrderedMap, src_Map__Map);                                                                             // 3200\n                                                                                                                     // 3201\n  // @pragma Construction                                                                                            // 3202\n                                                                                                                     // 3203\n  function OrderedMap(value) {                                                                                       // 3204\n    return value === null || value === undefined ? emptyOrderedMap() :                                               // 3205\n        isOrderedMap(value) ? value :                                                                                // 3206\n            emptyOrderedMap().withMutations(function(map ) {                                                         // 3207\n              var iter = KeyedIterable(value);                                                                       // 3208\n              assertNotInfinite(iter.size);                                                                          // 3209\n              iter.forEach(function(v, k)  {return map.set(k, v)});                                                  // 3210\n            });                                                                                                      // 3211\n  }                                                                                                                  // 3212\n                                                                                                                     // 3213\n  OrderedMap.of = function(/*...values*/) {                                                                          // 3214\n    return this(arguments);                                                                                          // 3215\n  };                                                                                                                 // 3216\n                                                                                                                     // 3217\n  OrderedMap.prototype.toString = function() {                                                                       // 3218\n    return this.__toString('OrderedMap {', '}');                                                                     // 3219\n  };                                                                                                                 // 3220\n                                                                                                                     // 3221\n  // @pragma Access                                                                                                  // 3222\n                                                                                                                     // 3223\n  OrderedMap.prototype.get = function(k, notSetValue) {                                                              // 3224\n    var index = this._map.get(k);                                                                                    // 3225\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;                                             // 3226\n  };                                                                                                                 // 3227\n                                                                                                                     // 3228\n  // @pragma Modification                                                                                            // 3229\n                                                                                                                     // 3230\n  OrderedMap.prototype.clear = function() {                                                                          // 3231\n    if (this.size === 0) {                                                                                           // 3232\n      return this;                                                                                                   // 3233\n    }                                                                                                                // 3234\n    if (this.__ownerID) {                                                                                            // 3235\n      this.size = 0;                                                                                                 // 3236\n      this._map.clear();                                                                                             // 3237\n      this._list.clear();                                                                                            // 3238\n      return this;                                                                                                   // 3239\n    }                                                                                                                // 3240\n    return emptyOrderedMap();                                                                                        // 3241\n  };                                                                                                                 // 3242\n                                                                                                                     // 3243\n  OrderedMap.prototype.set = function(k, v) {                                                                        // 3244\n    return updateOrderedMap(this, k, v);                                                                             // 3245\n  };                                                                                                                 // 3246\n                                                                                                                     // 3247\n  OrderedMap.prototype.remove = function(k) {                                                                        // 3248\n    return updateOrderedMap(this, k, NOT_SET);                                                                       // 3249\n  };                                                                                                                 // 3250\n                                                                                                                     // 3251\n  OrderedMap.prototype.wasAltered = function() {                                                                     // 3252\n    return this._map.wasAltered() || this._list.wasAltered();                                                        // 3253\n  };                                                                                                                 // 3254\n                                                                                                                     // 3255\n  OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                         // 3256\n    return this._list.__iterate(                                                                                     // 3257\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},                                           // 3258\n        reverse                                                                                                      // 3259\n    );                                                                                                               // 3260\n  };                                                                                                                 // 3261\n                                                                                                                     // 3262\n  OrderedMap.prototype.__iterator = function(type, reverse) {                                                        // 3263\n    return this._list.fromEntrySeq().__iterator(type, reverse);                                                      // 3264\n  };                                                                                                                 // 3265\n                                                                                                                     // 3266\n  OrderedMap.prototype.__ensureOwner = function(ownerID) {                                                           // 3267\n    if (ownerID === this.__ownerID) {                                                                                // 3268\n      return this;                                                                                                   // 3269\n    }                                                                                                                // 3270\n    var newMap = this._map.__ensureOwner(ownerID);                                                                   // 3271\n    var newList = this._list.__ensureOwner(ownerID);                                                                 // 3272\n    if (!ownerID) {                                                                                                  // 3273\n      this.__ownerID = ownerID;                                                                                      // 3274\n      this._map = newMap;                                                                                            // 3275\n      this._list = newList;                                                                                          // 3276\n      return this;                                                                                                   // 3277\n    }                                                                                                                // 3278\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);                                                    // 3279\n  };                                                                                                                 // 3280\n                                                                                                                     // 3281\n                                                                                                                     // 3282\n  function isOrderedMap(maybeOrderedMap) {                                                                           // 3283\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);                                                     // 3284\n  }                                                                                                                  // 3285\n                                                                                                                     // 3286\n  OrderedMap.isOrderedMap = isOrderedMap;                                                                            // 3287\n                                                                                                                     // 3288\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;                                                                  // 3289\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;                                                        // 3290\n                                                                                                                     // 3291\n                                                                                                                     // 3292\n                                                                                                                     // 3293\n  function makeOrderedMap(map, list, ownerID, hash) {                                                                // 3294\n    var omap = Object.create(OrderedMap.prototype);                                                                  // 3295\n    omap.size = map ? map.size : 0;                                                                                  // 3296\n    omap._map = map;                                                                                                 // 3297\n    omap._list = list;                                                                                               // 3298\n    omap.__ownerID = ownerID;                                                                                        // 3299\n    omap.__hash = hash;                                                                                              // 3300\n    return omap;                                                                                                     // 3301\n  }                                                                                                                  // 3302\n                                                                                                                     // 3303\n  var EMPTY_ORDERED_MAP;                                                                                             // 3304\n  function emptyOrderedMap() {                                                                                       // 3305\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));                       // 3306\n  }                                                                                                                  // 3307\n                                                                                                                     // 3308\n  function updateOrderedMap(omap, k, v) {                                                                            // 3309\n    var map = omap._map;                                                                                             // 3310\n    var list = omap._list;                                                                                           // 3311\n    var i = map.get(k);                                                                                              // 3312\n    var has = i !== undefined;                                                                                       // 3313\n    var newMap;                                                                                                      // 3314\n    var newList;                                                                                                     // 3315\n    if (v === NOT_SET) { // removed                                                                                  // 3316\n      if (!has) {                                                                                                    // 3317\n        return omap;                                                                                                 // 3318\n      }                                                                                                              // 3319\n      if (list.size >= SIZE && list.size >= map.size * 2) {                                                          // 3320\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});                      // 3321\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();                        // 3322\n        if (omap.__ownerID) {                                                                                        // 3323\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;                                                     // 3324\n        }                                                                                                            // 3325\n      } else {                                                                                                       // 3326\n        newMap = map.remove(k);                                                                                      // 3327\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);                                         // 3328\n      }                                                                                                              // 3329\n    } else {                                                                                                         // 3330\n      if (has) {                                                                                                     // 3331\n        if (v === list.get(i)[1]) {                                                                                  // 3332\n          return omap;                                                                                               // 3333\n        }                                                                                                            // 3334\n        newMap = map;                                                                                                // 3335\n        newList = list.set(i, [k, v]);                                                                               // 3336\n      } else {                                                                                                       // 3337\n        newMap = map.set(k, list.size);                                                                              // 3338\n        newList = list.set(list.size, [k, v]);                                                                       // 3339\n      }                                                                                                              // 3340\n    }                                                                                                                // 3341\n    if (omap.__ownerID) {                                                                                            // 3342\n      omap.size = newMap.size;                                                                                       // 3343\n      omap._map = newMap;                                                                                            // 3344\n      omap._list = newList;                                                                                          // 3345\n      omap.__hash = undefined;                                                                                       // 3346\n      return omap;                                                                                                   // 3347\n    }                                                                                                                // 3348\n    return makeOrderedMap(newMap, newList);                                                                          // 3349\n  }                                                                                                                  // 3350\n                                                                                                                     // 3351\n  createClass(Stack, IndexedCollection);                                                                             // 3352\n                                                                                                                     // 3353\n  // @pragma Construction                                                                                            // 3354\n                                                                                                                     // 3355\n  function Stack(value) {                                                                                            // 3356\n    return value === null || value === undefined ? emptyStack() :                                                    // 3357\n        isStack(value) ? value :                                                                                     // 3358\n            emptyStack().unshiftAll(value);                                                                          // 3359\n  }                                                                                                                  // 3360\n                                                                                                                     // 3361\n  Stack.of = function(/*...values*/) {                                                                               // 3362\n    return this(arguments);                                                                                          // 3363\n  };                                                                                                                 // 3364\n                                                                                                                     // 3365\n  Stack.prototype.toString = function() {                                                                            // 3366\n    return this.__toString('Stack [', ']');                                                                          // 3367\n  };                                                                                                                 // 3368\n                                                                                                                     // 3369\n  // @pragma Access                                                                                                  // 3370\n                                                                                                                     // 3371\n  Stack.prototype.get = function(index, notSetValue) {                                                               // 3372\n    var head = this._head;                                                                                           // 3373\n    index = wrapIndex(this, index);                                                                                  // 3374\n    while (head && index--) {                                                                                        // 3375\n      head = head.next;                                                                                              // 3376\n    }                                                                                                                // 3377\n    return head ? head.value : notSetValue;                                                                          // 3378\n  };                                                                                                                 // 3379\n                                                                                                                     // 3380\n  Stack.prototype.peek = function() {                                                                                // 3381\n    return this._head && this._head.value;                                                                           // 3382\n  };                                                                                                                 // 3383\n                                                                                                                     // 3384\n  // @pragma Modification                                                                                            // 3385\n                                                                                                                     // 3386\n  Stack.prototype.push = function(/*...values*/) {                                                                   // 3387\n    if (arguments.length === 0) {                                                                                    // 3388\n      return this;                                                                                                   // 3389\n    }                                                                                                                // 3390\n    var newSize = this.size + arguments.length;                                                                      // 3391\n    var head = this._head;                                                                                           // 3392\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {                                                             // 3393\n      head = {                                                                                                       // 3394\n        value: arguments[ii],                                                                                        // 3395\n        next: head                                                                                                   // 3396\n      };                                                                                                             // 3397\n    }                                                                                                                // 3398\n    if (this.__ownerID) {                                                                                            // 3399\n      this.size = newSize;                                                                                           // 3400\n      this._head = head;                                                                                             // 3401\n      this.__hash = undefined;                                                                                       // 3402\n      this.__altered = true;                                                                                         // 3403\n      return this;                                                                                                   // 3404\n    }                                                                                                                // 3405\n    return makeStack(newSize, head);                                                                                 // 3406\n  };                                                                                                                 // 3407\n                                                                                                                     // 3408\n  Stack.prototype.pushAll = function(iter) {                                                                         // 3409\n    iter = IndexedIterable(iter);                                                                                    // 3410\n    if (iter.size === 0) {                                                                                           // 3411\n      return this;                                                                                                   // 3412\n    }                                                                                                                // 3413\n    assertNotInfinite(iter.size);                                                                                    // 3414\n    var newSize = this.size;                                                                                         // 3415\n    var head = this._head;                                                                                           // 3416\n    iter.reverse().forEach(function(value ) {                                                                        // 3417\n      newSize++;                                                                                                     // 3418\n      head = {                                                                                                       // 3419\n        value: value,                                                                                                // 3420\n        next: head                                                                                                   // 3421\n      };                                                                                                             // 3422\n    });                                                                                                              // 3423\n    if (this.__ownerID) {                                                                                            // 3424\n      this.size = newSize;                                                                                           // 3425\n      this._head = head;                                                                                             // 3426\n      this.__hash = undefined;                                                                                       // 3427\n      this.__altered = true;                                                                                         // 3428\n      return this;                                                                                                   // 3429\n    }                                                                                                                // 3430\n    return makeStack(newSize, head);                                                                                 // 3431\n  };                                                                                                                 // 3432\n                                                                                                                     // 3433\n  Stack.prototype.pop = function() {                                                                                 // 3434\n    return this.slice(1);                                                                                            // 3435\n  };                                                                                                                 // 3436\n                                                                                                                     // 3437\n  Stack.prototype.unshift = function(/*...values*/) {                                                                // 3438\n    return this.push.apply(this, arguments);                                                                         // 3439\n  };                                                                                                                 // 3440\n                                                                                                                     // 3441\n  Stack.prototype.unshiftAll = function(iter) {                                                                      // 3442\n    return this.pushAll(iter);                                                                                       // 3443\n  };                                                                                                                 // 3444\n                                                                                                                     // 3445\n  Stack.prototype.shift = function() {                                                                               // 3446\n    return this.pop.apply(this, arguments);                                                                          // 3447\n  };                                                                                                                 // 3448\n                                                                                                                     // 3449\n  Stack.prototype.clear = function() {                                                                               // 3450\n    if (this.size === 0) {                                                                                           // 3451\n      return this;                                                                                                   // 3452\n    }                                                                                                                // 3453\n    if (this.__ownerID) {                                                                                            // 3454\n      this.size = 0;                                                                                                 // 3455\n      this._head = undefined;                                                                                        // 3456\n      this.__hash = undefined;                                                                                       // 3457\n      this.__altered = true;                                                                                         // 3458\n      return this;                                                                                                   // 3459\n    }                                                                                                                // 3460\n    return emptyStack();                                                                                             // 3461\n  };                                                                                                                 // 3462\n                                                                                                                     // 3463\n  Stack.prototype.slice = function(begin, end) {                                                                     // 3464\n    if (wholeSlice(begin, end, this.size)) {                                                                         // 3465\n      return this;                                                                                                   // 3466\n    }                                                                                                                // 3467\n    var resolvedBegin = resolveBegin(begin, this.size);                                                              // 3468\n    var resolvedEnd = resolveEnd(end, this.size);                                                                    // 3469\n    if (resolvedEnd !== this.size) {                                                                                 // 3470\n      // super.slice(begin, end);                                                                                    // 3471\n      return IndexedCollection.prototype.slice.call(this, begin, end);                                               // 3472\n    }                                                                                                                // 3473\n    var newSize = this.size - resolvedBegin;                                                                         // 3474\n    var head = this._head;                                                                                           // 3475\n    while (resolvedBegin--) {                                                                                        // 3476\n      head = head.next;                                                                                              // 3477\n    }                                                                                                                // 3478\n    if (this.__ownerID) {                                                                                            // 3479\n      this.size = newSize;                                                                                           // 3480\n      this._head = head;                                                                                             // 3481\n      this.__hash = undefined;                                                                                       // 3482\n      this.__altered = true;                                                                                         // 3483\n      return this;                                                                                                   // 3484\n    }                                                                                                                // 3485\n    return makeStack(newSize, head);                                                                                 // 3486\n  };                                                                                                                 // 3487\n                                                                                                                     // 3488\n  // @pragma Mutability                                                                                              // 3489\n                                                                                                                     // 3490\n  Stack.prototype.__ensureOwner = function(ownerID) {                                                                // 3491\n    if (ownerID === this.__ownerID) {                                                                                // 3492\n      return this;                                                                                                   // 3493\n    }                                                                                                                // 3494\n    if (!ownerID) {                                                                                                  // 3495\n      this.__ownerID = ownerID;                                                                                      // 3496\n      this.__altered = false;                                                                                        // 3497\n      return this;                                                                                                   // 3498\n    }                                                                                                                // 3499\n    return makeStack(this.size, this._head, ownerID, this.__hash);                                                   // 3500\n  };                                                                                                                 // 3501\n                                                                                                                     // 3502\n  // @pragma Iteration                                                                                               // 3503\n                                                                                                                     // 3504\n  Stack.prototype.__iterate = function(fn, reverse) {                                                                // 3505\n    if (reverse) {                                                                                                   // 3506\n      return this.reverse().__iterate(fn);                                                                           // 3507\n    }                                                                                                                // 3508\n    var iterations = 0;                                                                                              // 3509\n    var node = this._head;                                                                                           // 3510\n    while (node) {                                                                                                   // 3511\n      if (fn(node.value, iterations++, this) === false) {                                                            // 3512\n        break;                                                                                                       // 3513\n      }                                                                                                              // 3514\n      node = node.next;                                                                                              // 3515\n    }                                                                                                                // 3516\n    return iterations;                                                                                               // 3517\n  };                                                                                                                 // 3518\n                                                                                                                     // 3519\n  Stack.prototype.__iterator = function(type, reverse) {                                                             // 3520\n    if (reverse) {                                                                                                   // 3521\n      return this.reverse().__iterator(type);                                                                        // 3522\n    }                                                                                                                // 3523\n    var iterations = 0;                                                                                              // 3524\n    var node = this._head;                                                                                           // 3525\n    return new src_Iterator__Iterator(function()  {                                                                  // 3526\n      if (node) {                                                                                                    // 3527\n        var value = node.value;                                                                                      // 3528\n        node = node.next;                                                                                            // 3529\n        return iteratorValue(type, iterations++, value);                                                             // 3530\n      }                                                                                                              // 3531\n      return iteratorDone();                                                                                         // 3532\n    });                                                                                                              // 3533\n  };                                                                                                                 // 3534\n                                                                                                                     // 3535\n                                                                                                                     // 3536\n  function isStack(maybeStack) {                                                                                     // 3537\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);                                                          // 3538\n  }                                                                                                                  // 3539\n                                                                                                                     // 3540\n  Stack.isStack = isStack;                                                                                           // 3541\n                                                                                                                     // 3542\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';                                                                 // 3543\n                                                                                                                     // 3544\n  var StackPrototype = Stack.prototype;                                                                              // 3545\n  StackPrototype[IS_STACK_SENTINEL] = true;                                                                          // 3546\n  StackPrototype.withMutations = MapPrototype.withMutations;                                                         // 3547\n  StackPrototype.asMutable = MapPrototype.asMutable;                                                                 // 3548\n  StackPrototype.asImmutable = MapPrototype.asImmutable;                                                             // 3549\n  StackPrototype.wasAltered = MapPrototype.wasAltered;                                                               // 3550\n                                                                                                                     // 3551\n                                                                                                                     // 3552\n  function makeStack(size, head, ownerID, hash) {                                                                    // 3553\n    var map = Object.create(StackPrototype);                                                                         // 3554\n    map.size = size;                                                                                                 // 3555\n    map._head = head;                                                                                                // 3556\n    map.__ownerID = ownerID;                                                                                         // 3557\n    map.__hash = hash;                                                                                               // 3558\n    map.__altered = false;                                                                                           // 3559\n    return map;                                                                                                      // 3560\n  }                                                                                                                  // 3561\n                                                                                                                     // 3562\n  var EMPTY_STACK;                                                                                                   // 3563\n  function emptyStack() {                                                                                            // 3564\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));                                                              // 3565\n  }                                                                                                                  // 3566\n                                                                                                                     // 3567\n  createClass(src_Set__Set, SetCollection);                                                                          // 3568\n                                                                                                                     // 3569\n  // @pragma Construction                                                                                            // 3570\n                                                                                                                     // 3571\n  function src_Set__Set(value) {                                                                                     // 3572\n    return value === null || value === undefined ? emptySet() :                                                      // 3573\n        isSet(value) && !isOrdered(value) ? value :                                                                  // 3574\n            emptySet().withMutations(function(set ) {                                                                // 3575\n              var iter = SetIterable(value);                                                                         // 3576\n              assertNotInfinite(iter.size);                                                                          // 3577\n              iter.forEach(function(v ) {return set.add(v)});                                                        // 3578\n            });                                                                                                      // 3579\n  }                                                                                                                  // 3580\n                                                                                                                     // 3581\n  src_Set__Set.of = function(/*...values*/) {                                                                        // 3582\n    return this(arguments);                                                                                          // 3583\n  };                                                                                                                 // 3584\n                                                                                                                     // 3585\n  src_Set__Set.fromKeys = function(value) {                                                                          // 3586\n    return this(KeyedIterable(value).keySeq());                                                                      // 3587\n  };                                                                                                                 // 3588\n                                                                                                                     // 3589\n  src_Set__Set.prototype.toString = function() {                                                                     // 3590\n    return this.__toString('Set {', '}');                                                                            // 3591\n  };                                                                                                                 // 3592\n                                                                                                                     // 3593\n  // @pragma Access                                                                                                  // 3594\n                                                                                                                     // 3595\n  src_Set__Set.prototype.has = function(value) {                                                                     // 3596\n    return this._map.has(value);                                                                                     // 3597\n  };                                                                                                                 // 3598\n                                                                                                                     // 3599\n  // @pragma Modification                                                                                            // 3600\n                                                                                                                     // 3601\n  src_Set__Set.prototype.add = function(value) {                                                                     // 3602\n    return updateSet(this, this._map.set(value, true));                                                              // 3603\n  };                                                                                                                 // 3604\n                                                                                                                     // 3605\n  src_Set__Set.prototype.remove = function(value) {                                                                  // 3606\n    return updateSet(this, this._map.remove(value));                                                                 // 3607\n  };                                                                                                                 // 3608\n                                                                                                                     // 3609\n  src_Set__Set.prototype.clear = function() {                                                                        // 3610\n    return updateSet(this, this._map.clear());                                                                       // 3611\n  };                                                                                                                 // 3612\n                                                                                                                     // 3613\n  // @pragma Composition                                                                                             // 3614\n                                                                                                                     // 3615\n  src_Set__Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);                                 // 3616\n    iters = iters.filter(function(x ) {return x.size !== 0});                                                        // 3617\n    if (iters.length === 0) {                                                                                        // 3618\n      return this;                                                                                                   // 3619\n    }                                                                                                                // 3620\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {                                                  // 3621\n      return this.constructor(iters[0]);                                                                             // 3622\n    }                                                                                                                // 3623\n    return this.withMutations(function(set ) {                                                                       // 3624\n      for (var ii = 0; ii < iters.length; ii++) {                                                                    // 3625\n        SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});                                    // 3626\n      }                                                                                                              // 3627\n    });                                                                                                              // 3628\n  };                                                                                                                 // 3629\n                                                                                                                     // 3630\n  src_Set__Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);                             // 3631\n    if (iters.length === 0) {                                                                                        // 3632\n      return this;                                                                                                   // 3633\n    }                                                                                                                // 3634\n    iters = iters.map(function(iter ) {return SetIterable(iter)});                                                   // 3635\n    var originalSet = this;                                                                                          // 3636\n    return this.withMutations(function(set ) {                                                                       // 3637\n      originalSet.forEach(function(value ) {                                                                         // 3638\n        if (!iters.every(function(iter ) {return iter.includes(value)})) {                                           // 3639\n          set.remove(value);                                                                                         // 3640\n        }                                                                                                            // 3641\n      });                                                                                                            // 3642\n    });                                                                                                              // 3643\n  };                                                                                                                 // 3644\n                                                                                                                     // 3645\n  src_Set__Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);                              // 3646\n    if (iters.length === 0) {                                                                                        // 3647\n      return this;                                                                                                   // 3648\n    }                                                                                                                // 3649\n    iters = iters.map(function(iter ) {return SetIterable(iter)});                                                   // 3650\n    var originalSet = this;                                                                                          // 3651\n    return this.withMutations(function(set ) {                                                                       // 3652\n      originalSet.forEach(function(value ) {                                                                         // 3653\n        if (iters.some(function(iter ) {return iter.includes(value)})) {                                             // 3654\n          set.remove(value);                                                                                         // 3655\n        }                                                                                                            // 3656\n      });                                                                                                            // 3657\n    });                                                                                                              // 3658\n  };                                                                                                                 // 3659\n                                                                                                                     // 3660\n  src_Set__Set.prototype.merge = function() {                                                                        // 3661\n    return this.union.apply(this, arguments);                                                                        // 3662\n  };                                                                                                                 // 3663\n                                                                                                                     // 3664\n  src_Set__Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);                       // 3665\n    return this.union.apply(this, iters);                                                                            // 3666\n  };                                                                                                                 // 3667\n                                                                                                                     // 3668\n  src_Set__Set.prototype.sort = function(comparator) {                                                               // 3669\n    // Late binding                                                                                                  // 3670\n    return OrderedSet(sortFactory(this, comparator));                                                                // 3671\n  };                                                                                                                 // 3672\n                                                                                                                     // 3673\n  src_Set__Set.prototype.sortBy = function(mapper, comparator) {                                                     // 3674\n    // Late binding                                                                                                  // 3675\n    return OrderedSet(sortFactory(this, comparator, mapper));                                                        // 3676\n  };                                                                                                                 // 3677\n                                                                                                                     // 3678\n  src_Set__Set.prototype.wasAltered = function() {                                                                   // 3679\n    return this._map.wasAltered();                                                                                   // 3680\n  };                                                                                                                 // 3681\n                                                                                                                     // 3682\n  src_Set__Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                       // 3683\n    return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);                                  // 3684\n  };                                                                                                                 // 3685\n                                                                                                                     // 3686\n  src_Set__Set.prototype.__iterator = function(type, reverse) {                                                      // 3687\n    return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);                                      // 3688\n  };                                                                                                                 // 3689\n                                                                                                                     // 3690\n  src_Set__Set.prototype.__ensureOwner = function(ownerID) {                                                         // 3691\n    if (ownerID === this.__ownerID) {                                                                                // 3692\n      return this;                                                                                                   // 3693\n    }                                                                                                                // 3694\n    var newMap = this._map.__ensureOwner(ownerID);                                                                   // 3695\n    if (!ownerID) {                                                                                                  // 3696\n      this.__ownerID = ownerID;                                                                                      // 3697\n      this._map = newMap;                                                                                            // 3698\n      return this;                                                                                                   // 3699\n    }                                                                                                                // 3700\n    return this.__make(newMap, ownerID);                                                                             // 3701\n  };                                                                                                                 // 3702\n                                                                                                                     // 3703\n                                                                                                                     // 3704\n  function isSet(maybeSet) {                                                                                         // 3705\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);                                                                // 3706\n  }                                                                                                                  // 3707\n                                                                                                                     // 3708\n  src_Set__Set.isSet = isSet;                                                                                        // 3709\n                                                                                                                     // 3710\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';                                                                     // 3711\n                                                                                                                     // 3712\n  var SetPrototype = src_Set__Set.prototype;                                                                         // 3713\n  SetPrototype[IS_SET_SENTINEL] = true;                                                                              // 3714\n  SetPrototype[DELETE] = SetPrototype.remove;                                                                        // 3715\n  SetPrototype.mergeDeep = SetPrototype.merge;                                                                       // 3716\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;                                                               // 3717\n  SetPrototype.withMutations = MapPrototype.withMutations;                                                           // 3718\n  SetPrototype.asMutable = MapPrototype.asMutable;                                                                   // 3719\n  SetPrototype.asImmutable = MapPrototype.asImmutable;                                                               // 3720\n                                                                                                                     // 3721\n  SetPrototype.__empty = emptySet;                                                                                   // 3722\n  SetPrototype.__make = makeSet;                                                                                     // 3723\n                                                                                                                     // 3724\n  function updateSet(set, newMap) {                                                                                  // 3725\n    if (set.__ownerID) {                                                                                             // 3726\n      set.size = newMap.size;                                                                                        // 3727\n      set._map = newMap;                                                                                             // 3728\n      return set;                                                                                                    // 3729\n    }                                                                                                                // 3730\n    return newMap === set._map ? set :                                                                               // 3731\n        newMap.size === 0 ? set.__empty() :                                                                          // 3732\n            set.__make(newMap);                                                                                      // 3733\n  }                                                                                                                  // 3734\n                                                                                                                     // 3735\n  function makeSet(map, ownerID) {                                                                                   // 3736\n    var set = Object.create(SetPrototype);                                                                           // 3737\n    set.size = map ? map.size : 0;                                                                                   // 3738\n    set._map = map;                                                                                                  // 3739\n    set.__ownerID = ownerID;                                                                                         // 3740\n    return set;                                                                                                      // 3741\n  }                                                                                                                  // 3742\n                                                                                                                     // 3743\n  var EMPTY_SET;                                                                                                     // 3744\n  function emptySet() {                                                                                              // 3745\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));                                                           // 3746\n  }                                                                                                                  // 3747\n                                                                                                                     // 3748\n  createClass(OrderedSet, src_Set__Set);                                                                             // 3749\n                                                                                                                     // 3750\n  // @pragma Construction                                                                                            // 3751\n                                                                                                                     // 3752\n  function OrderedSet(value) {                                                                                       // 3753\n    return value === null || value === undefined ? emptyOrderedSet() :                                               // 3754\n        isOrderedSet(value) ? value :                                                                                // 3755\n            emptyOrderedSet().withMutations(function(set ) {                                                         // 3756\n              var iter = SetIterable(value);                                                                         // 3757\n              assertNotInfinite(iter.size);                                                                          // 3758\n              iter.forEach(function(v ) {return set.add(v)});                                                        // 3759\n            });                                                                                                      // 3760\n  }                                                                                                                  // 3761\n                                                                                                                     // 3762\n  OrderedSet.of = function(/*...values*/) {                                                                          // 3763\n    return this(arguments);                                                                                          // 3764\n  };                                                                                                                 // 3765\n                                                                                                                     // 3766\n  OrderedSet.fromKeys = function(value) {                                                                            // 3767\n    return this(KeyedIterable(value).keySeq());                                                                      // 3768\n  };                                                                                                                 // 3769\n                                                                                                                     // 3770\n  OrderedSet.prototype.toString = function() {                                                                       // 3771\n    return this.__toString('OrderedSet {', '}');                                                                     // 3772\n  };                                                                                                                 // 3773\n                                                                                                                     // 3774\n                                                                                                                     // 3775\n  function isOrderedSet(maybeOrderedSet) {                                                                           // 3776\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);                                                     // 3777\n  }                                                                                                                  // 3778\n                                                                                                                     // 3779\n  OrderedSet.isOrderedSet = isOrderedSet;                                                                            // 3780\n                                                                                                                     // 3781\n  var OrderedSetPrototype = OrderedSet.prototype;                                                                    // 3782\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;                                                                   // 3783\n                                                                                                                     // 3784\n  OrderedSetPrototype.__empty = emptyOrderedSet;                                                                     // 3785\n  OrderedSetPrototype.__make = makeOrderedSet;                                                                       // 3786\n                                                                                                                     // 3787\n  function makeOrderedSet(map, ownerID) {                                                                            // 3788\n    var set = Object.create(OrderedSetPrototype);                                                                    // 3789\n    set.size = map ? map.size : 0;                                                                                   // 3790\n    set._map = map;                                                                                                  // 3791\n    set.__ownerID = ownerID;                                                                                         // 3792\n    return set;                                                                                                      // 3793\n  }                                                                                                                  // 3794\n                                                                                                                     // 3795\n  var EMPTY_ORDERED_SET;                                                                                             // 3796\n  function emptyOrderedSet() {                                                                                       // 3797\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));                             // 3798\n  }                                                                                                                  // 3799\n                                                                                                                     // 3800\n  createClass(Record, KeyedCollection);                                                                              // 3801\n                                                                                                                     // 3802\n  function Record(defaultValues, name) {                                                                             // 3803\n    var hasInitialized;                                                                                              // 3804\n                                                                                                                     // 3805\n    var RecordType = function Record(values) {                                                                       // 3806\n      if (values instanceof RecordType) {                                                                            // 3807\n        return values;                                                                                               // 3808\n      }                                                                                                              // 3809\n      if (!(this instanceof RecordType)) {                                                                           // 3810\n        return new RecordType(values);                                                                               // 3811\n      }                                                                                                              // 3812\n      if (!hasInitialized) {                                                                                         // 3813\n        hasInitialized = true;                                                                                       // 3814\n        var keys = Object.keys(defaultValues);                                                                       // 3815\n        setProps(RecordTypePrototype, keys);                                                                         // 3816\n        RecordTypePrototype.size = keys.length;                                                                      // 3817\n        RecordTypePrototype._name = name;                                                                            // 3818\n        RecordTypePrototype._keys = keys;                                                                            // 3819\n        RecordTypePrototype._defaultValues = defaultValues;                                                          // 3820\n      }                                                                                                              // 3821\n      this._map = src_Map__Map(values);                                                                              // 3822\n    };                                                                                                               // 3823\n                                                                                                                     // 3824\n    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);                                 // 3825\n    RecordTypePrototype.constructor = RecordType;                                                                    // 3826\n                                                                                                                     // 3827\n    return RecordType;                                                                                               // 3828\n  }                                                                                                                  // 3829\n                                                                                                                     // 3830\n  Record.prototype.toString = function() {                                                                           // 3831\n    return this.__toString(recordName(this) + ' {', '}');                                                            // 3832\n  };                                                                                                                 // 3833\n                                                                                                                     // 3834\n  // @pragma Access                                                                                                  // 3835\n                                                                                                                     // 3836\n  Record.prototype.has = function(k) {                                                                               // 3837\n    return this._defaultValues.hasOwnProperty(k);                                                                    // 3838\n  };                                                                                                                 // 3839\n                                                                                                                     // 3840\n  Record.prototype.get = function(k, notSetValue) {                                                                  // 3841\n    if (!this.has(k)) {                                                                                              // 3842\n      return notSetValue;                                                                                            // 3843\n    }                                                                                                                // 3844\n    var defaultVal = this._defaultValues[k];                                                                         // 3845\n    return this._map ? this._map.get(k, defaultVal) : defaultVal;                                                    // 3846\n  };                                                                                                                 // 3847\n                                                                                                                     // 3848\n  // @pragma Modification                                                                                            // 3849\n                                                                                                                     // 3850\n  Record.prototype.clear = function() {                                                                              // 3851\n    if (this.__ownerID) {                                                                                            // 3852\n      this._map && this._map.clear();                                                                                // 3853\n      return this;                                                                                                   // 3854\n    }                                                                                                                // 3855\n    var RecordType = this.constructor;                                                                               // 3856\n    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));                                  // 3857\n  };                                                                                                                 // 3858\n                                                                                                                     // 3859\n  Record.prototype.set = function(k, v) {                                                                            // 3860\n    if (!this.has(k)) {                                                                                              // 3861\n      throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));                                  // 3862\n    }                                                                                                                // 3863\n    var newMap = this._map && this._map.set(k, v);                                                                   // 3864\n    if (this.__ownerID || newMap === this._map) {                                                                    // 3865\n      return this;                                                                                                   // 3866\n    }                                                                                                                // 3867\n    return makeRecord(this, newMap);                                                                                 // 3868\n  };                                                                                                                 // 3869\n                                                                                                                     // 3870\n  Record.prototype.remove = function(k) {                                                                            // 3871\n    if (!this.has(k)) {                                                                                              // 3872\n      return this;                                                                                                   // 3873\n    }                                                                                                                // 3874\n    var newMap = this._map && this._map.remove(k);                                                                   // 3875\n    if (this.__ownerID || newMap === this._map) {                                                                    // 3876\n      return this;                                                                                                   // 3877\n    }                                                                                                                // 3878\n    return makeRecord(this, newMap);                                                                                 // 3879\n  };                                                                                                                 // 3880\n                                                                                                                     // 3881\n  Record.prototype.wasAltered = function() {                                                                         // 3882\n    return this._map.wasAltered();                                                                                   // 3883\n  };                                                                                                                 // 3884\n                                                                                                                     // 3885\n  Record.prototype.__iterator = function(type, reverse) {var this$0 = this;                                          // 3886\n    return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n  };                                                                                                                 // 3888\n                                                                                                                     // 3889\n  Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;                                             // 3890\n    return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);    // 3891\n  };                                                                                                                 // 3892\n                                                                                                                     // 3893\n  Record.prototype.__ensureOwner = function(ownerID) {                                                               // 3894\n    if (ownerID === this.__ownerID) {                                                                                // 3895\n      return this;                                                                                                   // 3896\n    }                                                                                                                // 3897\n    var newMap = this._map && this._map.__ensureOwner(ownerID);                                                      // 3898\n    if (!ownerID) {                                                                                                  // 3899\n      this.__ownerID = ownerID;                                                                                      // 3900\n      this._map = newMap;                                                                                            // 3901\n      return this;                                                                                                   // 3902\n    }                                                                                                                // 3903\n    return makeRecord(this, newMap, ownerID);                                                                        // 3904\n  };                                                                                                                 // 3905\n                                                                                                                     // 3906\n                                                                                                                     // 3907\n  var RecordPrototype = Record.prototype;                                                                            // 3908\n  RecordPrototype[DELETE] = RecordPrototype.remove;                                                                  // 3909\n  RecordPrototype.deleteIn =                                                                                         // 3910\n      RecordPrototype.removeIn = MapPrototype.removeIn;                                                              // 3911\n  RecordPrototype.merge = MapPrototype.merge;                                                                        // 3912\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;                                                                // 3913\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;                                                                    // 3914\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;                                                                // 3915\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;                                                        // 3916\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;                                                            // 3917\n  RecordPrototype.setIn = MapPrototype.setIn;                                                                        // 3918\n  RecordPrototype.update = MapPrototype.update;                                                                      // 3919\n  RecordPrototype.updateIn = MapPrototype.updateIn;                                                                  // 3920\n  RecordPrototype.withMutations = MapPrototype.withMutations;                                                        // 3921\n  RecordPrototype.asMutable = MapPrototype.asMutable;                                                                // 3922\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;                                                            // 3923\n                                                                                                                     // 3924\n                                                                                                                     // 3925\n  function makeRecord(likeRecord, map, ownerID) {                                                                    // 3926\n    var record = Object.create(Object.getPrototypeOf(likeRecord));                                                   // 3927\n    record._map = map;                                                                                               // 3928\n    record.__ownerID = ownerID;                                                                                      // 3929\n    return record;                                                                                                   // 3930\n  }                                                                                                                  // 3931\n                                                                                                                     // 3932\n  function recordName(record) {                                                                                      // 3933\n    return record._name || record.constructor.name || 'Record';                                                      // 3934\n  }                                                                                                                  // 3935\n                                                                                                                     // 3936\n  function setProps(prototype, names) {                                                                              // 3937\n    try {                                                                                                            // 3938\n      names.forEach(setProp.bind(undefined, prototype));                                                             // 3939\n    } catch (error) {                                                                                                // 3940\n      // Object.defineProperty failed. Probably IE8.                                                                 // 3941\n    }                                                                                                                // 3942\n  }                                                                                                                  // 3943\n                                                                                                                     // 3944\n  function setProp(prototype, name) {                                                                                // 3945\n    Object.defineProperty(prototype, name, {                                                                         // 3946\n      get: function() {                                                                                              // 3947\n        return this.get(name);                                                                                       // 3948\n      },                                                                                                             // 3949\n      set: function(value) {                                                                                         // 3950\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');                                             // 3951\n        this.set(name, value);                                                                                       // 3952\n      }                                                                                                              // 3953\n    });                                                                                                              // 3954\n  }                                                                                                                  // 3955\n                                                                                                                     // 3956\n  function deepEqual(a, b) {                                                                                         // 3957\n    if (a === b) {                                                                                                   // 3958\n      return true;                                                                                                   // 3959\n    }                                                                                                                // 3960\n                                                                                                                     // 3961\n    if (                                                                                                             // 3962\n        !isIterable(b) ||                                                                                            // 3963\n        a.size !== undefined && b.size !== undefined && a.size !== b.size ||                                         // 3964\n        a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||                                 // 3965\n        isKeyed(a) !== isKeyed(b) ||                                                                                 // 3966\n        isIndexed(a) !== isIndexed(b) ||                                                                             // 3967\n        isOrdered(a) !== isOrdered(b)                                                                                // 3968\n    ) {                                                                                                              // 3969\n      return false;                                                                                                  // 3970\n    }                                                                                                                // 3971\n                                                                                                                     // 3972\n    if (a.size === 0 && b.size === 0) {                                                                              // 3973\n      return true;                                                                                                   // 3974\n    }                                                                                                                // 3975\n                                                                                                                     // 3976\n    var notAssociative = !isAssociative(a);                                                                          // 3977\n                                                                                                                     // 3978\n    if (isOrdered(a)) {                                                                                              // 3979\n      var entries = a.entries();                                                                                     // 3980\n      return b.every(function(v, k)  {                                                                               // 3981\n            var entry = entries.next().value;                                                                        // 3982\n            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));                                  // 3983\n          }) && entries.next().done;                                                                                 // 3984\n    }                                                                                                                // 3985\n                                                                                                                     // 3986\n    var flipped = false;                                                                                             // 3987\n                                                                                                                     // 3988\n    if (a.size === undefined) {                                                                                      // 3989\n      if (b.size === undefined) {                                                                                    // 3990\n        if (typeof a.cacheResult === 'function') {                                                                   // 3991\n          a.cacheResult();                                                                                           // 3992\n        }                                                                                                            // 3993\n      } else {                                                                                                       // 3994\n        flipped = true;                                                                                              // 3995\n        var _ = a;                                                                                                   // 3996\n        a = b;                                                                                                       // 3997\n        b = _;                                                                                                       // 3998\n      }                                                                                                              // 3999\n    }                                                                                                                // 4000\n                                                                                                                     // 4001\n    var allEqual = true;                                                                                             // 4002\n    var bSize = b.__iterate(function(v, k)  {                                                                        // 4003\n      if (notAssociative ? !a.has(v) :                                                                               // 4004\n              flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {                                     // 4005\n        allEqual = false;                                                                                            // 4006\n        return false;                                                                                                // 4007\n      }                                                                                                              // 4008\n    });                                                                                                              // 4009\n                                                                                                                     // 4010\n    return allEqual && a.size === bSize;                                                                             // 4011\n  }                                                                                                                  // 4012\n                                                                                                                     // 4013\n  createClass(Range, IndexedSeq);                                                                                    // 4014\n                                                                                                                     // 4015\n  function Range(start, end, step) {                                                                                 // 4016\n    if (!(this instanceof Range)) {                                                                                  // 4017\n      return new Range(start, end, step);                                                                            // 4018\n    }                                                                                                                // 4019\n    invariant(step !== 0, 'Cannot step a Range by 0');                                                               // 4020\n    start = start || 0;                                                                                              // 4021\n    if (end === undefined) {                                                                                         // 4022\n      end = Infinity;                                                                                                // 4023\n    }                                                                                                                // 4024\n    step = step === undefined ? 1 : Math.abs(step);                                                                  // 4025\n    if (end < start) {                                                                                               // 4026\n      step = -step;                                                                                                  // 4027\n    }                                                                                                                // 4028\n    this._start = start;                                                                                             // 4029\n    this._end = end;                                                                                                 // 4030\n    this._step = step;                                                                                               // 4031\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);                                                // 4032\n    if (this.size === 0) {                                                                                           // 4033\n      if (EMPTY_RANGE) {                                                                                             // 4034\n        return EMPTY_RANGE;                                                                                          // 4035\n      }                                                                                                              // 4036\n      EMPTY_RANGE = this;                                                                                            // 4037\n    }                                                                                                                // 4038\n  }                                                                                                                  // 4039\n                                                                                                                     // 4040\n  Range.prototype.toString = function() {                                                                            // 4041\n    if (this.size === 0) {                                                                                           // 4042\n      return 'Range []';                                                                                             // 4043\n    }                                                                                                                // 4044\n    return 'Range [ ' +                                                                                              // 4045\n        this._start + '...' + this._end +                                                                            // 4046\n        (this._step > 1 ? ' by ' + this._step : '') +                                                                // 4047\n        ' ]';                                                                                                        // 4048\n  };                                                                                                                 // 4049\n                                                                                                                     // 4050\n  Range.prototype.get = function(index, notSetValue) {                                                               // 4051\n    return this.has(index) ?                                                                                         // 4052\n    this._start + wrapIndex(this, index) * this._step :                                                              // 4053\n        notSetValue;                                                                                                 // 4054\n  };                                                                                                                 // 4055\n                                                                                                                     // 4056\n  Range.prototype.includes = function(searchValue) {                                                                 // 4057\n    var possibleIndex = (searchValue - this._start) / this._step;                                                    // 4058\n    return possibleIndex >= 0 &&                                                                                     // 4059\n        possibleIndex < this.size &&                                                                                 // 4060\n        possibleIndex === Math.floor(possibleIndex);                                                                 // 4061\n  };                                                                                                                 // 4062\n                                                                                                                     // 4063\n  Range.prototype.slice = function(begin, end) {                                                                     // 4064\n    if (wholeSlice(begin, end, this.size)) {                                                                         // 4065\n      return this;                                                                                                   // 4066\n    }                                                                                                                // 4067\n    begin = resolveBegin(begin, this.size);                                                                          // 4068\n    end = resolveEnd(end, this.size);                                                                                // 4069\n    if (end <= begin) {                                                                                              // 4070\n      return new Range(0, 0);                                                                                        // 4071\n    }                                                                                                                // 4072\n    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);                              // 4073\n  };                                                                                                                 // 4074\n                                                                                                                     // 4075\n  Range.prototype.indexOf = function(searchValue) {                                                                  // 4076\n    var offsetValue = searchValue - this._start;                                                                     // 4077\n    if (offsetValue % this._step === 0) {                                                                            // 4078\n      var index = offsetValue / this._step;                                                                          // 4079\n      if (index >= 0 && index < this.size) {                                                                         // 4080\n        return index                                                                                                 // 4081\n      }                                                                                                              // 4082\n    }                                                                                                                // 4083\n    return -1;                                                                                                       // 4084\n  };                                                                                                                 // 4085\n                                                                                                                     // 4086\n  Range.prototype.lastIndexOf = function(searchValue) {                                                              // 4087\n    return this.indexOf(searchValue);                                                                                // 4088\n  };                                                                                                                 // 4089\n                                                                                                                     // 4090\n  Range.prototype.__iterate = function(fn, reverse) {                                                                // 4091\n    var maxIndex = this.size - 1;                                                                                    // 4092\n    var step = this._step;                                                                                           // 4093\n    var value = reverse ? this._start + maxIndex * step : this._start;                                               // 4094\n    for (var ii = 0; ii <= maxIndex; ii++) {                                                                         // 4095\n      if (fn(value, ii, this) === false) {                                                                           // 4096\n        return ii + 1;                                                                                               // 4097\n      }                                                                                                              // 4098\n      value += reverse ? -step : step;                                                                               // 4099\n    }                                                                                                                // 4100\n    return ii;                                                                                                       // 4101\n  };                                                                                                                 // 4102\n                                                                                                                     // 4103\n  Range.prototype.__iterator = function(type, reverse) {                                                             // 4104\n    var maxIndex = this.size - 1;                                                                                    // 4105\n    var step = this._step;                                                                                           // 4106\n    var value = reverse ? this._start + maxIndex * step : this._start;                                               // 4107\n    var ii = 0;                                                                                                      // 4108\n    return new src_Iterator__Iterator(function()  {                                                                  // 4109\n      var v = value;                                                                                                 // 4110\n      value += reverse ? -step : step;                                                                               // 4111\n      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);                                          // 4112\n    });                                                                                                              // 4113\n  };                                                                                                                 // 4114\n                                                                                                                     // 4115\n  Range.prototype.equals = function(other) {                                                                         // 4116\n    return other instanceof Range ?                                                                                  // 4117\n    this._start === other._start &&                                                                                  // 4118\n    this._end === other._end &&                                                                                      // 4119\n    this._step === other._step :                                                                                     // 4120\n        deepEqual(this, other);                                                                                      // 4121\n  };                                                                                                                 // 4122\n                                                                                                                     // 4123\n                                                                                                                     // 4124\n  var EMPTY_RANGE;                                                                                                   // 4125\n                                                                                                                     // 4126\n  createClass(Repeat, IndexedSeq);                                                                                   // 4127\n                                                                                                                     // 4128\n  function Repeat(value, times) {                                                                                    // 4129\n    if (!(this instanceof Repeat)) {                                                                                 // 4130\n      return new Repeat(value, times);                                                                               // 4131\n    }                                                                                                                // 4132\n    this._value = value;                                                                                             // 4133\n    this.size = times === undefined ? Infinity : Math.max(0, times);                                                 // 4134\n    if (this.size === 0) {                                                                                           // 4135\n      if (EMPTY_REPEAT) {                                                                                            // 4136\n        return EMPTY_REPEAT;                                                                                         // 4137\n      }                                                                                                              // 4138\n      EMPTY_REPEAT = this;                                                                                           // 4139\n    }                                                                                                                // 4140\n  }                                                                                                                  // 4141\n                                                                                                                     // 4142\n  Repeat.prototype.toString = function() {                                                                           // 4143\n    if (this.size === 0) {                                                                                           // 4144\n      return 'Repeat []';                                                                                            // 4145\n    }                                                                                                                // 4146\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';                                                 // 4147\n  };                                                                                                                 // 4148\n                                                                                                                     // 4149\n  Repeat.prototype.get = function(index, notSetValue) {                                                              // 4150\n    return this.has(index) ? this._value : notSetValue;                                                              // 4151\n  };                                                                                                                 // 4152\n                                                                                                                     // 4153\n  Repeat.prototype.includes = function(searchValue) {                                                                // 4154\n    return is(this._value, searchValue);                                                                             // 4155\n  };                                                                                                                 // 4156\n                                                                                                                     // 4157\n  Repeat.prototype.slice = function(begin, end) {                                                                    // 4158\n    var size = this.size;                                                                                            // 4159\n    return wholeSlice(begin, end, size) ? this :                                                                     // 4160\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));                                  // 4161\n  };                                                                                                                 // 4162\n                                                                                                                     // 4163\n  Repeat.prototype.reverse = function() {                                                                            // 4164\n    return this;                                                                                                     // 4165\n  };                                                                                                                 // 4166\n                                                                                                                     // 4167\n  Repeat.prototype.indexOf = function(searchValue) {                                                                 // 4168\n    if (is(this._value, searchValue)) {                                                                              // 4169\n      return 0;                                                                                                      // 4170\n    }                                                                                                                // 4171\n    return -1;                                                                                                       // 4172\n  };                                                                                                                 // 4173\n                                                                                                                     // 4174\n  Repeat.prototype.lastIndexOf = function(searchValue) {                                                             // 4175\n    if (is(this._value, searchValue)) {                                                                              // 4176\n      return this.size;                                                                                              // 4177\n    }                                                                                                                // 4178\n    return -1;                                                                                                       // 4179\n  };                                                                                                                 // 4180\n                                                                                                                     // 4181\n  Repeat.prototype.__iterate = function(fn, reverse) {                                                               // 4182\n    for (var ii = 0; ii < this.size; ii++) {                                                                         // 4183\n      if (fn(this._value, ii, this) === false) {                                                                     // 4184\n        return ii + 1;                                                                                               // 4185\n      }                                                                                                              // 4186\n    }                                                                                                                // 4187\n    return ii;                                                                                                       // 4188\n  };                                                                                                                 // 4189\n                                                                                                                     // 4190\n  Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;                                          // 4191\n    var ii = 0;                                                                                                      // 4192\n    return new src_Iterator__Iterator(function()                                                                     // 4193\n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}                        // 4194\n    );                                                                                                               // 4195\n  };                                                                                                                 // 4196\n                                                                                                                     // 4197\n  Repeat.prototype.equals = function(other) {                                                                        // 4198\n    return other instanceof Repeat ?                                                                                 // 4199\n        is(this._value, other._value) :                                                                              // 4200\n        deepEqual(other);                                                                                            // 4201\n  };                                                                                                                 // 4202\n                                                                                                                     // 4203\n                                                                                                                     // 4204\n  var EMPTY_REPEAT;                                                                                                  // 4205\n                                                                                                                     // 4206\n  /**                                                                                                                // 4207\n   * Contributes additional methods to a constructor                                                                 // 4208\n   */                                                                                                                // 4209\n  function mixin(ctor, methods) {                                                                                    // 4210\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };                                          // 4211\n    Object.keys(methods).forEach(keyCopier);                                                                         // 4212\n    Object.getOwnPropertySymbols &&                                                                                  // 4213\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);                                                        // 4214\n    return ctor;                                                                                                     // 4215\n  }                                                                                                                  // 4216\n                                                                                                                     // 4217\n  Iterable.Iterator = src_Iterator__Iterator;                                                                        // 4218\n                                                                                                                     // 4219\n  mixin(Iterable, {                                                                                                  // 4220\n                                                                                                                     // 4221\n    // ### Conversion to other types                                                                                 // 4222\n                                                                                                                     // 4223\n    toArray: function() {                                                                                            // 4224\n      assertNotInfinite(this.size);                                                                                  // 4225\n      var array = new Array(this.size || 0);                                                                         // 4226\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });                                                  // 4227\n      return array;                                                                                                  // 4228\n    },                                                                                                               // 4229\n                                                                                                                     // 4230\n    toIndexedSeq: function() {                                                                                       // 4231\n      return new ToIndexedSequence(this);                                                                            // 4232\n    },                                                                                                               // 4233\n                                                                                                                     // 4234\n    toJS: function() {                                                                                               // 4235\n      return this.toSeq().map(                                                                                       // 4236\n          function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}                 // 4237\n      ).__toJS();                                                                                                    // 4238\n    },                                                                                                               // 4239\n                                                                                                                     // 4240\n    toJSON: function() {                                                                                             // 4241\n      return this.toSeq().map(                                                                                       // 4242\n          function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}             // 4243\n      ).__toJS();                                                                                                    // 4244\n    },                                                                                                               // 4245\n                                                                                                                     // 4246\n    toKeyedSeq: function() {                                                                                         // 4247\n      return new ToKeyedSequence(this, true);                                                                        // 4248\n    },                                                                                                               // 4249\n                                                                                                                     // 4250\n    toMap: function() {                                                                                              // 4251\n      // Use Late Binding here to solve the circular dependency.                                                     // 4252\n      return src_Map__Map(this.toKeyedSeq());                                                                        // 4253\n    },                                                                                                               // 4254\n                                                                                                                     // 4255\n    toObject: function() {                                                                                           // 4256\n      assertNotInfinite(this.size);                                                                                  // 4257\n      var object = {};                                                                                               // 4258\n      this.__iterate(function(v, k)  { object[k] = v; });                                                            // 4259\n      return object;                                                                                                 // 4260\n    },                                                                                                               // 4261\n                                                                                                                     // 4262\n    toOrderedMap: function() {                                                                                       // 4263\n      // Use Late Binding here to solve the circular dependency.                                                     // 4264\n      return OrderedMap(this.toKeyedSeq());                                                                          // 4265\n    },                                                                                                               // 4266\n                                                                                                                     // 4267\n    toOrderedSet: function() {                                                                                       // 4268\n      // Use Late Binding here to solve the circular dependency.                                                     // 4269\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);                                                     // 4270\n    },                                                                                                               // 4271\n                                                                                                                     // 4272\n    toSet: function() {                                                                                              // 4273\n      // Use Late Binding here to solve the circular dependency.                                                     // 4274\n      return src_Set__Set(isKeyed(this) ? this.valueSeq() : this);                                                   // 4275\n    },                                                                                                               // 4276\n                                                                                                                     // 4277\n    toSetSeq: function() {                                                                                           // 4278\n      return new ToSetSequence(this);                                                                                // 4279\n    },                                                                                                               // 4280\n                                                                                                                     // 4281\n    toSeq: function() {                                                                                              // 4282\n      return isIndexed(this) ? this.toIndexedSeq() :                                                                 // 4283\n          isKeyed(this) ? this.toKeyedSeq() :                                                                        // 4284\n              this.toSetSeq();                                                                                       // 4285\n    },                                                                                                               // 4286\n                                                                                                                     // 4287\n    toStack: function() {                                                                                            // 4288\n      // Use Late Binding here to solve the circular dependency.                                                     // 4289\n      return Stack(isKeyed(this) ? this.valueSeq() : this);                                                          // 4290\n    },                                                                                                               // 4291\n                                                                                                                     // 4292\n    toList: function() {                                                                                             // 4293\n      // Use Late Binding here to solve the circular dependency.                                                     // 4294\n      return List(isKeyed(this) ? this.valueSeq() : this);                                                           // 4295\n    },                                                                                                               // 4296\n                                                                                                                     // 4297\n                                                                                                                     // 4298\n    // ### Common JavaScript methods and properties                                                                  // 4299\n                                                                                                                     // 4300\n    toString: function() {                                                                                           // 4301\n      return '[Iterable]';                                                                                           // 4302\n    },                                                                                                               // 4303\n                                                                                                                     // 4304\n    __toString: function(head, tail) {                                                                               // 4305\n      if (this.size === 0) {                                                                                         // 4306\n        return head + tail;                                                                                          // 4307\n      }                                                                                                              // 4308\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;                           // 4309\n    },                                                                                                               // 4310\n                                                                                                                     // 4311\n                                                                                                                     // 4312\n    // ### ES6 Collection methods (ES6 Array and Map)                                                                // 4313\n                                                                                                                     // 4314\n    concat: function() {var values = SLICE$0.call(arguments, 0);                                                     // 4315\n      return reify(this, concatFactory(this, values));                                                               // 4316\n    },                                                                                                               // 4317\n                                                                                                                     // 4318\n    includes: function(searchValue) {                                                                                // 4319\n      return this.some(function(value ) {return is(value, searchValue)});                                            // 4320\n    },                                                                                                               // 4321\n                                                                                                                     // 4322\n    entries: function() {                                                                                            // 4323\n      return this.__iterator(ITERATE_ENTRIES);                                                                       // 4324\n    },                                                                                                               // 4325\n                                                                                                                     // 4326\n    every: function(predicate, context) {                                                                            // 4327\n      assertNotInfinite(this.size);                                                                                  // 4328\n      var returnValue = true;                                                                                        // 4329\n      this.__iterate(function(v, k, c)  {                                                                            // 4330\n        if (!predicate.call(context, v, k, c)) {                                                                     // 4331\n          returnValue = false;                                                                                       // 4332\n          return false;                                                                                              // 4333\n        }                                                                                                            // 4334\n      });                                                                                                            // 4335\n      return returnValue;                                                                                            // 4336\n    },                                                                                                               // 4337\n                                                                                                                     // 4338\n    filter: function(predicate, context) {                                                                           // 4339\n      return reify(this, filterFactory(this, predicate, context, true));                                             // 4340\n    },                                                                                                               // 4341\n                                                                                                                     // 4342\n    find: function(predicate, context, notSetValue) {                                                                // 4343\n      var entry = this.findEntry(predicate, context);                                                                // 4344\n      return entry ? entry[1] : notSetValue;                                                                         // 4345\n    },                                                                                                               // 4346\n                                                                                                                     // 4347\n    findEntry: function(predicate, context) {                                                                        // 4348\n      var found;                                                                                                     // 4349\n      this.__iterate(function(v, k, c)  {                                                                            // 4350\n        if (predicate.call(context, v, k, c)) {                                                                      // 4351\n          found = [k, v];                                                                                            // 4352\n          return false;                                                                                              // 4353\n        }                                                                                                            // 4354\n      });                                                                                                            // 4355\n      return found;                                                                                                  // 4356\n    },                                                                                                               // 4357\n                                                                                                                     // 4358\n    findLastEntry: function(predicate, context) {                                                                    // 4359\n      return this.toSeq().reverse().findEntry(predicate, context);                                                   // 4360\n    },                                                                                                               // 4361\n                                                                                                                     // 4362\n    forEach: function(sideEffect, context) {                                                                         // 4363\n      assertNotInfinite(this.size);                                                                                  // 4364\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);                                        // 4365\n    },                                                                                                               // 4366\n                                                                                                                     // 4367\n    join: function(separator) {                                                                                      // 4368\n      assertNotInfinite(this.size);                                                                                  // 4369\n      separator = separator !== undefined ? '' + separator : ',';                                                    // 4370\n      var joined = '';                                                                                               // 4371\n      var isFirst = true;                                                                                            // 4372\n      this.__iterate(function(v ) {                                                                                  // 4373\n        isFirst ? (isFirst = false) : (joined += separator);                                                         // 4374\n        joined += v !== null && v !== undefined ? v.toString() : '';                                                 // 4375\n      });                                                                                                            // 4376\n      return joined;                                                                                                 // 4377\n    },                                                                                                               // 4378\n                                                                                                                     // 4379\n    keys: function() {                                                                                               // 4380\n      return this.__iterator(ITERATE_KEYS);                                                                          // 4381\n    },                                                                                                               // 4382\n                                                                                                                     // 4383\n    map: function(mapper, context) {                                                                                 // 4384\n      return reify(this, mapFactory(this, mapper, context));                                                         // 4385\n    },                                                                                                               // 4386\n                                                                                                                     // 4387\n    reduce: function(reducer, initialReduction, context) {                                                           // 4388\n      assertNotInfinite(this.size);                                                                                  // 4389\n      var reduction;                                                                                                 // 4390\n      var useFirst;                                                                                                  // 4391\n      if (arguments.length < 2) {                                                                                    // 4392\n        useFirst = true;                                                                                             // 4393\n      } else {                                                                                                       // 4394\n        reduction = initialReduction;                                                                                // 4395\n      }                                                                                                              // 4396\n      this.__iterate(function(v, k, c)  {                                                                            // 4397\n        if (useFirst) {                                                                                              // 4398\n          useFirst = false;                                                                                          // 4399\n          reduction = v;                                                                                             // 4400\n        } else {                                                                                                     // 4401\n          reduction = reducer.call(context, reduction, v, k, c);                                                     // 4402\n        }                                                                                                            // 4403\n      });                                                                                                            // 4404\n      return reduction;                                                                                              // 4405\n    },                                                                                                               // 4406\n                                                                                                                     // 4407\n    reduceRight: function(reducer, initialReduction, context) {                                                      // 4408\n      var reversed = this.toKeyedSeq().reverse();                                                                    // 4409\n      return reversed.reduce.apply(reversed, arguments);                                                             // 4410\n    },                                                                                                               // 4411\n                                                                                                                     // 4412\n    reverse: function() {                                                                                            // 4413\n      return reify(this, reverseFactory(this, true));                                                                // 4414\n    },                                                                                                               // 4415\n                                                                                                                     // 4416\n    slice: function(begin, end) {                                                                                    // 4417\n      return reify(this, sliceFactory(this, begin, end, true));                                                      // 4418\n    },                                                                                                               // 4419\n                                                                                                                     // 4420\n    some: function(predicate, context) {                                                                             // 4421\n      return !this.every(not(predicate), context);                                                                   // 4422\n    },                                                                                                               // 4423\n                                                                                                                     // 4424\n    sort: function(comparator) {                                                                                     // 4425\n      return reify(this, sortFactory(this, comparator));                                                             // 4426\n    },                                                                                                               // 4427\n                                                                                                                     // 4428\n    values: function() {                                                                                             // 4429\n      return this.__iterator(ITERATE_VALUES);                                                                        // 4430\n    },                                                                                                               // 4431\n                                                                                                                     // 4432\n                                                                                                                     // 4433\n    // ### More sequential methods                                                                                   // 4434\n                                                                                                                     // 4435\n    butLast: function() {                                                                                            // 4436\n      return this.slice(0, -1);                                                                                      // 4437\n    },                                                                                                               // 4438\n                                                                                                                     // 4439\n    isEmpty: function() {                                                                                            // 4440\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});                      // 4441\n    },                                                                                                               // 4442\n                                                                                                                     // 4443\n    count: function(predicate, context) {                                                                            // 4444\n      return ensureSize(                                                                                             // 4445\n          predicate ? this.toSeq().filter(predicate, context) : this                                                 // 4446\n      );                                                                                                             // 4447\n    },                                                                                                               // 4448\n                                                                                                                     // 4449\n    countBy: function(grouper, context) {                                                                            // 4450\n      return countByFactory(this, grouper, context);                                                                 // 4451\n    },                                                                                                               // 4452\n                                                                                                                     // 4453\n    equals: function(other) {                                                                                        // 4454\n      return deepEqual(this, other);                                                                                 // 4455\n    },                                                                                                               // 4456\n                                                                                                                     // 4457\n    entrySeq: function() {                                                                                           // 4458\n      var iterable = this;                                                                                           // 4459\n      if (iterable._cache) {                                                                                         // 4460\n        // We cache as an entries array, so we can just return the cache!                                            // 4461\n        return new ArraySeq(iterable._cache);                                                                        // 4462\n      }                                                                                                              // 4463\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();                                        // 4464\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};                                          // 4465\n      return entriesSequence;                                                                                        // 4466\n    },                                                                                                               // 4467\n                                                                                                                     // 4468\n    filterNot: function(predicate, context) {                                                                        // 4469\n      return this.filter(not(predicate), context);                                                                   // 4470\n    },                                                                                                               // 4471\n                                                                                                                     // 4472\n    findLast: function(predicate, context, notSetValue) {                                                            // 4473\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);                                      // 4474\n    },                                                                                                               // 4475\n                                                                                                                     // 4476\n    first: function() {                                                                                              // 4477\n      return this.find(returnTrue);                                                                                  // 4478\n    },                                                                                                               // 4479\n                                                                                                                     // 4480\n    flatMap: function(mapper, context) {                                                                             // 4481\n      return reify(this, flatMapFactory(this, mapper, context));                                                     // 4482\n    },                                                                                                               // 4483\n                                                                                                                     // 4484\n    flatten: function(depth) {                                                                                       // 4485\n      return reify(this, flattenFactory(this, depth, true));                                                         // 4486\n    },                                                                                                               // 4487\n                                                                                                                     // 4488\n    fromEntrySeq: function() {                                                                                       // 4489\n      return new FromEntriesSequence(this);                                                                          // 4490\n    },                                                                                                               // 4491\n                                                                                                                     // 4492\n    get: function(searchKey, notSetValue) {                                                                          // 4493\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);                       // 4494\n    },                                                                                                               // 4495\n                                                                                                                     // 4496\n    getIn: function(searchKeyPath, notSetValue) {                                                                    // 4497\n      var nested = this;                                                                                             // 4498\n      // Note: in an ES6 environment, we would prefer:                                                               // 4499\n      // for (var key of searchKeyPath) {                                                                            // 4500\n      var iter = forceIterator(searchKeyPath);                                                                       // 4501\n      var step;                                                                                                      // 4502\n      while (!(step = iter.next()).done) {                                                                           // 4503\n        var key = step.value;                                                                                        // 4504\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;                                          // 4505\n        if (nested === NOT_SET) {                                                                                    // 4506\n          return notSetValue;                                                                                        // 4507\n        }                                                                                                            // 4508\n      }                                                                                                              // 4509\n      return nested;                                                                                                 // 4510\n    },                                                                                                               // 4511\n                                                                                                                     // 4512\n    groupBy: function(grouper, context) {                                                                            // 4513\n      return groupByFactory(this, grouper, context);                                                                 // 4514\n    },                                                                                                               // 4515\n                                                                                                                     // 4516\n    has: function(searchKey) {                                                                                       // 4517\n      return this.get(searchKey, NOT_SET) !== NOT_SET;                                                               // 4518\n    },                                                                                                               // 4519\n                                                                                                                     // 4520\n    hasIn: function(searchKeyPath) {                                                                                 // 4521\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;                                                         // 4522\n    },                                                                                                               // 4523\n                                                                                                                     // 4524\n    isSubset: function(iter) {                                                                                       // 4525\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);                                            // 4526\n      return this.every(function(value ) {return iter.includes(value)});                                             // 4527\n    },                                                                                                               // 4528\n                                                                                                                     // 4529\n    isSuperset: function(iter) {                                                                                     // 4530\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);                                            // 4531\n      return iter.isSubset(this);                                                                                    // 4532\n    },                                                                                                               // 4533\n                                                                                                                     // 4534\n    keySeq: function() {                                                                                             // 4535\n      return this.toSeq().map(keyMapper).toIndexedSeq();                                                             // 4536\n    },                                                                                                               // 4537\n                                                                                                                     // 4538\n    last: function() {                                                                                               // 4539\n      return this.toSeq().reverse().first();                                                                         // 4540\n    },                                                                                                               // 4541\n                                                                                                                     // 4542\n    max: function(comparator) {                                                                                      // 4543\n      return maxFactory(this, comparator);                                                                           // 4544\n    },                                                                                                               // 4545\n                                                                                                                     // 4546\n    maxBy: function(mapper, comparator) {                                                                            // 4547\n      return maxFactory(this, comparator, mapper);                                                                   // 4548\n    },                                                                                                               // 4549\n                                                                                                                     // 4550\n    min: function(comparator) {                                                                                      // 4551\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);                                  // 4552\n    },                                                                                                               // 4553\n                                                                                                                     // 4554\n    minBy: function(mapper, comparator) {                                                                            // 4555\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);                          // 4556\n    },                                                                                                               // 4557\n                                                                                                                     // 4558\n    rest: function() {                                                                                               // 4559\n      return this.slice(1);                                                                                          // 4560\n    },                                                                                                               // 4561\n                                                                                                                     // 4562\n    skip: function(amount) {                                                                                         // 4563\n      return this.slice(Math.max(0, amount));                                                                        // 4564\n    },                                                                                                               // 4565\n                                                                                                                     // 4566\n    skipLast: function(amount) {                                                                                     // 4567\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());                                             // 4568\n    },                                                                                                               // 4569\n                                                                                                                     // 4570\n    skipWhile: function(predicate, context) {                                                                        // 4571\n      return reify(this, skipWhileFactory(this, predicate, context, true));                                          // 4572\n    },                                                                                                               // 4573\n                                                                                                                     // 4574\n    skipUntil: function(predicate, context) {                                                                        // 4575\n      return this.skipWhile(not(predicate), context);                                                                // 4576\n    },                                                                                                               // 4577\n                                                                                                                     // 4578\n    sortBy: function(mapper, comparator) {                                                                           // 4579\n      return reify(this, sortFactory(this, comparator, mapper));                                                     // 4580\n    },                                                                                                               // 4581\n                                                                                                                     // 4582\n    take: function(amount) {                                                                                         // 4583\n      return this.slice(0, Math.max(0, amount));                                                                     // 4584\n    },                                                                                                               // 4585\n                                                                                                                     // 4586\n    takeLast: function(amount) {                                                                                     // 4587\n      return reify(this, this.toSeq().reverse().take(amount).reverse());                                             // 4588\n    },                                                                                                               // 4589\n                                                                                                                     // 4590\n    takeWhile: function(predicate, context) {                                                                        // 4591\n      return reify(this, takeWhileFactory(this, predicate, context));                                                // 4592\n    },                                                                                                               // 4593\n                                                                                                                     // 4594\n    takeUntil: function(predicate, context) {                                                                        // 4595\n      return this.takeWhile(not(predicate), context);                                                                // 4596\n    },                                                                                                               // 4597\n                                                                                                                     // 4598\n    valueSeq: function() {                                                                                           // 4599\n      return this.toIndexedSeq();                                                                                    // 4600\n    },                                                                                                               // 4601\n                                                                                                                     // 4602\n                                                                                                                     // 4603\n    // ### Hashable Object                                                                                           // 4604\n                                                                                                                     // 4605\n    hashCode: function() {                                                                                           // 4606\n      return this.__hash || (this.__hash = hashIterable(this));                                                      // 4607\n    }                                                                                                                // 4608\n                                                                                                                     // 4609\n                                                                                                                     // 4610\n    // ### Internal                                                                                                  // 4611\n                                                                                                                     // 4612\n    // abstract __iterate(fn, reverse)                                                                               // 4613\n                                                                                                                     // 4614\n    // abstract __iterator(type, reverse)                                                                            // 4615\n  });                                                                                                                // 4616\n                                                                                                                     // 4617\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';                                                        // 4618\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';                                                              // 4619\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';                                                          // 4620\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';                                                          // 4621\n                                                                                                                     // 4622\n  var IterablePrototype = Iterable.prototype;                                                                        // 4623\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;                                                                    // 4624\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;                                                     // 4625\n  IterablePrototype.__toJS = IterablePrototype.toArray;                                                              // 4626\n  IterablePrototype.__toStringMapper = quoteString;                                                                  // 4627\n  IterablePrototype.inspect =                                                                                        // 4628\n      IterablePrototype.toSource = function() { return this.toString(); };                                           // 4629\n  IterablePrototype.chain = IterablePrototype.flatMap;                                                               // 4630\n  IterablePrototype.contains = IterablePrototype.includes;                                                           // 4631\n                                                                                                                     // 4632\n  // Temporary warning about using length                                                                            // 4633\n  (function () {                                                                                                     // 4634\n    try {                                                                                                            // 4635\n      Object.defineProperty(IterablePrototype, 'length', {                                                           // 4636\n        get: function () {                                                                                           // 4637\n          if (!Iterable.noLengthWarning) {                                                                           // 4638\n            var stack;                                                                                               // 4639\n            try {                                                                                                    // 4640\n              throw new Error();                                                                                     // 4641\n            } catch (error) {                                                                                        // 4642\n              stack = error.stack;                                                                                   // 4643\n            }                                                                                                        // 4644\n            if (stack.indexOf('_wrapObject') === -1) {                                                               // 4645\n              console && console.warn && console.warn(                                                               // 4646\n                  'iterable.length has been deprecated, '+                                                           // 4647\n                  'use iterable.size or iterable.count(). '+                                                         // 4648\n                  'This warning will become a silent error in a future version. ' +                                  // 4649\n                  stack                                                                                              // 4650\n              );                                                                                                     // 4651\n              return this.size;                                                                                      // 4652\n            }                                                                                                        // 4653\n          }                                                                                                          // 4654\n        }                                                                                                            // 4655\n      });                                                                                                            // 4656\n    } catch (e) {}                                                                                                   // 4657\n  })();                                                                                                              // 4658\n                                                                                                                     // 4659\n                                                                                                                     // 4660\n                                                                                                                     // 4661\n  mixin(KeyedIterable, {                                                                                             // 4662\n                                                                                                                     // 4663\n    // ### More sequential methods                                                                                   // 4664\n                                                                                                                     // 4665\n    flip: function() {                                                                                               // 4666\n      return reify(this, flipFactory(this));                                                                         // 4667\n    },                                                                                                               // 4668\n                                                                                                                     // 4669\n    findKey: function(predicate, context) {                                                                          // 4670\n      var entry = this.findEntry(predicate, context);                                                                // 4671\n      return entry && entry[0];                                                                                      // 4672\n    },                                                                                                               // 4673\n                                                                                                                     // 4674\n    findLastKey: function(predicate, context) {                                                                      // 4675\n      return this.toSeq().reverse().findKey(predicate, context);                                                     // 4676\n    },                                                                                                               // 4677\n                                                                                                                     // 4678\n    keyOf: function(searchValue) {                                                                                   // 4679\n      return this.findKey(function(value ) {return is(value, searchValue)});                                         // 4680\n    },                                                                                                               // 4681\n                                                                                                                     // 4682\n    lastKeyOf: function(searchValue) {                                                                               // 4683\n      return this.findLastKey(function(value ) {return is(value, searchValue)});                                     // 4684\n    },                                                                                                               // 4685\n                                                                                                                     // 4686\n    mapEntries: function(mapper, context) {var this$0 = this;                                                        // 4687\n      var iterations = 0;                                                                                            // 4688\n      return reify(this,                                                                                             // 4689\n          this.toSeq().map(                                                                                          // 4690\n              function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}                            // 4691\n          ).fromEntrySeq()                                                                                           // 4692\n      );                                                                                                             // 4693\n    },                                                                                                               // 4694\n                                                                                                                     // 4695\n    mapKeys: function(mapper, context) {var this$0 = this;                                                           // 4696\n      return reify(this,                                                                                             // 4697\n          this.toSeq().flip().map(                                                                                   // 4698\n              function(k, v)  {return mapper.call(context, k, v, this$0)}                                            // 4699\n          ).flip()                                                                                                   // 4700\n      );                                                                                                             // 4701\n    }                                                                                                                // 4702\n                                                                                                                     // 4703\n  });                                                                                                                // 4704\n                                                                                                                     // 4705\n  var KeyedIterablePrototype = KeyedIterable.prototype;                                                              // 4706\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;                                                                  // 4707\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;                                               // 4708\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;                                                        // 4709\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};      // 4710\n                                                                                                                     // 4711\n                                                                                                                     // 4712\n                                                                                                                     // 4713\n  mixin(IndexedIterable, {                                                                                           // 4714\n                                                                                                                     // 4715\n    // ### Conversion to other types                                                                                 // 4716\n                                                                                                                     // 4717\n    toKeyedSeq: function() {                                                                                         // 4718\n      return new ToKeyedSequence(this, false);                                                                       // 4719\n    },                                                                                                               // 4720\n                                                                                                                     // 4721\n                                                                                                                     // 4722\n    // ### ES6 Collection methods (ES6 Array and Map)                                                                // 4723\n                                                                                                                     // 4724\n    filter: function(predicate, context) {                                                                           // 4725\n      return reify(this, filterFactory(this, predicate, context, false));                                            // 4726\n    },                                                                                                               // 4727\n                                                                                                                     // 4728\n    findIndex: function(predicate, context) {                                                                        // 4729\n      var entry = this.findEntry(predicate, context);                                                                // 4730\n      return entry ? entry[0] : -1;                                                                                  // 4731\n    },                                                                                                               // 4732\n                                                                                                                     // 4733\n    indexOf: function(searchValue) {                                                                                 // 4734\n      var key = this.toKeyedSeq().keyOf(searchValue);                                                                // 4735\n      return key === undefined ? -1 : key;                                                                           // 4736\n    },                                                                                                               // 4737\n                                                                                                                     // 4738\n    lastIndexOf: function(searchValue) {                                                                             // 4739\n      return this.toSeq().reverse().indexOf(searchValue);                                                            // 4740\n    },                                                                                                               // 4741\n                                                                                                                     // 4742\n    reverse: function() {                                                                                            // 4743\n      return reify(this, reverseFactory(this, false));                                                               // 4744\n    },                                                                                                               // 4745\n                                                                                                                     // 4746\n    slice: function(begin, end) {                                                                                    // 4747\n      return reify(this, sliceFactory(this, begin, end, false));                                                     // 4748\n    },                                                                                                               // 4749\n                                                                                                                     // 4750\n    splice: function(index, removeNum /*, ...values*/) {                                                             // 4751\n      var numArgs = arguments.length;                                                                                // 4752\n      removeNum = Math.max(removeNum | 0, 0);                                                                        // 4753\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {                                                          // 4754\n        return this;                                                                                                 // 4755\n      }                                                                                                              // 4756\n      // If index is negative, it should resolve relative to the size of the                                         // 4757\n      // collection. However size may be expensive to compute if not cached, so                                      // 4758\n      // only call count() if the number is in fact negative.                                                        // 4759\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);                                             // 4760\n      var spliced = this.slice(0, index);                                                                            // 4761\n      return reify(                                                                                                  // 4762\n          this,                                                                                                      // 4763\n          numArgs === 1 ?                                                                                            // 4764\n              spliced :                                                                                              // 4765\n              spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))                                   // 4766\n      );                                                                                                             // 4767\n    },                                                                                                               // 4768\n                                                                                                                     // 4769\n                                                                                                                     // 4770\n    // ### More collection methods                                                                                   // 4771\n                                                                                                                     // 4772\n    findLastIndex: function(predicate, context) {                                                                    // 4773\n      var key = this.toKeyedSeq().findLastKey(predicate, context);                                                   // 4774\n      return key === undefined ? -1 : key;                                                                           // 4775\n    },                                                                                                               // 4776\n                                                                                                                     // 4777\n    first: function() {                                                                                              // 4778\n      return this.get(0);                                                                                            // 4779\n    },                                                                                                               // 4780\n                                                                                                                     // 4781\n    flatten: function(depth) {                                                                                       // 4782\n      return reify(this, flattenFactory(this, depth, false));                                                        // 4783\n    },                                                                                                               // 4784\n                                                                                                                     // 4785\n    get: function(index, notSetValue) {                                                                              // 4786\n      index = wrapIndex(this, index);                                                                                // 4787\n      return (index < 0 || (this.size === Infinity ||                                                                // 4788\n      (this.size !== undefined && index > this.size))) ?                                                             // 4789\n          notSetValue :                                                                                              // 4790\n          this.find(function(_, key)  {return key === index}, undefined, notSetValue);                               // 4791\n    },                                                                                                               // 4792\n                                                                                                                     // 4793\n    has: function(index) {                                                                                           // 4794\n      index = wrapIndex(this, index);                                                                                // 4795\n      return index >= 0 && (this.size !== undefined ?                                                                // 4796\n              this.size === Infinity || index < this.size :                                                          // 4797\n              this.indexOf(index) !== -1                                                                             // 4798\n          );                                                                                                         // 4799\n    },                                                                                                               // 4800\n                                                                                                                     // 4801\n    interpose: function(separator) {                                                                                 // 4802\n      return reify(this, interposeFactory(this, separator));                                                         // 4803\n    },                                                                                                               // 4804\n                                                                                                                     // 4805\n    interleave: function(/*...iterables*/) {                                                                         // 4806\n      var iterables = [this].concat(arrCopy(arguments));                                                             // 4807\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);                                           // 4808\n      var interleaved = zipped.flatten(true);                                                                        // 4809\n      if (zipped.size) {                                                                                             // 4810\n        interleaved.size = zipped.size * iterables.length;                                                           // 4811\n      }                                                                                                              // 4812\n      return reify(this, interleaved);                                                                               // 4813\n    },                                                                                                               // 4814\n                                                                                                                     // 4815\n    last: function() {                                                                                               // 4816\n      return this.get(-1);                                                                                           // 4817\n    },                                                                                                               // 4818\n                                                                                                                     // 4819\n    skipWhile: function(predicate, context) {                                                                        // 4820\n      return reify(this, skipWhileFactory(this, predicate, context, false));                                         // 4821\n    },                                                                                                               // 4822\n                                                                                                                     // 4823\n    zip: function(/*, ...iterables */) {                                                                             // 4824\n      var iterables = [this].concat(arrCopy(arguments));                                                             // 4825\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));                                            // 4826\n    },                                                                                                               // 4827\n                                                                                                                     // 4828\n    zipWith: function(zipper/*, ...iterables */) {                                                                   // 4829\n      var iterables = arrCopy(arguments);                                                                            // 4830\n      iterables[0] = this;                                                                                           // 4831\n      return reify(this, zipWithFactory(this, zipper, iterables));                                                   // 4832\n    }                                                                                                                // 4833\n                                                                                                                     // 4834\n  });                                                                                                                // 4835\n                                                                                                                     // 4836\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;                                                             // 4837\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;                                                             // 4838\n                                                                                                                     // 4839\n                                                                                                                     // 4840\n                                                                                                                     // 4841\n  mixin(SetIterable, {                                                                                               // 4842\n                                                                                                                     // 4843\n    // ### ES6 Collection methods (ES6 Array and Map)                                                                // 4844\n                                                                                                                     // 4845\n    get: function(value, notSetValue) {                                                                              // 4846\n      return this.has(value) ? value : notSetValue;                                                                  // 4847\n    },                                                                                                               // 4848\n                                                                                                                     // 4849\n    includes: function(value) {                                                                                      // 4850\n      return this.has(value);                                                                                        // 4851\n    },                                                                                                               // 4852\n                                                                                                                     // 4853\n                                                                                                                     // 4854\n    // ### More sequential methods                                                                                   // 4855\n                                                                                                                     // 4856\n    keySeq: function() {                                                                                             // 4857\n      return this.valueSeq();                                                                                        // 4858\n    }                                                                                                                // 4859\n                                                                                                                     // 4860\n  });                                                                                                                // 4861\n                                                                                                                     // 4862\n  SetIterable.prototype.has = IterablePrototype.includes;                                                            // 4863\n                                                                                                                     // 4864\n                                                                                                                     // 4865\n  // Mixin subclasses                                                                                                // 4866\n                                                                                                                     // 4867\n  mixin(KeyedSeq, KeyedIterable.prototype);                                                                          // 4868\n  mixin(IndexedSeq, IndexedIterable.prototype);                                                                      // 4869\n  mixin(SetSeq, SetIterable.prototype);                                                                              // 4870\n                                                                                                                     // 4871\n  mixin(KeyedCollection, KeyedIterable.prototype);                                                                   // 4872\n  mixin(IndexedCollection, IndexedIterable.prototype);                                                               // 4873\n  mixin(SetCollection, SetIterable.prototype);                                                                       // 4874\n                                                                                                                     // 4875\n                                                                                                                     // 4876\n  // #pragma Helper functions                                                                                        // 4877\n                                                                                                                     // 4878\n  function keyMapper(v, k) {                                                                                         // 4879\n    return k;                                                                                                        // 4880\n  }                                                                                                                  // 4881\n                                                                                                                     // 4882\n  function entryMapper(v, k) {                                                                                       // 4883\n    return [k, v];                                                                                                   // 4884\n  }                                                                                                                  // 4885\n                                                                                                                     // 4886\n  function not(predicate) {                                                                                          // 4887\n    return function() {                                                                                              // 4888\n      return !predicate.apply(this, arguments);                                                                      // 4889\n    }                                                                                                                // 4890\n  }                                                                                                                  // 4891\n                                                                                                                     // 4892\n  function neg(predicate) {                                                                                          // 4893\n    return function() {                                                                                              // 4894\n      return -predicate.apply(this, arguments);                                                                      // 4895\n    }                                                                                                                // 4896\n  }                                                                                                                  // 4897\n                                                                                                                     // 4898\n  function quoteString(value) {                                                                                      // 4899\n    return typeof value === 'string' ? JSON.stringify(value) : value;                                                // 4900\n  }                                                                                                                  // 4901\n                                                                                                                     // 4902\n  function defaultZipper() {                                                                                         // 4903\n    return arrCopy(arguments);                                                                                       // 4904\n  }                                                                                                                  // 4905\n                                                                                                                     // 4906\n  function defaultNegComparator(a, b) {                                                                              // 4907\n    return a < b ? 1 : a > b ? -1 : 0;                                                                               // 4908\n  }                                                                                                                  // 4909\n                                                                                                                     // 4910\n  function hashIterable(iterable) {                                                                                  // 4911\n    if (iterable.size === Infinity) {                                                                                // 4912\n      return 0;                                                                                                      // 4913\n    }                                                                                                                // 4914\n    var ordered = isOrdered(iterable);                                                                               // 4915\n    var keyed = isKeyed(iterable);                                                                                   // 4916\n    var h = ordered ? 1 : 0;                                                                                         // 4917\n    var size = iterable.__iterate(                                                                                   // 4918\n        keyed ?                                                                                                      // 4919\n            ordered ?                                                                                                // 4920\n                function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :                                  // 4921\n                function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :                                       // 4922\n            ordered ?                                                                                                // 4923\n                function(v ) { h = 31 * h + hash(v) | 0; } :                                                         // 4924\n                function(v ) { h = h + hash(v) | 0; }                                                                // 4925\n    );                                                                                                               // 4926\n    return murmurHashOfSize(size, h);                                                                                // 4927\n  }                                                                                                                  // 4928\n                                                                                                                     // 4929\n  function murmurHashOfSize(size, h) {                                                                               // 4930\n    h = src_Math__imul(h, 0xCC9E2D51);                                                                               // 4931\n    h = src_Math__imul(h << 15 | h >>> -15, 0x1B873593);                                                             // 4932\n    h = src_Math__imul(h << 13 | h >>> -13, 5);                                                                      // 4933\n    h = (h + 0xE6546B64 | 0) ^ size;                                                                                 // 4934\n    h = src_Math__imul(h ^ h >>> 16, 0x85EBCA6B);                                                                    // 4935\n    h = src_Math__imul(h ^ h >>> 13, 0xC2B2AE35);                                                                    // 4936\n    h = smi(h ^ h >>> 16);                                                                                           // 4937\n    return h;                                                                                                        // 4938\n  }                                                                                                                  // 4939\n                                                                                                                     // 4940\n  function hashMerge(a, b) {                                                                                         // 4941\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int                                                      // 4942\n  }                                                                                                                  // 4943\n                                                                                                                     // 4944\n  var Immutable = {                                                                                                  // 4945\n                                                                                                                     // 4946\n    Iterable: Iterable,                                                                                              // 4947\n                                                                                                                     // 4948\n    Seq: Seq,                                                                                                        // 4949\n    Collection: Collection,                                                                                          // 4950\n    Map: src_Map__Map,                                                                                               // 4951\n    OrderedMap: OrderedMap,                                                                                          // 4952\n    List: List,                                                                                                      // 4953\n    Stack: Stack,                                                                                                    // 4954\n    Set: src_Set__Set,                                                                                               // 4955\n    OrderedSet: OrderedSet,                                                                                          // 4956\n                                                                                                                     // 4957\n    Record: Record,                                                                                                  // 4958\n    Range: Range,                                                                                                    // 4959\n    Repeat: Repeat,                                                                                                  // 4960\n                                                                                                                     // 4961\n    is: is,                                                                                                          // 4962\n    fromJS: fromJS                                                                                                   // 4963\n                                                                                                                     // 4964\n  };                                                                                                                 // 4965\n                                                                                                                     // 4966\n  return Immutable;                                                                                                  // 4967\n                                                                                                                     // 4968\n}));                                                                                                                 // 4969\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cal:immutable'] = {\n  Immutable: Immutable\n};\n\n})();\n","servePath":"/packages/cal_immutable.js","sourceMap":{"version":3,"sources":["/packages/cal_immutable/vendor/Immutable.js"],"names":[],"mappingsfile":"/packages/cal_immutable.js","sourcesContent":["/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nImmutable; // !!!for meteor to export\n\n(function (global, factory) {\n  //typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  //    typeof define === 'function' && define.amd ? define(factory) :\n  //        global.Immutable = factory()\n\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n      typeof define === 'function' && define.amd ? define(factory) :\n          Immutable= factory()\n\n\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32âˆ’1.\n    // However note that we're currently calling ToNumber() instead of ToUint32()\n    // which should be improved in the future, as floating point numbers should\n    // not be accepted as an array index.\n    if (typeof index !== 'number') {\n      var numIndex = +index;\n      if ('' + numIndex !== index) {\n        return NaN;\n      }\n      index = numIndex;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n        (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n        defaultIndex :\n        index < 0 ?\n            Math.max(0, size + index) :\n            size === undefined ?\n                index :\n                Math.min(size, index);\n  }\n\n  function Iterable(value) {\n    return isIterable(value) ? value : Seq(value);\n  }\n\n\n  createClass(KeyedIterable, Iterable);\n  function KeyedIterable(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n\n  createClass(IndexedIterable, Iterable);\n  function IndexedIterable(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n\n  createClass(SetIterable, Iterable);\n  function SetIterable(value) {\n    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function src_Iterator__Iterator(next) {\n    this.next = next;\n  }\n\n  src_Iterator__Iterator.prototype.toString = function() {\n    return '[Iterator]';\n  };\n\n\n  src_Iterator__Iterator.KEYS = ITERATE_KEYS;\n  src_Iterator__Iterator.VALUES = ITERATE_VALUES;\n  src_Iterator__Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  src_Iterator__Iterator.prototype.inspect =\n      src_Iterator__Iterator.prototype.toSource = function () { return this.toString(); }\n  src_Iterator__Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n            (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n            iterable[FAUX_ITERATOR_SYMBOL]\n        );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n  function Seq(value) {\n    return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n  }\n\n  Seq.of = function(/*...values*/) {\n    return Seq(arguments);\n  };\n\n  Seq.prototype.toSeq = function() {\n    return this;\n  };\n\n  Seq.prototype.toString = function() {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function() {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function(fn, reverse) {\n    return seqIterate(this, fn, reverse, true);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function(type, reverse) {\n    return seqIterator(this, type, reverse, true);\n  };\n\n\n\n  createClass(KeyedSeq, Seq);\n  function KeyedSeq(value) {\n    return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n            (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n            keyedSeqFromValue(value);\n  }\n\n  KeyedSeq.prototype.toKeyedSeq = function() {\n    return this;\n  };\n\n\n\n  createClass(IndexedSeq, Seq);\n  function IndexedSeq(value) {\n    return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n            isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n  }\n\n  IndexedSeq.of = function(/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function() {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function() {\n    return this.__toString('Seq [', ']');\n  };\n\n  IndexedSeq.prototype.__iterate = function(fn, reverse) {\n    return seqIterate(this, fn, reverse, false);\n  };\n\n  IndexedSeq.prototype.__iterator = function(type, reverse) {\n    return seqIterator(this, type, reverse, false);\n  };\n\n\n\n  createClass(SetSeq, Seq);\n  function SetSeq(value) {\n    return (\n        value === null || value === undefined ? emptySequence() :\n            !isIterable(value) ? indexedSeqFromValue(value) :\n                isKeyed(value) ? value.entrySeq() : value\n    ).toSetSeq();\n  }\n\n  SetSeq.of = function(/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function() {\n    return this;\n  };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  // #pragma Root Sequences\n\n  createClass(ArraySeq, IndexedSeq);\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  ArraySeq.prototype.get = function(index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function(fn, reverse) {\n    var array = this._array;\n    var maxIndex = array.length - 1;\n    for (var ii = 0; ii <= maxIndex; ii++) {\n      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n        return ii + 1;\n      }\n    }\n    return ii;\n  };\n\n  ArraySeq.prototype.__iterator = function(type, reverse) {\n    var array = this._array;\n    var maxIndex = array.length - 1;\n    var ii = 0;\n    return new src_Iterator__Iterator(function()\n        {return ii > maxIndex ?\n            iteratorDone() :\n            iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n    );\n  };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n  function ObjectSeq(object) {\n    var keys = Object.keys(object);\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  ObjectSeq.prototype.get = function(key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function(key) {\n    return this._object.hasOwnProperty(key);\n  };\n\n  ObjectSeq.prototype.__iterate = function(fn, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var maxIndex = keys.length - 1;\n    for (var ii = 0; ii <= maxIndex; ii++) {\n      var key = keys[reverse ? maxIndex - ii : ii];\n      if (fn(object[key], key, this) === false) {\n        return ii + 1;\n      }\n    }\n    return ii;\n  };\n\n  ObjectSeq.prototype.__iterator = function(type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var maxIndex = keys.length - 1;\n    var ii = 0;\n    return new src_Iterator__Iterator(function()  {\n      var key = keys[reverse ? maxIndex - ii : ii];\n      return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n    });\n  };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n  function IterableSeq(iterable) {\n    this._iterable = iterable;\n    this.size = iterable.length || iterable.size;\n  }\n\n  IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterable = this._iterable;\n    var iterator = getIterator(iterable);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterable = this._iterable;\n    var iterator = getIterator(iterable);\n    if (!isIterator(iterator)) {\n      return new src_Iterator__Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new src_Iterator__Iterator(function()  {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n  function IteratorSeq(iterator) {\n    this._iterator = iterator;\n    this._iteratorCache = [];\n  }\n\n  IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    while (iterations < cache.length) {\n      if (fn(cache[iterations], iterations++, this) === false) {\n        return iterations;\n      }\n    }\n    var step;\n    while (!(step = iterator.next()).done) {\n      var val = step.value;\n      cache[iterations] = val;\n      if (fn(val, iterations++, this) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n\n  IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    return new src_Iterator__Iterator(function()  {\n      if (iterations >= cache.length) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        cache[iterations] = step.value;\n      }\n      return iteratorValue(type, iterations, cache[iterations++]);\n    });\n  };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n        Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n            isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n                hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n                    typeof value === 'object' ? new ObjectSeq(value) :\n                        undefined;\n    if (!seq) {\n      throw new TypeError(\n          'Expected Array or iterable object of [k, v] entries, '+\n          'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n          'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n        (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n          'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n        isArrayLike(value) ? new ArraySeq(value) :\n            isIterator(value) ? new IteratorSeq(value) :\n                hasIterator(value) ? new IterableSeq(value) :\n                    undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new src_Iterator__Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n            iteratorDone() :\n            iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  createClass(Collection, Iterable);\n  function Collection() {\n    throw TypeError('Abstract');\n  }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n        fromJSWith(converter, json, '', {'': json}) :\n        fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  var src_Math__imul =\n      typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n          Math.imul :\n          function imul(a, b) {\n            a = a | 0; // int\n            b = b | 0; // int\n            var c = a & 0xffff;\n            var d = b & 0xffff;\n            // Shift by 0 fixes the sign on the high part.\n            return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n          };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    return hashJSObj(o);\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n        obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  function assertNotInfinite(size) {\n    invariant(\n        size !== Infinity,\n        'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  ToKeyedSequence.prototype.get = function(key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function(key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function() {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    var ii;\n    return this._iter.__iterate(\n        this._useKeys ?\n            function(v, k)  {return fn(v, k, this$0)} :\n            ((ii = reverse ? resolveSize(this) : 0),\n                function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n    );\n  };\n\n  ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n    if (this._useKeys) {\n      return this._iter.__iterator(type, reverse);\n    }\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var ii = reverse ? resolveSize(this) : 0;\n    return new src_Iterator__Iterator(function()  {\n      var step = iterator.next();\n      return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n    });\n  };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  ToIndexedSequence.prototype.includes = function(value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    var iterations = 0;\n    return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n  };\n\n  ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    return new src_Iterator__Iterator(function()  {\n      var step = iterator.next();\n      return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n    });\n  };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  ToSetSequence.prototype.has = function(key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function(type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new src_Iterator__Iterator(function()  {\n      var step = iterator.next();\n      return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  FromEntriesSequence.prototype.entrySeq = function() {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    return this._iter.__iterate(function(entry ) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedIterable = isIterable(entry);\n        return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new src_Iterator__Iterator(function()  {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n          );\n        }\n      }\n    });\n  };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n      ToKeyedSequence.prototype.cacheResult =\n          ToSetSequence.prototype.cacheResult =\n              FromEntriesSequence.prototype.cacheResult =\n                  cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new src_Iterator__Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n          type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n          reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n          notSetValue :\n          mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n          function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n          reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n            type,\n            key,\n            mapper.call(context, entry[1], key, iterable),\n            step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue)\n    {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n    {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n        function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n            v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = src_Map__Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n          grouper.call(context, v, k, iterable),\n          0,\n          function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : src_Map__Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n          grouper.call(context, v, k, iterable),\n          function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n            iterable.get(index + resolvedBegin, notSetValue) :\n            notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n              iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)\n          {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new src_Iterator__Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n            iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n            iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n            keyedSeqFromValue(v) :\n            indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n        function(sum, seq)  {\n          if (sum !== undefined) {\n            var size = seq.size;\n            if (size !== undefined) {\n              return sum + size;\n            }\n          }\n        },\n        0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n        function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)\n          {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n              fn(v, iterations++, this$0) !== false},\n          reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new src_Iterator__Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n            iteratorValue(type, iterations++, separator) :\n            iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n        function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n        isKeyedIterable ?\n            function(v, i)  { entries[i].length = 2; } :\n            function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n        isIndexed(iterable) ? IndexedSeq(entries) :\n            SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n          .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n          .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n       var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n       var step;\n       var iterations = 0;\n       while (!(step = iterator.next()).done) {\n       iterations++;\n       if (fn(step.value[1], step.value[0], this) === false) {\n       break;\n       }\n       }\n       return iterations;\n       */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n          {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new src_Iterator__Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n            type,\n            iterations++,\n            zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n        isIndexed(iterable) ? IndexedIterable :\n            SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n        (\n            isKeyed(iterable) ? KeyedSeq :\n                isIndexed(iterable) ? IndexedSeq :\n                    SetSeq\n        ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(src_Map__Map, KeyedCollection);\n\n  // @pragma Construction\n\n  function src_Map__Map(value) {\n    return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n            emptyMap().withMutations(function(map ) {\n              var iter = KeyedIterable(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function(v, k)  {return map.set(k, v)});\n            });\n  }\n\n  src_Map__Map.prototype.toString = function() {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  src_Map__Map.prototype.get = function(k, notSetValue) {\n    return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n  };\n\n  // @pragma Modification\n\n  src_Map__Map.prototype.set = function(k, v) {\n    return updateMap(this, k, v);\n  };\n\n  src_Map__Map.prototype.setIn = function(keyPath, v) {\n    return this.updateIn(keyPath, NOT_SET, function()  {return v});\n  };\n\n  src_Map__Map.prototype.remove = function(k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  src_Map__Map.prototype.deleteIn = function(keyPath) {\n    return this.updateIn(keyPath, function()  {return NOT_SET});\n  };\n\n  src_Map__Map.prototype.update = function(k, notSetValue, updater) {\n    return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n  };\n\n  src_Map__Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n    if (!updater) {\n      updater = notSetValue;\n      notSetValue = undefined;\n    }\n    var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n    );\n    return updatedValue === NOT_SET ? undefined : updatedValue;\n  };\n\n  src_Map__Map.prototype.clear = function() {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  src_Map__Map.prototype.merge = function(/*...iters*/) {\n    return mergeIntoMapWith(this, undefined, arguments);\n  };\n\n  src_Map__Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n    return mergeIntoMapWith(this, merger, iters);\n  };\n\n  src_Map__Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n    return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n            m.merge.apply(m, iters) :\n            iters[iters.length - 1]}\n    );\n  };\n\n  src_Map__Map.prototype.mergeDeep = function(/*...iters*/) {\n    return mergeIntoMapWith(this, deepMerger(undefined), arguments);\n  };\n\n  src_Map__Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n    return mergeIntoMapWith(this, deepMerger(merger), iters);\n  };\n\n  src_Map__Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n    return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n            m.mergeDeep.apply(m, iters) :\n            iters[iters.length - 1]}\n    );\n  };\n\n  src_Map__Map.prototype.sort = function(comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  src_Map__Map.prototype.sortBy = function(mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  // @pragma Mutability\n\n  src_Map__Map.prototype.withMutations = function(fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n  };\n\n  src_Map__Map.prototype.asMutable = function() {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n  };\n\n  src_Map__Map.prototype.asImmutable = function() {\n    return this.__ensureOwner();\n  };\n\n  src_Map__Map.prototype.wasAltered = function() {\n    return this.__altered;\n  };\n\n  src_Map__Map.prototype.__iterator = function(type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  src_Map__Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    var iterations = 0;\n    this._root && this._root.iterate(function(entry ) {\n      iterations++;\n      return fn(entry[1], entry[0], this$0);\n    }, reverse);\n    return iterations;\n  };\n\n  src_Map__Map.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  src_Map__Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = src_Map__Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n  function ArrayMapNode(ownerID, entries) {\n    this.ownerID = ownerID;\n    this.entries = entries;\n  }\n\n  ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n\n    var entries = this.entries;\n    var idx = 0;\n    for (var len = entries.length; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && entries.length === 1) {\n      return; // undefined\n    }\n\n    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n      return createNodes(ownerID, entries, key, value);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new ArrayMapNode(ownerID, newEntries);\n  };\n\n\n\n\n  function BitmapIndexedNode(ownerID, bitmap, nodes) {\n    this.ownerID = ownerID;\n    this.bitmap = bitmap;\n    this.nodes = nodes;\n  }\n\n  BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n    var bitmap = this.bitmap;\n    return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n  };\n\n  BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var bit = 1 << keyHashFrag;\n    var bitmap = this.bitmap;\n    var exists = (bitmap & bit) !== 0;\n\n    if (!exists && value === NOT_SET) {\n      return this;\n    }\n\n    var idx = popCount(bitmap & (bit - 1));\n    var nodes = this.nodes;\n    var node = exists ? nodes[idx] : undefined;\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n    if (newNode === node) {\n      return this;\n    }\n\n    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n    }\n\n    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n      return nodes[idx ^ 1];\n    }\n\n    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n      return newNode;\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n    var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.bitmap = newBitmap;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n  };\n\n\n\n\n  function HashArrayMapNode(ownerID, count, nodes) {\n    this.ownerID = ownerID;\n    this.count = count;\n    this.nodes = nodes;\n  }\n\n  HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var node = this.nodes[idx];\n    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n  };\n\n  HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var removed = value === NOT_SET;\n    var nodes = this.nodes;\n    var node = nodes[idx];\n\n    if (removed && !node) {\n      return this;\n    }\n\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n    if (newNode === node) {\n      return this;\n    }\n\n    var newCount = this.count;\n    if (!node) {\n      newCount++;\n    } else if (!newNode) {\n      newCount--;\n      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n        return packNodes(ownerID, nodes, newCount, idx);\n      }\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.count = newCount;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new HashArrayMapNode(ownerID, newCount, newNodes);\n  };\n\n\n\n\n  function HashCollisionNode(ownerID, keyHash, entries) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entries = entries;\n  }\n\n  HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n\n    var removed = value === NOT_SET;\n\n    if (keyHash !== this.keyHash) {\n      if (removed) {\n        return this;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n    }\n\n    var entries = this.entries;\n    var idx = 0;\n    for (var len = entries.length; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && len === 2) {\n      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n  };\n\n\n\n\n  function ValueNode(ownerID, keyHash, entry) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entry = entry;\n  }\n\n  ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n  };\n\n  ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n    var keyMatch = is(key, this.entry[0]);\n    if (keyMatch ? value === this.entry[1] : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n\n    if (removed) {\n      SetRef(didChangeSize);\n      return; // undefined\n    }\n\n    if (keyMatch) {\n      if (ownerID && ownerID === this.ownerID) {\n        this.entry[1] = value;\n        return this;\n      }\n      return new ValueNode(ownerID, this.keyHash, [key, value]);\n    }\n\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n  };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n      HashCollisionNode.prototype.iterate = function (fn, reverse) {\n        var entries = this.entries;\n        for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n          if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n            return false;\n          }\n        }\n      }\n\n  BitmapIndexedNode.prototype.iterate =\n      HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n        var nodes = this.nodes;\n        for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n          var node = nodes[reverse ? maxIndex - ii : ii];\n          if (node && node.iterate(fn, reverse) === false) {\n            return false;\n          }\n        }\n      }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, src_Iterator__Iterator);\n\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  MapIterator.prototype.next = function() {\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex;\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this._stack = this._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n        [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n        ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(merger) {\n    return function(existing, value, key)\n    {return existing && existing.mergeDeepWith && isIterable(value) ?\n        existing.mergeDeepWith(merger, value) :\n        merger ? merger(existing, value, key) : value};\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n          function(value, key)  {\n            collection.update(key, NOT_SET, function(existing )\n                {return existing === NOT_SET ? value : merger(existing, value, key)}\n            );\n          } :\n          function(value, key)  {\n            collection.set(key, value);\n          }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n        isNotSet || (existing && existing.set),\n        'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n        nextExisting,\n        keyPathIter,\n        notSetValue,\n        updater\n    );\n    return nextUpdated === nextExisting ? existing :\n        nextUpdated === NOT_SET ? existing.remove(key) :\n            (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n  // @pragma Construction\n\n  function List(value) {\n    var empty = emptyList();\n    if (value === null || value === undefined) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedIterable(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function(list ) {\n      list.setSize(size);\n      iter.forEach(function(v, i)  {return list.set(i, v)});\n    });\n  }\n\n  List.of = function(/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function() {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function(index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function(index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function(index) {\n    return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n            index === this.size - 1 ? this.pop() :\n                this.splice(index, 1);\n  };\n\n  List.prototype.clear = function() {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function(/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function(list ) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function() {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function(/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function(list ) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function() {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.merge = function(/*...iters*/) {\n    return mergeIntoListWith(this, undefined, arguments);\n  };\n\n  List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n    return mergeIntoListWith(this, merger, iters);\n  };\n\n  List.prototype.mergeDeep = function(/*...iters*/) {\n    return mergeIntoListWith(this, deepMerger(undefined), arguments);\n  };\n\n  List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n    return mergeIntoListWith(this, deepMerger(merger), iters);\n  };\n\n  List.prototype.setSize = function(size) {\n    return setListBounds(this, 0, size);\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function(begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function(type, reverse) {\n    var index = 0;\n    var values = iterateList(this, reverse);\n    return new src_Iterator__Iterator(function()  {\n      var value = values();\n      return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function(fn, reverse) {\n    var index = 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, index++, this) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      return this;\n    }\n    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n  };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n      ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n  function VNode(array, ownerID) {\n    this.array = array;\n    this.ownerID = ownerID;\n  }\n\n  // TODO: seems like these methods are very similar\n\n  VNode.prototype.removeBefore = function(ownerID, level, index) {\n    if (index === level ? 1 << level : 0 || this.array.length === 0) {\n      return this;\n    }\n    var originIndex = (index >>> level) & MASK;\n    if (originIndex >= this.array.length) {\n      return new VNode([], ownerID);\n    }\n    var removingFirst = originIndex === 0;\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[originIndex];\n      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && removingFirst) {\n        return this;\n      }\n    }\n    if (removingFirst && !newChild) {\n      return this;\n    }\n    var editable = editableVNode(this, ownerID);\n    if (!removingFirst) {\n      for (var ii = 0; ii < originIndex; ii++) {\n        editable.array[ii] = undefined;\n      }\n    }\n    if (newChild) {\n      editable.array[originIndex] = newChild;\n    }\n    return editable;\n  };\n\n  VNode.prototype.removeAfter = function(ownerID, level, index) {\n    if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n      return this;\n    }\n    var sizeIndex = ((index - 1) >>> level) & MASK;\n    if (sizeIndex >= this.array.length) {\n      return this;\n    }\n\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[sizeIndex];\n      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n        return this;\n      }\n    }\n\n    var editable = editableVNode(this, ownerID);\n    editable.array.splice(sizeIndex + 1);\n    if (newChild) {\n      editable.array[sizeIndex] = newChild;\n    }\n    return editable;\n  };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n          iterateLeaf(node, offset) :\n          iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n              array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n            setListBounds(list, index).set(0, value) :\n            setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n        listNodeFor(list, newCapacity - 1) :\n        newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n      // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, src_Map__Map);\n\n  // @pragma Construction\n\n  function OrderedMap(value) {\n    return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n            emptyOrderedMap().withMutations(function(map ) {\n              var iter = KeyedIterable(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function(v, k)  {return map.set(k, v)});\n            });\n  }\n\n  OrderedMap.of = function(/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function() {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function(k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function() {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function(k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function(k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.wasAltered = function() {\n    return this._map.wasAltered() || this._list.wasAltered();\n  };\n\n  OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function(type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(Stack, IndexedCollection);\n\n  // @pragma Construction\n\n  function Stack(value) {\n    return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n            emptyStack().unshiftAll(value);\n  }\n\n  Stack.of = function(/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function() {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function(index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function() {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function(/*...values*/) {\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments[ii],\n        next: head\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function(iter) {\n    iter = IndexedIterable(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.reverse().forEach(function(value ) {\n      newSize++;\n      head = {\n        value: value,\n        next: head\n      };\n    });\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function() {\n    return this.slice(1);\n  };\n\n  Stack.prototype.unshift = function(/*...values*/) {\n    return this.push.apply(this, arguments);\n  };\n\n  Stack.prototype.unshiftAll = function(iter) {\n    return this.pushAll(iter);\n  };\n\n  Stack.prototype.shift = function() {\n    return this.pop.apply(this, arguments);\n  };\n\n  Stack.prototype.clear = function() {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function(begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function(fn, reverse) {\n    if (reverse) {\n      return this.reverse().__iterate(fn);\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function(type, reverse) {\n    if (reverse) {\n      return this.reverse().__iterator(type);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new src_Iterator__Iterator(function()  {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  createClass(src_Set__Set, SetCollection);\n\n  // @pragma Construction\n\n  function src_Set__Set(value) {\n    return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n            emptySet().withMutations(function(set ) {\n              var iter = SetIterable(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function(v ) {return set.add(v)});\n            });\n  }\n\n  src_Set__Set.of = function(/*...values*/) {\n    return this(arguments);\n  };\n\n  src_Set__Set.fromKeys = function(value) {\n    return this(KeyedIterable(value).keySeq());\n  };\n\n  src_Set__Set.prototype.toString = function() {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  src_Set__Set.prototype.has = function(value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  src_Set__Set.prototype.add = function(value) {\n    return updateSet(this, this._map.set(value, true));\n  };\n\n  src_Set__Set.prototype.remove = function(value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  src_Set__Set.prototype.clear = function() {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  src_Set__Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function(set ) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n      }\n    });\n  };\n\n  src_Set__Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function(iter ) {return SetIterable(iter)});\n    var originalSet = this;\n    return this.withMutations(function(set ) {\n      originalSet.forEach(function(value ) {\n        if (!iters.every(function(iter ) {return iter.includes(value)})) {\n          set.remove(value);\n        }\n      });\n    });\n  };\n\n  src_Set__Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function(iter ) {return SetIterable(iter)});\n    var originalSet = this;\n    return this.withMutations(function(set ) {\n      originalSet.forEach(function(value ) {\n        if (iters.some(function(iter ) {return iter.includes(value)})) {\n          set.remove(value);\n        }\n      });\n    });\n  };\n\n  src_Set__Set.prototype.merge = function() {\n    return this.union.apply(this, arguments);\n  };\n\n  src_Set__Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n    return this.union.apply(this, iters);\n  };\n\n  src_Set__Set.prototype.sort = function(comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  src_Set__Set.prototype.sortBy = function(mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  src_Set__Set.prototype.wasAltered = function() {\n    return this._map.wasAltered();\n  };\n\n  src_Set__Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n  };\n\n  src_Set__Set.prototype.__iterator = function(type, reverse) {\n    return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n  };\n\n  src_Set__Set.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  src_Set__Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = src_Set__Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n        newMap.size === 0 ? set.__empty() :\n            set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, src_Set__Set);\n\n  // @pragma Construction\n\n  function OrderedSet(value) {\n    return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n            emptyOrderedSet().withMutations(function(set ) {\n              var iter = SetIterable(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function(v ) {return set.add(v)});\n            });\n  }\n\n  OrderedSet.of = function(/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function(value) {\n    return this(KeyedIterable(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function() {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Record, KeyedCollection);\n\n  function Record(defaultValues, name) {\n    var hasInitialized;\n\n    var RecordType = function Record(values) {\n      if (values instanceof RecordType) {\n        return values;\n      }\n      if (!(this instanceof RecordType)) {\n        return new RecordType(values);\n      }\n      if (!hasInitialized) {\n        hasInitialized = true;\n        var keys = Object.keys(defaultValues);\n        setProps(RecordTypePrototype, keys);\n        RecordTypePrototype.size = keys.length;\n        RecordTypePrototype._name = name;\n        RecordTypePrototype._keys = keys;\n        RecordTypePrototype._defaultValues = defaultValues;\n      }\n      this._map = src_Map__Map(values);\n    };\n\n    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n    RecordTypePrototype.constructor = RecordType;\n\n    return RecordType;\n  }\n\n  Record.prototype.toString = function() {\n    return this.__toString(recordName(this) + ' {', '}');\n  };\n\n  // @pragma Access\n\n  Record.prototype.has = function(k) {\n    return this._defaultValues.hasOwnProperty(k);\n  };\n\n  Record.prototype.get = function(k, notSetValue) {\n    if (!this.has(k)) {\n      return notSetValue;\n    }\n    var defaultVal = this._defaultValues[k];\n    return this._map ? this._map.get(k, defaultVal) : defaultVal;\n  };\n\n  // @pragma Modification\n\n  Record.prototype.clear = function() {\n    if (this.__ownerID) {\n      this._map && this._map.clear();\n      return this;\n    }\n    var RecordType = this.constructor;\n    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n  };\n\n  Record.prototype.set = function(k, v) {\n    if (!this.has(k)) {\n      throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n    }\n    var newMap = this._map && this._map.set(k, v);\n    if (this.__ownerID || newMap === this._map) {\n      return this;\n    }\n    return makeRecord(this, newMap);\n  };\n\n  Record.prototype.remove = function(k) {\n    if (!this.has(k)) {\n      return this;\n    }\n    var newMap = this._map && this._map.remove(k);\n    if (this.__ownerID || newMap === this._map) {\n      return this;\n    }\n    return makeRecord(this, newMap);\n  };\n\n  Record.prototype.wasAltered = function() {\n    return this._map.wasAltered();\n  };\n\n  Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n    return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n  };\n\n  Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n    return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n  };\n\n  Record.prototype.__ensureOwner = function(ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map && this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return makeRecord(this, newMap, ownerID);\n  };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n      RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n        !isIterable(b) ||\n        a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n        a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n        isKeyed(a) !== isKeyed(b) ||\n        isIndexed(a) !== isIndexed(b) ||\n        isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n            var entry = entries.next().value;\n            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n          }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n              flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Range, IndexedSeq);\n\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  Range.prototype.toString = function() {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step > 1 ? ' by ' + this._step : '') +\n        ' ]';\n  };\n\n  Range.prototype.get = function(index, notSetValue) {\n    return this.has(index) ?\n    this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n  };\n\n  Range.prototype.includes = function(searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n  };\n\n  Range.prototype.slice = function(begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n  };\n\n  Range.prototype.indexOf = function(searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function(searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function(fn, reverse) {\n    var maxIndex = this.size - 1;\n    var step = this._step;\n    var value = reverse ? this._start + maxIndex * step : this._start;\n    for (var ii = 0; ii <= maxIndex; ii++) {\n      if (fn(value, ii, this) === false) {\n        return ii + 1;\n      }\n      value += reverse ? -step : step;\n    }\n    return ii;\n  };\n\n  Range.prototype.__iterator = function(type, reverse) {\n    var maxIndex = this.size - 1;\n    var step = this._step;\n    var value = reverse ? this._start + maxIndex * step : this._start;\n    var ii = 0;\n    return new src_Iterator__Iterator(function()  {\n      var v = value;\n      value += reverse ? -step : step;\n      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n    });\n  };\n\n  Range.prototype.equals = function(other) {\n    return other instanceof Range ?\n    this._start === other._start &&\n    this._end === other._end &&\n    this._step === other._step :\n        deepEqual(this, other);\n  };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Repeat, IndexedSeq);\n\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  Repeat.prototype.toString = function() {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function(index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function(searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function(begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n  };\n\n  Repeat.prototype.reverse = function() {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function(searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function(searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function(fn, reverse) {\n    for (var ii = 0; ii < this.size; ii++) {\n      if (fn(this._value, ii, this) === false) {\n        return ii + 1;\n      }\n    }\n    return ii;\n  };\n\n  Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n    var ii = 0;\n    return new src_Iterator__Iterator(function()\n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n    );\n  };\n\n  Repeat.prototype.equals = function(other) {\n    return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n  };\n\n\n  var EMPTY_REPEAT;\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = src_Iterator__Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n          function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n          function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return src_Map__Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return src_Set__Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n          isKeyed(this) ? this.toKeyedSeq() :\n              this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    findEntry: function(predicate, context) {\n      var found;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findLastEntry: function(predicate, context) {\n      return this.toSeq().reverse().findEntry(predicate, context);\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n          predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n      IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  // Temporary warning about using length\n  (function () {\n    try {\n      Object.defineProperty(IterablePrototype, 'length', {\n        get: function () {\n          if (!Iterable.noLengthWarning) {\n            var stack;\n            try {\n              throw new Error();\n            } catch (error) {\n              stack = error.stack;\n            }\n            if (stack.indexOf('_wrapObject') === -1) {\n              console && console.warn && console.warn(\n                  'iterable.length has been deprecated, '+\n                  'use iterable.size or iterable.count(). '+\n                  'This warning will become a silent error in a future version. ' +\n                  stack\n              );\n              return this.size;\n            }\n          }\n        }\n      });\n    } catch (e) {}\n  })();\n\n\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toSeq().reverse().findKey(predicate, context);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.findLastKey(function(value ) {return is(value, searchValue)});\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n          this.toSeq().map(\n              function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n          ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n          this.toSeq().flip().map(\n              function(k, v)  {return mapper.call(context, k, v, this$0)}\n          ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.toKeyedSeq().keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      return this.toSeq().reverse().indexOf(searchValue);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n          this,\n          numArgs === 1 ?\n              spliced :\n              spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var key = this.toKeyedSeq().findLastKey(predicate, context);\n      return key === undefined ? -1 : key;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n      (this.size !== undefined && index > this.size))) ?\n          notSetValue :\n          this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n              this.size === Infinity || index < this.size :\n              this.indexOf(index) !== -1\n          );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : value;\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n        keyed ?\n            ordered ?\n                function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n                function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n            ordered ?\n                function(v ) { h = 31 * h + hash(v) | 0; } :\n                function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = src_Math__imul(h, 0xCC9E2D51);\n    h = src_Math__imul(h << 15 | h >>> -15, 0x1B873593);\n    h = src_Math__imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = src_Math__imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = src_Math__imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: src_Map__Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: src_Set__Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));"]}}]