[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsClient = Package['accounts-base'].AccountsClient;\nvar SRP = Package.srp.SRP;\nvar SHA256 = Package.sha.SHA256;\nvar EJSON = Package.ejson.EJSON;\nvar DDP = Package['ddp-client'].DDP;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-password/packages/accounts-password.js                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function(){                                                                                                         // 1\n                                                                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                            //     // 4\n// packages/accounts-password/password_client.js                                                              //     // 5\n//                                                                                                            //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                              //     // 8\n// Attempt to log in with a password.                                                                         // 1   // 9\n//                                                                                                            // 2   // 10\n// @param selector {String|Object} One of the following:                                                      // 3   // 11\n//   - {username: (username)}                                                                                 // 4   // 12\n//   - {email: (email)}                                                                                       // 5   // 13\n//   - a string which may be a username or email, depending on whether                                        // 6   // 14\n//     it contains \"@\".                                                                                       // 7   // 15\n// @param password {String}                                                                                   // 8   // 16\n// @param callback {Function(error|undefined)}                                                                // 9   // 17\n                                                                                                              // 10  // 18\n/**                                                                                                           // 11  // 19\n * @summary Log the user in with a password.                                                                  // 12  // 20\n * @locus Client                                                                                              // 13  // 21\n * @param {Object | String} user                                                                              // 14  // 22\n *   Either a string interpreted as a username or an email; or an object with a                               // 15  // 23\n *   single key: `email`, `username` or `id`. Username or email match in a case                               // 16  // 24\n *   insensitive manner.                                                                                      // 17  // 25\n * @param {String} password The user's password.                                                              // 18  // 26\n * @param {Function} [callback] Optional callback.                                                            // 19  // 27\n *   Called with no arguments on success, or with a single `Error` argument                                   // 20  // 28\n *   on failure.                                                                                              // 21  // 29\n */                                                                                                           // 22  // 30\nMeteor.loginWithPassword = function (selector, password, callback) {                                          // 23  // 31\n  if (typeof selector === 'string')                                                                           // 24  // 32\n    if (selector.indexOf('@') === -1)                                                                         // 25  // 33\n      selector = {username: selector};                                                                        // 26  // 34\n    else                                                                                                      // 27  // 35\n      selector = {email: selector};                                                                           // 28  // 36\n                                                                                                              // 29  // 37\n  Accounts.callLoginMethod({                                                                                  // 30  // 38\n    methodArguments: [{                                                                                       // 31  // 39\n      user: selector,                                                                                         // 32  // 40\n      password: Accounts._hashPassword(password)                                                              // 33  // 41\n    }],                                                                                                       // 34  // 42\n    userCallback: function (error, result) {                                                                  // 35  // 43\n      if (error && error.error === 400 &&                                                                     // 36  // 44\n          error.reason === 'old password format') {                                                           // 37  // 45\n        // The \"reason\" string should match the error thrown in the                                           // 38  // 46\n        // password login handler in password_server.js.                                                      // 39  // 47\n                                                                                                              // 40  // 48\n        // XXX COMPAT WITH 0.8.1.3                                                                            // 41  // 49\n        // If this user's last login was with a previous version of                                           // 42  // 50\n        // Meteor that used SRP, then the server throws this error to                                         // 43  // 51\n        // indicate that we should try again. The error includes the                                          // 44  // 52\n        // user's SRP identity. We provide a value derived from the                                           // 45  // 53\n        // identity and the password to prove to the server that we know                                      // 46  // 54\n        // the password without requiring a full SRP flow, as well as                                         // 47  // 55\n        // SHA256(password), which the server bcrypts and stores in                                           // 48  // 56\n        // place of the old SRP information for this user.                                                    // 49  // 57\n        srpUpgradePath({                                                                                      // 50  // 58\n          upgradeError: error,                                                                                // 51  // 59\n          userSelector: selector,                                                                             // 52  // 60\n          plaintextPassword: password                                                                         // 53  // 61\n        }, callback);                                                                                         // 54  // 62\n      }                                                                                                       // 55  // 63\n      else if (error) {                                                                                       // 56  // 64\n        callback && callback(error);                                                                          // 57  // 65\n      } else {                                                                                                // 58  // 66\n        callback && callback();                                                                               // 59  // 67\n      }                                                                                                       // 60  // 68\n    }                                                                                                         // 61  // 69\n  });                                                                                                         // 62  // 70\n};                                                                                                            // 63  // 71\n                                                                                                              // 64  // 72\nAccounts._hashPassword = function (password) {                                                                // 65  // 73\n  return {                                                                                                    // 66  // 74\n    digest: SHA256(password),                                                                                 // 67  // 75\n    algorithm: \"sha-256\"                                                                                      // 68  // 76\n  };                                                                                                          // 69  // 77\n};                                                                                                            // 70  // 78\n                                                                                                              // 71  // 79\n// XXX COMPAT WITH 0.8.1.3                                                                                    // 72  // 80\n// The server requested an upgrade from the old SRP password format,                                          // 73  // 81\n// so supply the needed SRP identity to login. Options:                                                       // 74  // 82\n//   - upgradeError: the error object that the server returned to tell                                        // 75  // 83\n//     us to upgrade from SRP to bcrypt.                                                                      // 76  // 84\n//   - userSelector: selector to retrieve the user object                                                     // 77  // 85\n//   - plaintextPassword: the password as a string                                                            // 78  // 86\nvar srpUpgradePath = function (options, callback) {                                                           // 79  // 87\n  var details;                                                                                                // 80  // 88\n  try {                                                                                                       // 81  // 89\n    details = EJSON.parse(options.upgradeError.details);                                                      // 82  // 90\n  } catch (e) {}                                                                                              // 83  // 91\n  if (!(details && details.format === 'srp')) {                                                               // 84  // 92\n    callback && callback(                                                                                     // 85  // 93\n      new Meteor.Error(400, \"Password is old. Please reset your \" +                                           // 86  // 94\n                       \"password.\"));                                                                         // 87  // 95\n  } else {                                                                                                    // 88  // 96\n    Accounts.callLoginMethod({                                                                                // 89  // 97\n      methodArguments: [{                                                                                     // 90  // 98\n        user: options.userSelector,                                                                           // 91  // 99\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),                                      // 92  // 100\n        password: Accounts._hashPassword(options.plaintextPassword)                                           // 93  // 101\n      }],                                                                                                     // 94  // 102\n      userCallback: callback                                                                                  // 95  // 103\n    });                                                                                                       // 96  // 104\n  }                                                                                                           // 97  // 105\n};                                                                                                            // 98  // 106\n                                                                                                              // 99  // 107\n                                                                                                              // 100\n// Attempt to log in as a new user.                                                                           // 101\n                                                                                                              // 102\n/**                                                                                                           // 103\n * @summary Create a new user.                                                                                // 104\n * @locus Anywhere                                                                                            // 105\n * @param {Object} options                                                                                    // 106\n * @param {String} options.username A unique name for this user.                                              // 107\n * @param {String} options.email The user's email address.                                                    // 108\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.    // 109\n * @param {Object} options.profile The user's profile, typically including the `name` field.                  // 110\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 112\nAccounts.createUser = function (options, callback) {                                                          // 113\n  options = _.clone(options); // we'll be modifying options                                                   // 114\n                                                                                                              // 115\n  if (typeof options.password !== 'string')                                                                   // 116\n    throw new Error(\"options.password must be a string\");                                                     // 117\n  if (!options.password) {                                                                                    // 118\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 119\n    return;                                                                                                   // 120\n  }                                                                                                           // 121\n                                                                                                              // 122\n  // Replace password with the hashed password.                                                               // 123\n  options.password = Accounts._hashPassword(options.password);                                                // 124\n                                                                                                              // 125\n  Accounts.callLoginMethod({                                                                                  // 126\n    methodName: 'createUser',                                                                                 // 127\n    methodArguments: [options],                                                                               // 128\n    userCallback: callback                                                                                    // 129\n  });                                                                                                         // 130\n};                                                                                                            // 131\n                                                                                                              // 132\n// Change password. Must be logged in.                                                                        // 133\n//                                                                                                            // 134\n// @param oldPassword {String|null} By default servers no longer allow                                        // 135\n//   changing password without the old password, but they could so we                                         // 136\n//   support passing no password to the server and letting it decide.                                         // 137\n// @param newPassword {String}                                                                                // 138\n// @param callback {Function(error|undefined)}                                                                // 139\n                                                                                                              // 140\n/**                                                                                                           // 141\n * @summary Change the current user's password. Must be logged in.                                            // 142\n * @locus Client                                                                                              // 143\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.        // 152\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.        // 153\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 147\nAccounts.changePassword = function (oldPassword, newPassword, callback) {                                     // 148\n  if (!Meteor.user()) {                                                                                       // 149\n    callback && callback(new Error(\"Must be logged in to change password.\"));                                 // 150\n    return;                                                                                                   // 151\n  }                                                                                                           // 152\n                                                                                                              // 153\n  check(newPassword, String);                                                                                 // 154\n  if (!newPassword) {                                                                                         // 155\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 156\n    return;                                                                                                   // 157\n  }                                                                                                           // 158\n                                                                                                              // 159\n  Accounts.connection.apply(                                                                                  // 160\n    'changePassword',                                                                                         // 161\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,                                                // 162\n     Accounts._hashPassword(newPassword)],                                                                    // 163\n    function (error, result) {                                                                                // 164\n      if (error || !result) {                                                                                 // 165\n        if (error && error.error === 400 &&                                                                   // 166\n            error.reason === 'old password format') {                                                         // 167\n          // XXX COMPAT WITH 0.8.1.3                                                                          // 168\n          // The server is telling us to upgrade from SRP to bcrypt, as                                       // 169\n          // in Meteor.loginWithPassword.                                                                     // 170\n          srpUpgradePath({                                                                                    // 171\n            upgradeError: error,                                                                              // 172\n            userSelector: { id: Meteor.userId() },                                                            // 173\n            plaintextPassword: oldPassword                                                                    // 174\n          }, function (err) {                                                                                 // 175\n            if (err) {                                                                                        // 176\n              callback && callback(err);                                                                      // 177\n            } else {                                                                                          // 178\n              // Now that we've successfully migrated from srp to                                             // 179\n              // bcrypt, try changing the password again.                                                     // 180\n              Accounts.changePassword(oldPassword, newPassword, callback);                                    // 181\n            }                                                                                                 // 182\n          });                                                                                                 // 183\n        } else {                                                                                              // 184\n          // A normal error, not an error telling us to upgrade to bcrypt                                     // 185\n          callback && callback(                                                                               // 186\n            error || new Error(\"No result from changePassword.\"));                                            // 187\n        }                                                                                                     // 188\n      } else {                                                                                                // 189\n        callback && callback();                                                                               // 190\n      }                                                                                                       // 191\n    }                                                                                                         // 192\n  );                                                                                                          // 193\n};                                                                                                            // 194\n                                                                                                              // 195\n// Sends an email to a user with a link that can be used to reset                                             // 196\n// their password                                                                                             // 197\n//                                                                                                            // 198\n// @param options {Object}                                                                                    // 199\n//   - email: (email)                                                                                         // 200\n// @param callback (optional) {Function(error|undefined)}                                                     // 201\n                                                                                                              // 202\n/**                                                                                                           // 203\n * @summary Request a forgot password email.                                                                  // 204\n * @locus Client                                                                                              // 205\n * @param {Object} options                                                                                    // 206\n * @param {String} options.email The email address to send a password reset link.                             // 207\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 209\nAccounts.forgotPassword = function(options, callback) {                                                       // 210\n  if (!options.email)                                                                                         // 211\n    throw new Error(\"Must pass options.email\");                                                               // 212\n  Accounts.connection.call(\"forgotPassword\", options, callback);                                              // 213\n};                                                                                                            // 214\n                                                                                                              // 215\n// Resets a password based on a token originally created by                                                   // 216\n// Accounts.forgotPassword, and then logs in the matching user.                                               // 217\n//                                                                                                            // 218\n// @param token {String}                                                                                      // 219\n// @param newPassword {String}                                                                                // 220\n// @param callback (optional) {Function(error|undefined)}                                                     // 221\n                                                                                                              // 222\n/**                                                                                                           // 223\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.       // 224\n * @locus Client                                                                                              // 225\n * @param {String} token The token retrieved from the reset password URL.                                     // 226\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.        // 235\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 229\nAccounts.resetPassword = function(token, newPassword, callback) {                                             // 230\n  check(token, String);                                                                                       // 231\n  check(newPassword, String);                                                                                 // 232\n                                                                                                              // 233\n  if (!newPassword) {                                                                                         // 234\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 235\n    return;                                                                                                   // 236\n  }                                                                                                           // 237\n                                                                                                              // 238\n  Accounts.callLoginMethod({                                                                                  // 239\n    methodName: 'resetPassword',                                                                              // 240\n    methodArguments: [token, Accounts._hashPassword(newPassword)],                                            // 241\n    userCallback: callback});                                                                                 // 242\n};                                                                                                            // 243\n                                                                                                              // 244\n// Verifies a user's email address based on a token originally                                                // 245\n// created by Accounts.sendVerificationEmail                                                                  // 246\n//                                                                                                            // 247\n// @param token {String}                                                                                      // 248\n// @param callback (optional) {Function(error|undefined)}                                                     // 249\n                                                                                                              // 250\n/**                                                                                                           // 251\n * @summary Marks the user's email address as verified. Logs the user in afterwards.                          // 252\n * @locus Client                                                                                              // 253\n * @param {String} token The token retrieved from the verification URL.                                       // 254\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 256\nAccounts.verifyEmail = function(token, callback) {                                                            // 257\n  if (!token)                                                                                                 // 258\n    throw new Error(\"Need to pass token\");                                                                    // 259\n                                                                                                              // 260\n  Accounts.callLoginMethod({                                                                                  // 261\n    methodName: 'verifyEmail',                                                                                // 262\n    methodArguments: [token],                                                                                 // 263\n    userCallback: callback});                                                                                 // 264\n};                                                                                                            // 265\n                                                                                                              // 266\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 275\n                                                                                                                     // 276\n}).call(this);                                                                                                       // 277\n                                                                                                                     // 278\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-password'] = {};\n\n})();\n","servePath":"/packages/accounts-password.js","sourceMap":{"version":3,"sources":["/packages/accounts-password/packages/accounts-password.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/accounts-password.js","sourcesContent":["(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/accounts-password/password_client.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Attempt to log in with a password.                                                                         // 1\n//                                                                                                            // 2\n// @param selector {String|Object} One of the following:                                                      // 3\n//   - {username: (username)}                                                                                 // 4\n//   - {email: (email)}                                                                                       // 5\n//   - a string which may be a username or email, depending on whether                                        // 6\n//     it contains \"@\".                                                                                       // 7\n// @param password {String}                                                                                   // 8\n// @param callback {Function(error|undefined)}                                                                // 9\n                                                                                                              // 10\n/**                                                                                                           // 11\n * @summary Log the user in with a password.                                                                  // 12\n * @locus Client                                                                                              // 13\n * @param {Object | String} user                                                                              // 14\n *   Either a string interpreted as a username or an email; or an object with a                               // 15\n *   single key: `email`, `username` or `id`. Username or email match in a case                               // 16\n *   insensitive manner.                                                                                      // 17\n * @param {String} password The user's password.                                                              // 18\n * @param {Function} [callback] Optional callback.                                                            // 19\n *   Called with no arguments on success, or with a single `Error` argument                                   // 20\n *   on failure.                                                                                              // 21\n */                                                                                                           // 22\nMeteor.loginWithPassword = function (selector, password, callback) {                                          // 23\n  if (typeof selector === 'string')                                                                           // 24\n    if (selector.indexOf('@') === -1)                                                                         // 25\n      selector = {username: selector};                                                                        // 26\n    else                                                                                                      // 27\n      selector = {email: selector};                                                                           // 28\n                                                                                                              // 29\n  Accounts.callLoginMethod({                                                                                  // 30\n    methodArguments: [{                                                                                       // 31\n      user: selector,                                                                                         // 32\n      password: Accounts._hashPassword(password)                                                              // 33\n    }],                                                                                                       // 34\n    userCallback: function (error, result) {                                                                  // 35\n      if (error && error.error === 400 &&                                                                     // 36\n          error.reason === 'old password format') {                                                           // 37\n        // The \"reason\" string should match the error thrown in the                                           // 38\n        // password login handler in password_server.js.                                                      // 39\n                                                                                                              // 40\n        // XXX COMPAT WITH 0.8.1.3                                                                            // 41\n        // If this user's last login was with a previous version of                                           // 42\n        // Meteor that used SRP, then the server throws this error to                                         // 43\n        // indicate that we should try again. The error includes the                                          // 44\n        // user's SRP identity. We provide a value derived from the                                           // 45\n        // identity and the password to prove to the server that we know                                      // 46\n        // the password without requiring a full SRP flow, as well as                                         // 47\n        // SHA256(password), which the server bcrypts and stores in                                           // 48\n        // place of the old SRP information for this user.                                                    // 49\n        srpUpgradePath({                                                                                      // 50\n          upgradeError: error,                                                                                // 51\n          userSelector: selector,                                                                             // 52\n          plaintextPassword: password                                                                         // 53\n        }, callback);                                                                                         // 54\n      }                                                                                                       // 55\n      else if (error) {                                                                                       // 56\n        callback && callback(error);                                                                          // 57\n      } else {                                                                                                // 58\n        callback && callback();                                                                               // 59\n      }                                                                                                       // 60\n    }                                                                                                         // 61\n  });                                                                                                         // 62\n};                                                                                                            // 63\n                                                                                                              // 64\nAccounts._hashPassword = function (password) {                                                                // 65\n  return {                                                                                                    // 66\n    digest: SHA256(password),                                                                                 // 67\n    algorithm: \"sha-256\"                                                                                      // 68\n  };                                                                                                          // 69\n};                                                                                                            // 70\n                                                                                                              // 71\n// XXX COMPAT WITH 0.8.1.3                                                                                    // 72\n// The server requested an upgrade from the old SRP password format,                                          // 73\n// so supply the needed SRP identity to login. Options:                                                       // 74\n//   - upgradeError: the error object that the server returned to tell                                        // 75\n//     us to upgrade from SRP to bcrypt.                                                                      // 76\n//   - userSelector: selector to retrieve the user object                                                     // 77\n//   - plaintextPassword: the password as a string                                                            // 78\nvar srpUpgradePath = function (options, callback) {                                                           // 79\n  var details;                                                                                                // 80\n  try {                                                                                                       // 81\n    details = EJSON.parse(options.upgradeError.details);                                                      // 82\n  } catch (e) {}                                                                                              // 83\n  if (!(details && details.format === 'srp')) {                                                               // 84\n    callback && callback(                                                                                     // 85\n      new Meteor.Error(400, \"Password is old. Please reset your \" +                                           // 86\n                       \"password.\"));                                                                         // 87\n  } else {                                                                                                    // 88\n    Accounts.callLoginMethod({                                                                                // 89\n      methodArguments: [{                                                                                     // 90\n        user: options.userSelector,                                                                           // 91\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),                                      // 92\n        password: Accounts._hashPassword(options.plaintextPassword)                                           // 93\n      }],                                                                                                     // 94\n      userCallback: callback                                                                                  // 95\n    });                                                                                                       // 96\n  }                                                                                                           // 97\n};                                                                                                            // 98\n                                                                                                              // 99\n                                                                                                              // 100\n// Attempt to log in as a new user.                                                                           // 101\n                                                                                                              // 102\n/**                                                                                                           // 103\n * @summary Create a new user.                                                                                // 104\n * @locus Anywhere                                                                                            // 105\n * @param {Object} options                                                                                    // 106\n * @param {String} options.username A unique name for this user.                                              // 107\n * @param {String} options.email The user's email address.                                                    // 108\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.    // 109\n * @param {Object} options.profile The user's profile, typically including the `name` field.                  // 110\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 112\nAccounts.createUser = function (options, callback) {                                                          // 113\n  options = _.clone(options); // we'll be modifying options                                                   // 114\n                                                                                                              // 115\n  if (typeof options.password !== 'string')                                                                   // 116\n    throw new Error(\"options.password must be a string\");                                                     // 117\n  if (!options.password) {                                                                                    // 118\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 119\n    return;                                                                                                   // 120\n  }                                                                                                           // 121\n                                                                                                              // 122\n  // Replace password with the hashed password.                                                               // 123\n  options.password = Accounts._hashPassword(options.password);                                                // 124\n                                                                                                              // 125\n  Accounts.callLoginMethod({                                                                                  // 126\n    methodName: 'createUser',                                                                                 // 127\n    methodArguments: [options],                                                                               // 128\n    userCallback: callback                                                                                    // 129\n  });                                                                                                         // 130\n};                                                                                                            // 131\n                                                                                                              // 132\n// Change password. Must be logged in.                                                                        // 133\n//                                                                                                            // 134\n// @param oldPassword {String|null} By default servers no longer allow                                        // 135\n//   changing password without the old password, but they could so we                                         // 136\n//   support passing no password to the server and letting it decide.                                         // 137\n// @param newPassword {String}                                                                                // 138\n// @param callback {Function(error|undefined)}                                                                // 139\n                                                                                                              // 140\n/**                                                                                                           // 141\n * @summary Change the current user's password. Must be logged in.                                            // 142\n * @locus Client                                                                                              // 143\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 147\nAccounts.changePassword = function (oldPassword, newPassword, callback) {                                     // 148\n  if (!Meteor.user()) {                                                                                       // 149\n    callback && callback(new Error(\"Must be logged in to change password.\"));                                 // 150\n    return;                                                                                                   // 151\n  }                                                                                                           // 152\n                                                                                                              // 153\n  check(newPassword, String);                                                                                 // 154\n  if (!newPassword) {                                                                                         // 155\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 156\n    return;                                                                                                   // 157\n  }                                                                                                           // 158\n                                                                                                              // 159\n  Accounts.connection.apply(                                                                                  // 160\n    'changePassword',                                                                                         // 161\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,                                                // 162\n     Accounts._hashPassword(newPassword)],                                                                    // 163\n    function (error, result) {                                                                                // 164\n      if (error || !result) {                                                                                 // 165\n        if (error && error.error === 400 &&                                                                   // 166\n            error.reason === 'old password format') {                                                         // 167\n          // XXX COMPAT WITH 0.8.1.3                                                                          // 168\n          // The server is telling us to upgrade from SRP to bcrypt, as                                       // 169\n          // in Meteor.loginWithPassword.                                                                     // 170\n          srpUpgradePath({                                                                                    // 171\n            upgradeError: error,                                                                              // 172\n            userSelector: { id: Meteor.userId() },                                                            // 173\n            plaintextPassword: oldPassword                                                                    // 174\n          }, function (err) {                                                                                 // 175\n            if (err) {                                                                                        // 176\n              callback && callback(err);                                                                      // 177\n            } else {                                                                                          // 178\n              // Now that we've successfully migrated from srp to                                             // 179\n              // bcrypt, try changing the password again.                                                     // 180\n              Accounts.changePassword(oldPassword, newPassword, callback);                                    // 181\n            }                                                                                                 // 182\n          });                                                                                                 // 183\n        } else {                                                                                              // 184\n          // A normal error, not an error telling us to upgrade to bcrypt                                     // 185\n          callback && callback(                                                                               // 186\n            error || new Error(\"No result from changePassword.\"));                                            // 187\n        }                                                                                                     // 188\n      } else {                                                                                                // 189\n        callback && callback();                                                                               // 190\n      }                                                                                                       // 191\n    }                                                                                                         // 192\n  );                                                                                                          // 193\n};                                                                                                            // 194\n                                                                                                              // 195\n// Sends an email to a user with a link that can be used to reset                                             // 196\n// their password                                                                                             // 197\n//                                                                                                            // 198\n// @param options {Object}                                                                                    // 199\n//   - email: (email)                                                                                         // 200\n// @param callback (optional) {Function(error|undefined)}                                                     // 201\n                                                                                                              // 202\n/**                                                                                                           // 203\n * @summary Request a forgot password email.                                                                  // 204\n * @locus Client                                                                                              // 205\n * @param {Object} options                                                                                    // 206\n * @param {String} options.email The email address to send a password reset link.                             // 207\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 209\nAccounts.forgotPassword = function(options, callback) {                                                       // 210\n  if (!options.email)                                                                                         // 211\n    throw new Error(\"Must pass options.email\");                                                               // 212\n  Accounts.connection.call(\"forgotPassword\", options, callback);                                              // 213\n};                                                                                                            // 214\n                                                                                                              // 215\n// Resets a password based on a token originally created by                                                   // 216\n// Accounts.forgotPassword, and then logs in the matching user.                                               // 217\n//                                                                                                            // 218\n// @param token {String}                                                                                      // 219\n// @param newPassword {String}                                                                                // 220\n// @param callback (optional) {Function(error|undefined)}                                                     // 221\n                                                                                                              // 222\n/**                                                                                                           // 223\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.       // 224\n * @locus Client                                                                                              // 225\n * @param {String} token The token retrieved from the reset password URL.                                     // 226\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 229\nAccounts.resetPassword = function(token, newPassword, callback) {                                             // 230\n  check(token, String);                                                                                       // 231\n  check(newPassword, String);                                                                                 // 232\n                                                                                                              // 233\n  if (!newPassword) {                                                                                         // 234\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 235\n    return;                                                                                                   // 236\n  }                                                                                                           // 237\n                                                                                                              // 238\n  Accounts.callLoginMethod({                                                                                  // 239\n    methodName: 'resetPassword',                                                                              // 240\n    methodArguments: [token, Accounts._hashPassword(newPassword)],                                            // 241\n    userCallback: callback});                                                                                 // 242\n};                                                                                                            // 243\n                                                                                                              // 244\n// Verifies a user's email address based on a token originally                                                // 245\n// created by Accounts.sendVerificationEmail                                                                  // 246\n//                                                                                                            // 247\n// @param token {String}                                                                                      // 248\n// @param callback (optional) {Function(error|undefined)}                                                     // 249\n                                                                                                              // 250\n/**                                                                                                           // 251\n * @summary Marks the user's email address as verified. Logs the user in afterwards.                          // 252\n * @locus Client                                                                                              // 253\n * @param {String} token The token retrieved from the verification URL.                                       // 254\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           // 256\nAccounts.verifyEmail = function(token, callback) {                                                            // 257\n  if (!token)                                                                                                 // 258\n    throw new Error(\"Need to pass token\");                                                                    // 259\n                                                                                                              // 260\n  Accounts.callLoginMethod({                                                                                  // 261\n    methodName: 'verifyEmail',                                                                                // 262\n    methodArguments: [token],                                                                                 // 263\n    userCallback: callback});                                                                                 // 264\n};                                                                                                            // 265\n                                                                                                              // 266\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]