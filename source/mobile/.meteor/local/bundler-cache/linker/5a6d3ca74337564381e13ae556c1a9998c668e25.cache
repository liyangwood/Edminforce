[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar MeteorFilesHelpers = Package['sanjo:meteor-files-helpers'].MeteorFilesHelpers;\nvar LongRunningChildProcess = Package['sanjo:long-running-child-process'].LongRunningChildProcess;\n\n/* Package-scope variables */\nvar log, Karma, KarmaInternals;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/sanjo_karma/main.js                                                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nvar path = Npm.require('path')                                                  // 1\nvar fs = Npm.require('fs-extra')                                                // 2\nvar readFile = Meteor.wrapAsync(fs.readFile, fs)                                // 3\nvar outputFile = Meteor.wrapAsync(fs.outputFile, fs)                            // 4\nvar requestRetry = Npm.require('requestretry')                                  // 5\nvar freeport = Meteor.wrapAsync(Npm.require('freeport'))                        // 6\n                                                                                // 7\nvar packageName = 'sanjo:karma';                                                // 8\n                                                                                // 9\nlog = loglevel.createPackageLogger(                                             // 10\n  '[' + packageName + ']',                                                      // 11\n  process.env.KARMA_LOG_LEVEL || 'info'                                         // 12\n)                                                                               // 13\n                                                                                // 14\nKarma = {                                                                       // 15\n  start: function (id, options) {                                               // 16\n    options = options || {}                                                     // 17\n    log.debug('Karma.start', id)                                                // 18\n                                                                                // 19\n    return KarmaInternals.startKarmaServer(id, options)                         // 20\n  },                                                                            // 21\n                                                                                // 22\n  isRunning: function (id) {                                                    // 23\n    var karmaChild = KarmaInternals.getKarmaChild(id)                           // 24\n    return karmaChild.isRunning()                                               // 25\n  },                                                                            // 26\n                                                                                // 27\n  stop: function (id) {                                                         // 28\n    log.debug('Karma.stop', id)                                                 // 29\n    var karmaChild = KarmaInternals.getKarmaChild(id)                           // 30\n    if (karmaChild.isRunning()) {                                               // 31\n      karmaChild.kill()                                                         // 32\n    }                                                                           // 33\n  },                                                                            // 34\n                                                                                // 35\n  run: function (id) {                                                          // 36\n    log.debug('Karma.run', id)                                                  // 37\n    KarmaInternals.apiRequest(id, 'run')                                        // 38\n  },                                                                            // 39\n                                                                                // 40\n  reloadFileList: function (id, patterns, excludes) {                           // 41\n    log.debug('Karma.reloadFileList', id, patterns, excludes)                   // 42\n                                                                                // 43\n    KarmaInternals.apiRequest(                                                  // 44\n      id,                                                                       // 45\n      'reloadFileList',                                                         // 46\n      {                                                                         // 47\n        patterns: patterns,                                                     // 48\n        excludes: excludes                                                      // 49\n      }                                                                         // 50\n    )                                                                           // 51\n  }                                                                             // 52\n}                                                                               // 53\n                                                                                // 54\nKarmaInternals = {                                                              // 55\n  karmaChilds: {},                                                              // 56\n                                                                                // 57\n  apiRequest: function (id, type, data) {                                       // 58\n    data = data || {}                                                           // 59\n    var karmaChild = KarmaInternals.getKarmaChild(id)                           // 60\n                                                                                // 61\n    if (karmaChild.isRunning()) {                                               // 62\n      var request = requestRetry({                                              // 63\n        url: 'http://127.0.0.1:' + this.getPort(id) + '/' + type,               // 64\n        method: 'POST',                                                         // 65\n        json: true,                                                             // 66\n        body: data,                                                             // 67\n        maxAttempts: 5,                                                         // 68\n        retryDelay: 1000                                                        // 69\n      }, function (error, response, body) {                                     // 70\n        if (error) {                                                            // 71\n          log.error(type + ' request failed', error)                            // 72\n        } else if (response.statusCode === 500) {                               // 73\n          log.error(type + ' request failed', body.data.error)                  // 74\n        }                                                                       // 75\n      })                                                                        // 76\n    } else {                                                                    // 77\n      throw new Error(                                                          // 78\n        'You need to start the Karma server ' +                                 // 79\n        'before you can make an API request.'                                   // 80\n      )                                                                         // 81\n    }                                                                           // 82\n  },                                                                            // 83\n                                                                                // 84\n  getKarmaChild: function (id) {                                                // 85\n    var karmaChild = KarmaInternals.karmaChilds[id]                             // 86\n    if (!karmaChild) {                                                          // 87\n      karmaChild = new sanjo.LongRunningChildProcess(id)                        // 88\n      KarmaInternals.setKarmaChild(id, karmaChild)                              // 89\n    }                                                                           // 90\n                                                                                // 91\n    return karmaChild                                                           // 92\n  },                                                                            // 93\n                                                                                // 94\n  setKarmaChild: function (id, karmaChild) {                                    // 95\n    KarmaInternals.karmaChilds[id] = karmaChild                                 // 96\n  },                                                                            // 97\n                                                                                // 98\n  startKarmaServer: function (id, options) {                                    // 99\n    log.debug('KarmaInternals.startKarmaServer(' + id + ')')                    // 100\n    var karmaChild = KarmaInternals.getKarmaChild(id)                           // 101\n    var karmaRunnerPath = KarmaInternals.getKarmaRunnerPath()                   // 102\n    fs.chmodSync(karmaRunnerPath, parseInt('544', 8))                           // 103\n    var apiServerPort = this.createPort(id)                                     // 104\n    var spawnOptions = {                                                        // 105\n      command: process.execPath,                                                // 106\n      args: [karmaRunnerPath, apiServerPort, this.getKarmaModulePath()]         // 107\n    }                                                                           // 108\n    // It will only spawn when the process is not already running               // 109\n    karmaChild.spawn(spawnOptions)                                              // 110\n    KarmaInternals.apiRequest(id, 'start', options)                             // 111\n                                                                                // 112\n    return karmaChild                                                           // 113\n  },                                                                            // 114\n                                                                                // 115\n  getKarmaRunnerPath: function () {                                             // 116\n    return MeteorFilesHelpers.getPackageServerAssetPath(                        // 117\n      packageName, 'karma_runner.js'                                            // 118\n    )                                                                           // 119\n  },                                                                            // 120\n                                                                                // 121\n  getKarmaModulePath: function () {                                             // 122\n    return MeteorFilesHelpers.getNodeModulePath(packageName, 'karma')           // 123\n  },                                                                            // 124\n                                                                                // 125\n  getPortFilePath: function (id) {                                              // 126\n    return path.resolve(MeteorFilesHelpers.getAppPath(),                        // 127\n      '.meteor/local/run/' + id + '.port')                                      // 128\n  },                                                                            // 129\n                                                                                // 130\n  createPort: function (id) {                                                   // 131\n    var port = freeport()                                                       // 132\n    outputFile(this.getPortFilePath(id), port)                                  // 133\n                                                                                // 134\n    return port                                                                 // 135\n  },                                                                            // 136\n                                                                                // 137\n  getPort: _.memoize(function (id) {                                            // 138\n    return parseInt(readFile(this.getPortFilePath(id), {encoding: 'utf8'}), 10)\n  })                                                                            // 140\n}                                                                               // 141\n                                                                                // 142\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sanjo:karma'] = {\n  Karma: Karma,\n  KarmaInternals: KarmaInternals\n};\n\n})();\n","servePath":"/packages/sanjo_karma.js","sourceMap":{"version":3,"sources":["/packages/sanjo_karma/main.js"],"names":[],"mappingssF","file":"/packages/sanjo_karma.js","sourcesContent":["var path = Npm.require('path')\nvar fs = Npm.require('fs-extra')\nvar readFile = Meteor.wrapAsync(fs.readFile, fs)\nvar outputFile = Meteor.wrapAsync(fs.outputFile, fs)\nvar requestRetry = Npm.require('requestretry')\nvar freeport = Meteor.wrapAsync(Npm.require('freeport'))\n\nvar packageName = 'sanjo:karma';\n\nlog = loglevel.createPackageLogger(\n  '[' + packageName + ']',\n  process.env.KARMA_LOG_LEVEL || 'info'\n)\n\nKarma = {\n  start: function (id, options) {\n    options = options || {}\n    log.debug('Karma.start', id)\n\n    return KarmaInternals.startKarmaServer(id, options)\n  },\n\n  isRunning: function (id) {\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    return karmaChild.isRunning()\n  },\n\n  stop: function (id) {\n    log.debug('Karma.stop', id)\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    if (karmaChild.isRunning()) {\n      karmaChild.kill()\n    }\n  },\n\n  run: function (id) {\n    log.debug('Karma.run', id)\n    KarmaInternals.apiRequest(id, 'run')\n  },\n\n  reloadFileList: function (id, patterns, excludes) {\n    log.debug('Karma.reloadFileList', id, patterns, excludes)\n\n    KarmaInternals.apiRequest(\n      id,\n      'reloadFileList',\n      {\n        patterns: patterns,\n        excludes: excludes\n      }\n    )\n  }\n}\n\nKarmaInternals = {\n  karmaChilds: {},\n\n  apiRequest: function (id, type, data) {\n    data = data || {}\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n\n    if (karmaChild.isRunning()) {\n      var request = requestRetry({\n        url: 'http://127.0.0.1:' + this.getPort(id) + '/' + type,\n        method: 'POST',\n        json: true,\n        body: data,\n        maxAttempts: 5,\n        retryDelay: 1000\n      }, function (error, response, body) {\n        if (error) {\n          log.error(type + ' request failed', error)\n        } else if (response.statusCode === 500) {\n          log.error(type + ' request failed', body.data.error)\n        }\n      })\n    } else {\n      throw new Error(\n        'You need to start the Karma server ' +\n        'before you can make an API request.'\n      )\n    }\n  },\n\n  getKarmaChild: function (id) {\n    var karmaChild = KarmaInternals.karmaChilds[id]\n    if (!karmaChild) {\n      karmaChild = new sanjo.LongRunningChildProcess(id)\n      KarmaInternals.setKarmaChild(id, karmaChild)\n    }\n\n    return karmaChild\n  },\n\n  setKarmaChild: function (id, karmaChild) {\n    KarmaInternals.karmaChilds[id] = karmaChild\n  },\n\n  startKarmaServer: function (id, options) {\n    log.debug('KarmaInternals.startKarmaServer(' + id + ')')\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    var karmaRunnerPath = KarmaInternals.getKarmaRunnerPath()\n    fs.chmodSync(karmaRunnerPath, parseInt('544', 8))\n    var apiServerPort = this.createPort(id)\n    var spawnOptions = {\n      command: process.execPath,\n      args: [karmaRunnerPath, apiServerPort, this.getKarmaModulePath()]\n    }\n    // It will only spawn when the process is not already running\n    karmaChild.spawn(spawnOptions)\n    KarmaInternals.apiRequest(id, 'start', options)\n\n    return karmaChild\n  },\n\n  getKarmaRunnerPath: function () {\n    return MeteorFilesHelpers.getPackageServerAssetPath(\n      packageName, 'karma_runner.js'\n    )\n  },\n\n  getKarmaModulePath: function () {\n    return MeteorFilesHelpers.getNodeModulePath(packageName, 'karma')\n  },\n\n  getPortFilePath: function (id) {\n    return path.resolve(MeteorFilesHelpers.getAppPath(),\n      '.meteor/local/run/' + id + '.port')\n  },\n\n  createPort: function (id) {\n    var port = freeport()\n    outputFile(this.getPortFilePath(id), port)\n\n    return port\n  },\n\n  getPort: _.memoize(function (id) {\n    return parseInt(readFile(this.getPortFilePath(id), {encoding: 'utf8'}), 10)\n  })\n}\n"]}}]