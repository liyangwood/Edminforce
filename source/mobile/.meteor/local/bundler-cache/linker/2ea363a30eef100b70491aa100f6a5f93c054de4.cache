[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar DefaultRoutes = Package['ihealth:utils'].DefaultRoutes;\nvar h = Package['ihealth:utils'].h;\nvar IH = Package['ihealth:utils'].IH;\nvar RC = Package['ihealth:framework-engine'].RC;\nvar Mongo = Package.mongo.Mongo;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsClient = Package['accounts-base'].AccountsClient;\nvar Roles = Package['alanning:roles'].Roles;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar moment = Package['momentjs:moment'].moment;\nvar FastRender = Package['meteorhacks:fast-render'].FastRender;\nvar __init_fast_render = Package['meteorhacks:fast-render'].__init_fast_render;\nvar FastClick = Package.fastclick.FastClick;\nvar React = Package['react-runtime'].React;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\n\n/* Package-scope variables */\nvar ph;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ihealth_users/lib/ph.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nph = {                                                                                                                // 2\n  errorMsgs: {                                                                                                        // 3\n    // Custom Error Handlers                                                                                          // 4\n    1001: \"Your passwords did not match, please try again.\",                                                          // 5\n  }                                                                                                                   // 6\n}                                                                                                                     // 7\n                                                                                                                      // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ihealth_users/RC/login.jsx                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      //\nvar themes = [\"overlay-light\", \"overlay-dark\"];                                                                       // 2\nIH.RC.User = React.createClass({                                                                                      // 3\n  displayName: \"User\",                                                                                                //\n                                                                                                                      //\n  mixins: [RC.Mixins.Theme],                                                                                          // 4\n  themeGroup: \"ih-login\",                                                                                             // 5\n  themeDefault: \"overlay-dark\",                                                                                       // 6\n  themes: themes,                                                                                                     // 7\n                                                                                                                      //\n  propTypes: {                                                                                                        // 9\n    fullHeight: React.PropTypes.bool,                                                                                 // 10\n    noHeader: React.PropTypes.bool,                                                                                   // 11\n    alignTop: React.PropTypes.bool,                                                                                   // 12\n    bgColor: React.PropTypes.string,                                                                                  // 13\n    registerCallback: React.PropTypes.func,                                                                           // 14\n                                                                                                                      //\n    // Common Props                                                                                                   //\n    theme: React.PropTypes.string,                                                                                    // 17\n    id: React.PropTypes.string,                                                                                       // 18\n    className: React.PropTypes.string,                                                                                // 19\n    style: React.PropTypes.object                                                                                     // 20\n  },                                                                                                                  //\n                                                                                                                      //\n  getInitialState: function () {                                                                                      // 23\n    return {                                                                                                          // 24\n      buttonActive: false,                                                                                            // 25\n      waiting: false,                                                                                                 // 26\n      action: _.contains([\"login\", \"register\", \"reset\"], this.props.action) ? this.props.action : \"login\",            // 27\n      msg: null,                                                                                                      // 28\n      notification: null                                                                                              // 29\n    };                                                                                                                //\n  },                                                                                                                  //\n  /**                                                                                                                 //\n   * @ @ @ @                                                                                                          //\n   * Handler                                                                                                          //\n   * @ @ @ @                                                                                                          //\n   */                                                                                                                 //\n  checkButtonState: function (e) {                                                                                    // 37\n    debugger;                                                                                                         // 38\n    switch (this.state.action) {                                                                                      // 39\n      case \"login\":                                                                                                   // 40\n        var form = this.refs.loginForm.getFormData();                                                                 // 41\n        break;                                                                                                        // 42\n      case \"register\":                                                                                                // 42\n        var form = this.refs.registerForm.getFormData();                                                              // 44\n        break;                                                                                                        // 45\n      case \"reset\":                                                                                                   // 45\n        var form = this.refs.resetForm.getFormData();                                                                 // 47\n        break;                                                                                                        // 48\n    }                                                                                                                 // 48\n    var test = _.every(_.values(form), function (t) {                                                                 // 50\n      return t.length && t.length > 0;                                                                                // 51\n    });                                                                                                               //\n    if (this.state.action == 'register' && form.pwRepeat) {                                                           // 53\n      if (!App.checkPassword(form.pw)) {                                                                              // 54\n        this.setState({                                                                                               // 55\n          msg: \"Password shoud have at least 8 characters, containing Capital Letters AND Numbers.\",                  // 56\n          buttonActive: false                                                                                         // 57\n        });                                                                                                           //\n        return;                                                                                                       // 59\n      } else if (this.state.msg) {                                                                                    //\n        this.setState({ msg: null });                                                                                 // 61\n      }                                                                                                               //\n    }                                                                                                                 //\n    if (test !== this.state.buttonActive) this.setState({ buttonActive: test });                                      // 64\n  },                                                                                                                  //\n  resetForm: function () {                                                                                            // 67\n    this.setState({                                                                                                   // 68\n      waiting: false,                                                                                                 // 69\n      msg: null,                                                                                                      // 70\n      buttonActive: false                                                                                             // 71\n    });                                                                                                               //\n    if (this.state.action == \"login\") {                                                                               // 73\n      this.refs.username.reset();                                                                                     // 74\n      this.refs.password.reset();                                                                                     // 75\n    } else if (this.state.action == \"register\") {                                                                     //\n      this.refs.regEmail.reset();                                                                                     // 77\n      this.refs.regPw.reset();                                                                                        // 78\n      this.refs.regPwRepeat.reset();                                                                                  // 79\n    } else if (this.state.action == \"reset\") {                                                                        //\n      this.refs.email.reset();                                                                                        // 81\n    }                                                                                                                 //\n  },                                                                                                                  //\n  switchAction: function () {                                                                                         // 84\n    this.resetForm();                                                                                                 // 85\n    this.setState({ buttonActive: false });                                                                           // 86\n                                                                                                                      //\n    if (this.state.action == \"reset\") {                                                                               // 88\n      this.setState({ action: \"login\" });                                                                             // 89\n      return;                                                                                                         // 90\n    } else {                                                                                                          //\n      this.setState({ action: this.state.action == \"register\" ? \"login\" : \"register\" });                              // 93\n    }                                                                                                                 //\n  },                                                                                                                  //\n  startReset: function () {                                                                                           // 96\n    this.resetForm();                                                                                                 // 97\n    this.setState({                                                                                                   // 98\n      emailFound: true                                                                                                // 99\n    });                                                                                                               //\n    this.setState({ action: \"reset\" });                                                                               // 101\n    return;                                                                                                           // 102\n  },                                                                                                                  //\n  login: function (e) {                                                                                               // 104\n    var _this = this;                                                                                                 //\n                                                                                                                      //\n    e.preventDefault();                                                                                               // 105\n    if (this.state.msg) return null;                                                                                  // 106\n                                                                                                                      //\n    var form = this.refs.loginForm.getFormData();                                                                     // 108\n                                                                                                                      //\n    if (form.username.length && form.password.length) {                                                               // 110\n      (function () {                                                                                                  //\n        // Attempt Log In                                                                                             //\n        var self = _this;                                                                                             // 112\n        _this.setState({ waiting: true });                                                                            // 113\n        Meteor.loginWithPassword(form.username, form.password, function (err) {                                       // 114\n          debugger;                                                                                                   // 115\n          if (!err) {                                                                                                 // 116\n            if (form.keepName == 'on') {                                                                              // 117\n              Cookie.set('username', form.username);                                                                  // 118\n            } else {                                                                                                  //\n              Cookie.clear('username');                                                                               // 120\n            }                                                                                                         //\n            self.resetForm();                                                                                         // 122\n          }                                                                                                           //\n                                                                                                                      //\n          var passedMsg = err && err.error ? ph.errorMsgs[err.error] || err.reason : React.createElement(             // 125\n            \"p\",                                                                                                      //\n            null,                                                                                                     //\n            \"You are now logged in!\"                                                                                  //\n          );                                                                                                          //\n                                                                                                                      //\n          if (_.isFunction(self.props.loginCallback)) self.props.loginCallback();                                     // 129\n                                                                                                                      //\n          // message hook;for calphin listener                                                                        //\n          if (!err) {                                                                                                 // 133\n            Dispatcher.dispatch({                                                                                     // 134\n              actionType: \"AUTH_LOGIN_SUCCESS\"                                                                        // 135\n            });                                                                                                       //\n            return;                                                                                                   // 137\n          }                                                                                                           //\n                                                                                                                      //\n          self.setState({                                                                                             // 140\n            msg: passedMsg,                                                                                           // 141\n            buttonActive: false,                                                                                      // 142\n            waiting: false                                                                                            // 143\n          });                                                                                                         //\n        });                                                                                                           //\n      })();                                                                                                           //\n    }                                                                                                                 //\n  },                                                                                                                  //\n  register: function (e) {                                                                                            // 148\n    debugger;                                                                                                         // 149\n    e.preventDefault();                                                                                               // 150\n    if (this.state.msg) return null;                                                                                  // 151\n                                                                                                                      //\n    var self = this;                                                                                                  // 153\n    var form = this.refs.registerForm.getFormData();                                                                  // 154\n                                                                                                                      //\n    if (form.term != 'on') {                                                                                          // 156\n      this.setState({                                                                                                 // 157\n        notification: \"Please accept the following terms of use.\"                                                     // 158\n      });                                                                                                             //\n      return null;                                                                                                    // 160\n    }                                                                                                                 //\n                                                                                                                      //\n    if (form.pw == form.pwRepeat) {                                                                                   // 163\n      if (!App.checkPassword(form.pw)) {                                                                              // 164\n        this.setState({                                                                                               // 165\n          msg: \"Password shoud have at least 8 characters, containing Capital Letters AND Numbers.\"                   // 166\n        });                                                                                                           //\n        return;                                                                                                       // 168\n      }                                                                                                               //\n      // Create User                                                                                                  //\n      Accounts.createUser({                                                                                           // 171\n        email: form.email,                                                                                            // 172\n        password: form.pw                                                                                             // 173\n      }, function (err) {                                                                                             //\n        if (!err) {                                                                                                   // 175\n          Meteor.call('SetOptIn', Meteor.userId(), form.OptIn == \"on\" ? true : false, function (error, res) {         // 176\n            console.log(error);                                                                                       // 177\n            err = error;                                                                                              // 178\n          });                                                                                                         //\n          self.resetForm();                                                                                           // 180\n        }                                                                                                             //\n                                                                                                                      //\n        var passedMsg = err && err.error ? ph.errorMsgs[err.error] || err.reason : React.createElement(               // 183\n          \"p\",                                                                                                        //\n          null,                                                                                                       //\n          \"Thank you for registering!\"                                                                                //\n        );                                                                                                            //\n                                                                                                                      //\n        if (_.isFunction(self.props.registerCallback)) self.props.registerCallback();                                 // 187\n                                                                                                                      //\n        if (!err) {                                                                                                   // 190\n          Dispatcher.dispatch({                                                                                       // 191\n            actionType: \"AUTH_REGISTER_SUCCESS\"                                                                       // 192\n          });                                                                                                         //\n          return;                                                                                                     // 194\n        }                                                                                                             //\n        self.setState({                                                                                               // 196\n          msg: passedMsg,                                                                                             // 197\n          buttonActive: false,                                                                                        // 198\n          waiting: false                                                                                              // 199\n        });                                                                                                           //\n      });                                                                                                             //\n    } else this.setState({                                                                                            //\n      msg: ph.errorMsgs[1001],                                                                                        // 204\n      buttonActive: false,                                                                                            // 205\n      waiting: false                                                                                                  // 206\n    });                                                                                                               //\n  },                                                                                                                  //\n                                                                                                                      //\n  reset: function (e) {                                                                                               // 210\n    var _this2 = this;                                                                                                //\n                                                                                                                      //\n    e.preventDefault();                                                                                               // 211\n    if (this.state.msg) return null;                                                                                  // 212\n                                                                                                                      //\n    var form = this.refs.resetForm.getFormData();                                                                     // 214\n                                                                                                                      //\n    if (form.email.length) {                                                                                          // 216\n      (function () {                                                                                                  //\n        // Attempt Log In                                                                                             //\n        var self = _this2;                                                                                            // 218\n        _this2.setState({ waiting: true });                                                                           // 219\n        Meteor.call('CheckEmail', form.email, function (err, result) {                                                // 220\n          debugger;                                                                                                   // 221\n          if (!!err) {                                                                                                // 222\n            console.log(err);                                                                                         // 223\n            result = false;                                                                                           // 224\n          }                                                                                                           //\n                                                                                                                      //\n          if (result) {                                                                                               // 227\n            Accounts.forgotPassword({ email: form.email }, function (err) {                                           // 228\n              console.log(err);                                                                                       // 229\n              var passedMsg = err && err.error ? ph.errorMsgs[err.error] || err.reason : React.createElement(         // 230\n                \"p\",                                                                                                  //\n                null,                                                                                                 //\n                \"Password Reset Email Has Been Sent!\"                                                                 //\n              );                                                                                                      //\n              self.setState({ msg: passedMsg });                                                                      // 233\n            });                                                                                                       //\n          } else {                                                                                                    //\n            // the email address is not found                                                                         //\n            this.setState({                                                                                           // 237\n              emailFound: false,                                                                                      // 238\n              waiting: false,                                                                                         // 239\n              buttonActive: false,                                                                                    // 240\n              msg: \"Entered E-mail is not in record.\"                                                                 // 241\n            });                                                                                                       //\n          }                                                                                                           //\n        });                                                                                                           //\n      })();                                                                                                           //\n    }                                                                                                                 //\n  },                                                                                                                  //\n                                                                                                                      //\n  removeMsg: function (e) {                                                                                           // 248\n    e.preventDefault();                                                                                               // 249\n    this.setState({                                                                                                   // 250\n      waiting: false,                                                                                                 // 251\n      msg: null                                                                                                       // 252\n    });                                                                                                               //\n  },                                                                                                                  //\n                                                                                                                      //\n  jumpToNextPage: function (e) {                                                                                      // 256\n    e.preventDefault();                                                                                               // 257\n    this.setState({                                                                                                   // 258\n      waiting: false,                                                                                                 // 259\n      notification: null,                                                                                             // 260\n      msg: null                                                                                                       // 261\n    });                                                                                                               //\n  },                                                                                                                  //\n                                                                                                                      //\n  printMsg: function () {                                                                                             // 265\n    console.log(\"printMsg is called\", this.state.msg);                                                                // 266\n    debugger;                                                                                                         // 267\n    var currentMessages = this.state.msg ? [this.state.msg] : [];                                                     // 268\n    return React.createElement(                                                                                       // 269\n      \"div\",                                                                                                          //\n      null,                                                                                                           //\n      currentMessages.map(function (m, n) {                                                                           //\n        return React.createElement(                                                                                   // 272\n          \"div\",                                                                                                      //\n          { className: \"center\", key: n },                                                                            //\n          React.createElement(                                                                                        //\n            \"div\",                                                                                                    //\n            { className: \"bigger inline-block invis-70 red\" },                                                        //\n            _.isString(m) ? React.createElement(                                                                      //\n              \"div\",                                                                                                  //\n              null,                                                                                                   //\n              m                                                                                                       //\n            ) : m                                                                                                     //\n          )                                                                                                           //\n        );                                                                                                            //\n      })                                                                                                              //\n    );                                                                                                                //\n  },                                                                                                                  //\n                                                                                                                      //\n  /**                                                                                                                 //\n   * @ @ @ @                                                                                                          //\n   * Render                                                                                                           //\n   * @ @ @ @                                                                                                          //\n   */                                                                                                                 //\n  renderMsg: function () {                                                                                            // 288\n    var self = this;                                                                                                  // 289\n    var bg = h.checkColorClass(this.props.bgColor) ? this.props.bgColor : null;                                       // 290\n    var msgs = this.state.notification ? [this.state.notification] : []; // This will always be either 1 or 0         // 291\n                                                                                                                      //\n    return React.createElement(                                                                                       // 293\n      RC.Animate,                                                                                                     // 293\n      { transitionName: \"scale\" },                                                                                    //\n      msgs.map(function (m, n) {                                                                                      //\n        return React.createElement(                                                                                   // 296\n          \"div\",                                                                                                      //\n          { className: \"abs-full table on-top\" + (bg ? \" bg-\" + bg : \"\"), key: n },                                   //\n          React.createElement(                                                                                        //\n            \"div\",                                                                                                    //\n            { className: \"inside center\" },                                                                           //\n            _.isString(m) ? React.createElement(                                                                      //\n              \"p\",                                                                                                    //\n              null,                                                                                                   //\n              m                                                                                                       //\n            ) : m,                                                                                                    //\n            React.createElement(                                                                                      //\n              RC.Button,                                                                                              // 299\n              { onClick: self.jumpToNextPage, theme: \"circle\", buttonColor: bg },                                     //\n              \"OK\"                                                                                                    //\n            )                                                                                                         //\n          )                                                                                                           //\n        );                                                                                                            //\n      })                                                                                                              //\n    );                                                                                                                //\n  },                                                                                                                  //\n                                                                                                                      //\n  renderForm: function () {                                                                                           // 307\n    var inputTheme = \"small-label\";                                                                                   // 308\n    var buttonTheme = \"full\";                                                                                         // 309\n    if (_.contains([\"overlay-light\", \"overlay-dark\"], this.props.theme)) {                                            // 310\n      inputTheme += \",\" + this.props.theme;                                                                           // 311\n      buttonTheme += \",\" + this.props.theme;                                                                          // 312\n    }                                                                                                                 //\n                                                                                                                      //\n    switch (this.state.action) {                                                                                      // 315\n                                                                                                                      //\n      case \"login\":                                                                                                   // 317\n        return React.createElement(                                                                                   // 318\n          RC.Form,                                                                                                    // 318\n          { onSubmit: this.login, onKeyUp: this.checkButtonState, ref: \"loginForm\" },                                 //\n          React.createElement(                                                                                        //\n            \"div\",                                                                                                    //\n            null,                                                                                                     //\n            \"Log In To Your Calphin Account\"                                                                          //\n          ),                                                                                                          //\n          this.printMsg(),                                                                                            //\n          React.createElement(RC.Input, { name: \"username\", label: \"E-Mail\", theme: inputTheme, ref: \"username\", value: Cookie.get('username') }),\n          React.createElement(RC.Input, { name: \"password\", label: \"Password\", type: \"password\", theme: inputTheme, ref: \"password\" }),\n          React.createElement(                                                                                        //\n            RC.Button,                                                                                                // 323\n            { name: \"button\", theme: buttonTheme, active: this.state.buttonActive, disabled: this.state.waiting },    //\n            this.state.waiting ? React.createElement(RC.uiIcon, { uiClass: \"circle-o-notch spin-slow\" }) : \"Log In\"   //\n          ),                                                                                                          //\n          React.createElement(RC.Checkbox, { name: \"keepName\", ref: \"keepName\", value: true, label: \"Remember My User Name\" })\n        );                                                                                                            //\n        break;                                                                                                        // 328\n                                                                                                                      //\n      case \"register\":                                                                                                // 328\n        return React.createElement(                                                                                   // 331\n          RC.Form,                                                                                                    // 331\n          { onSubmit: this.register, onKeyUp: this.checkButtonState, ref: \"registerForm\" },                           //\n          React.createElement(                                                                                        //\n            \"div\",                                                                                                    //\n            null,                                                                                                     //\n            \"Create an Account\"                                                                                       //\n          ),                                                                                                          //\n          this.printMsg(),                                                                                            //\n          React.createElement(RC.Input, { name: \"email\", label: \"E-Mail\", theme: inputTheme, ref: \"regEmail\" }),      //\n          React.createElement(RC.PasswordInput, { name: \"pw\", label: \"Password\", type: \"password\", theme: inputTheme, ref: \"regPw\" }),\n          React.createElement(RC.Input, { name: \"pwRepeat\", label: \"Repeat Password\", type: \"password\", theme: inputTheme, ref: \"regPwRepeat\" }),\n          React.createElement(                                                                                        //\n            RC.Button,                                                                                                // 337\n            { name: \"button\", theme: buttonTheme, active: this.state.buttonActive, disabled: this.state.waiting },    //\n            this.state.waiting ? React.createElement(RC.uiIcon, { uiClass: \"circle-o-notch spin-slow\" }) : \"Sign Up\"  //\n          ),                                                                                                          //\n          React.createElement(RC.Checkbox, { className: \"cal-checkbox\", name: \"term\", ref: \"term\", value: true, label: \"Yes，I accpet Privacy Policy and Terms of Use.\" }),\n          React.createElement(RC.Checkbox, { className: \"cal-checkbox\", name: \"optIn\", ref: \"optIn\", value: true, label: \"Yes，I’d like to receive email communications from Calphin Aquatic Club\" })\n        );                                                                                                            //\n                                                                                                                      //\n      case \"reset\":                                                                                                   // 344\n        debugger;                                                                                                     // 345\n        return React.createElement(                                                                                   // 346\n          RC.Form,                                                                                                    // 347\n          { onSubmit: this.reset, onKeyUp: this.checkButtonState, ref: \"resetForm\" },                                 //\n          React.createElement(                                                                                        //\n            \"div\",                                                                                                    //\n            null,                                                                                                     //\n            \"Reset Password via Email\"                                                                                //\n          ),                                                                                                          //\n          this.printMsg(),                                                                                            //\n          React.createElement(RC.Input, { name: \"email\", label: \"E-Mail Address\", theme: inputTheme, ref: \"email\" }),\n          React.createElement(                                                                                        //\n            RC.Button,                                                                                                // 351\n            { name: \"button\", theme: buttonTheme, active: this.state.buttonActive, disabled: this.state.waiting },    //\n            this.state.waiting ? React.createElement(RC.uiIcon, { uiClass: \"circle-o-notch spin-slow\" }) : \"Send Password Reset E-mail\"\n          )                                                                                                           //\n        );                                                                                                            //\n        break;                                                                                                        // 356\n    }                                                                                                                 // 356\n  },                                                                                                                  //\n                                                                                                                      //\n  render: function () {                                                                                               // 361\n                                                                                                                      //\n    var classes = this.getTheme() + (this.props.fullHeight ? \" full-height\" : \"\") + (this.props.noHeader ? \" no-header\" : \"\") + (h.checkColorClass(this.props.bgColor) ? \" bg-\" + this.props.bgColor : \"\") + (this.props.alignTop ? \"\" : \" table\");\n                                                                                                                      //\n    return React.createElement(                                                                                       // 369\n      \"div\",                                                                                                          //\n      babelHelpers._extends({}, _.omit(this.props, [\"className\", \"theme\"]), { className: classes }),                  //\n      React.createElement(                                                                                            //\n        \"div\",                                                                                                        //\n        { className: \"inside\" },                                                                                      //\n        React.createElement(                                                                                          //\n          \"div\",                                                                                                      //\n          { className: \"re-wrapper\" },                                                                                //\n          this.props.children,                                                                                        //\n          this.renderMsg(),                                                                                           //\n          this.renderForm(),                                                                                          //\n          this.state.action != \"login\" ? null : React.createElement(                                                  //\n            \"p\",                                                                                                      //\n            { className: \"center\" },                                                                                  //\n            React.createElement(                                                                                      //\n              \"span\",                                                                                                 //\n              { className: \"smallest inline-block cursor open-registration invis-70\", onClick: this.startReset },     //\n              \"Forgot Your Password?\"                                                                                 //\n            )                                                                                                         //\n          ),                                                                                                          //\n          this.props.disableSwitch ? null : React.createElement(                                                      //\n            \"p\",                                                                                                      //\n            { className: \"center\" },                                                                                  //\n            React.createElement(                                                                                      //\n              \"span\",                                                                                                 //\n              { className: \"smallest inline-block cursor open-registration invis-70\", onClick: this.switchAction },   //\n              this.state.action == \"login\" ? \"Create a new account\" : \"Log-in with an existing account\"               //\n            )                                                                                                         //\n          )                                                                                                           //\n        )                                                                                                             //\n      )                                                                                                               //\n    );                                                                                                                //\n  }                                                                                                                   //\n});                                                                                                                   //\n                                                                                                                      //\nif (h.nk(Meteor.settings, \"public.env\") != \"live\") IH.RC.User.Help = {                                                // 397\n  Type: \"Unique/Canvas\",                                                                                              // 399\n  Themes: themes,                                                                                                     // 400\n  PropTypes: {                                                                                                        // 401\n    fullHeight: \"Boolean (Makes the login area equal to screen size)\",                                                // 402\n    noHeader: \"Boolean (If fullHeight and noHeader are both true, close the gap where the header would normally be)\",\n    alignTop: \"Boolean (Makes the login area center vertically)\",                                                     // 404\n    bgColor: \"String (Must be a valid CSS color class)\",                                                              // 405\n    action: \"String [\\\"login\\\", \\\"register\\\"]\",                                                                       // 406\n    registerCallback: \"Callback function for user registrations\"                                                      // 407\n  },                                                                                                                  //\n  Description: \"Creates a login form.\"                                                                                // 409\n};                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ihealth_users/lib/schemas.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nSimpleSchema.extendOptions({                                                                                          // 2\n  editable: Match.Optional(Boolean),                                                                                  // 3\n  editableBy: Match.Optional([String])                                                                                // 4\n})                                                                                                                    // 5\n                                                                                                                      // 6\nIH.Schema.Address = new SimpleSchema({                                                                                // 7\n  street: {                                                                                                           // 8\n    type: String,                                                                                                     // 9\n    max: 100                                                                                                          // 10\n  },                                                                                                                  // 11\n  city: {                                                                                                             // 12\n    type: String,                                                                                                     // 13\n    max: 50                                                                                                           // 14\n  },                                                                                                                  // 15\n  state: {                                                                                                            // 16\n    type: String,                                                                                                     // 17\n    regEx: /^A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]$/\n  },                                                                                                                  // 19\n  zip: {                                                                                                              // 20\n    type: String,                                                                                                     // 21\n    regEx: /^[0-9]{5}$/                                                                                               // 22\n  }                                                                                                                   // 23\n});                                                                                                                   // 24\n                                                                                                                      // 25\nIH.Schema.UserBasic = new SimpleSchema({                                                                              // 26\n  name: {                                                                                                             // 27\n    type: String,                                                                                                     // 28\n    optional: false,                                                                                                  // 29\n    editable: true,                                                                                                   // 30\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 31\n  },                                                                                                                  // 32\n  tel: {                                                                                                              // 33\n    type: Number,                                                                                                     // 34\n    optional: false,                                                                                                  // 35\n    editable: true,                                                                                                   // 36\n    editableBy: [\"admin\", \"doctor\", \"patient\"]                                                                        // 37\n  },                                                                                                                  // 38\n  address: {                                                                                                          // 39\n    type: IH.Schema.Address,                                                                                          // 40\n    optional: true,                                                                                                   // 41\n    editable: true,                                                                                                   // 42\n    editableBy: [\"admin\", \"doctor\", \"patient\"]                                                                        // 43\n  }                                                                                                                   // 44\n});                                                                                                                   // 45\n                                                                                                                      // 46\nIH.Schema.UserDoctor = new SimpleSchema({                                                                             // 47\n  verified: {                                                                                                         // 48\n    type: Boolean,                                                                                                    // 49\n    optional: false,                                                                                                  // 50\n    editable: false,                                                                                                  // 51\n    editableBy: [\"admin\"],                                                                                            // 52\n    autoValue: function() {}                                                                                          // 53\n  },                                                                                                                  // 54\n  title: {                                                                                                            // 55\n    type: String,                                                                                                     // 56\n    optional: true,                                                                                                   // 57\n    editable: true,                                                                                                   // 58\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 59\n  },                                                                                                                  // 60\n  specialties: {                                                                                                      // 61\n    type: [String],                                                                                                   // 62\n    optional: true,                                                                                                   // 63\n    editable: true,                                                                                                   // 64\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 65\n  },                                                                                                                  // 66\n  languages: {                                                                                                        // 67\n    type: [String],                                                                                                   // 68\n    optional: true,                                                                                                   // 69\n    editable: true,                                                                                                   // 70\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 71\n  },                                                                                                                  // 72\n  rating: {                                                                                                           // 73\n    type: Number,                                                                                                     // 74\n    optional: true,                                                                                                   // 75\n    decimal: true,                                                                                                    // 76\n    editable: false,                                                                                                  // 77\n    editableBy: [\"admin\"]                                                                                             // 78\n  },                                                                                                                  // 79\n  patients: {                                                                                                         // 80\n    type: Object,                                                                                                     // 81\n    optional: true,                                                                                                   // 82\n    editable: false,                                                                                                  // 83\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 84\n  }                                                                                                                   // 85\n}, \"patients.regular\", {                                                                                              // 86\n  type: [String],                                                                                                     // 87\n  optional: true                                                                                                      // 88\n}, \"patients.vip\", {                                                                                                  // 89\n  type: [String],                                                                                                     // 90\n  optional: true                                                                                                      // 91\n});                                                                                                                   // 92\n                                                                                                                      // 93\nIH.Schema.UserPatient = new SimpleSchema({                                                                            // 94\n  DOB: {                                                                                                              // 95\n    type: Date,                                                                                                       // 96\n    optional: true,                                                                                                   // 97\n    editable: true                                                                                                    // 98\n  },                                                                                                                  // 99\n  height: {                                                                                                           // 100\n    type: Number,                                                                                                     // 101\n    decimal: true,                                                                                                    // 102\n    optional: true,                                                                                                   // 103\n    editable: true                                                                                                    // 104\n  },                                                                                                                  // 105\n  weight: {                                                                                                           // 106\n    type: Number,                                                                                                     // 107\n    decimal: true,                                                                                                    // 108\n    optional: true,                                                                                                   // 109\n    editable: true                                                                                                    // 110\n  },                                                                                                                  // 111\n  doctors: {                                                                                                          // 112\n    type: [String],                                                                                                   // 113\n    optional: true,                                                                                                   // 114\n    editableBy: [\"admin\", \"doctor\"]                                                                                   // 115\n  },                                                                                                                  // 116\n  devices: {                                                                                                          // 117\n    type: Object,                                                                                                     // 118\n    optional: true,                                                                                                   // 119\n    blackbox: true                                                                                                    // 120\n  }                                                                                                                   // 121\n});                                                                                                                   // 122\n                                                                                                                      // 123\nIH.Schema.iHealth = new SimpleSchema({                                                                                // 124\n  basic: {                                                                                                            // 125\n    type: IH.Schema.UserBasic,                                                                                        // 126\n    optional: true                                                                                                    // 127\n  },                                                                                                                  // 128\n  doctor: {                                                                                                           // 129\n    type: IH.Schema.UserDoctor,                                                                                       // 130\n    optional: true                                                                                                    // 131\n  },                                                                                                                  // 132\n  patient: {                                                                                                          // 133\n    type: IH.Schema.UserPatient,                                                                                      // 134\n    optional: true                                                                                                    // 135\n  }                                                                                                                   // 136\n});                                                                                                                   // 137\n                                                                                                                      // 138\nIH.Schema.Users = new SimpleSchema({                                                                                  // 139\n  createdAt: {                                                                                                        // 140\n    type: Date,                                                                                                       // 141\n    optional: true,                                                                                                   // 142\n  },                                                                                                                  // 143\n  updatedAt: {                                                                                                        // 144\n    type: Date,                                                                                                       // 145\n    optional: true,                                                                                                   // 146\n    autoValue: function(){                                                                                            // 147\n      if (this.isUpdate)                                                                                              // 148\n        return new Date()                                                                                             // 149\n      else                                                                                                            // 150\n        this.unset()                                                                                                  // 151\n    }                                                                                                                 // 152\n  },                                                                                                                  // 153\n  username: {                                                                                                         // 154\n    type: String,                                                                                                     // 155\n    optional: true                                                                                                    // 156\n  },                                                                                                                  // 157\n  emails: {                                                                                                           // 158\n    type: [Object],                                                                                                   // 159\n    optional: true                                                                                                    // 160\n  },                                                                                                                  // 161\n  \"emails.$.address\": {                                                                                               // 162\n    type: String,                                                                                                     // 163\n    regEx: SimpleSchema.RegEx.Email,                                                                                  // 164\n    optional: true                                                                                                    // 165\n  },                                                                                                                  // 166\n  \"emails.$.verified\": {                                                                                              // 167\n    type: Boolean,                                                                                                    // 168\n    optional: true                                                                                                    // 169\n  },                                                                                                                  // 170\n  roles: {                                                                                                            // 171\n    type: [String],                                                                                                   // 172\n    allowedValues: [\"admin\", \"doctor\", \"patient\"],                                                                    // 173\n    optional: true                                                                                                    // 174\n  },                                                                                                                  // 175\n  profile: {                                                                                                          // 176\n    type: Object,                                                                                                     // 177\n    optional: true,                                                                                                   // 178\n    blackbox: true                                                                                                    // 179\n  },                                                                                                                  // 180\n  ihealth: {                                                                                                          // 181\n    type: IH.Schema.iHealth,                                                                                          // 182\n    optional: true                                                                                                    // 183\n  },                                                                                                                  // 184\n  services: {                                                                                                         // 185\n    type: Object,                                                                                                     // 186\n    optional: true,                                                                                                   // 187\n    blackbox: true                                                                                                    // 188\n  }                                                                                                                   // 189\n})                                                                                                                    // 190\n                                                                                                                      // 191\nMeteor.users.attachSchema(IH.Schema.Users)                                                                            // 192\n                                                                                                                      // 193\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:users'] = {};\n\n})();\n","servePath":"/packages/ihealth_users.js","sourceMap":{"version":3,"sources":["/packages/ihealth_users/lib/ph.js","/RC/login.jsx","/packages/ihealth_users/lib/schemas.js"],"names":[],"mappings":"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":"/packages/ihealth_users.js","sourcesContent":["\nph = {\n  errorMsgs: {\n    // Custom Error Handlers\n    1001: \"Your passwords did not match, please try again.\",\n  }\n}\n","\nlet themes = [\"overlay-light\",\"overlay-dark\"]\nIH.RC.User = React.createClass({\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"ih-login\",\n  themeDefault: \"overlay-dark\",\n  themes: themes,\n\n  propTypes: {\n    fullHeight: React.PropTypes.bool,\n    noHeader: React.PropTypes.bool,\n    alignTop: React.PropTypes.bool,\n    bgColor: React.PropTypes.string,\n    registerCallback: React.PropTypes.func,\n\n    // Common Props\n    theme: React.PropTypes.string,\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    style: React.PropTypes.object,\n  },\n\n  getInitialState() {\n    return {\n      buttonActive: false,\n      waiting: false,\n      action: _.contains([\"login\",\"register\",\"reset\"], this.props.action) ? this.props.action : \"login\",\n      msg: null,\n      notification: null\n    }\n  },\n  /**\n   * @ @ @ @\n   * Handler\n   * @ @ @ @\n   */\n  checkButtonState(e){\n    debugger\n    switch (this.state.action){\n      case \"login\":\n        var form = this.refs.loginForm.getFormData()\n        break\n      case \"register\":\n        var form = this.refs.registerForm.getFormData()\n        break\n      case \"reset\":\n        var form = this.refs.resetForm.getFormData()\n        break\n    }\n    let test = _.every( _.values(form), function(t){\n      return t.length && t.length>0\n    })\n    if (this.state.action == 'register' && form.pwRepeat){\n      if (!App.checkPassword(form.pw)) {\n        this.setState({\n          msg: \"Password shoud have at least 8 characters, containing Capital Letters AND Numbers.\",\n          buttonActive: false\n        })\n        return\n      } else if (this.state.msg) {\n        this.setState({ msg: null })\n      }\n    }\n    if (test !== this.state.buttonActive)\n      this.setState({ buttonActive: test })\n  },\n  resetForm(){\n    this.setState({\n      waiting: false,\n      msg: null,\n      buttonActive: false,\n    })\n    if (this.state.action == \"login\") {\n      this.refs.username.reset()\n      this.refs.password.reset()\n    } else if (this.state.action == \"register\") {\n      this.refs.regEmail.reset()\n      this.refs.regPw.reset()\n      this.refs.regPwRepeat.reset()\n    } else if (this.state.action == \"reset\") {\n      this.refs.email.reset()\n    }\n  },\n  switchAction(){\n    this.resetForm()\n    this.setState({ buttonActive: false })\n\n    if (this.state.action == \"reset\") {\n      this.setState({action: \"login\"})\n      return\n    }\n    else {\n      this.setState({ action: this.state.action==\"register\" ? \"login\" : \"register\" })\n    }\n  },\n  startReset(){\n    this.resetForm()\n    this.setState({\n      emailFound: true\n    })\n    this.setState({action: \"reset\"})\n    return   \n  },\n  login(e){\n    e.preventDefault()\n    if (this.state.msg) return null\n\n    let form = this.refs.loginForm.getFormData()\n\n    if (form.username.length && form.password.length) {\n      // Attempt Log In\n      let self = this\n      this.setState({ waiting: true })\n      Meteor.loginWithPassword( form.username, form.password, function(err){\n        debugger\n        if (!err){\n          if (form.keepName == 'on') {\n            Cookie.set('username', form.username)\n          } else  {\n            Cookie.clear('username')\n          }\n          self.resetForm()\n        }\n\n        let passedMsg = err && err.error\n          ? (ph.errorMsgs[err.error] || err.reason)\n          : <p>You are now logged in!</p>\n\n        if (_.isFunction(self.props.loginCallback))\n          self.props.loginCallback()\n\n        // message hook;for calphin listener\n        if(!err){\n          Dispatcher.dispatch({\n            actionType: \"AUTH_LOGIN_SUCCESS\"\n          });\n          return;\n        }\n\n        self.setState({\n          msg: passedMsg,\n          buttonActive: false,\n          waiting: false,\n        })\n      })\n    }\n  },\n  register(e){\n    debugger\n    e.preventDefault()\n    if (this.state.msg) return null\n\n    let self = this\n    let form = this.refs.registerForm.getFormData()\n\n    if (form.term != 'on') {\n      this.setState({\n        notification: \"Please accept the following terms of use.\"\n      })\n      return null\n    }\n\n    if (form.pw==form.pwRepeat) {\n      if (!App.checkPassword(form.pw)) {\n        this.setState({\n          msg: \"Password shoud have at least 8 characters, containing Capital Letters AND Numbers.\"\n        })\n        return\n      }\n      // Create User\n      Accounts.createUser({\n        email: form.email,\n        password: form.pw\n      }, function(err) {\n        if (!err){\n          Meteor.call('SetOptIn', Meteor.userId(), form.OptIn == \"on\" ? true : false, function(error, res){\n            console.log(error)\n            err = error;\n          })\n          self.resetForm()\n        }\n\n        let passedMsg = err && err.error\n          ? (ph.errorMsgs[err.error] || err.reason)\n          : <p>Thank you for registering!</p>\n\n        if (_.isFunction(self.props.registerCallback))\n          self.props.registerCallback()\n\n        if(!err){\n          Dispatcher.dispatch({\n            actionType: \"AUTH_REGISTER_SUCCESS\"\n          });\n          return;\n        }\n        self.setState({\n          msg: passedMsg,\n          buttonActive: false,\n          waiting: false,\n        })\n      })\n    } else\n      this.setState({\n        msg: ph.errorMsgs[1001],\n        buttonActive: false,\n        waiting: false,\n      })\n  },\n\n  reset(e){\n    e.preventDefault()\n    if (this.state.msg) return null\n\n    let form = this.refs.resetForm.getFormData()\n\n    if (form.email.length) {\n      // Attempt Log In\n      let self = this\n      this.setState({ waiting: true })\n      Meteor.call('CheckEmail', form.email, function(err, result){\n        debugger\n        if (!!err) {\n          console.log(err)\n          result = false\n        }\n\n        if (result){\n          Accounts.forgotPassword({ email: form.email },function(err){\n            console.log(err)\n            let passedMsg = err && err.error\n              ? (ph.errorMsgs[err.error] || err.reason)\n              : <p>Password Reset Email Has Been Sent!</p>\n            self.setState({ msg: passedMsg })\n          })\n        } else {\n        // the email address is not found\n          this.setState({\n            emailFound: false,\n            waiting: false,\n            buttonActive:false,\n            msg: \"Entered E-mail is not in record.\",\n          })\n        }\n      })\n    }\n  },\n\n  removeMsg(e){\n    e.preventDefault()\n    this.setState({\n      waiting: false,\n      msg: null,\n    })\n  },\n\n  jumpToNextPage(e){\n    e.preventDefault()\n    this.setState({\n      waiting: false,\n      notification: null,\n      msg:null\n    })\n  },\n\n  printMsg(){\n    console.log(\"printMsg is called\", this.state.msg)\n    debugger\n    let currentMessages = this.state.msg ? [this.state.msg] : []\n    return <div>\n      {\n        currentMessages.map(function(m,n){\n          return <div className=\"center\" key={n}>\n                      <div className=\"bigger inline-block invis-70 red\">\n                        {_.isString(m) ? <div>{m}</div> : m}\n                      </div>\n                    </div>\n        })\n      }\n    </div>\n\n  },\n\n  /**\n   * @ @ @ @\n   * Render\n   * @ @ @ @\n   */\n  renderMsg(){\n    let self = this\n    let bg = h.checkColorClass(this.props.bgColor) ? this.props.bgColor : null\n    let msgs = this.state.notification ? [this.state.notification] : [] // This will always be either 1 or 0\n\n    return <RC.Animate transitionName=\"scale\">\n      {\n      msgs.map( function(m,n){\n        return <div className={\"abs-full table on-top\"+(bg ? \" bg-\"+bg : \"\")} key={n}>\n          <div className=\"inside center\">\n            {_.isString(m) ? <p>{m}</p> : m}\n            <RC.Button onClick={self.jumpToNextPage} theme=\"circle\" buttonColor={bg}>OK</RC.Button>\n          </div>\n        </div>\n      })\n      }\n    </RC.Animate>\n  },\n\n  renderForm(){\n    var inputTheme = \"small-label\"\n    var buttonTheme = \"full\"\n    if (_.contains([\"overlay-light\",\"overlay-dark\"], this.props.theme)) {\n      inputTheme += \",\"+this.props.theme\n      buttonTheme += \",\"+this.props.theme\n    }\n\n    switch (this.state.action) {\n\n      case \"login\":\n        return <RC.Form onSubmit={this.login} onKeyUp={this.checkButtonState} ref=\"loginForm\">\n          <div>Log In To Your Calphin Account</div>\n          {this.printMsg()}\n          <RC.Input name=\"username\" label=\"E-Mail\" theme={inputTheme} ref=\"username\" value={Cookie.get('username')}/>\n          <RC.Input name=\"password\" label=\"Password\" type=\"password\" theme={inputTheme} ref=\"password\" />\n          <RC.Button name=\"button\" theme={buttonTheme} active={this.state.buttonActive} disabled={this.state.waiting}>\n            {this.state.waiting ? <RC.uiIcon uiClass=\"circle-o-notch spin-slow\" /> : \"Log In\"}\n          </RC.Button>\n          <RC.Checkbox name=\"keepName\" ref=\"keepName\" value={true} label=\"Remember My User Name\"/>\n        </RC.Form>\n      break\n\n      case \"register\":\n        return <RC.Form onSubmit={this.register} onKeyUp={this.checkButtonState} ref=\"registerForm\">\n          <div>Create an Account</div>\n          {this.printMsg()}\n          <RC.Input name=\"email\" label=\"E-Mail\" theme={inputTheme} ref=\"regEmail\" />\n          <RC.PasswordInput name=\"pw\" label=\"Password\" type=\"password\" theme={inputTheme} ref=\"regPw\" />\n          <RC.Input name=\"pwRepeat\" label=\"Repeat Password\" type=\"password\" theme={inputTheme} ref=\"regPwRepeat\" />\n          <RC.Button name=\"button\" theme={buttonTheme} active={this.state.buttonActive} disabled={this.state.waiting}>\n            {this.state.waiting ? <RC.uiIcon uiClass=\"circle-o-notch spin-slow\" /> : \"Sign Up\"}\n          </RC.Button>\n          <RC.Checkbox className=\"cal-checkbox\" name=\"term\" ref=\"term\" value={true} label=\"Yes，I accpet Privacy Policy and Terms of Use.\"/>\n          <RC.Checkbox className=\"cal-checkbox\" name=\"optIn\" ref=\"optIn\" value={true} label=\"Yes，I’d like to receive email communications from Calphin Aquatic Club\"/>\n        </RC.Form>\n\n      case \"reset\":\n      debugger\n        return (\n          <RC.Form onSubmit={this.reset} onKeyUp={this.checkButtonState} ref=\"resetForm\">\n          <div>Reset Password via Email</div>\n          {this.printMsg()}\n          <RC.Input name=\"email\" label=\"E-Mail Address\" theme={inputTheme} ref=\"email\" />\n          <RC.Button name=\"button\" theme={buttonTheme} active={this.state.buttonActive} disabled={this.state.waiting}>\n            {this.state.waiting ? <RC.uiIcon uiClass=\"circle-o-notch spin-slow\" /> : \"Send Password Reset E-mail\"}\n          </RC.Button>\n        </RC.Form>\n        )\n      break\n    }\n  },\n\n\n  render(){\n\n    var classes = this.getTheme()\n      +(this.props.fullHeight ? \" full-height\" : \"\")\n      +(this.props.noHeader ? \" no-header\" : \"\")\n      +(h.checkColorClass(this.props.bgColor) ? \" bg-\"+this.props.bgColor : \"\")\n      +(this.props.alignTop ? \"\" : \" table\")\n\n    return <div {... _.omit(this.props, [\"className\",\"theme\"])} className={classes}>\n      <div className=\"inside\">\n        <div className=\"re-wrapper\">\n          {this.props.children}\n          {this.renderMsg()}\n          {this.renderForm()}\n          {\n            this.state.action != \"login\" ? null :\n            <p className=\"center\">\n              <span className=\"smallest inline-block cursor open-registration invis-70\" onClick={this.startReset}>\n                Forgot Your Password?\n              </span>\n            </p>\n          }\n          {\n            this.props.disableSwitch ? null :\n            <p className=\"center\">\n              <span className=\"smallest inline-block cursor open-registration invis-70\" onClick={this.switchAction}>\n                {this.state.action==\"login\" ? \"Create a new account\" : \"Log-in with an existing account\"}\n              </span>\n            </p>\n          }\n        </div>\n      </div>\n    </div>\n  }\n})\n\nif (h.nk(Meteor.settings, \"public.env\")!=\"live\")\n  IH.RC.User.Help = {\n    Type: \"Unique/Canvas\",\n    Themes: themes,\n    PropTypes: {\n      fullHeight: \"Boolean (Makes the login area equal to screen size)\",\n      noHeader: \"Boolean (If fullHeight and noHeader are both true, close the gap where the header would normally be)\",\n      alignTop: \"Boolean (Makes the login area center vertically)\",\n      bgColor: \"String (Must be a valid CSS color class)\",\n      action: \"String [\\\"login\\\", \\\"register\\\"]\",\n      registerCallback: \"Callback function for user registrations\",\n    },\n    Description: \"Creates a login form.\"\n  }\n","\nSimpleSchema.extendOptions({\n  editable: Match.Optional(Boolean),\n  editableBy: Match.Optional([String])\n})\n\nIH.Schema.Address = new SimpleSchema({\n  street: {\n    type: String,\n    max: 100\n  },\n  city: {\n    type: String,\n    max: 50\n  },\n  state: {\n    type: String,\n    regEx: /^A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]$/\n  },\n  zip: {\n    type: String,\n    regEx: /^[0-9]{5}$/\n  }\n});\n\nIH.Schema.UserBasic = new SimpleSchema({\n  name: {\n    type: String,\n    optional: false,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  tel: {\n    type: Number,\n    optional: false,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\", \"patient\"]\n  },\n  address: {\n    type: IH.Schema.Address,\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\", \"patient\"]\n  }\n});\n\nIH.Schema.UserDoctor = new SimpleSchema({\n  verified: {\n    type: Boolean,\n    optional: false,\n    editable: false,\n    editableBy: [\"admin\"],\n    autoValue: function() {}\n  },\n  title: {\n    type: String,\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  specialties: {\n    type: [String],\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  languages: {\n    type: [String],\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  rating: {\n    type: Number,\n    optional: true,\n    decimal: true,\n    editable: false,\n    editableBy: [\"admin\"]\n  },\n  patients: {\n    type: Object,\n    optional: true,\n    editable: false,\n    editableBy: [\"admin\", \"doctor\"]\n  }\n}, \"patients.regular\", {\n  type: [String],\n  optional: true\n}, \"patients.vip\", {\n  type: [String],\n  optional: true\n});\n\nIH.Schema.UserPatient = new SimpleSchema({\n  DOB: {\n    type: Date,\n    optional: true,\n    editable: true\n  },\n  height: {\n    type: Number,\n    decimal: true,\n    optional: true,\n    editable: true\n  },\n  weight: {\n    type: Number,\n    decimal: true,\n    optional: true,\n    editable: true\n  },\n  doctors: {\n    type: [String],\n    optional: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  devices: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nIH.Schema.iHealth = new SimpleSchema({\n  basic: {\n    type: IH.Schema.UserBasic,\n    optional: true\n  },\n  doctor: {\n    type: IH.Schema.UserDoctor,\n    optional: true\n  },\n  patient: {\n    type: IH.Schema.UserPatient,\n    optional: true\n  }\n});\n\nIH.Schema.Users = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    optional: true,\n  },\n  updatedAt: {\n    type: Date,\n    optional: true,\n    autoValue: function(){\n      if (this.isUpdate)\n        return new Date()\n      else\n        this.unset()\n    }\n  },\n  username: {\n    type: String,\n    optional: true\n  },\n  emails: {\n    type: [Object],\n    optional: true\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true\n  },\n  roles: {\n    type: [String],\n    allowedValues: [\"admin\", \"doctor\", \"patient\"],\n    optional: true\n  },\n  profile: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  ihealth: {\n    type: IH.Schema.iHealth,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n})\n\nMeteor.users.attachSchema(IH.Schema.Users)\n"]}}]