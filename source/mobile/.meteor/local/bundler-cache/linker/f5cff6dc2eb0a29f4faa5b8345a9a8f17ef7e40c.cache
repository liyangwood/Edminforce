[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar DevTools = Package['ihealth:dev-tools'].DevTools;\n\n/* Package-scope variables */\nvar iHealthBG5;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/ihealth_bg5/bg5.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// possible states: disconnected, connecting, connected, measuring, measurement error                           // 1\n// working functions: startDiscovery, startMeasure, setUnit, setBottleId,                                       // 2\n// getBottleId , setBottleMessage, getOfflineData, deleteOfflineData, setDisconnectCallback                     // 3\n                                                                                                                // 4\nvar debugLevel = 4;                                                                                             // 5\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);                                                 // 6\n                                                                                                                // 7\nvar processSignal = function(signal) {                                                                          // 8\n  debugL(3)(\"processSignal call: \" + signal)                                                                    // 9\n  try {                                                                                                         // 10\n   var json_signal = JSON.parse(signal);                                                                        // 11\n   return json_signal;                                                                                          // 12\n  } catch(err) {                                                                                                // 13\n   console.warn('processSignal' + err);                                                                         // 14\n  }                                                                                                             // 15\n};                                                                                                              // 16\n                                                                                                                // 17\nvar cbLog = function(functionName) {                                                                            // 18\n  return function(signal) {                                                                                     // 19\n    console.log(functionName, ' - ', signal)                                                                    // 20\n  }                                                                                                             // 21\n};                                                                                                              // 22\n                                                                                                                // 23\n/**                                                                                                             // 24\n* Get & Save device informations from/to Session                                                                // 25\n*/                                                                                                              // 26\nvar getDevices = function(type){                                                                                // 27\n  debugL(3)(\"getDevices call: \" + type)                                                                         // 28\n  var devices = Session.get(\"devices\") || { bluetooth: false }                                                  // 29\n  return type ? devices[type] : devices                                                                         // 30\n}                                                                                                               // 31\n                                                                                                                // 32\nvar saveDevices = function(session, connected){                                                                 // 33\n  debugL(3)(\"saveDevices call: \" + session + \", \" + connected)                                                  // 34\n  var devices = Session.get(\"devices\") || { bluetooth: false }                                                  // 35\n  var cur = Session.get(\"devices\") || { bluetooth: false }                                                      // 36\n  var compare = _.clone(cur)                                                                                    // 37\n                                                                                                                // 38\n  if (!_.isObject(session)) session = {}                                                                        // 39\n  if (connected) session.bluetooth = true                                                                       // 40\n  _.extend(cur,session)                                                                                         // 41\n                                                                                                                // 42\n  if (!_.isEqual(compare,cur)) {                                                                                // 43\n    console.log(cur)                                                                                            // 44\n    Session.set(\"devices\", cur) // Cur is Extended                                                              // 45\n  }                                                                                                             // 46\n}                                                                                                               // 47\n                                                                                                                // 48\n/**                                                                                                             // 49\n * Javascript Class for Blood Pressure                                                                          // 50\n * BG5 Device                                                                                                   // 51\n *                                                                                                              // 52\n * DESCRIPTION                                                                                                  // 53\n * This class uses the iHealth BG API.                                                                          // 54\n *                                                                                                              // 55\n *  SESSIONS                                                                                                    // 56\n * BG {Number, Boolean}                                                                                         // 57\n * devices {Object}                                                                                             // 58\n */                                                                                                             // 59\niHealthBG5 = function(args){                                                                                    // 60\n  var defaults = {                                                                                              // 61\n\t\thasStarted: false,                                                                                            // 62\n    connectionAttemptDuration: 13000,                                                                           // 63\n    connectAndReadyDelay: 1800,                                                                                 // 64\n    finishedMeasurementDelay: 1200,                                                                             // 65\n                                                                                                                // 66\n    maxBG: 250 // Highest possible BG                                                                           // 67\n\t}                                                                                                              // 68\n\tvar args = _.isObject(args) ? _.defaults(args, defaults) : defaults                                            // 69\n\t_.extend(this, args)                                                                                           // 70\n                                                                                                                // 71\n  this.mode = \"\"                                                                                                // 72\n  this.macId = null                                                                                             // 73\n  this.name = null                                                                                              // 74\n                                                                                                                // 75\n  // Fixed Args                                                                                                 // 76\n  this.timeout = null                                                                                           // 77\n  this.state = \"disconnected\"  // attempting to getBattery during measurement will not work                     // 78\n  this.battery = null  // if null, UI should grey out the battery icon                                          // 79\n  this.error = null // if null, there is no error                                                               // 80\n  this.offlineNum = null // if null, there is no error                                                          // 81\n                                                                                                                // 82\n  this.isPluginLoaded = false                                                                                   // 83\n                                                                                                                // 84\n  this.checkPluginLoaded()                                                                                      // 85\n  if (!this.isPluginLoaded) {                                                                                   // 86\n    var self = this                                                                                             // 87\n    var timerCheckPlugin = Meteor.setInterval(function(){                                                       // 88\n      if (!self.isPluginLoaded) {                                                                               // 89\n        self.checkPluginLoaded()                                                                                // 90\n      } else {                                                                                                  // 91\n        Meteor.clearInterval(timerCheckPlugin)                                                                  // 92\n        debugL(3)('stop timerCheckPlugin')                                                                      // 93\n      }                                                                                                         // 94\n    }, 200)                                                                                                     // 95\n  }                                                                                                             // 96\n}                                                                                                               // 97\n                                                                                                                // 98\niHealthBG5.prototype = {                                                                                        // 99\n  checkPluginLoaded: function() {                                                                               // 100\n    debugL(4)(\"checkPluginLoaded BG call: - \")                                                                  // 101\n    var isPluginLoaded = typeof(BgManagerCordova) !== \"undefined\"                                               // 102\n    debugL(4)('checkPluginLoaded BG: ' + isPluginLoaded)                                                        // 103\n    this.isPluginLoaded = isPluginLoaded                                                                        // 104\n    // saveApp({isPluginLoaded: isPluginLoaded})                                                                // 105\n    Session.set(\"isPluginLoaded\", isPluginLoaded)                                                               // 106\n    return isPluginLoaded                                                                                       // 107\n  },                                                                                                            // 108\n  isConnected: function() {                                                                                     // 109\n    debugL(2)(\"isConnected call: - \")                                                                           // 110\n    return this.state !== \"disconnected\"                                                                        // 111\n  },                                                                                                            // 112\n  /**                                                                                                           // 113\n   * Connect to BG Device                                                                                       // 114\n   */                                                                                                           // 115\n  connect: function(cbFail, cbSuccess) {                                                                        // 116\n    debugL(1)(\"connect call: \" + cbFail + \", \" + cbSuccess)                                                     // 117\n    if (!this.isPluginLoaded) {                                                                                 // 118\n      debugL(1)(\"connect abort: \" + this.isPluginLoaded)                                                        // 119\n      return                                                                                                    // 120\n    }                                                                                                           // 121\n                                                                                                                // 122\n    console.log(\"Connecting...\")                                                                                // 123\n                                                                                                                // 124\n    // Example of possible returns                                                                              // 125\n    // {\"address\":\"5CF938BED71E\"}                                                                               // 126\n    // {\"address\":\"F4F951C259FD\"}                                                                               // 127\n    // {\"address\":\"7FEE23DD7284\"}                                                                               // 128\n    // {\"address\":\"8CDE52143F1E\",\"name\":\"BG5 143F1E\"}                                                           // 129\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create bluetoothsocket success\"}                                        // 130\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create iostream success\"}                                               // 131\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"authenticate device\"}                                                   // 132\n                                                                                                                // 133\n    // Begin Connection Attempt                                                                                 // 134\n    saveDevices({ BG: \"searching\" })                                                                            // 135\n                                                                                                                // 136\n    var self = this                                                                                             // 137\n    var startDiscoverySuccessCB = function(res){                                                                // 138\n        // ##                                                                                                   // 139\n        // Success Function                                                                                     // 140\n        console.log(\"Success: \"+res) // DEVELOPMENT MODE                                                        // 141\n                                                                                                                // 142\n        try {                                                                                                   // 143\n          debugL(7)(\"#### Parse Attempt\")                                                                       // 144\n          var json = JSON.parse(res)                                                                            // 145\n          if (json.address && json.name) {                                                                      // 146\n            self.name = json.name                                                                               // 147\n            debugL(7)(\"#### Parse Success\")                                                                     // 148\n            self.macId = json.address                                                                           // 149\n            self.state = \"connected\"                                                                            // 150\n            saveDevices({ BG: \"connected\" })                                                                    // 151\n                                                                                                                // 152\n            // iOS plugin currently doesn't have this function                                                  // 153\n            // if (!h.getPlatform(\"ios\"))                                                                       // 154\n                                                                                                                // 155\n            if (!h.getPlatform(\"ios\") && _.isFunction(BgManagerCordova.connectDevice)) {                        // 156\n              BgManagerCordova.connectDevice(self.macId, function (res) {                                       // 157\n                console.log(\"Connect Failed\", res)                                                              // 158\n                debugL(2)(\"not ios connectDevice\", res)                                                         // 159\n              }, function (message) {                                                                           // 160\n                console.log(\"Connect Success\", res)                                                             // 161\n                                                                                                                // 162\n                // Remove the \"disconnected\" error if it was disconnected.                                      // 163\n                var curSession = Session.get(\"BG\")                                                              // 164\n                if (_.isObject(curSession) && curSession.errorID===99) {                                        // 165\n                  delete curSession.errorID                                                                     // 166\n                  Session.set(\"BG\", curSession)                                                                 // 167\n                }                                                                                               // 168\n                                                                                                                // 169\n                if (cbSuccess) cbSuccess()                                                                      // 170\n                debugL(2)(\"is ios connectDevice\", res)                                                          // 171\n                if (_.isFunction(cbSuccess)) {                                                                  // 172\n                  cbSuccess()                                                                                   // 173\n                }                                                                                               // 174\n              })                                                                                                // 175\n            } else {                                                                                            // 176\n              console.log(\"Connect function was never executed. Perhaps this is an iOS device?\")                // 177\n              if (_.isFunction(cbSuccess)) {                                                                    // 178\n                cbSuccess()                                                                                     // 179\n              }                                                                                                 // 180\n            }                                                                                                   // 181\n                                                                                                                // 182\n            Meteor.clearTimeout(self.timeout)                                                                   // 183\n            self.timeout = Meteor.setTimeout( function(){                                                       // 184\n              // Set bg to true after 2 seconds so the \"Connected\" status message can be read by humans.        // 185\n              // @Jason, I'd prefer to keep UI related code outside BG5                                         // 186\n              if (self.macId!=null){                                                                            // 187\n                saveDevices({                                                                                   // 188\n                  BG: {                                                                                         // 189\n                    macId: self.macId,                                                                          // 190\n                    name: self.name,                                                                            // 191\n                    state: self.state                                                                           // 192\n                  }                                                                                             // 193\n                })                                                                                              // 194\n                self.getOfflineData();                                                                          // 195\n                self.updateInfo('getBattery', 'battery');                                                       // 196\n                self.updateInfo('getBottleId', 'bottleid', 'botteID');                                          // 197\n                                                                                                                // 198\n                var batteryCheckInterval = 30 * 1000;                                                           // 199\n                Meteor.clearInterval(self.batteryTimer);                                                        // 200\n                self.batteryTimer = Meteor.setInterval(function() {                                             // 201\n                  self.updateInfo('getBattery', 'battery');                                                     // 202\n                }, batteryCheckInterval);                                                                       // 203\n                                                                                                                // 204\n                var cancelBatteryTimer = function() {                                                           // 205\n                  Meteor.clearInterval(self.batteryTimer);                                                      // 206\n                }                                                                                               // 207\n                self.detectDisconnect(cancelBatteryTimer)                                                       // 208\n                                                                                                                // 209\n                if (_.isFunction(cbSuccess)) {                                                                  // 210\n                  cbSuccess()                                                                                   // 211\n                }                                                                                               // 212\n              }                                                                                                 // 213\n            }, self.connectAndReadyDelay)                                                                       // 214\n                                                                                                                // 215\n          } else                                                                                                // 216\n            saveDevices({ BG: \"searching\" })                                                                    // 217\n                                                                                                                // 218\n          // Skipping \"Connecting\" because it causes error if user stops before the final stage.                // 219\n          // switch (json.msg) {                                                                                // 220\n          //   case \"create bluetoothsocket success\":                                                           // 221\n          //   case \"create iostream success\":                                                                  // 222\n          //     saveDevices({ BG: \"connecting\" })                                                              // 223\n          //     break                                                                                          // 224\n          //   case \"authenticate device\":                                                                      // 225\n          //     self.macId = json.address                                                                      // 226\n          //     saveDevices({ BG: \"connected\" })                                                               // 227\n          //                                                                                                    // 228\n          //     Meteor.setTimeout( function(){                                                                 // 229\n          //       // Set bg to true after 2 seconds so the \"Connected\" status message can be read by humans.   // 230\n          //       if (self.macId!=null){                                                                       // 231\n          //         self.pingDevice(true)                                                                      // 232\n          //         if (cbSuccess) cbSuccess()                                                                 // 233\n          //       }                                                                                            // 234\n          //     }, 2000)                                                                                       // 235\n          //     break                                                                                          // 236\n          //   default:                                                                                         // 237\n          //     saveDevices({ BG: \"searching\" })                                                               // 238\n          // }                                                                                                  // 239\n        } catch(err) {                                                                                          // 240\n          // DEVELOPMENT MODE                                                                                   // 241\n          console.warn(err)                                                                                     // 242\n          console.log(res)                                                                                      // 243\n        }                                                                                                       // 244\n      };                                                                                                        // 245\n                                                                                                                // 246\n    var startDiscoveryFailCB = function(res){                                                                   // 247\n        debugL(2)(\"Fail: \"+res);                                                                                // 248\n    }                                                                                                           // 249\n                                                                                                                // 250\n    console.log(\"Start discovery\")                                                                              // 251\n    BgManagerCordova.startDiscovery( this.macId, startDiscoverySuccessCB, startDiscoveryFailCB)                 // 252\n                                                                                                                // 253\n      // Give up after X amount of time                                                                         // 254\n      Meteor.clearTimeout(self.timeout)                                                                         // 255\n      self.timeout = Meteor.setTimeout( function(){                                                             // 256\n        console.log(\"Connection attempt has been timed out.\")                                                   // 257\n        self.stopConnecting()                                                                                   // 258\n        if (cbFail) cbFail()                                                                                    // 259\n      }, this.connectionAttemptDuration)                                                                        // 260\n  },                                                                                                            // 261\n                                                                                                                // 262\n  /**                                                                                                           // 263\n   * Start monitoring the blood pressure and store it into Session \"BG\"                                         // 264\n   */                                                                                                           // 265\n  start: function(){                                                                                            // 266\n    debugL(1)(\"start call: - \")                                                                                 // 267\n    var self = this                                                                                             // 268\n    // var reconnectAttempted = false                                                                           // 269\n                                                                                                                // 270\n    if (!this.isPluginLoaded || this.hasStarted) {                                                              // 271\n      debugL(1)(\"start terminated early: - \" + this.isPluginLoaded + \", \" + this.hasStarted)                    // 272\n      return // Exit because BpManagerCordova is not defined                                                    // 273\n    }                                                                                                           // 274\n                                                                                                                // 275\n    // var reconnectStart = function() {                                                                        // 276\n    //   self.connect( function(){                                                                              // 277\n    //     console.warn(\"Could not start device because device couldn't be found.\")                             // 278\n    //   }, function(){                                                                                         // 279\n    //     self.start()                                                                                         // 280\n    //   })                                                                                                     // 281\n    // }                                                                                                        // 282\n    //                                                                                                          // 283\n    // if (this.isConnected()) {                                                                                // 284\n    //   reconnectStart()                                                                                       // 285\n    //   return                                                                                                 // 286\n    // }                                                                                                        // 287\n                                                                                                                // 288\n    this.hasStarted = true // Ensure that BG monitor can only run one at a time                                 // 289\n    this.state = \"measuring\"                                                                                    // 290\n                                                                                                                // 291\n    // Start from 0                                                                                             // 292\n    var bg = {status: 'processing'}                                                                             // 293\n    Session.set(\"BG\", bg) // Start from 0                                                                       // 294\n                                                                                                                // 295\n    console.log(\"Starting device: \"+this.macId)                                                                 // 296\n                                                                                                                // 297\n    BgManagerCordova.startMeasure( this.macId, function(signal) {                                               // 298\n      debugL(2)(\"startMeasure\", signal);                                                                        // 299\n                                                                                                                // 300\n      var jsonSignal = processSignal(signal)                                                                    // 301\n      if(jsonSignal) {                                                                                          // 302\n        _.extend(bg, jsonSignal) // sometimes bg doesn't update fast enough                                     // 303\n                                                                                                                // 304\n        // console.log(\"keys:\", _.keys(bg))                                                                     // 305\n        // console.log(\"values:\", _.values(bg))                                                                 // 306\n        debugL(3)(\"extended BG: \", bg)                                                                          // 307\n                                                                                                                // 308\n        if (jsonSignal.value) {                                                                                 // 309\n          // bg.status = 'paused'                                                                               // 310\n          self.stop(null, true)                                                                                 // 311\n                                                                                                                // 312\n          // Meteor.setTimeout( function(){                                                                     // 313\n          bg.status = 'finished'                                                                                // 314\n          bg.date = new Date()                                                                                  // 315\n          Session.set(\"BG\", bg)                                                                                 // 316\n          // },self.finishedMeasurementDelay)                                                                   // 317\n                                                                                                                // 318\n        } else {                                                                                                // 319\n          bg.status = 'processing'                                                                              // 320\n          bg.perCent = 0.5 //jsonSignal.pressure / self.maxBG                                                   // 321\n                                                                                                                // 322\n          if (!_.isNumber(bg.perCent)) {                                                                        // 323\n            console.log(\"########\")                                                                             // 324\n            console.log(\"########\")                                                                             // 325\n            console.log(\"########\")                                                                             // 326\n            console.log(\"########\")                                                                             // 327\n            console.log(\"########\")                                                                             // 328\n            console.log(\"########\")                                                                             // 329\n            console.log(\"########\")                                                                             // 330\n            console.log(\"########\")                                                                             // 331\n            console.log(\"NaN Error Happened\")                                                                   // 332\n            console.log(jsonSignal)                                                                             // 333\n            bg.errorID = 98                                                                                     // 334\n          }                                                                                                     // 335\n        }                                                                                                       // 336\n                                                                                                                // 337\n        // if (res.msg==\"No Device\") {                                                                          // 338\n        //   self.stop(function(){                                                                              // 339\n        //     self.macId = null                                                                                // 340\n        //     self.start()                                                                                     // 341\n        //   })                                                                                                 // 342\n        // }                                                                                                    // 343\n                                                                                                                // 344\n        if (_.isNumber(bg.errorID) && bg.errorID>=0) {                                                          // 345\n          self.handleError(bg)                                                                                  // 346\n          self.stop(null,true)                                                                                  // 347\n        } else                                                                                                  // 348\n          Session.set(\"BG\", bg)                                                                                 // 349\n      }                                                                                                         // 350\n    }, function(res){                                                                                           // 351\n      console.log('start measure fail' + res)                                                                   // 352\n      // Failure Function()                                                                                     // 353\n      self.stop()                                                                                               // 354\n                                                                                                                // 355\n      // if (!reconnectAttempted) {                                                                             // 356\n      //   console.warn(\"Start Measure Error: \"+res)                                                            // 357\n      //   reconnectAttempted = true                                                                            // 358\n      //   reconnectStart()                                                                                     // 359\n      // } else {                                                                                               // 360\n      //   console.warn(\"Start Measure Error in Reconnect: \"+res)                                               // 361\n      // }                                                                                                      // 362\n    })                                                                                                          // 363\n  },                                                                                                            // 364\n  handleError: function(bg) {                                                                                   // 365\n                                                                                                                // 366\n    // Exit because if BG session is *NOT* an object, measurement was not happening.                            // 367\n    // And if measurement was not happening, then there's not need to handle any errors.                        // 368\n    if (!_.isObject(bg))                                                                                        // 369\n      return                                                                                                    // 370\n                                                                                                                // 371\n    debugL(2)(\"Error Handler Code: \" + bg.errorID)                                                              // 372\n                                                                                                                // 373\n    switch (bg.errorID) {                                                                                       // 374\n      case 0:                                                                                                   // 375\n        bg.msg = \"Please keep your arm stable. Stay still and try again.\"                                       // 376\n      break                                                                                                     // 377\n      case 4:                                                                                                   // 378\n        // Low Pressure Error -- Cannot inflate.                                                                // 379\n        bg.msg = \"Your blood pressure was too low. Please wear the blood pressure cuff properly and try again.\"\n      break                                                                                                     // 381\n      case 35:                                                                                                  // 382\n        bg.msg = \"Stop button was pressed. Please close and try again.\"                                         // 383\n      case 13:                                                                                                  // 384\n        bg.msg = \"Battery is too low. Please re-charge and try again.\"                                          // 385\n      break                                                                                                     // 386\n                                                                                                                // 387\n      // Following error codes are software generated -- they are not from the plugin                           // 388\n      case 98:                                                                                                  // 389\n        // No error code received but measurement couldn't continue -- i.e. NaN pressure                        // 390\n        bg.msg = \"Unknown error occured.\"                                                                       // 391\n      break                                                                                                     // 392\n      case 99:                                                                                                  // 393\n        // Code created for disconnect callback                                                                 // 394\n        bg.msg = \"Your device was disconnected from the blood pressure monitor.\"                                // 395\n      break                                                                                                     // 396\n    }                                                                                                           // 397\n                                                                                                                // 398\n    // if (_.isNumber(bg.errorID) && !bg.msg)                                                                   // 399\n    if (bg.msg)                                                                                                 // 400\n      Session.set(\"BG\", bg)                                                                                     // 401\n                                                                                                                // 402\n    BgManagerCordova.getErrorDetailWithID( bg.errorID, function(errObjStr){                                     // 403\n      if (!bg.msg) {                                                                                            // 404\n        console.log(\"##########\")                                                                               // 405\n        console.log(\"##########\")                                                                               // 406\n        console.log(\"##########\")                                                                               // 407\n        console.log(\"##########\")                                                                               // 408\n        console.log(\"##########\")                                                                               // 409\n        console.log(\"##########\")                                                                               // 410\n      }                                                                                                         // 411\n      var errObj = processSignal(errObjStr)                                                                     // 412\n      if (errObj.ErrorMessage) {                                                                                // 413\n        var bgErrorMsg = \"\"                                                                                     // 414\n        if (errObj.ErrorMessage.match(/\\.$/)) {                                                                 // 415\n          debugL(5)(\"yes for \" + bg.errorID + \": \" + errObj.ErrorMessage)                                       // 416\n          bgErrorMsg = errObj.ErrorMessage                                                                      // 417\n        } else {                                                                                                // 418\n          debugL(5)(\"no for \" + bg.errorID + \": \" + errObj.ErrorMessage)                                        // 419\n          bgErrorMsg = errObj.ErrorMessage + \".\"                                                                // 420\n        }                                                                                                       // 421\n        debugL(4)(\"bgErrorMsg for \" + bg.errorID + \": \" + bgErrorMsg)                                           // 422\n        debugL(4)(\"bg.msg for \" + bg.errorID + \": \" + bg.msg)                                                   // 423\n      }                                                                                                         // 424\n                                                                                                                // 425\n    }, cbLog(\"getErrorDetailWithID fail\"))                                                                      // 426\n  },                                                                                                            // 427\n  /**                                                                                                           // 428\n   * Stop monitoring the blood pressure                                                                         // 429\n   */                                                                                                           // 430\n  stop: function(cb,notStopMeasure) {                                                                           // 431\n    debugL(2)(\"stop call: \" + cb + \", \" + notStopMeasure)                                                       // 432\n    if (!this.isPluginLoaded) return // Exit because BpManagerCordova is not defined                            // 433\n                                                                                                                // 434\n    this.hasStarted = false                                                                                     // 435\n    this.state = \"connected\"                                                                                    // 436\n                                                                                                                // 437\n    if (!_.isFunction(cb)) {                                                                                    // 438\n      var self = this                                                                                           // 439\n      var cb = function(res){                                                                                   // 440\n        console.log(res);                                                                                       // 441\n        try {                                                                                                   // 442\n          Session.set(\"BG\", JSON.parse(res));                                                                   // 443\n        } catch(err) {                                                                                          // 444\n          console.warn(err);                                                                                    // 445\n        }                                                                                                       // 446\n      }                                                                                                         // 447\n    }                                                                                                           // 448\n                                                                                                                // 449\n    if (!notStopMeasure)                                                                                        // 450\n      BgManagerCordova.stopMeasure(this.macId, cb, cb)                                                          // 451\n  },                                                                                                            // 452\n  updateInfo: function(pluginFunction, jsonKey, sessionKey) {                                                   // 453\n    if (!sessionKey) sessionKey = jsonKey;                                                                      // 454\n    debugL(4)(\"updateInfo \" + sessionKey + \"  call: - \")                                                        // 455\n    var self = this                                                                                             // 456\n    var cb = function(signal) {                                                                                 // 457\n      var jsonSignal = processSignal(signal)                                                                    // 458\n      if(jsonSignal && jsonSignal[jsonKey]) {                                                                   // 459\n        self[sessionKey] = jsonSignal[jsonKey];                                                                 // 460\n        var curBG = getDevices(\"BG\")                                                                            // 461\n        curBG[sessionKey] = self[sessionKey];                                                                   // 462\n        saveDevices({ BG: curBG })                                                                              // 463\n      }                                                                                                         // 464\n    }                                                                                                           // 465\n    if (this.state !== \"measuring\") {                                                                           // 466\n      BgManagerCordova[pluginFunction](this.macId, cb, cbLog('get ' + sessionKey + ' fail'))                    // 467\n    } else {                                                                                                    // 468\n      console.log(\"cannot upate \" + sessionKey + \" while measuring\")                                            // 469\n    };                                                                                                          // 470\n  },                                                                                                            // 471\n  detectDisconnect: function(cb) {                                                                              // 472\n    debugL(2)(\"detectDisconnect  call: \" + cb)                                                                  // 473\n    console.log('start setDisconnectCallback');                                                                 // 474\n    var self = this                                                                                             // 475\n    var disconnectCB = function(signal) {                                                                       // 476\n      console.log('disconnected' + signal);                                                                     // 477\n      var jsonResult = processSignal(signal);                                                                   // 478\n                                                                                                                // 479\n      if (jsonResult && jsonResult.msg && jsonResult.msg === \"disconnect\") {                                    // 480\n        self.state = \"disconnected\"                                                                             // 481\n                                                                                                                // 482\n        // marker                                                                                               // 483\n        saveDevices({ BG: null })                                                                               // 484\n                                                                                                                // 485\n        var curSession = Session.get(\"BG\")                                                                      // 486\n        if (_.isObject(curSession)) curSession.errorID = 99                                                     // 487\n        self.handleError( curSession )                                                                          // 488\n      }                                                                                                         // 489\n                                                                                                                // 490\n      if (typeof(cb) === 'function')                                                                            // 491\n        cb()                                                                                                    // 492\n    }                                                                                                           // 493\n                                                                                                                // 494\n    BgManagerCordova.setDisconnectCallback(this.macId, disconnectCB, cbLog('disconnectCallbackCB fail'));       // 495\n  },                                                                                                            // 496\n  getOfflineData: function(){                                                                                   // 497\n    debugL(1)(\"getOfflineData call: - \")                                                                        // 498\n    var self = this                                                                                             // 499\n    var cb = function(signal) {                                                                                 // 500\n      var jsonSignal = processSignal(signal);                                                                   // 501\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"getOfflineData\" && jsonSignal.history && jsonSignal.history.ResultList) {\n        var address = jsonSignal.address;                                                                       // 503\n        var curBG = getDevices(\"BGOfflineData\") || {}                                                           // 504\n        curBG[address] = curBG[address] ? curBG[address] : [];                                                  // 505\n        var resultsOnDevice = jsonSignal.history.ResultList;                                                    // 506\n                                                                                                                // 507\n        var filterWith = function(arr, predicate, modifyFunction) {                                             // 508\n          var filteredArr = []                                                                                  // 509\n          arr.forEach(function(val) {                                                                           // 510\n            if (predicate(val)) {                                                                               // 511\n              if (modifyFunction) { val = modifyFunction(val) };                                                // 512\n              filteredArr.push(val)                                                                             // 513\n            };                                                                                                  // 514\n          });                                                                                                   // 515\n          return filteredArr;                                                                                   // 516\n        };                                                                                                      // 517\n                                                                                                                // 518\n        debugL(4)('resultsOnDevice', resultsOnDevice)                                                           // 519\n        var newResults = filterWith(                                                                            // 520\n          resultsOnDevice,                                                                                      // 521\n          function (result) {                                                                                   // 522\n            // return true if result is not in curBG                                                            // 523\n            var isNew = true;                                                                                   // 524\n            var i = 0;                                                                                          // 525\n            while (isNew && (i < curBG[address].length)) {                                                      // 526\n              if (_.isEqual(_.omit(curBG[address][i], 'DownloadDate'), result)) isNew  = false;                 // 527\n              i++;                                                                                              // 528\n            };                                                                                                  // 529\n            return isNew ;                                                                                      // 530\n          },                                                                                                    // 531\n          function(result) {                                                                                    // 532\n            result.DownloadDate = (new Date()).toISOString();                                                   // 533\n          return result;                                                                                        // 534\n          }                                                                                                     // 535\n        );                                                                                                      // 536\n                                                                                                                // 537\n        if (_.isEmpty(newResults)) {                                                                            // 538\n          debugL(4)('no new results. currBG', curBG[address]);                                                  // 539\n        } else {                                                                                                // 540\n          debugL(3)('newResults', newResults);                                                                  // 541\n          curBG[address] = (curBG[address]).concat(newResults);                                                 // 542\n          saveDevices({ BGOfflineData: curBG })                                                                 // 543\n        }                                                                                                       // 544\n      } else {                                                                                                  // 545\n        debugL(2)('Could not process signal: ', signal);                                                        // 546\n      }                                                                                                         // 547\n    }                                                                                                           // 548\n                                                                                                                // 549\n    if (this.state !== \"measuring\") {                                                                           // 550\n      BgManagerCordova.getOfflineData(this.macId, cb, cbLog(\"getOfflineData success\"))                          // 551\n    } else {                                                                                                    // 552\n      console.log(\"cannot getOfflineData while measuring\")                                                      // 553\n    }                                                                                                           // 554\n  },                                                                                                            // 555\n  /**                                                                                                           // 556\n   * Stop connection attempt                                                                                    // 557\n   */                                                                                                           // 558\n  stopConnecting: function(){                                                                                   // 559\n    debugL(1)(\"stopConnecting call: - \")                                                                        // 560\n                                                                                                                // 561\n    console.log(\"Stopping Connect Attempt\")                                                                     // 562\n                                                                                                                // 563\n    var deviceCheck = getDevices()                                                                              // 564\n    if (!_.isObject(deviceCheck.BG) && deviceCheck.BG!=\"connected\") {                                           // 565\n      saveDevices({ BG: null })                                                                                 // 566\n                                                                                                                // 567\n      if (this.isPluginLoaded)                                                                                  // 568\n        var cb = function(res){ console.log(\"Stop discovery: \", res) }                                          // 569\n        BgManagerCordova.stopDiscovery(this.macId, cb, cb)                                                      // 570\n    }                                                                                                           // 571\n  },                                                                                                            // 572\n  /**                                                                                                           // 573\n   * Disconnect and set all device info to null                                                                 // 574\n   */                                                                                                           // 575\n  disconnect: function(){                                                                                       // 576\n    debugL(1)(\"disconnect call: - \")                                                                            // 577\n    var self = this                                                                                             // 578\n    saveDevices({ BG: null })                                                                                   // 579\n                                                                                                                // 580\n    if (this.isPluginLoaded && _.isFunction(BgManagerCordova.disConnectDevice))                                 // 581\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }                                         // 582\n      BgManagerCordova.disConnectDevice(this.macId, cb, cb)                                                     // 583\n                                                                                                                // 584\n    // this.macId = null                                                                                        // 585\n    // this.name = null                                                                                         // 586\n    var self = this                                                                                             // 587\n    saveDevices({ BG: null })                                                                                   // 588\n                                                                                                                // 589\n    if (this.isPluginLoaded && _.isFunction(BgManagerCordova.disConnectDevice))                                 // 590\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }                                         // 591\n      BgManagerCordova.disConnectDevice(this.macId, cb, cb)                                                     // 592\n                                                                                                                // 593\n    // this.macId = null                                                                                        // 594\n    // this.name = null                                                                                         // 595\n    // Disconnect function success/fail functions in the plugin do not work.                                    // 596\n    // Could be a bug, or could just be incomplete features                                                     // 597\n    //                                                                                                          // 598\n    // , function(res){                                                                                         // 599\n    //   console.log(res)                                                                                       // 600\n    //   console.log(\"Disconnected\")                                                                            // 601\n    //                                                                                                          // 602\n    //   self.macId = null                                                                                      // 603\n    //   self.name = null                                                                                       // 604\n    // },                                                                                                       // 605\n    // function(e){                                                                                             // 606\n    //   console.warn(e)                                                                                        // 607\n    //   console.log(\"Failed to disconnect with macId \"+self.macId)                                             // 608\n    // }, this.mode)                                                                                            // 609\n  }                                                                                                             // 610\n}                                                                                                               // 611\n                                                                                                                // 612\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:bg5'] = {\n  iHealthBG5: iHealthBG5\n};\n\n})();\n","servePath":"/packages/ihealth_bg5.js","sourceMap":{"version":3,"sources":["/packages/ihealth_bg5/bg5.js"],"names":[],"mappingssH","file":"/packages/ihealth_bg5.js","sourcesContent":["// possible states: disconnected, connecting, connected, measuring, measurement error\n// working functions: startDiscovery, startMeasure, setUnit, setBottleId,\n// getBottleId , setBottleMessage, getOfflineData, deleteOfflineData, setDisconnectCallback\n\nvar debugLevel = 4;\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);\n\nvar processSignal = function(signal) {\n  debugL(3)(\"processSignal call: \" + signal)\n  try {\n   var json_signal = JSON.parse(signal);\n   return json_signal;\n  } catch(err) {\n   console.warn('processSignal' + err);\n  }\n};\n\nvar cbLog = function(functionName) {\n  return function(signal) {\n    console.log(functionName, ' - ', signal)\n  }\n};\n\n/**\n* Get & Save device informations from/to Session\n*/\nvar getDevices = function(type){\n  debugL(3)(\"getDevices call: \" + type)\n  var devices = Session.get(\"devices\") || { bluetooth: false }\n  return type ? devices[type] : devices\n}\n\nvar saveDevices = function(session, connected){\n  debugL(3)(\"saveDevices call: \" + session + \", \" + connected)\n  var devices = Session.get(\"devices\") || { bluetooth: false }\n  var cur = Session.get(\"devices\") || { bluetooth: false }\n  var compare = _.clone(cur)\n\n  if (!_.isObject(session)) session = {}\n  if (connected) session.bluetooth = true\n  _.extend(cur,session)\n\n  if (!_.isEqual(compare,cur)) {\n    console.log(cur)\n    Session.set(\"devices\", cur) // Cur is Extended\n  }\n}\n\n/**\n * Javascript Class for Blood Pressure\n * BG5 Device\n *\n * DESCRIPTION\n * This class uses the iHealth BG API.\n *\n *  SESSIONS\n * BG {Number, Boolean}\n * devices {Object}\n */\niHealthBG5 = function(args){\n  var defaults = {\n\t\thasStarted: false,\n    connectionAttemptDuration: 13000,\n    connectAndReadyDelay: 1800,\n    finishedMeasurementDelay: 1200,\n\n    maxBG: 250 // Highest possible BG\n\t}\n\tvar args = _.isObject(args) ? _.defaults(args, defaults) : defaults\n\t_.extend(this, args)\n\n  this.mode = \"\"\n  this.macId = null\n  this.name = null\n\n  // Fixed Args\n  this.timeout = null\n  this.state = \"disconnected\"  // attempting to getBattery during measurement will not work\n  this.battery = null  // if null, UI should grey out the battery icon\n  this.error = null // if null, there is no error\n  this.offlineNum = null // if null, there is no error\n\n  this.isPluginLoaded = false\n\n  this.checkPluginLoaded()\n  if (!this.isPluginLoaded) {\n    var self = this\n    var timerCheckPlugin = Meteor.setInterval(function(){\n      if (!self.isPluginLoaded) {\n        self.checkPluginLoaded()\n      } else {\n        Meteor.clearInterval(timerCheckPlugin)\n        debugL(3)('stop timerCheckPlugin')\n      }\n    }, 200)\n  }\n}\n\niHealthBG5.prototype = {\n  checkPluginLoaded: function() {\n    debugL(4)(\"checkPluginLoaded BG call: - \")\n    var isPluginLoaded = typeof(BgManagerCordova) !== \"undefined\"\n    debugL(4)('checkPluginLoaded BG: ' + isPluginLoaded)\n    this.isPluginLoaded = isPluginLoaded\n    // saveApp({isPluginLoaded: isPluginLoaded})\n    Session.set(\"isPluginLoaded\", isPluginLoaded)\n    return isPluginLoaded\n  },\n  isConnected: function() {\n    debugL(2)(\"isConnected call: - \")\n    return this.state !== \"disconnected\"\n  },\n  /**\n   * Connect to BG Device\n   */\n  connect: function(cbFail, cbSuccess) {\n    debugL(1)(\"connect call: \" + cbFail + \", \" + cbSuccess)\n    if (!this.isPluginLoaded) {\n      debugL(1)(\"connect abort: \" + this.isPluginLoaded)\n      return\n    }\n\n    console.log(\"Connecting...\")\n\n    // Example of possible returns\n    // {\"address\":\"5CF938BED71E\"}\n    // {\"address\":\"F4F951C259FD\"}\n    // {\"address\":\"7FEE23DD7284\"}\n    // {\"address\":\"8CDE52143F1E\",\"name\":\"BG5 143F1E\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create bluetoothsocket success\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create iostream success\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"authenticate device\"}\n\n    // Begin Connection Attempt\n    saveDevices({ BG: \"searching\" })\n\n    var self = this\n    var startDiscoverySuccessCB = function(res){\n        // ##\n        // Success Function\n        console.log(\"Success: \"+res) // DEVELOPMENT MODE\n\n        try {\n          debugL(7)(\"#### Parse Attempt\")\n          var json = JSON.parse(res)\n          if (json.address && json.name) {\n            self.name = json.name\n            debugL(7)(\"#### Parse Success\")\n            self.macId = json.address\n            self.state = \"connected\"\n            saveDevices({ BG: \"connected\" })\n\n            // iOS plugin currently doesn't have this function\n            // if (!h.getPlatform(\"ios\"))\n\n            if (!h.getPlatform(\"ios\") && _.isFunction(BgManagerCordova.connectDevice)) {\n              BgManagerCordova.connectDevice(self.macId, function (res) {\n                console.log(\"Connect Failed\", res)\n                debugL(2)(\"not ios connectDevice\", res)\n              }, function (message) {\n                console.log(\"Connect Success\", res)\n\n                // Remove the \"disconnected\" error if it was disconnected.\n                var curSession = Session.get(\"BG\")\n                if (_.isObject(curSession) && curSession.errorID===99) {\n                  delete curSession.errorID\n                  Session.set(\"BG\", curSession)\n                }\n\n                if (cbSuccess) cbSuccess()\n                debugL(2)(\"is ios connectDevice\", res)\n                if (_.isFunction(cbSuccess)) {\n                  cbSuccess()\n                }\n              })\n            } else {\n              console.log(\"Connect function was never executed. Perhaps this is an iOS device?\")\n              if (_.isFunction(cbSuccess)) {\n                cbSuccess()\n              }\n            }\n\n            Meteor.clearTimeout(self.timeout)\n            self.timeout = Meteor.setTimeout( function(){\n              // Set bg to true after 2 seconds so the \"Connected\" status message can be read by humans.\n              // @Jason, I'd prefer to keep UI related code outside BG5\n              if (self.macId!=null){\n                saveDevices({\n                  BG: {\n                    macId: self.macId,\n                    name: self.name,\n                    state: self.state\n                  }\n                })\n                self.getOfflineData();\n                self.updateInfo('getBattery', 'battery');\n                self.updateInfo('getBottleId', 'bottleid', 'botteID');\n\n                var batteryCheckInterval = 30 * 1000;\n                Meteor.clearInterval(self.batteryTimer);\n                self.batteryTimer = Meteor.setInterval(function() {\n                  self.updateInfo('getBattery', 'battery');\n                }, batteryCheckInterval);\n\n                var cancelBatteryTimer = function() {\n                  Meteor.clearInterval(self.batteryTimer);\n                }\n                self.detectDisconnect(cancelBatteryTimer)\n\n                if (_.isFunction(cbSuccess)) {\n                  cbSuccess()\n                }\n              }\n            }, self.connectAndReadyDelay)\n\n          } else\n            saveDevices({ BG: \"searching\" })\n\n          // Skipping \"Connecting\" because it causes error if user stops before the final stage.\n          // switch (json.msg) {\n          //   case \"create bluetoothsocket success\":\n          //   case \"create iostream success\":\n          //     saveDevices({ BG: \"connecting\" })\n          //     break\n          //   case \"authenticate device\":\n          //     self.macId = json.address\n          //     saveDevices({ BG: \"connected\" })\n          //\n          //     Meteor.setTimeout( function(){\n          //       // Set bg to true after 2 seconds so the \"Connected\" status message can be read by humans.\n          //       if (self.macId!=null){\n          //         self.pingDevice(true)\n          //         if (cbSuccess) cbSuccess()\n          //       }\n          //     }, 2000)\n          //     break\n          //   default:\n          //     saveDevices({ BG: \"searching\" })\n          // }\n        } catch(err) {\n          // DEVELOPMENT MODE\n          console.warn(err)\n          console.log(res)\n        }\n      };\n\n    var startDiscoveryFailCB = function(res){\n        debugL(2)(\"Fail: \"+res);\n    }\n\n    console.log(\"Start discovery\")\n    BgManagerCordova.startDiscovery( this.macId, startDiscoverySuccessCB, startDiscoveryFailCB)\n\n      // Give up after X amount of time\n      Meteor.clearTimeout(self.timeout)\n      self.timeout = Meteor.setTimeout( function(){\n        console.log(\"Connection attempt has been timed out.\")\n        self.stopConnecting()\n        if (cbFail) cbFail()\n      }, this.connectionAttemptDuration)\n  },\n\n  /**\n   * Start monitoring the blood pressure and store it into Session \"BG\"\n   */\n  start: function(){\n    debugL(1)(\"start call: - \")\n    var self = this\n    // var reconnectAttempted = false\n\n    if (!this.isPluginLoaded || this.hasStarted) {\n      debugL(1)(\"start terminated early: - \" + this.isPluginLoaded + \", \" + this.hasStarted)\n      return // Exit because BpManagerCordova is not defined\n    }\n\n    // var reconnectStart = function() {\n    //   self.connect( function(){\n    //     console.warn(\"Could not start device because device couldn't be found.\")\n    //   }, function(){\n    //     self.start()\n    //   })\n    // }\n    //\n    // if (this.isConnected()) {\n    //   reconnectStart()\n    //   return\n    // }\n\n    this.hasStarted = true // Ensure that BG monitor can only run one at a time\n    this.state = \"measuring\"\n\n    // Start from 0\n    var bg = {status: 'processing'}\n    Session.set(\"BG\", bg) // Start from 0\n\n    console.log(\"Starting device: \"+this.macId)\n\n    BgManagerCordova.startMeasure( this.macId, function(signal) {\n      debugL(2)(\"startMeasure\", signal);\n\n      var jsonSignal = processSignal(signal)\n      if(jsonSignal) {\n        _.extend(bg, jsonSignal) // sometimes bg doesn't update fast enough\n\n        // console.log(\"keys:\", _.keys(bg))\n        // console.log(\"values:\", _.values(bg))\n        debugL(3)(\"extended BG: \", bg)\n\n        if (jsonSignal.value) {\n          // bg.status = 'paused'\n          self.stop(null, true)\n\n          // Meteor.setTimeout( function(){\n          bg.status = 'finished'\n          bg.date = new Date()\n          Session.set(\"BG\", bg)\n          // },self.finishedMeasurementDelay)\n\n        } else {\n          bg.status = 'processing'\n          bg.perCent = 0.5 //jsonSignal.pressure / self.maxBG\n\n          if (!_.isNumber(bg.perCent)) {\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"NaN Error Happened\")\n            console.log(jsonSignal)\n            bg.errorID = 98\n          }\n        }\n\n        // if (res.msg==\"No Device\") {\n        //   self.stop(function(){\n        //     self.macId = null\n        //     self.start()\n        //   })\n        // }\n\n        if (_.isNumber(bg.errorID) && bg.errorID>=0) {\n          self.handleError(bg)\n          self.stop(null,true)\n        } else\n          Session.set(\"BG\", bg)\n      }\n    }, function(res){\n      console.log('start measure fail' + res)\n      // Failure Function()\n      self.stop()\n\n      // if (!reconnectAttempted) {\n      //   console.warn(\"Start Measure Error: \"+res)\n      //   reconnectAttempted = true\n      //   reconnectStart()\n      // } else {\n      //   console.warn(\"Start Measure Error in Reconnect: \"+res)\n      // }\n    })\n  },\n  handleError: function(bg) {\n\n    // Exit because if BG session is *NOT* an object, measurement was not happening.\n    // And if measurement was not happening, then there's not need to handle any errors.\n    if (!_.isObject(bg))\n      return\n\n    debugL(2)(\"Error Handler Code: \" + bg.errorID)\n\n    switch (bg.errorID) {\n      case 0:\n        bg.msg = \"Please keep your arm stable. Stay still and try again.\"\n      break\n      case 4:\n        // Low Pressure Error -- Cannot inflate.\n        bg.msg = \"Your blood pressure was too low. Please wear the blood pressure cuff properly and try again.\"\n      break\n      case 35:\n        bg.msg = \"Stop button was pressed. Please close and try again.\"\n      case 13:\n        bg.msg = \"Battery is too low. Please re-charge and try again.\"\n      break\n\n      // Following error codes are software generated -- they are not from the plugin\n      case 98:\n        // No error code received but measurement couldn't continue -- i.e. NaN pressure\n        bg.msg = \"Unknown error occured.\"\n      break\n      case 99:\n        // Code created for disconnect callback\n        bg.msg = \"Your device was disconnected from the blood pressure monitor.\"\n      break\n    }\n\n    // if (_.isNumber(bg.errorID) && !bg.msg)\n    if (bg.msg)\n      Session.set(\"BG\", bg)\n\n    BgManagerCordova.getErrorDetailWithID( bg.errorID, function(errObjStr){\n      if (!bg.msg) {\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n      }\n      var errObj = processSignal(errObjStr)\n      if (errObj.ErrorMessage) {\n        var bgErrorMsg = \"\"\n        if (errObj.ErrorMessage.match(/\\.$/)) {\n          debugL(5)(\"yes for \" + bg.errorID + \": \" + errObj.ErrorMessage)\n          bgErrorMsg = errObj.ErrorMessage\n        } else {\n          debugL(5)(\"no for \" + bg.errorID + \": \" + errObj.ErrorMessage)\n          bgErrorMsg = errObj.ErrorMessage + \".\"\n        }\n        debugL(4)(\"bgErrorMsg for \" + bg.errorID + \": \" + bgErrorMsg)\n        debugL(4)(\"bg.msg for \" + bg.errorID + \": \" + bg.msg)\n      }\n\n    }, cbLog(\"getErrorDetailWithID fail\"))\n  },\n  /**\n   * Stop monitoring the blood pressure\n   */\n  stop: function(cb,notStopMeasure) {\n    debugL(2)(\"stop call: \" + cb + \", \" + notStopMeasure)\n    if (!this.isPluginLoaded) return // Exit because BpManagerCordova is not defined\n\n    this.hasStarted = false\n    this.state = \"connected\"\n\n    if (!_.isFunction(cb)) {\n      var self = this\n      var cb = function(res){\n        console.log(res);\n        try {\n          Session.set(\"BG\", JSON.parse(res));\n        } catch(err) {\n          console.warn(err);\n        }\n      }\n    }\n\n    if (!notStopMeasure)\n      BgManagerCordova.stopMeasure(this.macId, cb, cb)\n  },\n  updateInfo: function(pluginFunction, jsonKey, sessionKey) {\n    if (!sessionKey) sessionKey = jsonKey;\n    debugL(4)(\"updateInfo \" + sessionKey + \"  call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal)\n      if(jsonSignal && jsonSignal[jsonKey]) {\n        self[sessionKey] = jsonSignal[jsonKey];\n        var curBG = getDevices(\"BG\")\n        curBG[sessionKey] = self[sessionKey];\n        saveDevices({ BG: curBG })\n      }\n    }\n    if (this.state !== \"measuring\") {\n      BgManagerCordova[pluginFunction](this.macId, cb, cbLog('get ' + sessionKey + ' fail'))\n    } else {\n      console.log(\"cannot upate \" + sessionKey + \" while measuring\")\n    };\n  },\n  detectDisconnect: function(cb) {\n    debugL(2)(\"detectDisconnect  call: \" + cb)\n    console.log('start setDisconnectCallback');\n    var self = this\n    var disconnectCB = function(signal) {\n      console.log('disconnected' + signal);\n      var jsonResult = processSignal(signal);\n\n      if (jsonResult && jsonResult.msg && jsonResult.msg === \"disconnect\") {\n        self.state = \"disconnected\"\n\n        // marker\n        saveDevices({ BG: null })\n\n        var curSession = Session.get(\"BG\")\n        if (_.isObject(curSession)) curSession.errorID = 99\n        self.handleError( curSession )\n      }\n\n      if (typeof(cb) === 'function')\n        cb()\n    }\n\n    BgManagerCordova.setDisconnectCallback(this.macId, disconnectCB, cbLog('disconnectCallbackCB fail'));\n  },\n  getOfflineData: function(){\n    debugL(1)(\"getOfflineData call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal);\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"getOfflineData\" && jsonSignal.history && jsonSignal.history.ResultList) {\n        var address = jsonSignal.address;\n        var curBG = getDevices(\"BGOfflineData\") || {}\n        curBG[address] = curBG[address] ? curBG[address] : [];\n        var resultsOnDevice = jsonSignal.history.ResultList;\n\n        var filterWith = function(arr, predicate, modifyFunction) {\n          var filteredArr = []\n          arr.forEach(function(val) {\n            if (predicate(val)) {\n              if (modifyFunction) { val = modifyFunction(val) };\n              filteredArr.push(val)\n            };\n          });\n          return filteredArr;\n        };\n\n        debugL(4)('resultsOnDevice', resultsOnDevice)\n        var newResults = filterWith(\n          resultsOnDevice,\n          function (result) {\n            // return true if result is not in curBG\n            var isNew = true;\n            var i = 0;\n            while (isNew && (i < curBG[address].length)) {\n              if (_.isEqual(_.omit(curBG[address][i], 'DownloadDate'), result)) isNew  = false;\n              i++;\n            };\n            return isNew ;\n          },\n          function(result) {\n            result.DownloadDate = (new Date()).toISOString();\n          return result;\n          }\n        );\n\n        if (_.isEmpty(newResults)) {\n          debugL(4)('no new results. currBG', curBG[address]);\n        } else {\n          debugL(3)('newResults', newResults);\n          curBG[address] = (curBG[address]).concat(newResults);\n          saveDevices({ BGOfflineData: curBG })\n        }\n      } else {\n        debugL(2)('Could not process signal: ', signal);\n      }\n    }\n\n    if (this.state !== \"measuring\") {\n      BgManagerCordova.getOfflineData(this.macId, cb, cbLog(\"getOfflineData success\"))\n    } else {\n      console.log(\"cannot getOfflineData while measuring\")\n    }\n  },\n  /**\n   * Stop connection attempt\n   */\n  stopConnecting: function(){\n    debugL(1)(\"stopConnecting call: - \")\n\n    console.log(\"Stopping Connect Attempt\")\n\n    var deviceCheck = getDevices()\n    if (!_.isObject(deviceCheck.BG) && deviceCheck.BG!=\"connected\") {\n      saveDevices({ BG: null })\n\n      if (this.isPluginLoaded)\n        var cb = function(res){ console.log(\"Stop discovery: \", res) }\n        BgManagerCordova.stopDiscovery(this.macId, cb, cb)\n    }\n  },\n  /**\n   * Disconnect and set all device info to null\n   */\n  disconnect: function(){\n    debugL(1)(\"disconnect call: - \")\n    var self = this\n    saveDevices({ BG: null })\n\n    if (this.isPluginLoaded && _.isFunction(BgManagerCordova.disConnectDevice))\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }\n      BgManagerCordova.disConnectDevice(this.macId, cb, cb)\n\n    // this.macId = null\n    // this.name = null\n    var self = this\n    saveDevices({ BG: null })\n\n    if (this.isPluginLoaded && _.isFunction(BgManagerCordova.disConnectDevice))\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }\n      BgManagerCordova.disConnectDevice(this.macId, cb, cb)\n\n    // this.macId = null\n    // this.name = null\n    // Disconnect function success/fail functions in the plugin do not work.\n    // Could be a bug, or could just be incomplete features\n    //\n    // , function(res){\n    //   console.log(res)\n    //   console.log(\"Disconnected\")\n    //\n    //   self.macId = null\n    //   self.name = null\n    // },\n    // function(e){\n    //   console.warn(e)\n    //   console.log(\"Failed to disconnect with macId \"+self.macId)\n    // }, this.mode)\n  }\n}\n"]}}]