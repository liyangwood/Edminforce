[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar DevTools = Package['ihealth:dev-tools'].DevTools;\n\n/* Package-scope variables */\nvar iHealthBP5;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ihealth_bp5/bp5.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// possible states: disconnected, connecting, connected, measuring, measurement error                               // 1\n                                                                                                                    // 2\nvar debugLevel = 2                                                                                                  // 3\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);                                                     // 4\n                                                                                                                    // 5\nvar processSignal = function(signal) {                                                                              // 6\n  debugL(3)(\"processSignal call: \" + signal)                                                                        // 7\n  try {                                                                                                             // 8\n   var json_signal = JSON.parse(signal);                                                                            // 9\n   return json_signal;                                                                                              // 10\n  } catch(err) {                                                                                                    // 11\n   console.warn('processSignal' + err);                                                                             // 12\n  }                                                                                                                 // 13\n}                                                                                                                   // 14\n                                                                                                                    // 15\nvar cbLog = function(functionName) {                                                                                // 16\n  return function(signal) {                                                                                         // 17\n    console.log(functionName, ' - ', signal)                                                                        // 18\n  }                                                                                                                 // 19\n};                                                                                                                  // 20\n                                                                                                                    // 21\n/**                                                                                                                 // 22\n* Get & Save device informations from/to Session                                                                    // 23\n*/                                                                                                                  // 24\nvar getDevices = function(type){                                                                                    // 25\n  debugL(3)(\"getDevices call: \" + type)                                                                             // 26\n  var devices = Session.get(\"devices\") || { bluetooth: false }                                                      // 27\n  return type ? devices[type] : devices                                                                             // 28\n}                                                                                                                   // 29\nvar saveDevices = function(session, connected){                                                                     // 30\n  debugL(3)(\"saveDevices call: \" + session + \", \" + connected)                                                      // 31\n  var devices = Session.get(\"devices\") || { bluetooth: false }                                                      // 32\n  var cur = Session.get(\"devices\") || { bluetooth: false }                                                          // 33\n  var compare = _.clone(cur)                                                                                        // 34\n                                                                                                                    // 35\n  if (!_.isObject(session)) session = {}                                                                            // 36\n  if (connected) session.bluetooth = true                                                                           // 37\n  _.extend(cur,session)                                                                                             // 38\n                                                                                                                    // 39\n  if (!_.isEqual(compare,cur)) {                                                                                    // 40\n    console.log(cur)                                                                                                // 41\n    Session.set(\"devices\", cur) // Cur is Extended                                                                  // 42\n  }                                                                                                                 // 43\n}                                                                                                                   // 44\n//                                                                                                                  // 45\n// var saveApp = function(newinfo) {                                                                                // 46\n//   var sessionLabel = \"app\"                                                                                       // 47\n//   var appSession = Session.get(sessionLabel) || {}                                                               // 48\n//   var deepExtend = true                                                                                          // 49\n//   jQuery.extend(deepExtend, appSession , newinfo)                                                                // 50\n//   Session.set(sessionLabel,  appSession)                                                                         // 51\n// }                                                                                                                // 52\n                                                                                                                    // 53\n/**                                                                                                                 // 54\n * Javascript Class for Blood Pressure                                                                              // 55\n * BP5 Device                                                                                                       // 56\n *                                                                                                                  // 57\n * DESCRIPTION                                                                                                      // 58\n * This class uses the iHealth BP API.                                                                              // 59\n *                                                                                                                  // 60\n *  SESSIONS                                                                                                        // 61\n * BP {Number, Boolean}                                                                                             // 62\n * devices {Object}                                                                                                 // 63\n */                                                                                                                 // 64\niHealthBP5 = function(args){                                                                                        // 65\n  var defaults = {                                                                                                  // 66\n\t\thasStarted: false,                                                                                                // 67\n\t\tisTestMode: false,                                                                                                // 68\n    connectionAttemptDuration: 13000,                                                                               // 69\n    connectAndReadyDelay: 1800,                                                                                     // 70\n    finishedMeasurementDelay: 1200,                                                                                 // 71\n                                                                                                                    // 72\n    maxBP: 250 // Highest possible BP                                                                               // 73\n\t}                                                                                                                  // 74\n\tvar args = _.isObject(args) ? _.defaults(args, defaults) : defaults                                                // 75\n\t_.extend(this, args)                                                                                               // 76\n                                                                                                                    // 77\n  if (this.isTestMode) {                                                                                            // 78\n    this.mode = \"test\"                                                                                              // 79\n    this.macId = \"8CDE52143F1E\"                                                                                     // 80\n    this.name = \"BP5 143F1E\"                                                                                        // 81\n  } else {                                                                                                          // 82\n    this.mode = \"\"                                                                                                  // 83\n    this.macId = null                                                                                               // 84\n    this.name = null                                                                                                // 85\n  }                                                                                                                 // 86\n                                                                                                                    // 87\n  // Fixed Args                                                                                                     // 88\n  this.timeout = null                                                                                               // 89\n  this.state = \"disconnected\"  // attempting to getBattery during measurement will not work                         // 90\n  this.battery = null  // if null, UI should grey out the battery icon                                              // 91\n  this.error = null // if null, there is no error                                                                   // 92\n  this.offlineNum = null // if null, there is no error                                                              // 93\n                                                                                                                    // 94\n  this.isPluginLoaded = false                                                                                       // 95\n                                                                                                                    // 96\n  this.checkPluginLoaded()                                                                                          // 97\n  if (!this.isPluginLoaded) {                                                                                       // 98\n    var self = this                                                                                                 // 99\n    var timerCheckPlugin = Meteor.setInterval(function(){                                                           // 100\n      if (!self.isPluginLoaded) {                                                                                   // 101\n        self.checkPluginLoaded()                                                                                    // 102\n      } else {                                                                                                      // 103\n        Meteor.clearInterval(timerCheckPlugin)                                                                      // 104\n        console.log('stop timerCheckPlugin')                                                                        // 105\n      }                                                                                                             // 106\n    }, 200)                                                                                                         // 107\n  }                                                                                                                 // 108\n}                                                                                                                   // 109\n                                                                                                                    // 110\niHealthBP5.prototype = {                                                                                            // 111\n  checkPluginLoaded: function() {                                                                                   // 112\n    debugL(2)(\"checkPluginLoaded BP call: - \")                                                                      // 113\n    var isPluginLoaded = typeof(BpManagerCordova) !== \"undefined\"                                                   // 114\n    console.log('checkPluginLoaded BP: ' + isPluginLoaded)                                                          // 115\n    this.isPluginLoaded = isPluginLoaded                                                                            // 116\n    // saveApp({isPluginLoaded: isPluginLoaded})                                                                    // 117\n    Session.set(\"isPluginLoaded\", isPluginLoaded)                                                                   // 118\n    return isPluginLoaded                                                                                           // 119\n  },                                                                                                                // 120\n  isConnected: function() {                                                                                         // 121\n    debugL(2)(\"isConnected call: - \")                                                                               // 122\n    return this.state !== \"disconnected\"                                                                            // 123\n  },                                                                                                                // 124\n  /**                                                                                                               // 125\n   * Connect to BP Device                                                                                           // 126\n   */                                                                                                               // 127\n  connect: function(cbFail, cbSuccess) {                                                                            // 128\n    debugL(1)(\"connect call: \" + cbFail + \", \" + cbSuccess)                                                         // 129\n    if (!this.isPluginLoaded) {                                                                                     // 130\n      debugL(1)(\"connect abort: \" + this.isPluginLoaded)                                                            // 131\n      return                                                                                                        // 132\n    }                                                                                                               // 133\n                                                                                                                    // 134\n    console.log(\"Connecting...\")                                                                                    // 135\n                                                                                                                    // 136\n    // Example of possible returns                                                                                  // 137\n    // {\"address\":\"5CF938BED71E\"}                                                                                   // 138\n    // {\"address\":\"F4F951C259FD\"}                                                                                   // 139\n    // {\"address\":\"7FEE23DD7284\"}                                                                                   // 140\n    // {\"address\":\"8CDE52143F1E\",\"name\":\"BP5 143F1E\"}                                                               // 141\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create bluetoothsocket success\"}                                            // 142\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create iostream success\"}                                                   // 143\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"authenticate device\"}                                                       // 144\n                                                                                                                    // 145\n    // Begin Connection Attempt                                                                                     // 146\n    saveDevices({ BP: \"searching\" })                                                                                // 147\n                                                                                                                    // 148\n    var self = this                                                                                                 // 149\n    var startDiscoverySuccessCB = function(res){                                                                    // 150\n        // ##                                                                                                       // 151\n        // Success Function                                                                                         // 152\n        console.log(\"Success: \"+res) // DEVELOPMENT MODE                                                            // 153\n                                                                                                                    // 154\n        try {                                                                                                       // 155\n          debugL(7)(\"#### Parse Attempt\")                                                                           // 156\n          var json = JSON.parse(res)                                                                                // 157\n          if (json.address && json.name) {                                                                          // 158\n            self.name = json.name                                                                                   // 159\n            debugL(7)(\"#### Parse Success\")                                                                         // 160\n            self.macId = json.address                                                                               // 161\n            self.state = \"connected\"                                                                                // 162\n            saveDevices({ BP: \"connected\" })                                                                        // 163\n                                                                                                                    // 164\n            // iOS plugin currently doesn't have this function                                                      // 165\n            // if (!h.getPlatform(\"ios\"))                                                                           // 166\n                                                                                                                    // 167\n            if (!h.getPlatform(\"ios\") && _.isFunction(BpManagerCordova.connectDevice)) {                            // 168\n              BpManagerCordova.connectDevice(self.macId, function (res) {                                           // 169\n                console.log(\"Connect Failed\", res)                                                                  // 170\n                debugL(2)(\"not ios connectDevice\", res)                                                             // 171\n              }, function (message) {                                                                               // 172\n                console.log(\"Connect Success\", res)                                                                 // 173\n                                                                                                                    // 174\n                // Remove the \"disconnected\" error if it was disconnected.                                          // 175\n                var curSession = Session.get(\"BP\")                                                                  // 176\n                if (_.isObject(curSession) && curSession.errorID===99) {                                            // 177\n                  delete curSession.errorID                                                                         // 178\n                  Session.set(\"BP\", curSession)                                                                     // 179\n                }                                                                                                   // 180\n                                                                                                                    // 181\n                if (cbSuccess) cbSuccess()                                                                          // 182\n                debugL(2)(\"is ios connectDevice\", res)                                                              // 183\n                if (_.isFunction(cbSuccess)) {                                                                      // 184\n                  cbSuccess()                                                                                       // 185\n                }                                                                                                   // 186\n              })                                                                                                    // 187\n            } else {                                                                                                // 188\n              console.log(\"Connect function was never executed. Perhaps this is an iOS device?\")                    // 189\n              if (_.isFunction(cbSuccess)) {                                                                        // 190\n                cbSuccess()                                                                                         // 191\n              }                                                                                                     // 192\n            }                                                                                                       // 193\n                                                                                                                    // 194\n            Meteor.clearTimeout(self.timeout)                                                                       // 195\n            self.timeout = Meteor.setTimeout( function(){                                                           // 196\n              // Set bp to true after 2 seconds so the \"Connected\" status message can be read by humans.            // 197\n              // @Jason, I'd prefer to keep UI related code outside BP5                                             // 198\n              if (self.macId!=null){                                                                                // 199\n                saveDevices({                                                                                       // 200\n                  BP: {                                                                                             // 201\n                    macId: self.macId,                                                                              // 202\n                    name: self.name,                                                                                // 203\n                    state: self.state                                                                               // 204\n                  }                                                                                                 // 205\n                })                                                                                                  // 206\n                self.getOfflineNum()                                                                                // 207\n                self.checkOfflineMode()                                                                             // 208\n                self.updateBattery()                                                                                // 209\n                                                                                                                    // 210\n                var batteryCheckInterval = 30 * 1000;                                                               // 211\n                Meteor.clearInterval(self.batteryTimer);                                                            // 212\n                self.batteryTimer = Meteor.setInterval(function() {                                                 // 213\n                  self.updateBattery()                                                                              // 214\n                }, batteryCheckInterval);                                                                           // 215\n                                                                                                                    // 216\n                var cancelBatteryTimer = function() {                                                               // 217\n                  Meteor.clearInterval(self.batteryTimer);                                                          // 218\n                }                                                                                                   // 219\n                self.detectDisconnect(cancelBatteryTimer)                                                           // 220\n                                                                                                                    // 221\n                                                                                                                    // 222\n                if (_.isFunction(cbSuccess)) {                                                                      // 223\n                  cbSuccess()                                                                                       // 224\n                }                                                                                                   // 225\n              }                                                                                                     // 226\n            }, self.connectAndReadyDelay)                                                                           // 227\n                                                                                                                    // 228\n          } else                                                                                                    // 229\n            saveDevices({ BP: \"searching\" })                                                                        // 230\n                                                                                                                    // 231\n          // Skipping \"Connecting\" because it causes error if user stops before the final stage.                    // 232\n          // switch (json.msg) {                                                                                    // 233\n          //   case \"create bluetoothsocket success\":                                                               // 234\n          //   case \"create iostream success\":                                                                      // 235\n          //     saveDevices({ BP: \"connecting\" })                                                                  // 236\n          //     break                                                                                              // 237\n          //   case \"authenticate device\":                                                                          // 238\n          //     self.macId = json.address                                                                          // 239\n          //     saveDevices({ BP: \"connected\" })                                                                   // 240\n          //                                                                                                        // 241\n          //     Meteor.setTimeout( function(){                                                                     // 242\n          //       // Set bp to true after 2 seconds so the \"Connected\" status message can be read by humans.       // 243\n          //       if (self.macId!=null){                                                                           // 244\n          //         self.pingDevice(true)                                                                          // 245\n          //         if (cbSuccess) cbSuccess()                                                                     // 246\n          //       }                                                                                                // 247\n          //     }, 2000)                                                                                           // 248\n          //     break                                                                                              // 249\n          //   default:                                                                                             // 250\n          //     saveDevices({ BP: \"searching\" })                                                                   // 251\n          // }                                                                                                      // 252\n        } catch(err) {                                                                                              // 253\n          // DEVELOPMENT MODE                                                                                       // 254\n          console.warn(err)                                                                                         // 255\n          console.log(res)                                                                                          // 256\n        }                                                                                                           // 257\n      };                                                                                                            // 258\n                                                                                                                    // 259\n    var startDiscoveryFailCB = function(res){                                                                       // 260\n        // ##                                                                                                       // 261\n        // Failure Function                                                                                         // 262\n        console.log(\"Fail: \"+res) // DEVELOPMENT MODE                                                               // 263\n                                                                                                                    // 264\n        // Commenting these two lines because I want the instance to remember the originally connected macId & name\n        // self.macId = null                                                                                        // 266\n        // self.name = null                                                                                         // 267\n      }                                                                                                             // 268\n                                                                                                                    // 269\n    console.log(\"Start discovery\")                                                                                  // 270\n    BpManagerCordova.startDiscovery( this.macId, startDiscoverySuccessCB, startDiscoveryFailCB)                     // 271\n                                                                                                                    // 272\n      // Give up after X amount of time                                                                             // 273\n      Meteor.clearTimeout(self.timeout)                                                                             // 274\n      self.timeout = Meteor.setTimeout( function(){                                                                 // 275\n        console.log(\"Connection attempt has been timed out.\")                                                       // 276\n        self.stopConnecting()                                                                                       // 277\n        if (cbFail) cbFail()                                                                                        // 278\n      }, this.connectionAttemptDuration)                                                                            // 279\n  },                                                                                                                // 280\n                                                                                                                    // 281\n  /**                                                                                                               // 282\n   * Start monitoring the blood pressure and store it into Session \"BP\"                                             // 283\n   */                                                                                                               // 284\n  start: function(finishCallback){                                                                                  // 285\n    debugL(1)(\"start call: - \")                                                                                     // 286\n    var self = this                                                                                                 // 287\n    // var reconnectAttempted = false                                                                               // 288\n                                                                                                                    // 289\n    if (!this.isPluginLoaded || this.hasStarted) {                                                                  // 290\n      debugL(1)(\"start terminated early: - \" + this.isPluginLoaded + \", \" + this.hasStarted)                        // 291\n      return // Exit because BpManagerCordova is not defined                                                        // 292\n    }                                                                                                               // 293\n                                                                                                                    // 294\n    // var reconnectStart = function() {                                                                            // 295\n    //   self.connect( function(){                                                                                  // 296\n    //     console.warn(\"Could not start device because device couldn't be found.\")                                 // 297\n    //   }, function(){                                                                                             // 298\n    //     self.start()                                                                                             // 299\n    //   })                                                                                                         // 300\n    // }                                                                                                            // 301\n    //                                                                                                              // 302\n    // if (this.isConnected()) {                                                                                    // 303\n    //   reconnectStart()                                                                                           // 304\n    //   return                                                                                                     // 305\n    // }                                                                                                            // 306\n                                                                                                                    // 307\n    this.hasStarted = true // Ensure that BP monitor can only run one at a time                                     // 308\n    this.state = \"measuring\"                                                                                        // 309\n                                                                                                                    // 310\n    // Start from 0                                                                                                 // 311\n    var bp = {pressure: 0, status: 'processing'}                                                                    // 312\n    Session.set(\"BP\", bp) // Start from 0                                                                           // 313\n                                                                                                                    // 314\n    console.log(\"Starting device: \"+this.macId)                                                                     // 315\n                                                                                                                    // 316\n    BpManagerCordova.startMeasure( this.macId, function(res){                                                       // 317\n      /**                                                                                                           // 318\n       * Success Function()                                                                                         // 319\n       * Do the JSON.parse inside the try-catch block                                                               // 320\n       * \"res\" var is not always a JSON String.                                                                     // 321\n       */                                                                                                           // 322\n      debugL(2)(\"startMeasure\", res);                                                                               // 323\n                                                                                                                    // 324\n      try {                                                                                                         // 325\n        var json = JSON.parse(res)                                                                                  // 326\n        // console.log ('json: ', json)                                                                             // 327\n                                                                                                                    // 328\n        _.extend(bp, json) // sometimes bp doesn't update fast enough                                               // 329\n                                                                                                                    // 330\n        // console.log(\"keys:\", _.keys(bp))                                                                         // 331\n        // console.log(\"values:\", _.values(bp))                                                                     // 332\n        debugL(3)(\"extended BP: \", bp)                                                                              // 333\n                                                                                                                    // 334\n        if (json.highpressure && json.lowpressure) {                                                                // 335\n          // bp.status = 'paused'                                                                                   // 336\n          self.stop(null, true)                                                                                     // 337\n                                                                                                                    // 338\n          // Meteor.setTimeout( function(){                                                                         // 339\n            bp.status = 'finished'                                                                                  // 340\n            bp.date = new Date()                                                                                    // 341\n                                                                                                                    // 342\n            if (_.isFunction(finishCallback))                                                                       // 343\n              finishCallback(res)                                                                                   // 344\n                                                                                                                    // 345\n            Session.set(\"BP\", bp)                                                                                   // 346\n          // },self.finishedMeasurementDelay)                                                                       // 347\n                                                                                                                    // 348\n        } else {                                                                                                    // 349\n          bp.status = 'processing'                                                                                  // 350\n          bp.perCent = json.pressure / self.maxBP                                                                   // 351\n                                                                                                                    // 352\n          if (!_.isNumber(bp.perCent)) {                                                                            // 353\n            console.log(\"########\")                                                                                 // 354\n            console.log(\"########\")                                                                                 // 355\n            console.log(\"########\")                                                                                 // 356\n            console.log(\"########\")                                                                                 // 357\n            console.log(\"########\")                                                                                 // 358\n            console.log(\"########\")                                                                                 // 359\n            console.log(\"########\")                                                                                 // 360\n            console.log(\"########\")                                                                                 // 361\n            console.log(\"NaN Error Happened\")                                                                       // 362\n            console.log(json)                                                                                       // 363\n            bp.errorID = 98                                                                                         // 364\n          }                                                                                                         // 365\n        }                                                                                                           // 366\n                                                                                                                    // 367\n        // if (res.msg==\"No Device\") {                                                                              // 368\n        //   self.stop(function(){                                                                                  // 369\n        //     self.macId = null                                                                                    // 370\n        //     self.start()                                                                                         // 371\n        //   })                                                                                                     // 372\n        // }                                                                                                        // 373\n                                                                                                                    // 374\n        if (_.isNumber(bp.errorID) && bp.errorID>=0) {                                                              // 375\n          self.handleError(bp)                                                                                      // 376\n          self.stop(null,true)                                                                                      // 377\n        } else                                                                                                      // 378\n          Session.set(\"BP\", bp)                                                                                     // 379\n                                                                                                                    // 380\n      } catch(err) {                                                                                                // 381\n        // DEVELOPMENT MODE                                                                                         // 382\n        console.log(\"JSON Try/Catch Error\")                                                                         // 383\n        console.warn(err)                                                                                           // 384\n        console.log(res)                                                                                            // 385\n                                                                                                                    // 386\n        // if (res.errorID) {                                                                                       // 387\n        //   // Session.set(\"BP\", bp)                                                                               // 388\n        //   self.handleError(res.errorID)                                                                          // 389\n        //   self.stop()                                                                                            // 390\n        // }                                                                                                        // 391\n      }                                                                                                             // 392\n    }, function(res){                                                                                               // 393\n      console.log('start measure fail' + res)                                                                       // 394\n      // Failure Function()                                                                                         // 395\n      self.stop()                                                                                                   // 396\n                                                                                                                    // 397\n      // if (!reconnectAttempted) {                                                                                 // 398\n      //   console.warn(\"Start Measure Error: \"+res)                                                                // 399\n      //   reconnectAttempted = true                                                                                // 400\n      //   reconnectStart()                                                                                         // 401\n      // } else {                                                                                                   // 402\n      //   console.warn(\"Start Measure Error in Reconnect: \"+res)                                                   // 403\n      // }                                                                                                          // 404\n    })                                                                                                              // 405\n  },                                                                                                                // 406\n  handleError: function(bp) {                                                                                       // 407\n                                                                                                                    // 408\n    // Exit because if BP session is *NOT* an object, measurement was not happening.                                // 409\n    // And if measurement was not happening, then there's not need to handle any errors.                            // 410\n    if (!_.isObject(bp))                                                                                            // 411\n      return                                                                                                        // 412\n                                                                                                                    // 413\n    debugL(2)(\"Error Handler Code: \" + bp.errorID)                                                                  // 414\n                                                                                                                    // 415\n    switch (bp.errorID) {                                                                                           // 416\n      case 0:                                                                                                       // 417\n        bp.msg = \"Please keep your arm stable. Stay still and try again.\"                                           // 418\n      break                                                                                                         // 419\n      case 4:                                                                                                       // 420\n        // Low Pressure Error -- Cannot inflate.                                                                    // 421\n        bp.msg = \"Your blood pressure was too low. Please wear the blood pressure cuff properly and try again.\"     // 422\n      break                                                                                                         // 423\n      case 35:                                                                                                      // 424\n        bp.msg = \"Stop button was pressed. Please close and try again.\"                                             // 425\n      case 13:                                                                                                      // 426\n        bp.msg = \"Battery is too low. Please re-charge and try again.\"                                              // 427\n      break                                                                                                         // 428\n                                                                                                                    // 429\n      // Following error codes are software generated -- they are not from the plugin                               // 430\n      case 98:                                                                                                      // 431\n        // No error code received but measurement couldn't continue -- i.e. NaN pressure                            // 432\n        bp.msg = \"Unknown error occured.\"                                                                           // 433\n      break                                                                                                         // 434\n      case 99:                                                                                                      // 435\n        // Code created for disconnect callback                                                                     // 436\n        bp.msg = \"Your device was disconnected from the blood pressure monitor.\"                                    // 437\n      break                                                                                                         // 438\n    }                                                                                                               // 439\n                                                                                                                    // 440\n    // if (_.isNumber(bp.errorID) && !bp.msg)                                                                       // 441\n    if (bp.msg)                                                                                                     // 442\n      Session.set(\"BP\", bp)                                                                                         // 443\n                                                                                                                    // 444\n    BpManagerCordova.getErrorDetailWithID( bp.errorID, function(errObjStr){                                         // 445\n      if (!bp.msg) {                                                                                                // 446\n        console.log(\"##########\")                                                                                   // 447\n        console.log(\"##########\")                                                                                   // 448\n        console.log(\"##########\")                                                                                   // 449\n        console.log(\"##########\")                                                                                   // 450\n        console.log(\"##########\")                                                                                   // 451\n        console.log(\"##########\")                                                                                   // 452\n      }                                                                                                             // 453\n      var errObj = processSignal(errObjStr)                                                                         // 454\n      if (errObj.ErrorMessage) {                                                                                    // 455\n        var bpErrorMsg = \"\"                                                                                         // 456\n        if (errObj.ErrorMessage.match(/\\.$/)) {                                                                     // 457\n          debugL(5)(\"yes for \" + bp.errorID + \": \" + errObj.ErrorMessage)                                           // 458\n          bpErrorMsg = errObj.ErrorMessage                                                                          // 459\n        } else {                                                                                                    // 460\n          debugL(5)(\"no for \" + bp.errorID + \": \" + errObj.ErrorMessage)                                            // 461\n          bpErrorMsg = errObj.ErrorMessage + \".\"                                                                    // 462\n        }                                                                                                           // 463\n        debugL(4)(\"bpErrorMsg for \" + bp.errorID + \": \" + bpErrorMsg)                                               // 464\n        debugL(4)(\"bp.msg for \" + bp.errorID + \": \" + bp.msg)                                                       // 465\n      }                                                                                                             // 466\n                                                                                                                    // 467\n    }, cbLog(\"getErrorDetailWithID fail\"))                                                                          // 468\n  },                                                                                                                // 469\n  /**                                                                                                               // 470\n   * Stop monitoring the blood pressure                                                                             // 471\n   */                                                                                                               // 472\n  stop: function(cb,notStopMeasure) {                                                                               // 473\n    debugL(2)(\"stop call: \" + cb + \", \" + notStopMeasure)                                                           // 474\n    if (!this.isPluginLoaded) return // Exit because BpManagerCordova is not defined                                // 475\n                                                                                                                    // 476\n    this.hasStarted = false                                                                                         // 477\n    this.state = \"connected\"                                                                                        // 478\n                                                                                                                    // 479\n    if (!_.isFunction(cb)) {                                                                                        // 480\n      var self = this                                                                                               // 481\n      var cb = function(res){                                                                                       // 482\n        console.log(res);                                                                                           // 483\n        try {                                                                                                       // 484\n          Session.set(\"BP\", JSON.parse(res));                                                                       // 485\n        } catch(err) {                                                                                              // 486\n          console.warn(err);                                                                                        // 487\n        }                                                                                                           // 488\n      }                                                                                                             // 489\n    }                                                                                                               // 490\n                                                                                                                    // 491\n    if (!notStopMeasure)                                                                                            // 492\n      BpManagerCordova.stopMeasure(this.macId, cb, cb)                                                              // 493\n  },                                                                                                                // 494\n  /**                                                                                                               // 495\n   * Return uniformized BP                                                                                          // 496\n   */                                                                                                               // 497\n  uniformizeBP: function(setZero){                                                                                  // 498\n    debugL(1)(\"uniformizeBP call: \" + setZero )                                                                     // 499\n    console.log(\"stopMeasure call\")                                                                                 // 500\n    var bp = Session.get(\"BP\") || {}                                                                                // 501\n    if (setZero && !bp.pressure) {                                                                                  // 502\n      bp.pressure = 0                                                                                               // 503\n      bp.perCent = 0                                                                                                // 504\n    }                                                                                                               // 505\n    bp.statusClass = bp.status || 'start'                                                                           // 506\n    return bp                                                                                                       // 507\n  },                                                                                                                // 508\n  updateBattery: function() {                                                                                       // 509\n    debugL(4)(\"updateBattery  call: - \")                                                                            // 510\n    var self = this                                                                                                 // 511\n    var cb = function(signal) {                                                                                     // 512\n      var jsonSignal = processSignal(signal)                                                                        // 513\n      if(jsonSignal && jsonSignal.battery) {                                                                        // 514\n        self.battery = Math.abs(jsonSignal.battery - self.battery)===1                                              // 515\n          ? Math.min(self.battery, jsonSignal.battery)                                                              // 516\n          : jsonSignal.battery                                                                                      // 517\n                                                                                                                    // 518\n        var curBP = getDevices(\"BP\")                                                                                // 519\n        curBP.battery = self.battery                                                                                // 520\n        saveDevices({ BP: curBP })                                                                                  // 521\n      }                                                                                                             // 522\n    }                                                                                                               // 523\n    if (this.state !== \"measuring\") {                                                                               // 524\n      BpManagerCordova.getBattery(this.macId, cb, cbLog('getBattery fail'))                                         // 525\n    } else {                                                                                                        // 526\n      console.log(\"cannot updateBattery while measuring\")                                                           // 527\n    }                                                                                                               // 528\n    // currently fails silently, since updateBattery is usually on setInterval                                      // 529\n    // should we return an error so that getBattery can be rescheduled? else { setTimeout getBattery}               // 530\n  },                                                                                                                // 531\n  detectDisconnect: function(cb) {                                                                                  // 532\n    debugL(2)(\"detectDisconnect  call: \" + cb)                                                                      // 533\n    console.log('start setDisconnectCallback');                                                                     // 534\n    var self = this                                                                                                 // 535\n    var disconnectCB = function(signal) {                                                                           // 536\n      console.log('disconnected' + signal);                                                                         // 537\n      var jsonResult = processSignal(signal);                                                                       // 538\n                                                                                                                    // 539\n      if (jsonResult && jsonResult.msg && jsonResult.msg === \"disconnect\") {                                        // 540\n        self.state = \"disconnected\"                                                                                 // 541\n                                                                                                                    // 542\n        // marker                                                                                                   // 543\n        saveDevices({ BP: null })                                                                                   // 544\n                                                                                                                    // 545\n        var curSession = Session.get(\"BP\")                                                                          // 546\n        if (_.isObject(curSession)) curSession.errorID = 99                                                         // 547\n        self.handleError( curSession )                                                                              // 548\n      }                                                                                                             // 549\n                                                                                                                    // 550\n      if (typeof(cb) === 'function')                                                                                // 551\n        cb()                                                                                                        // 552\n    }                                                                                                               // 553\n                                                                                                                    // 554\n    BpManagerCordova.setDisconnectCallback(this.macId, disconnectCB, cbLog('disconnectCallbackCB fail'));           // 555\n  },                                                                                                                // 556\n  enableOffline: function(){                                                                                        // 557\n    debugL(1)(\"enableOffline call: - \")                                                                             // 558\n    if (this.state !== \"measuring\") {                                                                               // 559\n      BpManagerCordova.enableOffline(this.macId, cbLog(\"enableOffline success\"), cbLog(\"enableOffline fail\"))       // 560\n      this.checkOfflineMode()                                                                                       // 561\n    } else {                                                                                                        // 562\n      console.log(\"cannot enableOffline while measuring\")                                                           // 563\n    }                                                                                                               // 564\n  },                                                                                                                // 565\n  disableOffline: function(){                                                                                       // 566\n    debugL(1)(\"disableOffline call: - \")                                                                            // 567\n    if (this.state !== \"measuring\") {                                                                               // 568\n      BpManagerCordova.disenableOffline(this.macId, cbLog(\"disableOffline success\"), cbLog(\"disableOffline fail\"))  // 569\n      this.checkOfflineMode() // confirm command was successful, and update Session \"devices\"                       // 570\n    } else {                                                                                                        // 571\n      console.log(\"cannot disableOffline while measuring\")                                                          // 572\n    }                                                                                                               // 573\n  },                                                                                                                // 574\n  checkOfflineMode: function(){                                                                                     // 575\n    debugL(1)(\"checkOfflineMode call: - \")                                                                          // 576\n    var self = this                                                                                                 // 577\n    var cb = function(signal) {                                                                                     // 578\n      var jsonSignal = processSignal(signal)                                                                        // 579\n      if (jsonSignal && jsonSignal.isEnableOffline) {                                                               // 580\n        self.isEnableOffline = jsonSignal.isEnableOffline                                                           // 581\n                                                                                                                    // 582\n        var curBP = getDevices(\"BP\")                                                                                // 583\n        curBP.isEnableOffline = self.isEnableOffline                                                                // 584\n        saveDevices({ BP: curBP })                                                                                  // 585\n      }                                                                                                             // 586\n    }                                                                                                               // 587\n    if (this.state !== \"measuring\") {                                                                               // 588\n      BpManagerCordova.isEnableOffline(this.macId, cb, cbLog(\"isEnableOffline fail\"))                               // 589\n    } else {                                                                                                        // 590\n      console.log(\"cannot checkOfflineMode while measuring\")                                                        // 591\n    }                                                                                                               // 592\n  },                                                                                                                // 593\n  getOfflineNum: function(){                                                                                        // 594\n    debugL(1)(\"getOfflineNum call: - \")                                                                             // 595\n    var self = this                                                                                                 // 596\n    var cb = function(signal) {                                                                                     // 597\n      var jsonSignal = processSignal(signal)                                                                        // 598\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"offlineNum\") {                                        // 599\n        self.offlineNum = jsonSignal.value;                                                                         // 600\n                                                                                                                    // 601\n        var curBP = getDevices(\"BP\")                                                                                // 602\n        curBP.offlineNum = self.offlineNum                                                                          // 603\n        saveDevices({ BP: curBP })                                                                                  // 604\n      }                                                                                                             // 605\n    }                                                                                                               // 606\n    if (this.state !== \"measuring\") {                                                                               // 607\n      BpManagerCordova.getOfflineNum(this.macId, cb, cbLog(\"getOfflineNum success\"))                                // 608\n    } else {                                                                                                        // 609\n      console.log(\"cannot getOfflineNum while measuring\")                                                           // 610\n    }                                                                                                               // 611\n  },                                                                                                                // 612\n  getOfflineData: function(){                                                                                       // 613\n    debugL(1)(\"getOfflineData call: - \")                                                                            // 614\n    var self = this                                                                                                 // 615\n    var cb = function(signal) {                                                                                     // 616\n      var jsonSignal = processSignal(signal)                                                                        // 617\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"offlineData\") {                                       // 618\n        var curBP = getDevices(\"BPOfflineData\")                                                                     // 619\n        curBP.offlineData = curBP.offlineData ? curBP.offlineData : []                                              // 620\n        curBP.offlineData.concat(jsonSignal.value)                                                                  // 621\n        saveDevices({ BPOfflineData: curBP })                                                                       // 622\n      }                                                                                                             // 623\n    }                                                                                                               // 624\n                                                                                                                    // 625\n    if (this.state !== \"measuring\") {                                                                               // 626\n      BpManagerCordova.getOfflineData(this.macId, cbLog(\"getOfflineData success\"), cbLog(\"getOfflineData success\"))\n    } else {                                                                                                        // 628\n      console.log(\"cannot getOfflineData while measuring\")                                                          // 629\n    }                                                                                                               // 630\n                                                                                                                    // 631\n  },                                                                                                                // 632\n  /**                                                                                                               // 633\n   * Stop connection attempt                                                                                        // 634\n   */                                                                                                               // 635\n  stopConnecting: function(){                                                                                       // 636\n    debugL(1)(\"stopConnecting call: - \")                                                                            // 637\n                                                                                                                    // 638\n    console.log(\"Stopping Connect Attempt\")                                                                         // 639\n                                                                                                                    // 640\n    var deviceCheck = getDevices()                                                                                  // 641\n    if (!_.isObject(deviceCheck.BP) && deviceCheck.BP!=\"connected\") {                                               // 642\n      saveDevices({ BP: null })                                                                                     // 643\n                                                                                                                    // 644\n      if (this.isPluginLoaded)                                                                                      // 645\n        var cb = function(res){ console.log(\"Stop discovery: \", res) }                                              // 646\n        BpManagerCordova.stopDiscovery(this.macId, cb, cb)                                                          // 647\n    }                                                                                                               // 648\n  },                                                                                                                // 649\n  /**                                                                                                               // 650\n   * Disconnect and set all device info to null                                                                     // 651\n   */                                                                                                               // 652\n  disconnect: function(){                                                                                           // 653\n    debugL(1)(\"disconnect call: - \")                                                                                // 654\n    var self = this                                                                                                 // 655\n    saveDevices({ BP: null })                                                                                       // 656\n                                                                                                                    // 657\n    if (this.isPluginLoaded && _.isFunction(BpManagerCordova.disConnectDevice))                                     // 658\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }                                             // 659\n      BpManagerCordova.disConnectDevice(this.macId, cb, cb)                                                         // 660\n                                                                                                                    // 661\n    // this.macId = null                                                                                            // 662\n    // this.name = null                                                                                             // 663\n    var self = this                                                                                                 // 664\n    saveDevices({ BP: null })                                                                                       // 665\n                                                                                                                    // 666\n    if (this.isPluginLoaded && _.isFunction(BpManagerCordova.disConnectDevice))                                     // 667\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }                                             // 668\n      BpManagerCordova.disConnectDevice(this.macId, cb, cb)                                                         // 669\n                                                                                                                    // 670\n    // this.macId = null                                                                                            // 671\n    // this.name = null                                                                                             // 672\n    // Disconnect function success/fail functions in the plugin do not work.                                        // 673\n    // Could be a bug, or could just be incomplete features                                                         // 674\n    //                                                                                                              // 675\n    // , function(res){                                                                                             // 676\n    //   console.log(res)                                                                                           // 677\n    //   console.log(\"Disconnected\")                                                                                // 678\n    //                                                                                                              // 679\n    //   self.macId = null                                                                                          // 680\n    //   self.name = null                                                                                           // 681\n    // },                                                                                                           // 682\n    // function(e){                                                                                                 // 683\n    //   console.warn(e)                                                                                            // 684\n    //   console.log(\"Failed to disconnect with macId \"+self.macId)                                                 // 685\n    // }, this.mode)                                                                                                // 686\n  }                                                                                                                 // 687\n}                                                                                                                   // 688\n                                                                                                                    // 689\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:bp5'] = {\n  iHealthBP5: iHealthBP5\n};\n\n})();\n","servePath":"/packages/ihealth_bp5.js","sourceMap":{"version":3,"sources":["/packages/ihealth_bp5/bp5.js"],"names":[],"mappingsfile":"/packages/ihealth_bp5.js","sourcesContent":["// possible states: disconnected, connecting, connected, measuring, measurement error\n\nvar debugLevel = 2\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);\n\nvar processSignal = function(signal) {\n  debugL(3)(\"processSignal call: \" + signal)\n  try {\n   var json_signal = JSON.parse(signal);\n   return json_signal;\n  } catch(err) {\n   console.warn('processSignal' + err);\n  }\n}\n\nvar cbLog = function(functionName) {\n  return function(signal) {\n    console.log(functionName, ' - ', signal)\n  }\n};\n\n/**\n* Get & Save device informations from/to Session\n*/\nvar getDevices = function(type){\n  debugL(3)(\"getDevices call: \" + type)\n  var devices = Session.get(\"devices\") || { bluetooth: false }\n  return type ? devices[type] : devices\n}\nvar saveDevices = function(session, connected){\n  debugL(3)(\"saveDevices call: \" + session + \", \" + connected)\n  var devices = Session.get(\"devices\") || { bluetooth: false }\n  var cur = Session.get(\"devices\") || { bluetooth: false }\n  var compare = _.clone(cur)\n\n  if (!_.isObject(session)) session = {}\n  if (connected) session.bluetooth = true\n  _.extend(cur,session)\n\n  if (!_.isEqual(compare,cur)) {\n    console.log(cur)\n    Session.set(\"devices\", cur) // Cur is Extended\n  }\n}\n//\n// var saveApp = function(newinfo) {\n//   var sessionLabel = \"app\"\n//   var appSession = Session.get(sessionLabel) || {}\n//   var deepExtend = true\n//   jQuery.extend(deepExtend, appSession , newinfo)\n//   Session.set(sessionLabel,  appSession)\n// }\n\n/**\n * Javascript Class for Blood Pressure\n * BP5 Device\n *\n * DESCRIPTION\n * This class uses the iHealth BP API.\n *\n *  SESSIONS\n * BP {Number, Boolean}\n * devices {Object}\n */\niHealthBP5 = function(args){\n  var defaults = {\n\t\thasStarted: false,\n\t\tisTestMode: false,\n    connectionAttemptDuration: 13000,\n    connectAndReadyDelay: 1800,\n    finishedMeasurementDelay: 1200,\n\n    maxBP: 250 // Highest possible BP\n\t}\n\tvar args = _.isObject(args) ? _.defaults(args, defaults) : defaults\n\t_.extend(this, args)\n\n  if (this.isTestMode) {\n    this.mode = \"test\"\n    this.macId = \"8CDE52143F1E\"\n    this.name = \"BP5 143F1E\"\n  } else {\n    this.mode = \"\"\n    this.macId = null\n    this.name = null\n  }\n\n  // Fixed Args\n  this.timeout = null\n  this.state = \"disconnected\"  // attempting to getBattery during measurement will not work\n  this.battery = null  // if null, UI should grey out the battery icon\n  this.error = null // if null, there is no error\n  this.offlineNum = null // if null, there is no error\n\n  this.isPluginLoaded = false\n\n  this.checkPluginLoaded()\n  if (!this.isPluginLoaded) {\n    var self = this\n    var timerCheckPlugin = Meteor.setInterval(function(){\n      if (!self.isPluginLoaded) {\n        self.checkPluginLoaded()\n      } else {\n        Meteor.clearInterval(timerCheckPlugin)\n        console.log('stop timerCheckPlugin')\n      }\n    }, 200)\n  }\n}\n\niHealthBP5.prototype = {\n  checkPluginLoaded: function() {\n    debugL(2)(\"checkPluginLoaded BP call: - \")\n    var isPluginLoaded = typeof(BpManagerCordova) !== \"undefined\"\n    console.log('checkPluginLoaded BP: ' + isPluginLoaded)\n    this.isPluginLoaded = isPluginLoaded\n    // saveApp({isPluginLoaded: isPluginLoaded})\n    Session.set(\"isPluginLoaded\", isPluginLoaded)\n    return isPluginLoaded\n  },\n  isConnected: function() {\n    debugL(2)(\"isConnected call: - \")\n    return this.state !== \"disconnected\"\n  },\n  /**\n   * Connect to BP Device\n   */\n  connect: function(cbFail, cbSuccess) {\n    debugL(1)(\"connect call: \" + cbFail + \", \" + cbSuccess)\n    if (!this.isPluginLoaded) {\n      debugL(1)(\"connect abort: \" + this.isPluginLoaded)\n      return\n    }\n\n    console.log(\"Connecting...\")\n\n    // Example of possible returns\n    // {\"address\":\"5CF938BED71E\"}\n    // {\"address\":\"F4F951C259FD\"}\n    // {\"address\":\"7FEE23DD7284\"}\n    // {\"address\":\"8CDE52143F1E\",\"name\":\"BP5 143F1E\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create bluetoothsocket success\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"create iostream success\"}\n    // {\"address\":\"8CDE52143F1E\",\"msg\":\"authenticate device\"}\n\n    // Begin Connection Attempt\n    saveDevices({ BP: \"searching\" })\n\n    var self = this\n    var startDiscoverySuccessCB = function(res){\n        // ##\n        // Success Function\n        console.log(\"Success: \"+res) // DEVELOPMENT MODE\n\n        try {\n          debugL(7)(\"#### Parse Attempt\")\n          var json = JSON.parse(res)\n          if (json.address && json.name) {\n            self.name = json.name\n            debugL(7)(\"#### Parse Success\")\n            self.macId = json.address\n            self.state = \"connected\"\n            saveDevices({ BP: \"connected\" })\n\n            // iOS plugin currently doesn't have this function\n            // if (!h.getPlatform(\"ios\"))\n\n            if (!h.getPlatform(\"ios\") && _.isFunction(BpManagerCordova.connectDevice)) {\n              BpManagerCordova.connectDevice(self.macId, function (res) {\n                console.log(\"Connect Failed\", res)\n                debugL(2)(\"not ios connectDevice\", res)\n              }, function (message) {\n                console.log(\"Connect Success\", res)\n\n                // Remove the \"disconnected\" error if it was disconnected.\n                var curSession = Session.get(\"BP\")\n                if (_.isObject(curSession) && curSession.errorID===99) {\n                  delete curSession.errorID\n                  Session.set(\"BP\", curSession)\n                }\n\n                if (cbSuccess) cbSuccess()\n                debugL(2)(\"is ios connectDevice\", res)\n                if (_.isFunction(cbSuccess)) {\n                  cbSuccess()\n                }\n              })\n            } else {\n              console.log(\"Connect function was never executed. Perhaps this is an iOS device?\")\n              if (_.isFunction(cbSuccess)) {\n                cbSuccess()\n              }\n            }\n\n            Meteor.clearTimeout(self.timeout)\n            self.timeout = Meteor.setTimeout( function(){\n              // Set bp to true after 2 seconds so the \"Connected\" status message can be read by humans.\n              // @Jason, I'd prefer to keep UI related code outside BP5\n              if (self.macId!=null){\n                saveDevices({\n                  BP: {\n                    macId: self.macId,\n                    name: self.name,\n                    state: self.state\n                  }\n                })\n                self.getOfflineNum()\n                self.checkOfflineMode()\n                self.updateBattery()\n\n                var batteryCheckInterval = 30 * 1000;\n                Meteor.clearInterval(self.batteryTimer);\n                self.batteryTimer = Meteor.setInterval(function() {\n                  self.updateBattery()\n                }, batteryCheckInterval);\n\n                var cancelBatteryTimer = function() {\n                  Meteor.clearInterval(self.batteryTimer);\n                }\n                self.detectDisconnect(cancelBatteryTimer)\n\n\n                if (_.isFunction(cbSuccess)) {\n                  cbSuccess()\n                }\n              }\n            }, self.connectAndReadyDelay)\n\n          } else\n            saveDevices({ BP: \"searching\" })\n\n          // Skipping \"Connecting\" because it causes error if user stops before the final stage.\n          // switch (json.msg) {\n          //   case \"create bluetoothsocket success\":\n          //   case \"create iostream success\":\n          //     saveDevices({ BP: \"connecting\" })\n          //     break\n          //   case \"authenticate device\":\n          //     self.macId = json.address\n          //     saveDevices({ BP: \"connected\" })\n          //\n          //     Meteor.setTimeout( function(){\n          //       // Set bp to true after 2 seconds so the \"Connected\" status message can be read by humans.\n          //       if (self.macId!=null){\n          //         self.pingDevice(true)\n          //         if (cbSuccess) cbSuccess()\n          //       }\n          //     }, 2000)\n          //     break\n          //   default:\n          //     saveDevices({ BP: \"searching\" })\n          // }\n        } catch(err) {\n          // DEVELOPMENT MODE\n          console.warn(err)\n          console.log(res)\n        }\n      };\n\n    var startDiscoveryFailCB = function(res){\n        // ##\n        // Failure Function\n        console.log(\"Fail: \"+res) // DEVELOPMENT MODE\n\n        // Commenting these two lines because I want the instance to remember the originally connected macId & name\n        // self.macId = null\n        // self.name = null\n      }\n\n    console.log(\"Start discovery\")\n    BpManagerCordova.startDiscovery( this.macId, startDiscoverySuccessCB, startDiscoveryFailCB)\n\n      // Give up after X amount of time\n      Meteor.clearTimeout(self.timeout)\n      self.timeout = Meteor.setTimeout( function(){\n        console.log(\"Connection attempt has been timed out.\")\n        self.stopConnecting()\n        if (cbFail) cbFail()\n      }, this.connectionAttemptDuration)\n  },\n\n  /**\n   * Start monitoring the blood pressure and store it into Session \"BP\"\n   */\n  start: function(finishCallback){\n    debugL(1)(\"start call: - \")\n    var self = this\n    // var reconnectAttempted = false\n\n    if (!this.isPluginLoaded || this.hasStarted) {\n      debugL(1)(\"start terminated early: - \" + this.isPluginLoaded + \", \" + this.hasStarted)\n      return // Exit because BpManagerCordova is not defined\n    }\n\n    // var reconnectStart = function() {\n    //   self.connect( function(){\n    //     console.warn(\"Could not start device because device couldn't be found.\")\n    //   }, function(){\n    //     self.start()\n    //   })\n    // }\n    //\n    // if (this.isConnected()) {\n    //   reconnectStart()\n    //   return\n    // }\n\n    this.hasStarted = true // Ensure that BP monitor can only run one at a time\n    this.state = \"measuring\"\n\n    // Start from 0\n    var bp = {pressure: 0, status: 'processing'}\n    Session.set(\"BP\", bp) // Start from 0\n\n    console.log(\"Starting device: \"+this.macId)\n\n    BpManagerCordova.startMeasure( this.macId, function(res){\n      /**\n       * Success Function()\n       * Do the JSON.parse inside the try-catch block\n       * \"res\" var is not always a JSON String.\n       */\n      debugL(2)(\"startMeasure\", res);\n\n      try {\n        var json = JSON.parse(res)\n        // console.log ('json: ', json)\n\n        _.extend(bp, json) // sometimes bp doesn't update fast enough\n\n        // console.log(\"keys:\", _.keys(bp))\n        // console.log(\"values:\", _.values(bp))\n        debugL(3)(\"extended BP: \", bp)\n\n        if (json.highpressure && json.lowpressure) {\n          // bp.status = 'paused'\n          self.stop(null, true)\n\n          // Meteor.setTimeout( function(){\n            bp.status = 'finished'\n            bp.date = new Date()\n\n            if (_.isFunction(finishCallback))\n              finishCallback(res)\n\n            Session.set(\"BP\", bp)\n          // },self.finishedMeasurementDelay)\n\n        } else {\n          bp.status = 'processing'\n          bp.perCent = json.pressure / self.maxBP\n\n          if (!_.isNumber(bp.perCent)) {\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"########\")\n            console.log(\"NaN Error Happened\")\n            console.log(json)\n            bp.errorID = 98\n          }\n        }\n\n        // if (res.msg==\"No Device\") {\n        //   self.stop(function(){\n        //     self.macId = null\n        //     self.start()\n        //   })\n        // }\n\n        if (_.isNumber(bp.errorID) && bp.errorID>=0) {\n          self.handleError(bp)\n          self.stop(null,true)\n        } else\n          Session.set(\"BP\", bp)\n\n      } catch(err) {\n        // DEVELOPMENT MODE\n        console.log(\"JSON Try/Catch Error\")\n        console.warn(err)\n        console.log(res)\n\n        // if (res.errorID) {\n        //   // Session.set(\"BP\", bp)\n        //   self.handleError(res.errorID)\n        //   self.stop()\n        // }\n      }\n    }, function(res){\n      console.log('start measure fail' + res)\n      // Failure Function()\n      self.stop()\n\n      // if (!reconnectAttempted) {\n      //   console.warn(\"Start Measure Error: \"+res)\n      //   reconnectAttempted = true\n      //   reconnectStart()\n      // } else {\n      //   console.warn(\"Start Measure Error in Reconnect: \"+res)\n      // }\n    })\n  },\n  handleError: function(bp) {\n\n    // Exit because if BP session is *NOT* an object, measurement was not happening.\n    // And if measurement was not happening, then there's not need to handle any errors.\n    if (!_.isObject(bp))\n      return\n\n    debugL(2)(\"Error Handler Code: \" + bp.errorID)\n\n    switch (bp.errorID) {\n      case 0:\n        bp.msg = \"Please keep your arm stable. Stay still and try again.\"\n      break\n      case 4:\n        // Low Pressure Error -- Cannot inflate.\n        bp.msg = \"Your blood pressure was too low. Please wear the blood pressure cuff properly and try again.\"\n      break\n      case 35:\n        bp.msg = \"Stop button was pressed. Please close and try again.\"\n      case 13:\n        bp.msg = \"Battery is too low. Please re-charge and try again.\"\n      break\n\n      // Following error codes are software generated -- they are not from the plugin\n      case 98:\n        // No error code received but measurement couldn't continue -- i.e. NaN pressure\n        bp.msg = \"Unknown error occured.\"\n      break\n      case 99:\n        // Code created for disconnect callback\n        bp.msg = \"Your device was disconnected from the blood pressure monitor.\"\n      break\n    }\n\n    // if (_.isNumber(bp.errorID) && !bp.msg)\n    if (bp.msg)\n      Session.set(\"BP\", bp)\n\n    BpManagerCordova.getErrorDetailWithID( bp.errorID, function(errObjStr){\n      if (!bp.msg) {\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n        console.log(\"##########\")\n      }\n      var errObj = processSignal(errObjStr)\n      if (errObj.ErrorMessage) {\n        var bpErrorMsg = \"\"\n        if (errObj.ErrorMessage.match(/\\.$/)) {\n          debugL(5)(\"yes for \" + bp.errorID + \": \" + errObj.ErrorMessage)\n          bpErrorMsg = errObj.ErrorMessage\n        } else {\n          debugL(5)(\"no for \" + bp.errorID + \": \" + errObj.ErrorMessage)\n          bpErrorMsg = errObj.ErrorMessage + \".\"\n        }\n        debugL(4)(\"bpErrorMsg for \" + bp.errorID + \": \" + bpErrorMsg)\n        debugL(4)(\"bp.msg for \" + bp.errorID + \": \" + bp.msg)\n      }\n\n    }, cbLog(\"getErrorDetailWithID fail\"))\n  },\n  /**\n   * Stop monitoring the blood pressure\n   */\n  stop: function(cb,notStopMeasure) {\n    debugL(2)(\"stop call: \" + cb + \", \" + notStopMeasure)\n    if (!this.isPluginLoaded) return // Exit because BpManagerCordova is not defined\n\n    this.hasStarted = false\n    this.state = \"connected\"\n\n    if (!_.isFunction(cb)) {\n      var self = this\n      var cb = function(res){\n        console.log(res);\n        try {\n          Session.set(\"BP\", JSON.parse(res));\n        } catch(err) {\n          console.warn(err);\n        }\n      }\n    }\n\n    if (!notStopMeasure)\n      BpManagerCordova.stopMeasure(this.macId, cb, cb)\n  },\n  /**\n   * Return uniformized BP\n   */\n  uniformizeBP: function(setZero){\n    debugL(1)(\"uniformizeBP call: \" + setZero )\n    console.log(\"stopMeasure call\")\n    var bp = Session.get(\"BP\") || {}\n    if (setZero && !bp.pressure) {\n      bp.pressure = 0\n      bp.perCent = 0\n    }\n    bp.statusClass = bp.status || 'start'\n    return bp\n  },\n  updateBattery: function() {\n    debugL(4)(\"updateBattery  call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal)\n      if(jsonSignal && jsonSignal.battery) {\n        self.battery = Math.abs(jsonSignal.battery - self.battery)===1\n          ? Math.min(self.battery, jsonSignal.battery)\n          : jsonSignal.battery\n\n        var curBP = getDevices(\"BP\")\n        curBP.battery = self.battery\n        saveDevices({ BP: curBP })\n      }\n    }\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.getBattery(this.macId, cb, cbLog('getBattery fail'))\n    } else {\n      console.log(\"cannot updateBattery while measuring\")\n    }\n    // currently fails silently, since updateBattery is usually on setInterval\n    // should we return an error so that getBattery can be rescheduled? else { setTimeout getBattery}\n  },\n  detectDisconnect: function(cb) {\n    debugL(2)(\"detectDisconnect  call: \" + cb)\n    console.log('start setDisconnectCallback');\n    var self = this\n    var disconnectCB = function(signal) {\n      console.log('disconnected' + signal);\n      var jsonResult = processSignal(signal);\n\n      if (jsonResult && jsonResult.msg && jsonResult.msg === \"disconnect\") {\n        self.state = \"disconnected\"\n\n        // marker\n        saveDevices({ BP: null })\n\n        var curSession = Session.get(\"BP\")\n        if (_.isObject(curSession)) curSession.errorID = 99\n        self.handleError( curSession )\n      }\n\n      if (typeof(cb) === 'function')\n        cb()\n    }\n\n    BpManagerCordova.setDisconnectCallback(this.macId, disconnectCB, cbLog('disconnectCallbackCB fail'));\n  },\n  enableOffline: function(){\n    debugL(1)(\"enableOffline call: - \")\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.enableOffline(this.macId, cbLog(\"enableOffline success\"), cbLog(\"enableOffline fail\"))\n      this.checkOfflineMode()\n    } else {\n      console.log(\"cannot enableOffline while measuring\")\n    }\n  },\n  disableOffline: function(){\n    debugL(1)(\"disableOffline call: - \")\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.disenableOffline(this.macId, cbLog(\"disableOffline success\"), cbLog(\"disableOffline fail\"))\n      this.checkOfflineMode() // confirm command was successful, and update Session \"devices\"\n    } else {\n      console.log(\"cannot disableOffline while measuring\")\n    }\n  },\n  checkOfflineMode: function(){\n    debugL(1)(\"checkOfflineMode call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal)\n      if (jsonSignal && jsonSignal.isEnableOffline) {\n        self.isEnableOffline = jsonSignal.isEnableOffline\n\n        var curBP = getDevices(\"BP\")\n        curBP.isEnableOffline = self.isEnableOffline\n        saveDevices({ BP: curBP })\n      }\n    }\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.isEnableOffline(this.macId, cb, cbLog(\"isEnableOffline fail\"))\n    } else {\n      console.log(\"cannot checkOfflineMode while measuring\")\n    }\n  },\n  getOfflineNum: function(){\n    debugL(1)(\"getOfflineNum call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal)\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"offlineNum\") {\n        self.offlineNum = jsonSignal.value;\n\n        var curBP = getDevices(\"BP\")\n        curBP.offlineNum = self.offlineNum\n        saveDevices({ BP: curBP })\n      }\n    }\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.getOfflineNum(this.macId, cb, cbLog(\"getOfflineNum success\"))\n    } else {\n      console.log(\"cannot getOfflineNum while measuring\")\n    }\n  },\n  getOfflineData: function(){\n    debugL(1)(\"getOfflineData call: - \")\n    var self = this\n    var cb = function(signal) {\n      var jsonSignal = processSignal(signal)\n      if (jsonSignal && jsonSignal.msg && jsonSignal.msg === \"offlineData\") {\n        var curBP = getDevices(\"BPOfflineData\")\n        curBP.offlineData = curBP.offlineData ? curBP.offlineData : []\n        curBP.offlineData.concat(jsonSignal.value)\n        saveDevices({ BPOfflineData: curBP })\n      }\n    }\n\n    if (this.state !== \"measuring\") {\n      BpManagerCordova.getOfflineData(this.macId, cbLog(\"getOfflineData success\"), cbLog(\"getOfflineData success\"))\n    } else {\n      console.log(\"cannot getOfflineData while measuring\")\n    }\n\n  },\n  /**\n   * Stop connection attempt\n   */\n  stopConnecting: function(){\n    debugL(1)(\"stopConnecting call: - \")\n\n    console.log(\"Stopping Connect Attempt\")\n\n    var deviceCheck = getDevices()\n    if (!_.isObject(deviceCheck.BP) && deviceCheck.BP!=\"connected\") {\n      saveDevices({ BP: null })\n\n      if (this.isPluginLoaded)\n        var cb = function(res){ console.log(\"Stop discovery: \", res) }\n        BpManagerCordova.stopDiscovery(this.macId, cb, cb)\n    }\n  },\n  /**\n   * Disconnect and set all device info to null\n   */\n  disconnect: function(){\n    debugL(1)(\"disconnect call: - \")\n    var self = this\n    saveDevices({ BP: null })\n\n    if (this.isPluginLoaded && _.isFunction(BpManagerCordova.disConnectDevice))\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }\n      BpManagerCordova.disConnectDevice(this.macId, cb, cb)\n\n    // this.macId = null\n    // this.name = null\n    var self = this\n    saveDevices({ BP: null })\n\n    if (this.isPluginLoaded && _.isFunction(BpManagerCordova.disConnectDevice))\n      var cb = function(res){ console.log(\"Disconnect device: \", res) }\n      BpManagerCordova.disConnectDevice(this.macId, cb, cb)\n\n    // this.macId = null\n    // this.name = null\n    // Disconnect function success/fail functions in the plugin do not work.\n    // Could be a bug, or could just be incomplete features\n    //\n    // , function(res){\n    //   console.log(res)\n    //   console.log(\"Disconnected\")\n    //\n    //   self.macId = null\n    //   self.name = null\n    // },\n    // function(e){\n    //   console.warn(e)\n    //   console.log(\"Failed to disconnect with macId \"+self.macId)\n    // }, this.mode)\n  }\n}\n"]}}]