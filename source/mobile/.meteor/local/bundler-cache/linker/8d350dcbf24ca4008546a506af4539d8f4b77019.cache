[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\n\n/* Package-scope variables */\nvar log, findAppDir, __coffeescriptShare, LongRunningChildProcess;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/sanjo_long-running-child-process/packages/sanjo_long-running-child-process.js                          //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n(function () {                                                                                                     // 1\n                                                                                                                   // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                                           //    // 4\n// packages/sanjo:long-running-child-process/lib/log.js                                                      //    // 5\n//                                                                                                           //    // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                                             //    // 8\nlog = loglevel.createPackageLogger(                                                                          // 1  // 9\n  '[sanjo:long-running-child-process]',                                                                      // 2  // 10\n  process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL || 'info'                                                 // 3  // 11\n)                                                                                                            // 4  // 12\n                                                                                                             // 5  // 13\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 14\n                                                                                                                   // 15\n}).call(this);                                                                                                     // 16\n                                                                                                                   // 17\n                                                                                                                   // 18\n                                                                                                                   // 19\n                                                                                                                   // 20\n                                                                                                                   // 21\n                                                                                                                   // 22\n(function () {                                                                                                     // 23\n                                                                                                                   // 24\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 25\n//                                                                                                           //    // 26\n// packages/sanjo:long-running-child-process/lib/meteor/files.js                                             //    // 27\n//                                                                                                           //    // 28\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 29\n                                                                                                             //    // 30\n/**                                                                                                          // 1  // 31\n * Copied from Meteor tools/files.js.                                                                        // 2  // 32\n *                                                                                                           // 3  // 33\n * Includes:                                                                                                 // 4  // 34\n * - Helper to find the app root path                                                                        // 5  // 35\n */                                                                                                          // 6  // 36\n                                                                                                             // 7  // 37\nvar path = Npm.require('path');                                                                              // 8  // 38\nvar fs = Npm.require('fs');                                                                                  // 9  // 39\n                                                                                                             // 10\n// given a predicate function and a starting path, traverse upwards                                          // 11\n// from the path until we find a path that satisfies the predicate.                                          // 12\n//                                                                                                           // 13\n// returns either the path to the lowest level directory that passed                                         // 14\n// the test or null for none found. if starting path isn't given, use                                        // 15\n// cwd.                                                                                                      // 16\nvar findUpwards = function (predicate, startPath) {                                                          // 17\n  var testDir = startPath || process.cwd();                                                                  // 18\n  while (testDir) {                                                                                          // 19\n    if (predicate(testDir)) {                                                                                // 20\n      break;                                                                                                 // 21\n    }                                                                                                        // 22\n    var newDir = path.dirname(testDir);                                                                      // 23\n    if (newDir === testDir) {                                                                                // 24\n      testDir = null;                                                                                        // 25\n    } else {                                                                                                 // 26\n      testDir = newDir;                                                                                      // 27\n    }                                                                                                        // 28\n  }                                                                                                          // 29\n  if (!testDir)                                                                                              // 30\n    return null;                                                                                             // 31\n                                                                                                             // 32\n  return testDir;                                                                                            // 33\n};                                                                                                           // 34\n                                                                                                             // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                        // 36\n// directory. If so, return the top-level app directory.                                                     // 37\nfindAppDir = function (filepath) {                                                                           // 38\n  var isAppDir = function (filepath) {                                                                       // 39\n    // XXX once we are done with the transition to engine, this should                                       // 40\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                       // 41\n    // 'release'))`                                                                                          // 42\n                                                                                                             // 43\n    // .meteor/packages can be a directory, if .meteor is a warehouse                                        // 44\n    // directory.  since installing meteor initializes a warehouse at                                        // 45\n    // $HOME/.meteor, we want to make sure your home directory (and all                                      // 46\n    // subdirectories therein) don't count as being within a meteor app.                                     // 47\n    try { // use try/catch to avoid the additional syscall to fs.existsSync                                  // 48\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                               // 49\n    } catch (e) {                                                                                            // 50\n      return false;                                                                                          // 51\n    }                                                                                                        // 52\n  };                                                                                                         // 53\n                                                                                                             // 54\n  return findUpwards(isAppDir, filepath);                                                                    // 55\n};                                                                                                           // 56\n                                                                                                             // 57\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 88\n                                                                                                                   // 89\n}).call(this);                                                                                                     // 90\n                                                                                                                   // 91\n                                                                                                                   // 92\n                                                                                                                   // 93\n                                                                                                                   // 94\n                                                                                                                   // 95\n                                                                                                                   // 96\n(function () {                                                                                                     // 97\n                                                                                                                   // 98\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 99\n//                                                                                                           //    // 100\n// packages/sanjo:long-running-child-process/lib/LongRunningChildProcess.coffee.js                           //    // 101\n//                                                                                                           //    // 102\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 103\n                                                                                                             //    // 104\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar assert, child_process, fs, path;                                                                               // 106\n                                                                                                                   // 107\nfs = Npm.require('fs-extra');                                                                                      // 108\n                                                                                                                   // 109\npath = Npm.require('path');                                                                                        // 110\n                                                                                                                   // 111\nassert = Npm.require('assert');                                                                                    // 112\n                                                                                                                   // 113\nchild_process = Npm.require('child_process');                                                                      // 114\n                                                                                                                   // 115\nif (this.sanjo == null) {                                                                                          // 116\n  this.sanjo = {};                                                                                                 // 117\n}                                                                                                                  // 118\n                                                                                                                   // 119\nsanjo.LongRunningChildProcess = (function() {                                                                      // 120\n  LongRunningChildProcess.prototype.taskName = null;                                                               // 121\n                                                                                                                   // 122\n  LongRunningChildProcess.prototype.child = null;                                                                  // 123\n                                                                                                                   // 124\n  LongRunningChildProcess.prototype.pid = null;                                                                    // 125\n                                                                                                                   // 126\n  LongRunningChildProcess.prototype.dead = false;                                                                  // 127\n                                                                                                                   // 128\n  function LongRunningChildProcess(taskName) {                                                                     // 129\n    log.debug(\"LongRunningChildProcess.constructor(taskName=\" + taskName + \")\");                                   // 130\n    this.taskName = taskName;                                                                                      // 131\n    this.pid = this.readPid();                                                                                     // 132\n  }                                                                                                                // 133\n                                                                                                                   // 134\n  LongRunningChildProcess.prototype.getTaskName = function() {                                                     // 135\n    return this.taskName;                                                                                          // 136\n  };                                                                                                               // 137\n                                                                                                                   // 138\n  LongRunningChildProcess.prototype.getChild = function() {                                                        // 139\n    return this.child;                                                                                             // 140\n  };                                                                                                               // 141\n                                                                                                                   // 142\n  LongRunningChildProcess.prototype.getPid = function() {                                                          // 143\n    return this.pid;                                                                                               // 144\n  };                                                                                                               // 145\n                                                                                                                   // 146\n  LongRunningChildProcess.prototype._setPid = function(pid) {                                                      // 147\n    log.debug(\"LongRunningChildProcess._setPid(pid=\" + pid + \")\");                                                 // 148\n    this.pid = pid;                                                                                                // 149\n    log.debug(\"Saving \" + this.taskName + \" pid \" + pid + \" to \" + (this._getPidFilePath()));                      // 150\n    return fs.outputFile(this._getPidFilePath(), \"\" + pid);                                                        // 151\n  };                                                                                                               // 152\n                                                                                                                   // 153\n  LongRunningChildProcess.prototype.isDead = function() {                                                          // 154\n    return this.dead;                                                                                              // 155\n  };                                                                                                               // 156\n                                                                                                                   // 157\n  LongRunningChildProcess.prototype.isRunning = function() {                                                       // 158\n    var err, pid;                                                                                                  // 159\n    log.debug('LongRunningChildProcess.isRunning()');                                                              // 160\n    pid = this.getPid();                                                                                           // 161\n    if (!pid) {                                                                                                    // 162\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");                                                // 163\n      return false;                                                                                                // 164\n    }                                                                                                              // 165\n    try {                                                                                                          // 166\n      process.kill(pid, 0);                                                                                        // 167\n      log.debug(\"LongRunningChildProcess.isRunning returns true\");                                                 // 168\n      return true;                                                                                                 // 169\n    } catch (_error) {                                                                                             // 170\n      err = _error;                                                                                                // 171\n      log.trace(err);                                                                                              // 172\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");                                                // 173\n      return false;                                                                                                // 174\n    }                                                                                                              // 175\n  };                                                                                                               // 176\n                                                                                                                   // 177\n  LongRunningChildProcess.prototype._getMeteorPid = function() {                                                   // 178\n    var parentPid, parentPidIndex;                                                                                 // 179\n    parentPid = null;                                                                                              // 180\n    parentPidIndex = _.indexOf(process.argv, '--parent-pid');                                                      // 181\n    if (parentPidIndex !== -1) {                                                                                   // 182\n      parentPid = process.argv[parentPidIndex + 1];                                                                // 183\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);                                         // 184\n    } else if (process.env.METEOR_PARENT_PID) {                                                                    // 185\n      parentPid = process.env.METEOR_PARENT_PID;                                                                   // 186\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);                                         // 187\n    } else {                                                                                                       // 188\n      log.error('Could not find the pid of the main Meteor app process');                                          // 189\n    }                                                                                                              // 190\n    return parentPid;                                                                                              // 191\n  };                                                                                                               // 192\n                                                                                                                   // 193\n  LongRunningChildProcess.prototype._getMeteorAppPath = function() {                                               // 194\n    if (!this.appPath) {                                                                                           // 195\n      this.appPath = path.resolve(findAppDir());                                                                   // 196\n    }                                                                                                              // 197\n    return this.appPath;                                                                                           // 198\n  };                                                                                                               // 199\n                                                                                                                   // 200\n  LongRunningChildProcess.prototype._getMeteorLocalPath = function() {                                             // 201\n    return path.join(this._getMeteorAppPath(), '.meteor/local');                                                   // 202\n  };                                                                                                               // 203\n                                                                                                                   // 204\n  LongRunningChildProcess.prototype._getPidFilePath = function() {                                                 // 205\n    return path.join(this._getMeteorLocalPath(), \"run/\" + this.taskName + \".pid\");                                 // 206\n  };                                                                                                               // 207\n                                                                                                                   // 208\n  LongRunningChildProcess.prototype._getLogFilePath = function() {                                                 // 209\n    return path.join(this._getMeteorLocalPath(), \"log/\" + this.taskName + \".log\");                                 // 210\n  };                                                                                                               // 211\n                                                                                                                   // 212\n  LongRunningChildProcess.prototype._getSpawnScriptPath = function() {                                             // 213\n    return path.join(this._getMeteorLocalPath(), 'build/programs/server/assets/packages/' + 'sanjo_long-running-child-process/lib/spawnScript.js');\n  };                                                                                                               // 215\n                                                                                                                   // 216\n  LongRunningChildProcess.prototype.readPid = function() {                                                         // 217\n    var err, pid;                                                                                                  // 218\n    log.debug('LongRunningChildProcess.readPid()');                                                                // 219\n    try {                                                                                                          // 220\n      pid = parseInt(fs.readFileSync(this._getPidFilePath(), {                                                     // 221\n        encoding: 'utf8'                                                                                           // 222\n      }, 10));                                                                                                     // 223\n      log.debug(\"LongRunningChildProcess.readPid returns \" + pid);                                                 // 224\n      return pid;                                                                                                  // 225\n    } catch (_error) {                                                                                             // 226\n      err = _error;                                                                                                // 227\n      log.debug('LongRunningChildProcess.readPid returns null');                                                   // 228\n      return null;                                                                                                 // 229\n    }                                                                                                              // 230\n  };                                                                                                               // 231\n                                                                                                                   // 232\n  LongRunningChildProcess.prototype.spawn = function(options) {                                                    // 233\n    var command, commandArgs, env, logFile, nodeDir, nodePath, spawnOptions, spawnScript, stdio;                   // 234\n    log.debug(\"LongRunningChildProcess.spawn()\", options);                                                         // 235\n    check(options, Match.ObjectIncluding({                                                                         // 236\n      command: String,                                                                                             // 237\n      args: [Match.Any],                                                                                           // 238\n      options: Match.Optional(Match.ObjectIncluding({                                                              // 239\n        cwd: Match.Optional(Match.OneOf(String, void 0)),                                                          // 240\n        env: Match.Optional(Object),                                                                               // 241\n        stdio: Match.Optional(Match.OneOf(String, [Match.Any]))                                                    // 242\n      }))                                                                                                          // 243\n    }));                                                                                                           // 244\n    if (!options.options) {                                                                                        // 245\n      options.options = {};                                                                                        // 246\n    }                                                                                                              // 247\n    if (this.isRunning()) {                                                                                        // 248\n      return false;                                                                                                // 249\n    }                                                                                                              // 250\n    logFile = this._getLogFilePath();                                                                              // 251\n    fs.ensureDirSync(path.dirname(logFile));                                                                       // 252\n    if (options.options.stdio) {                                                                                   // 253\n      stdio = options.options.stdio;                                                                               // 254\n    } else {                                                                                                       // 255\n      this.fout = fs.openSync(logFile, 'w');                                                                       // 256\n      stdio = ['ignore', this.fout, this.fout];                                                                    // 257\n    }                                                                                                              // 258\n    nodePath = process.execPath;                                                                                   // 259\n    nodeDir = path.dirname(nodePath);                                                                              // 260\n    env = _.clone(options.options.env || process.env);                                                             // 261\n    env.PATH = nodeDir + ':' + (env.PATH || process.env.PATH);                                                     // 262\n    if (process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL && !env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL) {           // 263\n      env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL = process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL;                 // 264\n    }                                                                                                              // 265\n    spawnOptions = {                                                                                               // 266\n      cwd: options.options.cwd || this._getMeteorAppPath(),                                                        // 267\n      env: env,                                                                                                    // 268\n      detached: true,                                                                                              // 269\n      stdio: stdio                                                                                                 // 270\n    };                                                                                                             // 271\n    command = path.basename(options.command);                                                                      // 272\n    spawnScript = this._getSpawnScriptPath();                                                                      // 273\n    commandArgs = [spawnScript, this._getMeteorPid(), this.taskName, options.command].concat(options.args);        // 274\n    fs.chmodSync(spawnScript, 0x164);                                                                              // 275\n    log.debug(\"LongRunningChildProcess.spawn is spawning '\" + command + \"'\");                                      // 276\n    this.child = child_process.spawn(nodePath, commandArgs, spawnOptions);                                         // 277\n    this.dead = false;                                                                                             // 278\n    this._setPid(this.child.pid);                                                                                  // 279\n    this.child.on(\"exit\", (function(_this) {                                                                       // 280\n      return function(code) {                                                                                      // 281\n        log.debug(\"LongRunningChildProcess: child_process.on 'exit': command=\" + command + \" code=\" + code);       // 282\n        if (_this.fout) {                                                                                          // 283\n          return fs.closeSync(_this.fout);                                                                         // 284\n        }                                                                                                          // 285\n      };                                                                                                           // 286\n    })(this));                                                                                                     // 287\n    return true;                                                                                                   // 288\n  };                                                                                                               // 289\n                                                                                                                   // 290\n  LongRunningChildProcess.prototype.kill = function(signal) {                                                      // 291\n    var err, pid;                                                                                                  // 292\n    if (signal == null) {                                                                                          // 293\n      signal = \"SIGINT\";                                                                                           // 294\n    }                                                                                                              // 295\n    log.debug(\"LongRunningChildProcess.kill(signal=\" + signal + \")\");                                              // 296\n    if (!this.dead) {                                                                                              // 297\n      try {                                                                                                        // 298\n        if (this.child != null) {                                                                                  // 299\n          this.child.kill(signal);                                                                                 // 300\n        } else {                                                                                                   // 301\n          pid = this.getPid();                                                                                     // 302\n          process.kill(pid, signal);                                                                               // 303\n        }                                                                                                          // 304\n        this.dead = true;                                                                                          // 305\n        this.pid = null;                                                                                           // 306\n        return fs.removeSync(this._getPidFilePath());                                                              // 307\n      } catch (_error) {                                                                                           // 308\n        err = _error;                                                                                              // 309\n        return log.warn(\"Error: While killing process:\\n\", err);                                                   // 310\n      }                                                                                                            // 311\n    }                                                                                                              // 312\n  };                                                                                                               // 313\n                                                                                                                   // 314\n  return LongRunningChildProcess;                                                                                  // 315\n                                                                                                                   // 316\n})();                                                                                                              // 317\n                                                                                                                   // 318\nif (process.env.IS_MIRROR === 'true') {                                                                            // 319\n  sanjo.LongRunningChildProcess.fs = fs;                                                                           // 320\n  sanjo.LongRunningChildProcess.path = path;                                                                       // 321\n  sanjo.LongRunningChildProcess.assert = assert;                                                                   // 322\n  sanjo.LongRunningChildProcess.child_process = child_process;                                                     // 323\n}                                                                                                                  // 324\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 325\n                                                                                                                   // 326\n}).call(this);                                                                                                     // 327\n                                                                                                                   // 328\n                                                                                                                   // 329\n                                                                                                                   // 330\n                                                                                                                   // 331\n                                                                                                                   // 332\n                                                                                                                   // 333\n(function () {                                                                                                     // 334\n                                                                                                                   // 335\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 336\n//                                                                                                           //    // 337\n// packages/sanjo:long-running-child-process/main.js                                                         //    // 338\n//                                                                                                           //    // 339\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 340\n                                                                                                             //    // 341\n/* globals LongRunningChildProcess: true */                                                                  // 1  // 342\n                                                                                                             // 2  // 343\nLongRunningChildProcess = sanjo.LongRunningChildProcess                                                      // 3  // 344\n                                                                                                             // 4  // 345\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 346\n                                                                                                                   // 347\n}).call(this);                                                                                                     // 348\n                                                                                                                   // 349\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sanjo:long-running-child-process'] = {\n  LongRunningChildProcess: LongRunningChildProcess\n};\n\n})();\n","servePath":"/packages/sanjo_long-running-child-process.js","sourceMap":{"version":3,"sources":["/packages/sanjo_long-running-child-process/packages/sanjo_long-running-child-process.js"],"names":[],"mappingsyH","file":"/packages/sanjo_long-running-child-process.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/log.js                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlog = loglevel.createPackageLogger(                                                                          // 1\n  '[sanjo:long-running-child-process]',                                                                      // 2\n  process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL || 'info'                                                 // 3\n)                                                                                                            // 4\n                                                                                                             // 5\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/meteor/files.js                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/**                                                                                                          // 1\n * Copied from Meteor tools/files.js.                                                                        // 2\n *                                                                                                           // 3\n * Includes:                                                                                                 // 4\n * - Helper to find the app root path                                                                        // 5\n */                                                                                                          // 6\n                                                                                                             // 7\nvar path = Npm.require('path');                                                                              // 8\nvar fs = Npm.require('fs');                                                                                  // 9\n                                                                                                             // 10\n// given a predicate function and a starting path, traverse upwards                                          // 11\n// from the path until we find a path that satisfies the predicate.                                          // 12\n//                                                                                                           // 13\n// returns either the path to the lowest level directory that passed                                         // 14\n// the test or null for none found. if starting path isn't given, use                                        // 15\n// cwd.                                                                                                      // 16\nvar findUpwards = function (predicate, startPath) {                                                          // 17\n  var testDir = startPath || process.cwd();                                                                  // 18\n  while (testDir) {                                                                                          // 19\n    if (predicate(testDir)) {                                                                                // 20\n      break;                                                                                                 // 21\n    }                                                                                                        // 22\n    var newDir = path.dirname(testDir);                                                                      // 23\n    if (newDir === testDir) {                                                                                // 24\n      testDir = null;                                                                                        // 25\n    } else {                                                                                                 // 26\n      testDir = newDir;                                                                                      // 27\n    }                                                                                                        // 28\n  }                                                                                                          // 29\n  if (!testDir)                                                                                              // 30\n    return null;                                                                                             // 31\n                                                                                                             // 32\n  return testDir;                                                                                            // 33\n};                                                                                                           // 34\n                                                                                                             // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                        // 36\n// directory. If so, return the top-level app directory.                                                     // 37\nfindAppDir = function (filepath) {                                                                           // 38\n  var isAppDir = function (filepath) {                                                                       // 39\n    // XXX once we are done with the transition to engine, this should                                       // 40\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                       // 41\n    // 'release'))`                                                                                          // 42\n                                                                                                             // 43\n    // .meteor/packages can be a directory, if .meteor is a warehouse                                        // 44\n    // directory.  since installing meteor initializes a warehouse at                                        // 45\n    // $HOME/.meteor, we want to make sure your home directory (and all                                      // 46\n    // subdirectories therein) don't count as being within a meteor app.                                     // 47\n    try { // use try/catch to avoid the additional syscall to fs.existsSync                                  // 48\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                               // 49\n    } catch (e) {                                                                                            // 50\n      return false;                                                                                          // 51\n    }                                                                                                        // 52\n  };                                                                                                         // 53\n                                                                                                             // 54\n  return findUpwards(isAppDir, filepath);                                                                    // 55\n};                                                                                                           // 56\n                                                                                                             // 57\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/LongRunningChildProcess.coffee.js                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar assert, child_process, fs, path;\n\nfs = Npm.require('fs-extra');\n\npath = Npm.require('path');\n\nassert = Npm.require('assert');\n\nchild_process = Npm.require('child_process');\n\nif (this.sanjo == null) {\n  this.sanjo = {};\n}\n\nsanjo.LongRunningChildProcess = (function() {\n  LongRunningChildProcess.prototype.taskName = null;\n\n  LongRunningChildProcess.prototype.child = null;\n\n  LongRunningChildProcess.prototype.pid = null;\n\n  LongRunningChildProcess.prototype.dead = false;\n\n  function LongRunningChildProcess(taskName) {\n    log.debug(\"LongRunningChildProcess.constructor(taskName=\" + taskName + \")\");\n    this.taskName = taskName;\n    this.pid = this.readPid();\n  }\n\n  LongRunningChildProcess.prototype.getTaskName = function() {\n    return this.taskName;\n  };\n\n  LongRunningChildProcess.prototype.getChild = function() {\n    return this.child;\n  };\n\n  LongRunningChildProcess.prototype.getPid = function() {\n    return this.pid;\n  };\n\n  LongRunningChildProcess.prototype._setPid = function(pid) {\n    log.debug(\"LongRunningChildProcess._setPid(pid=\" + pid + \")\");\n    this.pid = pid;\n    log.debug(\"Saving \" + this.taskName + \" pid \" + pid + \" to \" + (this._getPidFilePath()));\n    return fs.outputFile(this._getPidFilePath(), \"\" + pid);\n  };\n\n  LongRunningChildProcess.prototype.isDead = function() {\n    return this.dead;\n  };\n\n  LongRunningChildProcess.prototype.isRunning = function() {\n    var err, pid;\n    log.debug('LongRunningChildProcess.isRunning()');\n    pid = this.getPid();\n    if (!pid) {\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");\n      return false;\n    }\n    try {\n      process.kill(pid, 0);\n      log.debug(\"LongRunningChildProcess.isRunning returns true\");\n      return true;\n    } catch (_error) {\n      err = _error;\n      log.trace(err);\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");\n      return false;\n    }\n  };\n\n  LongRunningChildProcess.prototype._getMeteorPid = function() {\n    var parentPid, parentPidIndex;\n    parentPid = null;\n    parentPidIndex = _.indexOf(process.argv, '--parent-pid');\n    if (parentPidIndex !== -1) {\n      parentPid = process.argv[parentPidIndex + 1];\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);\n    } else if (process.env.METEOR_PARENT_PID) {\n      parentPid = process.env.METEOR_PARENT_PID;\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);\n    } else {\n      log.error('Could not find the pid of the main Meteor app process');\n    }\n    return parentPid;\n  };\n\n  LongRunningChildProcess.prototype._getMeteorAppPath = function() {\n    if (!this.appPath) {\n      this.appPath = path.resolve(findAppDir());\n    }\n    return this.appPath;\n  };\n\n  LongRunningChildProcess.prototype._getMeteorLocalPath = function() {\n    return path.join(this._getMeteorAppPath(), '.meteor/local');\n  };\n\n  LongRunningChildProcess.prototype._getPidFilePath = function() {\n    return path.join(this._getMeteorLocalPath(), \"run/\" + this.taskName + \".pid\");\n  };\n\n  LongRunningChildProcess.prototype._getLogFilePath = function() {\n    return path.join(this._getMeteorLocalPath(), \"log/\" + this.taskName + \".log\");\n  };\n\n  LongRunningChildProcess.prototype._getSpawnScriptPath = function() {\n    return path.join(this._getMeteorLocalPath(), 'build/programs/server/assets/packages/' + 'sanjo_long-running-child-process/lib/spawnScript.js');\n  };\n\n  LongRunningChildProcess.prototype.readPid = function() {\n    var err, pid;\n    log.debug('LongRunningChildProcess.readPid()');\n    try {\n      pid = parseInt(fs.readFileSync(this._getPidFilePath(), {\n        encoding: 'utf8'\n      }, 10));\n      log.debug(\"LongRunningChildProcess.readPid returns \" + pid);\n      return pid;\n    } catch (_error) {\n      err = _error;\n      log.debug('LongRunningChildProcess.readPid returns null');\n      return null;\n    }\n  };\n\n  LongRunningChildProcess.prototype.spawn = function(options) {\n    var command, commandArgs, env, logFile, nodeDir, nodePath, spawnOptions, spawnScript, stdio;\n    log.debug(\"LongRunningChildProcess.spawn()\", options);\n    check(options, Match.ObjectIncluding({\n      command: String,\n      args: [Match.Any],\n      options: Match.Optional(Match.ObjectIncluding({\n        cwd: Match.Optional(Match.OneOf(String, void 0)),\n        env: Match.Optional(Object),\n        stdio: Match.Optional(Match.OneOf(String, [Match.Any]))\n      }))\n    }));\n    if (!options.options) {\n      options.options = {};\n    }\n    if (this.isRunning()) {\n      return false;\n    }\n    logFile = this._getLogFilePath();\n    fs.ensureDirSync(path.dirname(logFile));\n    if (options.options.stdio) {\n      stdio = options.options.stdio;\n    } else {\n      this.fout = fs.openSync(logFile, 'w');\n      stdio = ['ignore', this.fout, this.fout];\n    }\n    nodePath = process.execPath;\n    nodeDir = path.dirname(nodePath);\n    env = _.clone(options.options.env || process.env);\n    env.PATH = nodeDir + ':' + (env.PATH || process.env.PATH);\n    if (process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL && !env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL) {\n      env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL = process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL;\n    }\n    spawnOptions = {\n      cwd: options.options.cwd || this._getMeteorAppPath(),\n      env: env,\n      detached: true,\n      stdio: stdio\n    };\n    command = path.basename(options.command);\n    spawnScript = this._getSpawnScriptPath();\n    commandArgs = [spawnScript, this._getMeteorPid(), this.taskName, options.command].concat(options.args);\n    fs.chmodSync(spawnScript, 0x164);\n    log.debug(\"LongRunningChildProcess.spawn is spawning '\" + command + \"'\");\n    this.child = child_process.spawn(nodePath, commandArgs, spawnOptions);\n    this.dead = false;\n    this._setPid(this.child.pid);\n    this.child.on(\"exit\", (function(_this) {\n      return function(code) {\n        log.debug(\"LongRunningChildProcess: child_process.on 'exit': command=\" + command + \" code=\" + code);\n        if (_this.fout) {\n          return fs.closeSync(_this.fout);\n        }\n      };\n    })(this));\n    return true;\n  };\n\n  LongRunningChildProcess.prototype.kill = function(signal) {\n    var err, pid;\n    if (signal == null) {\n      signal = \"SIGINT\";\n    }\n    log.debug(\"LongRunningChildProcess.kill(signal=\" + signal + \")\");\n    if (!this.dead) {\n      try {\n        if (this.child != null) {\n          this.child.kill(signal);\n        } else {\n          pid = this.getPid();\n          process.kill(pid, signal);\n        }\n        this.dead = true;\n        this.pid = null;\n        return fs.removeSync(this._getPidFilePath());\n      } catch (_error) {\n        err = _error;\n        return log.warn(\"Error: While killing process:\\n\", err);\n      }\n    }\n  };\n\n  return LongRunningChildProcess;\n\n})();\n\nif (process.env.IS_MIRROR === 'true') {\n  sanjo.LongRunningChildProcess.fs = fs;\n  sanjo.LongRunningChildProcess.path = path;\n  sanjo.LongRunningChildProcess.assert = assert;\n  sanjo.LongRunningChildProcess.child_process = child_process;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/main.js                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/* globals LongRunningChildProcess: true */                                                                  // 1\n                                                                                                             // 2\nLongRunningChildProcess = sanjo.LongRunningChildProcess                                                      // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]