[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar h = Package['ihealth:utils'].h;\nvar IH = Package['ihealth:utils'].IH;\nvar Dispatcher = Package['meteorflux:dispatcher'].Dispatcher;\nvar Roles = Package['alanning:roles'].Roles;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar moment = Package['momentjs:moment'].moment;\nvar FastRender = Package['meteorhacks:fast-render'].FastRender;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar MeteorFlux = Package['meteorflux:namespace'].MeteorFlux;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar React = Package['react-runtime'].React;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\n\n/* Package-scope variables */\nvar ChatDispatcher, __coffeescriptShare, Dispatcher;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/dispatcher/dispatcher.js                         //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n                                                                                 // 1\n                                                                                 // 2\nIH.Store = {};  // TODO: move to utils                                           // 3\nIH.Action = {};  // TODO: move to utils                                          // 4\n                                                                                 // 5\nChatDispatcher = new MeteorFlux.Dispatcher();                                    // 6\n                                                                                 // 7\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/stores/messageStore.coffee.js                    //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nIH.Coll.ChatMessages = new Mongo.Collection(\"chat_message\");                     // 2\n                                                                                 //\nIH.Schema.ChatMessages = new SimpleSchema({                                      // 2\n  createdAt: {                                                                   // 5\n    type: Date,                                                                  // 6\n    index: -1,                                                                   // 6\n    autoValue: function() {                                                      // 6\n      if (this.isInsert) {                                                       // 9\n        return new Date();                                                       //\n      } else if (this.isUpsert) {                                                //\n        return {                                                                 //\n          $setOnInsert: new Date()                                               // 12\n        };                                                                       //\n      } else {                                                                   //\n        return this.unset();                                                     //\n      }                                                                          //\n    },                                                                           //\n    denyUpdate: true                                                             // 6\n  },                                                                             //\n  SID: {                                                                         // 5\n    type: String,                                                                // 18\n    label: \"Sender ID\"                                                           // 18\n  },                                                                             //\n  CHID: {                                                                        // 5\n    type: String,                                                                // 22\n    label: \"Channel ID\",                                                         // 22\n    index: true                                                                  // 22\n  },                                                                             //\n  type: {                                                                        // 5\n    type: String,                                                                // 27\n    label: \"Message Type\",                                                       // 27\n    autoValue: function() {                                                      // 27\n      if (!this.isSet) {                                                         // 30\n        return \"txt\";                                                            //\n      }                                                                          //\n    },                                                                           //\n    optional: true                                                               // 27\n  },                                                                             //\n  content: {                                                                     // 5\n    type: String                                                                 // 35\n  }                                                                              //\n});                                                                              //\n                                                                                 //\nIH.Coll.ChatMessages.attachSchema(IH.Schema.ChatMessages);                       // 2\n                                                                                 //\nIH.Coll.ChatMessages.allow({                                                     // 2\n  insert: function(userId, doc) {                                                // 42\n    return userId && userId === doc.SID;                                         //\n  },                                                                             //\n  update: function(userId, doc, fields, modifier) {                              // 42\n    return false;                                                                //\n  },                                                                             //\n  remove: function(userId, doc, fields, modifier) {                              // 42\n    return false;                                                                //\n  },                                                                             //\n  fetch: [\"senderId\"]                                                            // 42\n});                                                                              //\n                                                                                 //\nIH.Store.ChatMessages = {};                                                      // 2\n                                                                                 //\nIH.Store.ChatMessages.dispatchToken = ChatDispatcher.register(function(action) {\n  var insertObj;                                                                 // 62\n  switch (action.type) {                                                         // 62\n    case \"CREATE_NEW_MESSAGE\":                                                   // 62\n      return IH.Coll.ChatMessages.insert(action.message);                        //\n    case \"DOCTOR_JOINED_CHANNEL\":                                                // 62\n      insertObj = {                                                              // 69\n        SID: \"system\",                                                           // 70\n        CHID: action.channelID,                                                  // 70\n        type: \"note\",                                                            // 70\n        content: action.doctor + \" joined channel\"                               // 70\n      };                                                                         //\n      return IH.Coll.ChatMessages.insert(insertObj);                             //\n  }                                                                              // 62\n});                                                                              // 60\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/stores/channelStore.coffee.js                    //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar LastMsgSchema;                                                               // 3\n                                                                                 //\nLastMsgSchema = new SimpleSchema({                                               // 3\n  createdAt: {                                                                   // 4\n    type: Date                                                                   // 5\n  },                                                                             //\n  from: {                                                                        // 4\n    type: String,                                                                // 8\n    label: \"Sender ID\"                                                           // 8\n  },                                                                             //\n  content: {                                                                     // 4\n    type: String                                                                 // 12\n  }                                                                              //\n});                                                                              //\n                                                                                 //\nIH.Coll.ChatChannels = new Mongo.Collection(\"chat_channel\");                     // 3\n                                                                                 //\nIH.Schema.ChatChannels = new SimpleSchema({                                      // 3\n  createdAt: {                                                                   // 18\n    type: Date,                                                                  // 19\n    index: -1,                                                                   // 19\n    autoValue: function() {                                                      // 19\n      if (this.isInsert) {                                                       // 22\n        return new Date();                                                       //\n      } else if (this.isUpsert) {                                                //\n        return {                                                                 //\n          $setOnInsert: new Date()                                               // 25\n        };                                                                       //\n      } else {                                                                   //\n        return this.unset();                                                     //\n      }                                                                          //\n    }                                                                            //\n  },                                                                             //\n  updatedAt: {                                                                   // 18\n    type: Date,                                                                  // 30\n    autoValue: function() {                                                      // 30\n      if (this.isUpdate) {                                                       // 32\n        return new Date();                                                       //\n      }                                                                          //\n    },                                                                           //\n    optional: true,                                                              // 30\n    denyInsert: true                                                             // 30\n  },                                                                             //\n  PID: {                                                                         // 18\n    type: String,                                                                // 38\n    label: \"Patient ID\"                                                          // 38\n  },                                                                             //\n  DID: {                                                                         // 18\n    type: String,                                                                // 42\n    label: \"Primary Doctor of this Channel\"                                      // 42\n  },                                                                             //\n  others: {                                                                      // 18\n    type: [String],                                                              // 46\n    label: \"List of Other Doctors' IDs\",                                         // 46\n    autoValue: function() {                                                      // 46\n      if (this.isInsert && !this.isSet) {                                        // 49\n        return [];                                                               // 50\n      }                                                                          //\n    }                                                                            //\n  },                                                                             //\n  lastMsg: {                                                                     // 18\n    type: LastMsgSchema,                                                         // 53\n    label: \"last message of channel\",                                            // 53\n    optional: true                                                               // 53\n  }                                                                              //\n});                                                                              //\n                                                                                 //\nIH.Coll.ChatChannels.attachSchema(IH.Schema.ChatChannels);                       // 3\n                                                                                 //\nIH.Coll.ChatChannels.allow({                                                     // 3\n  insert: function() {                                                           // 63\n    return true;                                                                 //\n  },                                                                             //\n  update: function() {                                                           // 63\n    return true;                                                                 //\n  },                                                                             //\n  remove: function() {                                                           // 63\n    return false;                                                                //\n  }                                                                              //\n});                                                                              //\n                                                                                 //\nIH.Store.ChatChannels = {                                                        // 3\n  create: function(patient, doctor) {                                            // 75\n    var newChannel;                                                              // 76\n    newChannel = {                                                               // 76\n      PID: patient,                                                              // 77\n      DID: doctor,                                                               // 77\n      others: []                                                                 // 77\n    };                                                                           //\n    return IH.Coll.ChatChannels.insert(newChannel);                              //\n  },                                                                             //\n  addUser: function(channelID, doctor) {                                         // 75\n    return IH.Coll.ChatChannels.update(channelID, {                              //\n      $push: {                                                                   // 83\n        others: doctor                                                           // 83\n      }                                                                          //\n    });                                                                          //\n  },                                                                             //\n  removeUser: function(channelID, doctor) {                                      // 75\n    return IH.Coll.ChatChannels.update(channelID, {                              //\n      $pull: {                                                                   // 86\n        others: doctor                                                           // 86\n      }                                                                          //\n    });                                                                          //\n  },                                                                             //\n  updateLastMsg: function(m) {                                                   // 75\n    var updateMsg;                                                               // 89\n    updateMsg = {                                                                // 89\n      createdAt: new Date(),                                                     // 90\n      from: m.SID,                                                               // 90\n      content: m.content                                                         // 90\n    };                                                                           //\n    return IH.Coll.ChatChannels.update(m.CHID, {                                 //\n      $set: {                                                                    // 94\n        lastMsg: updateMsg                                                       // 94\n      }                                                                          //\n    });                                                                          //\n  }                                                                              //\n};                                                                               //\n                                                                                 //\nIH.Store.ChatChannels.dispatchToken = ChatDispatcher.register(function(action) {\n  switch (action.type) {                                                         // 100\n    case \"NEW_CONTACTS_CREATED\":                                                 // 100\n      return IH.Store.ChatChannels.create(action.patient, action.doctor);        //\n    case \"DOCTOR_JOINED_CHANNEL\":                                                // 100\n      return IH.Store.ChatChannels.addUser(action.channelID, action.doctor);     //\n    case \"DOCTOR_LEFT_CHANNEL\":                                                  // 100\n      return IH.Store.ChatChannels.removeUser(action.channelID, action.doctor);  //\n    case \"USER_ACTIVATE_CHANNEL\":                                                // 100\n      if (Meteor.isClient) {                                                     // 112\n        return Session.set(\"ACTIVE_CHAT_CHANNEL\", action.channelID);             //\n      }                                                                          //\n      break;                                                                     // 111\n    case \"CREATE_NEW_MESSAGE\":                                                   // 100\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken]);             // 116\n      if (Meteor.isClient) {                                                     // 117\n        return IH.Store.ChatChannels.updateLastMsg(action.message);              //\n      }                                                                          //\n  }                                                                              // 100\n});                                                                              // 98\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/stores/statusStore.coffee.js                     //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _fetchAllOtherChannelUsers, _getStatusID;                                    // 2\n                                                                                 //\nIH.Coll.ChatStatus = new Mongo.Collection(\"chat_status\");                        // 2\n                                                                                 //\nIH.Schema.ChatStatus = new SimpleSchema({                                        // 2\n  createdAt: {                                                                   // 5\n    type: Date,                                                                  // 6\n    index: -1,                                                                   // 6\n    autoValue: function() {                                                      // 6\n      if (this.isInsert) {                                                       // 9\n        return new Date();                                                       //\n      } else if (this.isUpsert) {                                                //\n        return {                                                                 //\n          $setOnInsert: new Date()                                               // 12\n        };                                                                       //\n      } else {                                                                   //\n        return this.unset();                                                     //\n      }                                                                          //\n    }                                                                            //\n  },                                                                             //\n  updatedAt: {                                                                   // 5\n    type: Date,                                                                  // 17\n    autoValue: function() {                                                      // 17\n      if (this.isUpdate) {                                                       // 19\n        return new Date();                                                       //\n      }                                                                          //\n    },                                                                           //\n    optional: true,                                                              // 17\n    denyInsert: true                                                             // 17\n  },                                                                             //\n  UID: {                                                                         // 5\n    type: String,                                                                // 25\n    label: \"User ID\"                                                             // 25\n  },                                                                             //\n  CHID: {                                                                        // 5\n    type: String,                                                                // 29\n    label: \"Channel ID\"                                                          // 29\n  },                                                                             //\n  active: {                                                                      // 5\n    type: Boolean,                                                               // 33\n    label: \"Channel is active\",                                                  // 33\n    autoValue: function() {                                                      // 33\n      if (this.isInsert) {                                                       // 36\n        return false;                                                            //\n      }                                                                          //\n    }                                                                            //\n  },                                                                             //\n  numUnread: {                                                                   // 5\n    type: Number,                                                                // 40\n    label: \"Number of unread message per User+Channel\",                          // 40\n    optional: true,                                                              // 40\n    autoValue: function() {                                                      // 40\n      if (this.isInsert) {                                                       // 44\n        return 0;                                                                // 45\n      }                                                                          //\n    }                                                                            //\n  }                                                                              //\n});                                                                              //\n                                                                                 //\nIH.Coll.ChatStatus.attachSchema(IH.Schema.ChatStatus);                           // 2\n                                                                                 //\nIH.Coll.ChatStatus.allow({                                                       // 2\n  insert: function() {                                                           // 59\n    return true;                                                                 //\n  },                                                                             //\n  update: function(userId, doc) {                                                // 59\n    return userId && userId === doc.UID;                                         //\n  },                                                                             //\n  remove: function() {                                                           // 59\n    return false;                                                                //\n  }                                                                              //\n});                                                                              //\n                                                                                 //\n_fetchAllOtherChannelUsers = function(cid, uid) {                                // 2\n  var chnl;                                                                      // 71\n  chnl = IH.Coll.ChatChannels.findOne(cid);                                      // 71\n  return allChannelUsers;                                                        // 74\n};                                                                               // 70\n                                                                                 //\n_getStatusID = function(action) {                                                // 2\n  var channelID, status, statusID;                                               // 77\n  channelID = action.message != null ? action.message.CHID : action.channelID;   // 77\n  status = IH.Coll.ChatStatus.findOne({                                          // 77\n    UID: Meteor.userId(),                                                        // 78\n    CHID: channelID                                                              // 78\n  });                                                                            //\n  if (status != null) {                                                          // 79\n    statusID = status._id;                                                       // 80\n  }                                                                              //\n  return statusID;                                                               // 81\n};                                                                               // 76\n                                                                                 //\nIH.Store.ChatStatus = {                                                          // 2\n  incUnreadCount: function(sid) {                                                // 88\n    var status;                                                                  // 90\n    status = IH.Coll.ChatStatus.findOne(sid);                                    // 90\n    if (!status.active) {                                                        // 91\n      return IH.Coll.ChatStatus.update(sid, {                                    //\n        $inc: {                                                                  // 92\n          numUnread: 1                                                           // 92\n        }                                                                        //\n      });                                                                        //\n    }                                                                            //\n  },                                                                             //\n  clearUnreadCount: function(sid) {                                              // 88\n    return IH.Coll.ChatStatus.update(sid, {                                      //\n      $set: {                                                                    // 95\n        active: true,                                                            // 95\n        numUnread: 0                                                             // 95\n      }                                                                          //\n    });                                                                          //\n  },                                                                             //\n  deActivate: function(sid) {                                                    // 88\n    return IH.Coll.ChatStatus.update(sid, {                                      //\n      $set: {                                                                    // 98\n        active: false                                                            // 98\n      }                                                                          //\n    });                                                                          //\n  }                                                                              //\n};                                                                               //\n                                                                                 //\nIH.Store.ChatStatus.dispatchToken = ChatDispatcher.register(function(action) {   // 2\n  var statusID;                                                                  // 104\n  statusID = _getStatusID(action);                                               // 104\n  if (statusID == null) {                                                        // 105\n    console.error(\"channel status not found\");                                   // 106\n  }                                                                              //\n  switch (action.type) {                                                         // 108\n    case \"CREATE_NEW_MESSAGE\":                                                   // 108\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken]);             // 111\n      return IH.Store.ChatStatus.incUnreadCount(statusID);                       //\n    case \"USER_ACTIVATE_CHANNEL\":                                                // 108\n      return IH.Store.ChatStatus.clearUnreadCount(statusID);                     //\n    case \"USER_LEFT_CHANNEL\":                                                    // 108\n      return IH.Store.ChatStatus.deActivate(statusID);                           //\n  }                                                                              // 108\n});                                                                              // 102\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/actions/channelActions.coffee.js                 //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nIH.Action.ChatChannels = {                                                       // 2\n  setChannelActive: function(channelID) {                                        // 4\n    return ChatDispatcher.dispatch({                                             //\n      type: \"USER_ACTIVATE_CHANNEL\",                                             // 6\n      channelID: channelID                                                       // 6\n    });                                                                          //\n  }                                                                              //\n};                                                                               //\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/actions/messageActions.coffee.js                 //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nIH.Action.ChatMessages = {                                                       // 2\n  createMessage: function(message, channelID) {                                  // 4\n    return ChatDispatcher.dispatch({                                             //\n      type: \"CREATE_NEW_MESSAGE\",                                                // 6\n      message: message                                                           // 6\n    });                                                                          //\n  }                                                                              //\n};                                                                               //\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/actions/statusActions.coffee.js                  //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nIH.Action.ChatStatus = {                                                         // 2\n  activateChannel: function(channelID) {                                         // 4\n    return ChatDispatcher.dispatch({                                             //\n      type: \"USER_ACTIVATE_CHANNEL\",                                             // 6\n      channelID: channelID                                                       // 6\n    });                                                                          //\n  },                                                                             //\n  deActivateChannel: function(channelID) {                                       // 4\n    return ChatDispatcher.dispatch({                                             //\n      type: \"USER_LEFT_CHANNEL\",                                                 // 12\n      channelID: channelID                                                       // 12\n    });                                                                          //\n  }                                                                              //\n};                                                                               //\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/publications.coffee.js                           //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.publish(\"ChatMessageList\", function(channelID, limit) {                   // 2\n  if (!this.userId) {                                                            // 3\n    return this.error(\"Not logged in\");                                          //\n  } else {                                                                       //\n    console.log(limit);                                                          // 7\n    check(channelID, String);                                                    // 7\n    check(limit, Number);                                                        // 7\n    return IH.Coll.ChatMessages.find({                                           //\n      CHID: channelID                                                            // 12\n    }, {                                                                         //\n      sort: {                                                                    // 14\n        createdAt: -1                                                            // 14\n      },                                                                         //\n      limit: limit                                                               // 14\n    });                                                                          //\n  }                                                                              //\n});                                                                              // 2\n                                                                                 //\nMeteor.publishComposite(\"ChatMessageUser\", function(channelID) {                 // 2\n  if (!this.userId) {                                                            // 19\n    return this.error(\"Not logged in\");                                          //\n  } else {                                                                       //\n    check(channelID, String);                                                    // 22\n    return {                                                                     //\n      find: function() {                                                         // 24\n        return IH.Coll.ChatStatus.find({                                         //\n          CHID: channelID                                                        // 25\n        });                                                                      //\n      },                                                                         //\n      children: [                                                                // 24\n        {                                                                        //\n          find: function(status) {                                               // 27\n            return Meteor.users.find({                                           //\n              _id: status.UID                                                    // 29\n            }, {                                                                 //\n              fields: {                                                          // 31\n                \"profile.name\": 1,                                               // 31\n                \"profile.avatar\": 1,                                             // 31\n                \"profile.gender\": 1                                              // 31\n              }                                                                  //\n            });                                                                  //\n          }                                                                      //\n        }, {                                                                     //\n          find: function(status) {                                               // 34\n            return IH.Coll.ChatChannels.find(channelID);                         //\n          }                                                                      //\n        }                                                                        //\n      ]                                                                          //\n    };                                                                           //\n  }                                                                              //\n});                                                                              // 18\n                                                                                 //\nMeteor.publishComposite(\"ChatChannelList\", function() {                          // 2\n  if (!this.userId) {                                                            // 39\n    return this.error(\"Not logged in\");                                          //\n  } else {                                                                       //\n    return {                                                                     //\n      find: function() {                                                         // 42\n        return IH.Coll.ChatStatus.find({                                         //\n          UID: this.userId                                                       // 43\n        });                                                                      //\n      },                                                                         //\n      children: [                                                                // 42\n        {                                                                        //\n          find: function(status) {                                               // 45\n            return IH.Coll.ChatChannels.find(status.CHID);                       //\n          },                                                                     //\n          children: [                                                            // 45\n            {                                                                    //\n              find: function(channel, status) {                                  // 48\n                var uid;                                                         // 49\n                uid = channel.DID === this.userId ? channel.PID : channel.DID;   // 49\n                return Meteor.users.find({                                       //\n                  _id: uid                                                       // 51\n                }, {                                                             //\n                  fields: {                                                      // 53\n                    \"profile.name\": 1,                                           // 53\n                    \"profile.avatar\": 1                                          // 53\n                  }                                                              //\n                });                                                              //\n              }                                                                  //\n            }                                                                    //\n          ]                                                                      //\n        }                                                                        //\n      ]                                                                          //\n    };                                                                           //\n  }                                                                              //\n});                                                                              // 38\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/methods.coffee.js                                //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                                 // 3\n  recallMessage: function(messageId) {                                           // 5\n    var lapse, message, now;                                                     // 6\n    check(messageId, String);                                                    // 6\n    message = Chat.Messages.findOne(messageId);                                  // 6\n    if (!message) {                                                              // 9\n      throw new Meteor.error(\"message doesn't exist\");                           // 10\n    }                                                                            //\n    if (!(this.userId && this.userId === message.from)) {                        // 12\n      throw new Meteor.error(\"user has no right to delete the message\");         // 13\n    } else {                                                                     //\n      now = new Date();                                                          // 19\n      lapse = now - message.createdAt;                                           // 19\n      if (lapse > 60000) {                                                       // 22\n        throw new Meteor.error(\"can't recall a message after 5 minutes\");        // 23\n      } else {                                                                   //\n        return Chat.Messages.remove(messageId);                                  //\n      }                                                                          //\n    }                                                                            //\n  }                                                                              //\n});                                                                              //\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ihealth_chat-engine/temp.coffee.js                                   //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                 // 1\n                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:chat-engine'] = {\n  Dispatcher: Dispatcher\n};\n\n})();\n","servePath":"/packages/ihealth_chat-engine.js","sourceMap":{"version":3,"sources":["/packages/ihealth_chat-engine/dispatcher/dispatcher.js","/packages/ihealth_chat-engine/stores/messageStore.coffee","/packages/ihealth_chat-engine/stores/channelStore.coffee","/packages/ihealth_chat-engine/stores/statusStore.coffee","/packages/ihealth_chat-engine/actions/channelActions.coffee","/packages/ihealth_chat-engine/actions/messageActions.coffee","/packages/ihealth_chat-engine/actions/statusActions.coffee","/packages/ihealth_chat-engine/publications.coffee","/packages/ihealth_chat-engine/methods.coffee","/packages/ihealth_chat-engine/temp.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,qF;;;;;;;;;;;;;;;;;;;ACLA,EAAE,CAAC,IAAI,CAAC,YAAR,GAA2B,SAAK,CAAC,UAAN,CAAiB,cAAjB,CAA3B;;AAAA,EACE,CAAC,MAAM,CAAC,YAAV,GAA6B,iBAE3B;AAAA,aACE;AAAA,UAAM,IAAN;AAAA,IACA,OAAO,EADP;AAAA,IAEA,WAAW;AACT,UAAG,IAAC,SAAJ;eACM,WADN;OAAA,MAEK,IAAG,IAAC,SAAJ;eACH;AAAA,wBAAkB,UAAlB;UADG;OAAA;eAGH,IAAC,MAAD,GAHG;OAHI;IAAA,CAFX;AAAA,IASA,YAAY,IATZ;GADF;AAAA,EAYA,KACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,WADP;GAbF;AAAA,EAgBA,MACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,YADP;AAAA,IAEA,OAAO,IAFP;GAjBF;AAAA,EAqBA,MACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,cADP;AAAA,IAEA,WAAW;AACT,eAAQ,MAAR;eACE,MADF;OADS;IAAA,CAFX;AAAA,IAKA,UAAU,IALV;GAtBF;AAAA,EA6BA,SACE;AAAA,UAAM,MAAN;GA9BF;CAF2B,CAD7B;;AAAA,EAqCE,CAAC,IAAI,CAAC,YAAY,CAAC,YAArB,CAAkC,EAAE,CAAC,MAAM,CAAC,YAA5C,CArCA;;AAAA,EAuCE,CAAC,IAAI,CAAC,YAAY,CAAC,KAArB,CACE;AAAA,UAAQ,SAAC,MAAD,EAAS,GAAT;WACN,UAAW,WAAU,GAAG,CAAC,IADnB;EAAA,CAAR;AAAA,EAGA,QAAQ,SAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAsB,QAAtB;WACN,MADM;EAAA,CAHR;AAAA,EAMA,QAAQ,SAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAsB,QAAtB;WACN,MADM;EAAA,CANR;AAAA,EASA,OAAO,CAAC,UAAD,CATP;CADF,CAvCA;;AAAA,EAwDE,CAAC,KAAK,CAAC,YAAT,GAAwB,EAxDxB;;AAAA,EA0DE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAtB,GAAsC,cAAc,CAAC,QAAf,CAAwB,SAAC,MAAD;AAE5D;AAAA,UAAO,MAAM,CAAC,IAAd;AAAA,SAEO,oBAFP;aAGI,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,MAAM,CAAC,OAAnC,EAHJ;AAAA,SAKO,uBALP;AAOI,kBACE;AAAA,aAAK,QAAL;AAAA,QACA,MAAM,MAAM,CAAC,SADb;AAAA,QAEA,MAAM,MAFN;AAAA,QAGA,SAAY,MAAM,CAAC,MAAR,GAAe,iBAH1B;OADF;aAKA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,SAA5B,EAZJ;AAAA,GAF4D;AAAA,CAAxB,CA1DtC;;;;;;;;;;;;;;;;;;;;ACCA;;AAAA,gBAAoB,iBAClB;AAAA,aACE;AAAA,UAAM,IAAN;GADF;AAAA,EAGA,MACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,WADP;GAJF;AAAA,EAOA,SACE;AAAA,UAAM,MAAN;GARF;CADkB,CAApB;;AAAA,EAYE,CAAC,IAAI,CAAC,YAAR,GAA2B,SAAK,CAAC,UAAN,CAAiB,cAAjB,CAZ3B;;AAAA,EAaE,CAAC,MAAM,CAAC,YAAV,GAA6B,iBAE3B;AAAA,aACE;AAAA,UAAM,IAAN;AAAA,IACA,OAAO,EADP;AAAA,IAEA,WAAW;AACT,UAAG,IAAC,SAAJ;eACM,WADN;OAAA,MAEK,IAAG,IAAC,SAAJ;eACH;AAAA,wBAAkB,UAAlB;UADG;OAAA;eAGH,IAAC,MAAD,GAHG;OAHI;IAAA,CAFX;GADF;AAAA,EAWA,WACE;AAAA,UAAM,IAAN;AAAA,IACA,WAAW;AACT,UAAG,IAAC,SAAJ;eACM,WADN;OADS;IAAA,CADX;AAAA,IAIA,UAAU,IAJV;AAAA,IAKA,YAAY,IALZ;GAZF;AAAA,EAmBA,KACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,YADP;GApBF;AAAA,EAuBA,KACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,gCADP;GAxBF;AAAA,EA2BA,QACE;AAAA,UAAM,CAAE,MAAF,CAAN;AAAA,IACA,OAAO,4BADP;AAAA,IAEA,WAAW;AACT,UAAG,IAAC,SAAD,IAAc,KAAK,MAAtB;AACE,eAAO,EAAP,CADF;OADS;IAAA,CAFX;GA5BF;AAAA,EAkCA,SACE;AAAA,UAAM,aAAN;AAAA,IACA,OAAO,yBADP;AAAA,IAEA,UAAU,IAFV;GAnCF;CAF2B,CAb7B;;AAAA,EAuDE,CAAC,IAAI,CAAC,YAAY,CAAC,YAArB,CAAkC,EAAE,CAAC,MAAM,CAAC,YAA5C,CAvDA;;AAAA,EA0DE,CAAC,IAAI,CAAC,YAAY,CAAC,KAArB,CAEE;AAAA,UAAQ;WACN,KADM;EAAA,CAAR;AAAA,EAGA,QAAQ;WACN,KADM;EAAA,CAHR;AAAA,EAMA,QAAQ;WACN,MADM;EAAA,CANR;CAFF,CA1DA;;AAAA,EAsEE,CAAC,KAAK,CAAC,YAAT,GAEE;AAAA,UAAQ,SAAC,OAAD,EAAU,MAAV;AACN;AAAA,iBACE;AAAA,WAAK,OAAL;AAAA,MACA,KAAK,MADL;AAAA,MAEA,QAAQ,EAFR;KADF;WAIA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,UAA5B,EALM;EAAA,CAAR;AAAA,EAOA,SAAS,SAAC,SAAD,EAAY,MAAZ;WACP,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,SAA5B,EAAuC;AAAA,MAAC,OAAO;AAAA,QAAC,QAAQ,MAAT;OAAR;KAAvC,EADO;EAAA,CAPT;AAAA,EAUA,YAAY,SAAC,SAAD,EAAY,MAAZ;WACV,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,SAA5B,EAAuC;AAAA,MAAC,OAAO;AAAA,QAAC,QAAQ,MAAT;OAAR;KAAvC,EADU;EAAA,CAVZ;AAAA,EAaA,eAAe,SAAC,CAAD;AACb;AAAA,gBACE;AAAA,iBAAe,UAAf;AAAA,MACA,MAAM,CAAC,CAAC,GADR;AAAA,MAEA,SAAS,CAAC,CAAC,OAFX;KADF;WAKA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,CAAC,CAAC,IAA9B,EAAoC;AAAA,MAAC,MAAM;AAAA,QAAC,SAAS,SAAV;OAAP;KAApC,EANa;EAAA,CAbf;CAxEF;;AAAA,EA+FE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAtB,GAAsC,cAAc,CAAC,QAAf,CAAwB,SAAC,MAAD;AAE5D,UAAO,MAAM,CAAC,IAAd;AAAA,SAEO,sBAFP;aAGI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,MAAtB,CAA6B,MAAM,CAAC,OAApC,EAA6C,MAAM,CAAC,MAApD,EAHJ;AAAA,SAKO,uBALP;aAMI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,OAAtB,CAA8B,MAAM,CAAC,SAArC,EAAgD,MAAM,CAAC,MAAvD,EANJ;AAAA,SAQO,qBARP;aASI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,UAAtB,CAAiC,MAAM,CAAC,SAAxC,EAAmD,MAAM,CAAC,MAA1D,EATJ;AAAA,SAWO,uBAXP;AAYI,UAAG,MAAM,CAAC,QAAV;eACE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,MAAM,CAAC,SAA1C,EADF;OAZJ;AAWO;AAXP,SAeO,oBAfP;AAgBI,oBAAc,CAAC,OAAf,CAAuB,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAvB,CAAvB;AACA,UAAG,MAAM,CAAC,QAAV;eACE,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAtB,CAAoC,MAAM,CAAC,OAA3C,EADF;OAjBJ;AAAA,GAF4D;AAAA,CAAxB,CA/FtC;;;;;;;;;;;;;;;;;;;;ACDA;;AAAA,EAAE,CAAC,IAAI,CAAC,UAAR,GAAyB,SAAK,CAAC,UAAN,CAAiB,aAAjB,CAAzB;;AAAA,EACE,CAAC,MAAM,CAAC,UAAV,GAA2B,iBAEzB;AAAA,aACE;AAAA,UAAM,IAAN;AAAA,IACA,OAAO,EADP;AAAA,IAEA,WAAW;AACT,UAAG,IAAC,SAAJ;eACM,WADN;OAAA,MAEK,IAAG,IAAC,SAAJ;eACH;AAAA,wBAAkB,UAAlB;UADG;OAAA;eAGH,IAAC,MAAD,GAHG;OAHI;IAAA,CAFX;GADF;AAAA,EAWA,WACE;AAAA,UAAM,IAAN;AAAA,IACA,WAAW;AACT,UAAG,IAAC,SAAJ;eACM,WADN;OADS;IAAA,CADX;AAAA,IAIA,UAAU,IAJV;AAAA,IAKA,YAAY,IALZ;GAZF;AAAA,EAmBA,KACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,SADP;GApBF;AAAA,EAuBA,MACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,YADP;GAxBF;AAAA,EA2BA,QACE;AAAA,UAAM,OAAN;AAAA,IACA,OAAO,mBADP;AAAA,IAEA,WAAW;AACT,UAAG,IAAC,SAAJ;eACE,MADF;OADS;IAAA,CAFX;GA5BF;AAAA,EAkCA,WACE;AAAA,UAAM,MAAN;AAAA,IACA,OAAO,2CADP;AAAA,IAEA,UAAU,IAFV;AAAA,IAGA,WAAW;AACT,UAAG,IAAC,SAAJ;AACE,eAAO,CAAP,CADF;OADS;IAAA,CAHX;GAnCF;CAFyB,CAD3B;;AAAA,EAoDE,CAAC,IAAI,CAAC,UAAU,CAAC,YAAnB,CAAgC,EAAE,CAAC,MAAM,CAAC,UAA1C,CApDA;;AAAA,EAuDE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAnB,CAEE;AAAA,UAAQ;WACN,KADM;EAAA,CAAR;AAAA,EAGA,QAAQ,SAAC,MAAD,EAAS,GAAT;WACN,UAAW,WAAU,GAAG,CAAC,IADnB;EAAA,CAHR;AAAA,EAMA,QAAQ;WACN,MADM;EAAA,CANR;CAFF,CAvDA;;AAAA,0BAoEA,GAA6B,SAAC,GAAD,EAAM,GAAN;AAC3B;AAAA,SAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,OAArB,CAA6B,GAA7B,CAAP;AAGA,SAAO,eAAP,CAJ2B;AAAA,CApE7B;;AAAA,YA0EA,GAAe,SAAC,MAAD;AACb;AAAA,cAAe,sBAAH,GAAwB,MAAM,CAAC,OAAO,CAAC,IAAvC,GAAiD,MAAM,CAAC,SAApE;AAAA,EACA,SAAS,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAnB,CAA2B;AAAA,IAAC,KAAK,MAAM,CAAC,MAAP,EAAN;AAAA,IAAuB,MAAM,SAA7B;GAA3B,CADT;AAEA,MAAG,cAAH;AACE,eAAW,MAAM,CAAC,GAAlB,CADF;GAFA;AAIA,SAAO,QAAP,CALa;AAAA,CA1Ef;;AAAA,EAoFE,CAAC,KAAK,CAAC,UAAT,GAEE;AAAA,kBAAgB,SAAC,GAAD;AAEd;AAAA,aAAS,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAnB,CAA2B,GAA3B,CAAT;AACA,eAAa,CAAC,MAAd;aACE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAnB,CAA0B,GAA1B,EAA+B;AAAA,QAAC,MAAM;AAAA,UAAC,WAAW,CAAZ;SAAP;OAA/B,EADF;KAHc;EAAA,CAAhB;AAAA,EAMA,kBAAkB,SAAC,GAAD;WAChB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAnB,CAA0B,GAA1B,EAA+B;AAAA,MAAC,MAAM;AAAA,QAAC,QAAQ,IAAT;AAAA,QAAe,WAAW,CAA1B;OAAP;KAA/B,EADgB;EAAA,CANlB;AAAA,EASA,YAAY,SAAC,GAAD;WACV,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAnB,CAA0B,GAA1B,EAA+B;AAAA,MAAC,MAAM;AAAA,QAAC,QAAQ,KAAT;OAAP;KAA/B,EADU;EAAA,CATZ;CAtFF;;AAAA,EAoGE,CAAC,KAAK,CAAC,UAAU,CAAC,aAApB,GAAoC,cAAc,CAAC,QAAf,CAAwB,SAAC,MAAD;AAE1D;AAAA,aAAW,aAAa,MAAb,CAAX;AACA,MAAO,gBAAP;AACE,WAAO,CAAC,KAAR,CAAc,0BAAd,EADF;GADA;AAIA,UAAO,MAAM,CAAC,IAAd;AAAA,SAEO,oBAFP;AAGI,oBAAc,CAAC,OAAf,CAAuB,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAvB,CAAvB;aACA,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,cAApB,CAAmC,QAAnC,EAJJ;AAAA,SAMO,uBANP;aAOI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,gBAApB,CAAqC,QAArC,EAPJ;AAAA,SASO,mBATP;aAUI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,UAApB,CAA+B,QAA/B,EAVJ;AAAA,GAN0D;AAAA,CAAxB,CApGpC;;;;;;;;;;;;;;;;;;;;ACAA,EAAE,CAAC,MAAM,CAAC,YAAV,GAEE;AAAA,oBAAkB,SAAC,SAAD;WAChB,cAAc,CAAC,QAAf,CACE;AAAA,YAAM,uBAAN;AAAA,MACA,WAAW,SADX;KADF,EADgB;EAAA,CAAlB;CAFF;;;;;;;;;;;;;;;;;;;;ACAA,EAAE,CAAC,MAAM,CAAC,YAAV,GAEE;AAAA,iBAAe,SAAC,OAAD,EAAU,SAAV;WACb,cAAc,CAAC,QAAf,CACE;AAAA,YAAM,oBAAN;AAAA,MACA,SAAS,OADT;KADF,EADa;EAAA,CAAf;CAFF;;;;;;;;;;;;;;;;;;;;ACAA,EAAE,CAAC,MAAM,CAAC,UAAV,GAEE;AAAA,mBAAiB,SAAC,SAAD;WACf,cAAc,CAAC,QAAf,CACE;AAAA,YAAM,uBAAN;AAAA,MACA,WAAW,SADX;KADF,EADe;EAAA,CAAjB;AAAA,EAMA,mBAAmB,SAAC,SAAD;WACjB,cAAc,CAAC,QAAf,CACE;AAAA,YAAM,mBAAN;AAAA,MACA,WAAW,SADX;KADF,EADiB;EAAA,CANnB;CAFF;;;;;;;;;;;;;;;;;;;;ACAA,MAAM,CAAC,OAAP,CAAe,iBAAf,EAAkC,SAAC,SAAD,EAAY,KAAZ;AAChC,WAAQ,OAAR;WACE,IAAC,MAAD,CAAO,eAAP,EADF;GAAA;AAIE,WAAO,CAAC,GAAR,CAAY,KAAZ;AAAA,IACA,MAAM,SAAN,EAAiB,MAAjB,CADA;AAAA,IAEA,MAAM,KAAN,EAAa,MAAb,CAFA;WAIA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAArB,CACE;AAAA,YAAM,SAAN;KADF,EAGE;AAAA,YAAM;AAAA,QAAE,WAAW,EAAb;OAAN;AAAA,MACA,OAAO,KADP;KAHF,EARF;GADgC;AAAA,CAAlC;;AAAA,MAgBM,CAAC,gBAAP,CAAwB,iBAAxB,EAA2C,SAAC,SAAD;AACzC,WAAQ,OAAR;WACE,IAAC,MAAD,CAAO,eAAP,EADF;GAAA;AAGE,UAAM,SAAN,EAAiB,MAAjB;WAEA;AAAA,YAAM;eACJ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAnB,CAAwB;AAAA,UAAC,MAAM,SAAP;SAAxB,EADI;MAAA,CAAN;AAAA,MAEA,UAAU;QACR;AAAA,gBAAM,SAAC,MAAD;mBACJ,MAAM,CAAC,KAAK,CAAC,IAAb,CACE;AAAA,mBAAK,MAAM,CAAC,GAAZ;aADF,EAGE;AAAA,sBAAQ;AAAA,gBAAC,gBAAe,CAAhB;AAAA,gBAAmB,kBAAiB,CAApC;AAAA,gBAAsC,kBAAiB,CAAvD;eAAR;aAHF,EADI;UAAA,CAAN;SADQ,EAQR;AAAA,gBAAM,SAAC,MAAD;mBACJ,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAArB,CAA0B,SAA1B,EADI;UAAA,CAAN;SARQ;OAFV;MALF;GADyC;AAAA,CAA3C,CAhBA;;AAAA,MAoCM,CAAC,gBAAP,CAAwB,iBAAxB,EAA2C;AACzC,WAAQ,OAAR;WACE,IAAC,MAAD,CAAO,eAAP,EADF;GAAA;WAGE;AAAA,YAAM;eACJ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAnB,CAAwB;AAAA,UAAC,KAAI,IAAC,OAAN;SAAxB,EADI;MAAA,CAAN;AAAA,MAEA,UAAU;QACR;AAAA,gBAAM,SAAC,MAAD;mBACJ,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAArB,CAA0B,MAAM,CAAC,IAAjC,EADI;UAAA,CAAN;AAAA,UAEA,UAAU;YACR;AAAA,oBAAM,SAAC,OAAD,EAAU,MAAV;AACJ;AAAA,sBAAS,OAAO,CAAC,GAAR,KAAe,IAAC,OAAnB,GAA+B,OAAO,CAAC,GAAvC,GAAgD,OAAO,CAAC,GAA9D;uBACA,MAAM,CAAC,KAAK,CAAC,IAAb,CACE;AAAA,uBAAK,GAAL;iBADF,EAGE;AAAA,0BAAQ;AAAA,oBAAC,gBAAe,CAAhB;AAAA,oBAAkB,kBAAiB,CAAnC;mBAAR;iBAHF,EAFI;cAAA,CAAN;aADQ;WAFV;SADQ;OAFV;MAHF;GADyC;AAAA,CAA3C,CApCA;;;;;;;;;;;;;;;;;;;;ACCA,MAAM,CAAC,OAAP,CAEE;AAAA,iBAAe,SAAC,SAAD;AACb;AAAA,UAAM,SAAN,EAAiB,MAAjB;AAAA,IAEA,UAAU,IAAI,CAAC,QAAQ,CAAC,OAAd,CAAsB,SAAtB,CAFV;AAGA;AACE,YAAU,UAAM,CAAC,KAAP,CAAa,uBAAb,CAAV,CADF;KAHA;AAMA,UAAQ,IAAC,OAAD,IAAY,IAAC,OAAD,KAAW,OAAO,CAAC,IAAhC,CAAP;AACE,YAAU,UAAM,CAAC,KAAP,CAAa,yCAAb,CAAV,CADF;KAAA;AAOE,YAAU,UAAV;AAAA,MACA,QAAQ,MAAM,OAAO,CAAC,SADtB;AAGA,UAAG,QAAQ,KAAX;AACE,cAAU,UAAM,CAAC,KAAP,CAAa,wCAAb,CAAV,CADF;OAAA;eAGE,IAAI,CAAC,QAAQ,CAAC,MAAd,CAAqB,SAArB,EAHF;OAVF;KAPa;EAAA,CAAf;CAFF;;;;;;;;;;;;;;;;;;;;ACFA","file":"/packages/ihealth_chat-engine.js","sourcesContent":["\n\nIH.Store = {};  // TODO: move to utils\nIH.Action = {};  // TODO: move to utils\n\nChatDispatcher = new MeteorFlux.Dispatcher();\n","\nIH.Coll.ChatMessages = new Mongo.Collection \"chat_message\"\nIH.Schema.ChatMessages = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n    denyUpdate: true\n\n  SID:\n    type: String\n    label: \"Sender ID\"\n\n  CHID:\n    type: String\n    label: \"Channel ID\"\n    index: true\n\n  type:\n    type: String\n    label: \"Message Type\"    # \"txt\", \"img\", \"file\", \"note\", \"audio\", \"video\", etc\n    autoValue: ->\n      unless @isSet\n        \"txt\"\n    optional: true\n\n  content:\n    type: String    # ?\n\n\n\nIH.Coll.ChatMessages.attachSchema IH.Schema.ChatMessages\n\nIH.Coll.ChatMessages.allow\n  insert: (userId, doc) ->\n    userId and userId is doc.SID\n\n  update: (userId, doc, fields, modifier) ->\n    false\n\n  remove: (userId, doc, fields, modifier) ->\n    false\n\n  fetch: [\"senderId\"]\n\n#\n#IH.Coll.ChatMessages.before.insert (userId, doc) ->\n#  _.extend doc, {from: userId, read: false}\n#  return doc\n\nIH.Store.ChatMessages = {}\n\nIH.Store.ChatMessages.dispatchToken = ChatDispatcher.register (action)->\n\n  switch action.type\n\n    when \"CREATE_NEW_MESSAGE\"\n      IH.Coll.ChatMessages.insert(action.message)\n\n    when \"DOCTOR_JOINED_CHANNEL\"\n#      username =  # need to fetch username from ID\n      insertObj =\n        SID: \"system\"\n        CHID: action.channelID\n        type: \"note\"\n        content: \"#{action.doctor} joined channel\"\n      IH.Coll.ChatMessages.insert(insertObj)\n\n\n","\n\nLastMsgSchema = new SimpleSchema\n  createdAt:\n    type: Date\n\n  from:\n    type: String\n    label: \"Sender ID\"\n\n  content:\n    type: String\n\n\nIH.Coll.ChatChannels = new Mongo.Collection(\"chat_channel\")\nIH.Schema.ChatChannels = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n\n  updatedAt:\n    type: Date\n    autoValue: ->\n      if @isUpdate\n        new Date()\n    optional: true\n    denyInsert: true\n\n  PID:\n    type: String\n    label: \"Patient ID\"\n\n  DID:\n    type: String\n    label: \"Primary Doctor of this Channel\"\n\n  others:\n    type: [ String ]\n    label: \"List of Other Doctors' IDs\"\n    autoValue: ->\n      if @isInsert and not @isSet\n        return []\n\n  lastMsg:\n    type: LastMsgSchema\n    label: \"last message of channel\"\n    optional: true\n\n\nIH.Coll.ChatChannels.attachSchema IH.Schema.ChatChannels\n\n\nIH.Coll.ChatChannels.allow\n\n  insert: ->\n    true\n\n  update: ->\n    true\n\n  remove: ->\n    false\n\n\nIH.Store.ChatChannels =\n\n  create: (patient, doctor) ->\n    newChannel =\n      PID: patient\n      DID: doctor\n      others: []\n    IH.Coll.ChatChannels.insert(newChannel)\n\n  addUser: (channelID, doctor) ->\n    IH.Coll.ChatChannels.update(channelID, {$push: {others: doctor}})\n\n  removeUser: (channelID, doctor) ->\n    IH.Coll.ChatChannels.update(channelID, {$pull: {others: doctor}})\n\n  updateLastMsg: (m) ->\n    updateMsg =\n      createdAt: new Date()\n      from: m.SID\n      content: m.content\n\n    IH.Coll.ChatChannels.update(m.CHID, {$set: {lastMsg: updateMsg}})\n\n\n# dispatcher token\nIH.Store.ChatChannels.dispatchToken = ChatDispatcher.register (action)->\n\n  switch action.type\n\n    when \"NEW_CONTACTS_CREATED\"\n      IH.Store.ChatChannels.create(action.patient, action.doctor)\n\n    when \"DOCTOR_JOINED_CHANNEL\"\n      IH.Store.ChatChannels.addUser(action.channelID, action.doctor)\n\n    when \"DOCTOR_LEFT_CHANNEL\"\n      IH.Store.ChatChannels.removeUser(action.channelID, action.doctor)\n\n    when \"USER_ACTIVATE_CHANNEL\"\n      if Meteor.isClient\n        Session.set(\"ACTIVE_CHAT_CHANNEL\", action.channelID)\n\n    when \"CREATE_NEW_MESSAGE\"\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken])\n      if Meteor.isClient\n        IH.Store.ChatChannels.updateLastMsg(action.message)\n","\nIH.Coll.ChatStatus = new Mongo.Collection(\"chat_status\")\nIH.Schema.ChatStatus = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n\n  updatedAt:\n    type: Date\n    autoValue: ->\n      if @isUpdate\n        new Date()\n    optional: true\n    denyInsert: true\n\n  UID:\n    type: String\n    label: \"User ID\"\n\n  CHID:\n    type: String\n    label: \"Channel ID\"\n\n  active:\n    type: Boolean\n    label: \"Channel is active\"\n    autoValue: ->\n      if @isInsert\n        false\n\n  numUnread:\n    type: Number\n    label: \"Number of unread message per User+Channel\"\n    optional: true\n    autoValue: ->\n      if @isInsert\n        return 0\n\n\n\n#TODO: put in users collections (related to this.active)\n#  status:\n#    type: String\n#    label: \"\"\n\nIH.Coll.ChatStatus.attachSchema IH.Schema.ChatStatus\n\n\nIH.Coll.ChatStatus.allow\n\n  insert: ->\n    true\n\n  update: (userId, doc) ->\n    userId and userId is doc.UID\n\n  remove: ->\n    false\n\n# methods\n\n_fetchAllOtherChannelUsers = (cid, uid) ->\n  chnl = IH.Coll.ChatChannels.findOne(cid)\n#   _.filter allChannelUsers, (user) ->\n#    return user isnt cid\n  return allChannelUsers\n\n_getStatusID = (action) ->\n  channelID = if action.message? then action.message.CHID else action.channelID\n  status = IH.Coll.ChatStatus.findOne({UID: Meteor.userId(), CHID: channelID})\n  if status?\n    statusID = status._id\n  return statusID\n\n\n# TODO: sid should be a list of all user_status in this channel\n\nIH.Store.ChatStatus =\n\n  incUnreadCount: (sid) ->\n    # _fetchAllOtherChannelUsers (except uid)\n    status = IH.Coll.ChatStatus.findOne(sid)\n    unless status.active\n      IH.Coll.ChatStatus.update(sid, {$inc: {numUnread: 1}})\n\n  clearUnreadCount: (sid) ->\n    IH.Coll.ChatStatus.update(sid, {$set: {active: true, numUnread: 0}})\n\n  deActivate: (sid) ->\n    IH.Coll.ChatStatus.update(sid, {$set: {active: false}})\n\n\n# dispatcher token\nIH.Store.ChatStatus.dispatchToken = ChatDispatcher.register (action)->\n\n  statusID = _getStatusID(action)\n  unless statusID?\n    console.error \"channel status not found\"\n\n  switch action.type\n\n    when \"CREATE_NEW_MESSAGE\"\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken])\n      IH.Store.ChatStatus.incUnreadCount(statusID)\n\n    when \"USER_ACTIVATE_CHANNEL\"\n      IH.Store.ChatStatus.clearUnreadCount(statusID)\n\n    when \"USER_LEFT_CHANNEL\"\n      IH.Store.ChatStatus.deActivate(statusID)\n\n\n\n","\nIH.Action.ChatChannels =\n\n  setChannelActive: (channelID) ->\n    ChatDispatcher.dispatch(\n      type: \"USER_ACTIVATE_CHANNEL\"\n      channelID: channelID\n    )\n\n# TODO: RequestToAddUser","\nIH.Action.ChatMessages =\n\n  createMessage: (message, channelID) ->\n    ChatDispatcher.dispatch(\n      type: \"CREATE_NEW_MESSAGE\"\n      message: message\n#      channelID: channelID\n    )","\nIH.Action.ChatStatus =\n\n  activateChannel: (channelID)->\n    ChatDispatcher.dispatch(\n      type: \"USER_ACTIVATE_CHANNEL\"\n      channelID: channelID\n    )\n\n  deActivateChannel: (channelID)->\n    ChatDispatcher.dispatch(\n      type: \"USER_LEFT_CHANNEL\"\n      channelID: channelID\n    )","\nMeteor.publish \"ChatMessageList\", (channelID, limit)->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n\n    console.log limit\n    check(channelID, String)\n    check(limit, Number)\n\n    IH.Coll.ChatMessages.find(\n      CHID: channelID\n    ,\n      sort: { createdAt: -1 }\n      limit: limit\n    )\n\nMeteor.publishComposite \"ChatMessageUser\", (channelID)->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n    check(channelID, String)\n\n    find: ->\n      IH.Coll.ChatStatus.find({CHID: channelID})\n    children: [\n      find: (status) ->\n        Meteor.users.find(\n          _id: status.UID\n        ,\n          fields: {\"profile.name\":1, \"profile.avatar\":1,\"profile.gender\":1}\n        )\n    ,\n      find: (status) ->\n        IH.Coll.ChatChannels.find(channelID)\n    ]\n\nMeteor.publishComposite \"ChatChannelList\", ->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n    find: ->\n      IH.Coll.ChatStatus.find({UID:@userId})\n    children: [\n      find: (status)->\n        IH.Coll.ChatChannels.find(status.CHID)\n      children: [\n        find: (channel, status)->\n          uid = if channel.DID is @userId then channel.PID else channel.DID   # temp solutions\n          Meteor.users.find(\n            _id: uid\n          ,\n            fields: {\"profile.name\":1,\"profile.avatar\":1}\n          )\n      ]\n    ]\n","\n\nMeteor.methods\n\n  recallMessage: (messageId) ->\n    check(messageId, String)\n\n    message = Chat.Messages.findOne(messageId)\n    unless message\n      throw new Meteor.error(\"message doesn't exist\")\n\n    unless (@userId and @userId is message.from)\n      throw new Meteor.error(\"user has no right to delete the message\")\n\n    # In Healthcare settings, doctors or patients,\n    # should be responsible for the contents they send.\n    # They should not be able to recall history messages\n    else\n      now = new Date()\n      lapse = now - message.createdAt         # TODO: h.getTimeDifferentByMinutes()\n\n      if lapse > 60000\n        throw new Meteor.error(\"can't recall a message after 5 minutes\")\n      else\n        Chat.Messages.remove(messageId)","#\n#\n#Meteor.startup ->\n#\n#  if Meteor.isServer\n#\n#    patient =\n#      username: \"patient\"\n#      password: \"test\"\n#      profile:\n#        name: \"Patient\"\n#        gender: \"male\"\n#        avatar: \"/assets/examples/avatar\"+String(Math.floor(Math.random()*9)+1)+\".jpg\"\n#\n#    doctor =\n#      username: \"doctor\"\n#      password: \"test\"\n#      profile:\n#        name: \"Doctor\"\n#        gender: \"male\"\n#        avatar: \"/assets/examples/avatar\"+String(Math.floor(Math.random()*9)+1)+\".jpg\"\n#\n#    if IH.Coll.ChatChannels.find().count() is 0 || IH.Coll.ChatStatus.find().count() is 0\n#      patientId = Accounts.createUser(patient)\n#      doctorId = Accounts.createUser(doctor)\n#\n#      initObj =\n#        PID: patientId\n#        DID: doctorId\n#\n#      chid = IH.Coll.ChatChannels.insert(initObj)\n#\n#      patientStatus =\n#        UID: patientId\n#        CHID: chid\n#\n#      doctorStatus =\n#        UID: doctorId\n#        CHID: chid\n#\n#      IH.Coll.ChatStatus.insert(patientStatus)\n#      IH.Coll.ChatStatus.insert(doctorStatus)\n"]}}]