[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar DefaultRoutes = Package['ihealth:utils'].DefaultRoutes;\nvar h = Package['ihealth:utils'].h;\nvar IH = Package['ihealth:utils'].IH;\nvar RC = Package['ihealth:framework-engine'].RC;\nvar React = Package['react-runtime'].React;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar Roles = Package['alanning:roles'].Roles;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar moment = Package['momentjs:moment'].moment;\nvar FastRender = Package['meteorhacks:fast-render'].FastRender;\nvar __init_fast_render = Package['meteorhacks:fast-render'].__init_fast_render;\nvar FastClick = Package.fastclick.FastClick;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar RC;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/ihealth_framework-mobile/startup.js                                                                   //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  // 1\nif (Meteor.isCordova) {                                                                                           // 2\n                                                                                                                  // 3\n  Meteor.startup( function() {                                                                                    // 4\n                                                                                                                  // 5\n    // Back Handler                                                                                               // 6\n    document.addEventListener(\"backbutton\", function(e){                                                          // 7\n      e.preventDefault()                                                                                          // 8\n      if (FlowRouter.current().path==\"/\") {                                                                       // 9\n        navigator.app.exitApp()                                                                                   // 10\n      } else {                                                                                                    // 11\n        FlowRouter.BackButton = true                                                                              // 12\n        navigator.app.backHistory()                                                                               // 13\n      }                                                                                                           // 14\n    }, false)                                                                                                     // 15\n                                                                                                                  // 16\n    // Important : Meta                                                                                           // 17\n    var metaTag=document.createElement('meta');                                                                   // 18\n    metaTag.name = \"viewport\"                                                                                     // 19\n    metaTag.content = \"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\"                       // 20\n    document.getElementsByTagName('head')[0].appendChild(metaTag)                                                 // 21\n                                                                                                                  // 22\n  })                                                                                                              // 23\n                                                                                                                  // 24\n}                                                                                                                 // 25\n                                                                                                                  // 26\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/ihealth_framework-mobile/RC/swipe/swipe.jsx                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  //\n/*                                                                                                                //\n * Swipe 2.0.0                                                                                                    //\n * Brad Birdsall                                                                                                  //\n * https://github.com/thebird/Swipe                                                                               //\n * Copyright 2013-2015, MIT License                                                                               //\n *                                                                                                                //\n*/                                                                                                                //\nvar SwipeJS = function (container, options) {                                                                     // 9\n  // utilities                                                                                                    //\n  var noop = function () {}; // simple no operation function                                                      // 11\n  var offloadFn = function (fn) {                                                                                 // 12\n    setTimeout(fn || noop, 0);                                                                                    // 12\n  }; // offload a functions execution                                                                             //\n                                                                                                                  //\n  // check browser capabilities                                                                                   //\n  var browser = {                                                                                                 // 15\n    addEventListener: !!window.addEventListener,                                                                  // 16\n    touch: 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch,                 // 17\n    transitions: (function (temp) {                                                                               // 18\n      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];     // 19\n      for (var i in babelHelpers.sanitizeForInObject(props)) if (temp.style[props[i]] !== undefined) return true;\n      return false;                                                                                               // 21\n    })(document.createElement('swipe'))                                                                           //\n  };                                                                                                              //\n                                                                                                                  //\n  // quit if no root element                                                                                      //\n  if (!container) return;                                                                                         // 26\n  var element = container.children[0];                                                                            // 27\n  var slides, slidePos, width, length;                                                                            // 28\n  options = options || {};                                                                                        // 29\n  var index = parseInt(options.startSlide, 10) || 0;                                                              // 30\n  var speed = options.speed || 300;                                                                               // 31\n  options.continuous = options.continuous !== undefined ? options.continuous : true;                              // 32\n                                                                                                                  //\n  function setup() {                                                                                              // 34\n                                                                                                                  //\n    // cache slides                                                                                               //\n    slides = element.children;                                                                                    // 37\n    length = slides.length;                                                                                       // 38\n                                                                                                                  //\n    // set continuous to false if only one slide                                                                  //\n    if (slides.length < 2) options.continuous = false;                                                            // 41\n                                                                                                                  //\n    //special case if two slides                                                                                  //\n    if (browser.transitions && options.continuous && slides.length < 3) {                                         // 44\n      element.appendChild(slides[0].cloneNode(true));                                                             // 45\n      element.appendChild(element.children[1].cloneNode(true));                                                   // 46\n      slides = element.children;                                                                                  // 47\n    }                                                                                                             //\n                                                                                                                  //\n    // create an array to store current positions of each slide                                                   //\n    slidePos = new Array(slides.length);                                                                          // 51\n                                                                                                                  //\n    // determine width of each slide                                                                              //\n    width = container.getBoundingClientRect().width || container.offsetWidth;                                     // 54\n                                                                                                                  //\n    element.style.width = slides.length * width + 'px';                                                           // 56\n                                                                                                                  //\n    // stack elements                                                                                             //\n    var pos = slides.length;                                                                                      // 59\n    while (pos--) {                                                                                               // 60\n                                                                                                                  //\n      var slide = slides[pos];                                                                                    // 62\n                                                                                                                  //\n      slide.style.width = width + 'px';                                                                           // 64\n      slide.setAttribute('data-index', pos);                                                                      // 65\n                                                                                                                  //\n      if (browser.transitions) {                                                                                  // 67\n        slide.style.left = pos * -width + 'px';                                                                   // 68\n        move(pos, index > pos ? -width : index < pos ? width : 0, 0);                                             // 69\n      }                                                                                                           //\n    }                                                                                                             //\n                                                                                                                  //\n    // reposition elements before and after index                                                                 //\n    if (options.continuous && browser.transitions) {                                                              // 75\n      move(circle(index - 1), -width, 0);                                                                         // 76\n      move(circle(index + 1), width, 0);                                                                          // 77\n    }                                                                                                             //\n                                                                                                                  //\n    if (!browser.transitions) element.style.left = index * -width + 'px';                                         // 80\n                                                                                                                  //\n    container.style.visibility = 'visible';                                                                       // 82\n  }                                                                                                               //\n                                                                                                                  //\n  function prev() {                                                                                               // 86\n                                                                                                                  //\n    if (options.continuous) slide(index - 1);else if (index) slide(index - 1);                                    // 88\n  }                                                                                                               //\n                                                                                                                  //\n  function next() {                                                                                               // 93\n                                                                                                                  //\n    if (options.continuous) slide(index + 1);else if (index < slides.length - 1) slide(index + 1);                // 95\n  }                                                                                                               //\n                                                                                                                  //\n  function circle(index) {                                                                                        // 100\n                                                                                                                  //\n    // a simple positive modulo using slides.length                                                               //\n    return (slides.length + index % slides.length) % slides.length;                                               // 103\n  }                                                                                                               //\n                                                                                                                  //\n  function slide(to, slideSpeed) {                                                                                // 107\n                                                                                                                  //\n    // do nothing if already on requested slide                                                                   //\n    if (index == to) return;                                                                                      // 110\n                                                                                                                  //\n    if (browser.transitions) {                                                                                    // 112\n                                                                                                                  //\n      var direction = Math.abs(index - to) / (index - to); // 1: backward, -1: forward                            // 114\n                                                                                                                  //\n      // get the actual position of the slide                                                                     //\n      if (options.continuous) {                                                                                   // 117\n        var natural_direction = direction;                                                                        // 118\n        direction = -slidePos[circle(to)] / width;                                                                // 119\n                                                                                                                  //\n        // if going forward but to < index, use to = slides.length + to                                           //\n        // if going backward but to > index, use to = -slides.length + to                                         //\n        if (direction !== natural_direction) to = -direction * slides.length + to;                                // 123\n      }                                                                                                           //\n                                                                                                                  //\n      var diff = Math.abs(index - to) - 1;                                                                        // 127\n                                                                                                                  //\n      // move all the slides between index and to in the right direction                                          //\n      while (diff--) move(circle((to > index ? to : index) - diff - 1), width * direction, 0);                    // 130\n                                                                                                                  //\n      to = circle(to);                                                                                            // 132\n                                                                                                                  //\n      move(index, width * direction, slideSpeed || speed);                                                        // 134\n      move(to, 0, slideSpeed || speed);                                                                           // 135\n                                                                                                                  //\n      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place\n    } else {                                                                                                      //\n                                                                                                                  //\n        to = circle(to);                                                                                          // 141\n        animate(index * -width, to * -width, slideSpeed || speed);                                                // 142\n        //no fallback for a circular continuous if the browser does not accept transitions                        //\n      }                                                                                                           //\n                                                                                                                  //\n    index = to;                                                                                                   // 146\n    offloadFn(options.callback && options.callback(index, slides[index]));                                        // 147\n  }                                                                                                               //\n                                                                                                                  //\n  function move(index, dist, speed) {                                                                             // 150\n                                                                                                                  //\n    translate(index, dist, speed);                                                                                // 152\n    slidePos[index] = dist;                                                                                       // 153\n  }                                                                                                               //\n                                                                                                                  //\n  function translate(index, dist, speed) {                                                                        // 157\n                                                                                                                  //\n    var slide = slides[index];                                                                                    // 159\n    var style = slide && slide.style;                                                                             // 160\n                                                                                                                  //\n    if (!style) return;                                                                                           // 162\n                                                                                                                  //\n    style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = speed + 'ms';\n                                                                                                                  //\n    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';                                      // 170\n    style.msTransform = style.MozTransform = style.OTransform = 'translateX(' + dist + 'px)';                     // 171\n  }                                                                                                               //\n                                                                                                                  //\n  function animate(from, to, speed) {                                                                             // 177\n                                                                                                                  //\n    // if not an animation, just reposition                                                                       //\n    if (!speed) {                                                                                                 // 180\n                                                                                                                  //\n      element.style.left = to + 'px';                                                                             // 182\n      return;                                                                                                     // 183\n    }                                                                                                             //\n                                                                                                                  //\n    var start = +new Date();                                                                                      // 187\n                                                                                                                  //\n    var timer = setInterval(function () {                                                                         // 189\n                                                                                                                  //\n      var timeElap = +new Date() - start;                                                                         // 191\n                                                                                                                  //\n      if (timeElap > speed) {                                                                                     // 193\n                                                                                                                  //\n        element.style.left = to + 'px';                                                                           // 195\n                                                                                                                  //\n        if (delay) begin();                                                                                       // 197\n                                                                                                                  //\n        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);                         // 199\n                                                                                                                  //\n        clearInterval(timer);                                                                                     // 201\n        return;                                                                                                   // 202\n      }                                                                                                           //\n                                                                                                                  //\n      element.style.left = (to - from) * (Math.floor(timeElap / speed * 100) / 100) + from + 'px';                // 206\n    }, 4);                                                                                                        //\n  }                                                                                                               //\n                                                                                                                  //\n  // setup auto slideshow                                                                                         //\n  var delay = options.auto || 0;                                                                                  // 213\n  var interval;                                                                                                   // 214\n                                                                                                                  //\n  function begin() {                                                                                              // 216\n                                                                                                                  //\n    interval = setTimeout(next, delay);                                                                           // 218\n  }                                                                                                               //\n                                                                                                                  //\n  function stop() {                                                                                               // 222\n                                                                                                                  //\n    delay = 0;                                                                                                    // 224\n    clearTimeout(interval);                                                                                       // 225\n  }                                                                                                               //\n                                                                                                                  //\n  // setup initial vars                                                                                           //\n  var start = {};                                                                                                 // 231\n  var delta = {};                                                                                                 // 232\n  var isScrolling;                                                                                                // 233\n                                                                                                                  //\n  // setup event capturing                                                                                        //\n  var events = {                                                                                                  // 236\n                                                                                                                  //\n    handleEvent: function (event) {                                                                               // 238\n                                                                                                                  //\n      switch (event.type) {                                                                                       // 240\n        case 'touchstart':                                                                                        // 241\n          this.start(event);break;                                                                                // 241\n        case 'touchmove':                                                                                         // 241\n          this.move(event);break;                                                                                 // 242\n        case 'touchend':                                                                                          // 242\n          offloadFn(this.end(event));break;                                                                       // 243\n        case 'webkitTransitionEnd':                                                                               // 244\n        case 'msTransitionEnd':                                                                                   // 245\n        case 'oTransitionEnd':                                                                                    // 246\n        case 'otransitionend':                                                                                    // 247\n        case 'transitionend':                                                                                     // 248\n          offloadFn(this.transitionEnd(event));break;                                                             // 248\n        case 'resize':                                                                                            // 249\n          offloadFn(setup);break;                                                                                 // 249\n      }                                                                                                           // 249\n                                                                                                                  //\n      if (options.stopPropagation) event.stopPropagation();                                                       // 252\n    },                                                                                                            //\n    start: function (event) {                                                                                     // 255\n                                                                                                                  //\n      var touches = event.touches[0];                                                                             // 257\n                                                                                                                  //\n      // measure start values                                                                                     //\n      start = {                                                                                                   // 260\n                                                                                                                  //\n        // get initial touch coords                                                                               //\n        x: touches.pageX,                                                                                         // 263\n        y: touches.pageY,                                                                                         // 264\n                                                                                                                  //\n        // store time to determine touch duration                                                                 //\n        time: +new Date()                                                                                         // 267\n                                                                                                                  //\n      };                                                                                                          //\n                                                                                                                  //\n      // used for testing first move event                                                                        //\n      isScrolling = undefined;                                                                                    // 272\n                                                                                                                  //\n      // reset delta and end measurements                                                                         //\n      delta = {};                                                                                                 // 275\n                                                                                                                  //\n      // attach touchmove and touchend listeners                                                                  //\n      element.addEventListener('touchmove', this, false);                                                         // 278\n      element.addEventListener('touchend', this, false);                                                          // 279\n    },                                                                                                            //\n    move: function (event) {                                                                                      // 282\n                                                                                                                  //\n      // ensure swiping with one touch and not pinching                                                           //\n      if (event.touches.length > 1 || event.scale && event.scale !== 1) return;                                   // 285\n                                                                                                                  //\n      if (options.disableScroll) event.preventDefault();                                                          // 287\n                                                                                                                  //\n      var touches = event.touches[0];                                                                             // 289\n                                                                                                                  //\n      // measure change in x and y                                                                                //\n      delta = {                                                                                                   // 292\n        x: touches.pageX - start.x,                                                                               // 293\n        y: touches.pageY - start.y                                                                                // 294\n      };                                                                                                          //\n                                                                                                                  //\n      // determine if scrolling test has run - one time test                                                      //\n      if (typeof isScrolling == 'undefined') {                                                                    // 298\n        isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));                                   // 299\n      }                                                                                                           //\n                                                                                                                  //\n      // if user is not trying to scroll vertically                                                               //\n      if (!isScrolling) {                                                                                         // 303\n                                                                                                                  //\n        // prevent native scrolling                                                                               //\n        event.preventDefault();                                                                                   // 306\n                                                                                                                  //\n        // stop slideshow                                                                                         //\n        stop();                                                                                                   // 309\n                                                                                                                  //\n        // increase resistance if first or last slide                                                             //\n        if (options.continuous) {                                                                                 // 312\n          // we don't add resistance at the end                                                                   //\n                                                                                                                  //\n          translate(circle(index - 1), delta.x + slidePos[circle(index - 1)], 0);                                 // 314\n          translate(index, delta.x + slidePos[index], 0);                                                         // 315\n          translate(circle(index + 1), delta.x + slidePos[circle(index + 1)], 0);                                 // 316\n        } else {                                                                                                  //\n                                                                                                                  //\n          delta.x = delta.x / (!index && delta.x > 0 // if first slide and sliding left                           // 320\n           || index == slides.length - 1 // or if last slide and sliding right                                    //\n           && delta.x < 0 // and if sliding at all                                                                //\n          ? Math.abs(delta.x) / width + 1 : // determine resistance level                                         //\n          1); // no resistance if false                                                                           // 327\n                                                                                                                  //\n          // translate 1:1                                                                                        //\n          translate(index - 1, delta.x + slidePos[index - 1], 0);                                                 // 330\n          translate(index, delta.x + slidePos[index], 0);                                                         // 331\n          translate(index + 1, delta.x + slidePos[index + 1], 0);                                                 // 332\n        }                                                                                                         //\n      }                                                                                                           //\n    },                                                                                                            //\n    end: function (event) {                                                                                       // 338\n                                                                                                                  //\n      // measure duration                                                                                         //\n      var duration = +new Date() - start.time;                                                                    // 341\n                                                                                                                  //\n      // determine if slide attempt triggers next/prev slide                                                      //\n      var isValidSlide = Number(duration) < 250 // if slide duration is less than 250ms                           // 344\n       && Math.abs(delta.x) > 20 // and if slide amt is greater than 20px                                         //\n       || Math.abs(delta.x) > width / 2; // or if slide amt is greater than half the width                        //\n                                                                                                                  //\n      // determine if slide attempt is past start and end                                                         //\n      var isPastBounds = !index && delta.x > 0 // if first slide and slide amt is greater than 0                  // 350\n       || index == slides.length - 1 && delta.x < 0; // or if last slide and slide amt is less than 0             //\n                                                                                                                  //\n      if (options.continuous) isPastBounds = false;                                                               // 354\n                                                                                                                  //\n      // determine direction of swipe (true:right, false:left)                                                    //\n      var direction = delta.x < 0;                                                                                // 357\n                                                                                                                  //\n      // if not scrolling vertically                                                                              //\n      if (!isScrolling) {                                                                                         // 360\n                                                                                                                  //\n        if (isValidSlide && !isPastBounds) {                                                                      // 362\n                                                                                                                  //\n          if (direction) {                                                                                        // 364\n                                                                                                                  //\n            if (options.continuous) {                                                                             // 366\n              // we need to get the next in this direction in place                                               //\n                                                                                                                  //\n              move(circle(index - 1), -width, 0);                                                                 // 368\n              move(circle(index + 2), width, 0);                                                                  // 369\n            } else {                                                                                              //\n              move(index - 1, -width, 0);                                                                         // 372\n            }                                                                                                     //\n                                                                                                                  //\n            move(index, slidePos[index] - width, speed);                                                          // 375\n            move(circle(index + 1), slidePos[circle(index + 1)] - width, speed);                                  // 376\n            index = circle(index + 1);                                                                            // 377\n          } else {                                                                                                //\n            if (options.continuous) {                                                                             // 380\n              // we need to get the next in this direction in place                                               //\n                                                                                                                  //\n              move(circle(index + 1), width, 0);                                                                  // 382\n              move(circle(index - 2), -width, 0);                                                                 // 383\n            } else {                                                                                              //\n              move(index + 1, width, 0);                                                                          // 386\n            }                                                                                                     //\n                                                                                                                  //\n            move(index, slidePos[index] + width, speed);                                                          // 389\n            move(circle(index - 1), slidePos[circle(index - 1)] + width, speed);                                  // 390\n            index = circle(index - 1);                                                                            // 391\n          }                                                                                                       //\n                                                                                                                  //\n          options.callback && options.callback(index, slides[index]);                                             // 395\n        } else {                                                                                                  //\n                                                                                                                  //\n          if (options.continuous) {                                                                               // 399\n                                                                                                                  //\n            move(circle(index - 1), -width, speed);                                                               // 401\n            move(index, 0, speed);                                                                                // 402\n            move(circle(index + 1), width, speed);                                                                // 403\n          } else {                                                                                                //\n                                                                                                                  //\n            move(index - 1, -width, speed);                                                                       // 407\n            move(index, 0, speed);                                                                                // 408\n            move(index + 1, width, speed);                                                                        // 409\n          }                                                                                                       //\n        }                                                                                                         //\n      }                                                                                                           //\n                                                                                                                  //\n      // kill touchmove and touchend event listeners until touchstart called again                                //\n      element.removeEventListener('touchmove', events, false);                                                    // 417\n      element.removeEventListener('touchend', events, false);                                                     // 418\n    },                                                                                                            //\n    transitionEnd: function (event) {                                                                             // 421\n                                                                                                                  //\n      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {                                       // 423\n                                                                                                                  //\n        if (delay) begin();                                                                                       // 425\n                                                                                                                  //\n        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);                         // 427\n      }                                                                                                           //\n    }                                                                                                             //\n                                                                                                                  //\n  };                                                                                                              //\n                                                                                                                  //\n  // trigger setup                                                                                                //\n  setup();                                                                                                        // 436\n                                                                                                                  //\n  // start auto slideshow if applicable                                                                           //\n  if (delay) begin();                                                                                             // 439\n                                                                                                                  //\n  // add event listeners                                                                                          //\n  if (browser.addEventListener) {                                                                                 // 443\n                                                                                                                  //\n    // set touchstart event on element                                                                            //\n    if (browser.touch) element.addEventListener('touchstart', events, false);                                     // 446\n                                                                                                                  //\n    if (browser.transitions) {                                                                                    // 448\n      element.addEventListener('webkitTransitionEnd', events, false);                                             // 449\n      element.addEventListener('msTransitionEnd', events, false);                                                 // 450\n      element.addEventListener('oTransitionEnd', events, false);                                                  // 451\n      element.addEventListener('otransitionend', events, false);                                                  // 452\n      element.addEventListener('transitionend', events, false);                                                   // 453\n    }                                                                                                             //\n                                                                                                                  //\n    // set resize event on window                                                                                 //\n    window.addEventListener('resize', events, false);                                                             // 457\n  } else {                                                                                                        //\n                                                                                                                  //\n    window.onresize = function () {                                                                               // 461\n      setup();                                                                                                    // 461\n    }; // to play nice with old IE                                                                                //\n  }                                                                                                               //\n                                                                                                                  //\n  // expose the Swipe API                                                                                         //\n  return {                                                                                                        // 466\n    setup: function () {                                                                                          // 467\n                                                                                                                  //\n      setup();                                                                                                    // 469\n    },                                                                                                            //\n    slide: function (to, speed) {                                                                                 // 472\n                                                                                                                  //\n      // cancel slideshow                                                                                         //\n      stop();                                                                                                     // 475\n                                                                                                                  //\n      slide(to, speed);                                                                                           // 477\n    },                                                                                                            //\n    prev: function () {                                                                                           // 480\n                                                                                                                  //\n      // cancel slideshow                                                                                         //\n      stop();                                                                                                     // 483\n                                                                                                                  //\n      prev();                                                                                                     // 485\n    },                                                                                                            //\n    next: function () {                                                                                           // 488\n                                                                                                                  //\n      // cancel slideshow                                                                                         //\n      stop();                                                                                                     // 491\n                                                                                                                  //\n      next();                                                                                                     // 493\n    },                                                                                                            //\n    stop: function () {                                                                                           // 496\n                                                                                                                  //\n      // cancel slideshow                                                                                         //\n      stop();                                                                                                     // 499\n    },                                                                                                            //\n    getPos: function () {                                                                                         // 502\n                                                                                                                  //\n      // return current index position                                                                            //\n      return index;                                                                                               // 505\n    },                                                                                                            //\n    getNumSlides: function () {                                                                                   // 508\n                                                                                                                  //\n      // return total number of slides                                                                            //\n      return length;                                                                                              // 511\n    },                                                                                                            //\n    kill: function () {                                                                                           // 513\n                                                                                                                  //\n      // cancel slideshow                                                                                         //\n      stop();                                                                                                     // 516\n                                                                                                                  //\n      // reset element                                                                                            //\n      element.style.width = '';                                                                                   // 519\n      element.style.left = '';                                                                                    // 520\n                                                                                                                  //\n      // reset slides                                                                                             //\n      var pos = slides.length;                                                                                    // 523\n      while (pos--) {                                                                                             // 524\n                                                                                                                  //\n        var slide = slides[pos];                                                                                  // 526\n        slide.style.width = '';                                                                                   // 527\n        slide.style.left = '';                                                                                    // 528\n                                                                                                                  //\n        if (browser.transitions) translate(pos, 0, 0);                                                            // 530\n      }                                                                                                           //\n                                                                                                                  //\n      // removed event listeners                                                                                  //\n      if (browser.addEventListener) {                                                                             // 535\n                                                                                                                  //\n        // remove current event listeners                                                                         //\n        element.removeEventListener('touchstart', events, false);                                                 // 538\n        element.removeEventListener('webkitTransitionEnd', events, false);                                        // 539\n        element.removeEventListener('msTransitionEnd', events, false);                                            // 540\n        element.removeEventListener('oTransitionEnd', events, false);                                             // 541\n        element.removeEventListener('otransitionend', events, false);                                             // 542\n        element.removeEventListener('transitionend', events, false);                                              // 543\n        window.removeEventListener('resize', events, false);                                                      // 544\n      } else {                                                                                                    //\n                                                                                                                  //\n        window.onresize = null;                                                                                   // 549\n      }                                                                                                           //\n    }                                                                                                             //\n  };                                                                                                              //\n};                                                                                                                //\n                                                                                                                  //\nRC.Swipe = React.createClass({                                                                                    // 559\n  displayName: 'Swipe',                                                                                           //\n                                                                                                                  //\n  // https://github.com/thebird/Swipe#config-options                                                              //\n  propTypes: {                                                                                                    // 561\n    startSlide: React.PropTypes.number,                                                                           // 562\n    slideToIndex: React.PropTypes.number,                                                                         // 563\n    shouldUpdate: React.PropTypes.func,                                                                           // 564\n    speed: React.PropTypes.number,                                                                                // 565\n    auto: React.PropTypes.number,                                                                                 // 566\n    continuous: React.PropTypes.bool,                                                                             // 567\n    disableScroll: React.PropTypes.bool,                                                                          // 568\n    stopPropagation: React.PropTypes.bool,                                                                        // 569\n    callback: React.PropTypes.func,                                                                               // 570\n    transitionEnd: React.PropTypes.func                                                                           // 571\n  },                                                                                                              //\n                                                                                                                  //\n  componentDidMount: function () {                                                                                // 574\n    if (this.isMounted()) {                                                                                       // 575\n      this.swipe = SwipeJS(React.findDOMNode(this), this.props);                                                  // 576\n    }                                                                                                             //\n  },                                                                                                              //\n                                                                                                                  //\n  componentDidUpdate: function () {                                                                               // 580\n    if (this.props.slideToIndex || this.props.slideToIndex === 0) {                                               // 581\n      this.swipe.slide(this.props.slideToIndex);                                                                  // 582\n    }                                                                                                             //\n  },                                                                                                              //\n                                                                                                                  //\n  componentWillUnmount: function () {                                                                             // 586\n    this.swipe.kill();                                                                                            // 587\n    delete this.swipe;                                                                                            // 588\n  },                                                                                                              //\n                                                                                                                  //\n  shouldComponentUpdate: function (nextProps) {                                                                   // 591\n    return this.props.slideToIndex !== nextProps.slideToIndex || typeof this.props.shouldUpdate !== 'undefined' && this.props.shouldUpdate(nextProps);\n  },                                                                                                              //\n                                                                                                                  //\n  getPos: function () {                                                                                           // 598\n    return this.swipe.getPos();                                                                                   // 599\n  },                                                                                                              //\n                                                                                                                  //\n  slideTo: function (n) {                                                                                         // 602\n    return this.swipe.slide(n);                                                                                   // 603\n  },                                                                                                              //\n                                                                                                                  //\n  render: function () {                                                                                           // 606\n                                                                                                                  //\n    var styles = {                                                                                                // 608\n      container: {                                                                                                // 609\n        overflow: 'hidden',                                                                                       // 610\n        visibility: 'hidden',                                                                                     // 611\n        position: 'relative'                                                                                      // 612\n      },                                                                                                          //\n      wrapper: {                                                                                                  // 614\n        overflow: \"hidden\",                                                                                       // 615\n        position: \"relative\",                                                                                     // 616\n        height: \"100%\"                                                                                            // 617\n      },                                                                                                          //\n      child: {                                                                                                    // 619\n        float: \"left\",                                                                                            // 620\n        width: \"100%\",                                                                                            // 621\n        height: \"100%\",                                                                                           // 622\n        position: \"relative\"                                                                                      // 623\n      }                                                                                                           //\n    };                                                                                                            //\n                                                                                                                  //\n    var rootClasses = \"overflow abs-full \" + (this.props.className || \"\") + (this.props.createNavHeight ? \" nav-padding\" : \"\");\n                                                                                                                  //\n    return React.createElement('div', React.__spread({}, this.props, { className: rootClasses }), React.createElement('div', { style: styles.wrapper }, React.Children.map(this.props.children, function (child, index) {\n      return React.cloneElement(child, {                                                                          // 632\n        ref: child.props.ref,                                                                                     // 633\n        key: child.props.key,                                                                                     // 634\n        style: child.props.style ? objectAssign(child.props.style, styles.child) : styles.child                   // 635\n      });                                                                                                         //\n    })));                                                                                                         //\n  }                                                                                                               //\n});                                                                                                               //\n                                                                                                                  //\nif (h.nk(Meteor.settings, \"public.env\") != \"live\") RC.Swipe.Help = {                                              // 643\n  Type: \"Unique/Canvas\",                                                                                          // 645\n  PropTypes: {                                                                                                    // 646\n    startSlide: \"Number\",                                                                                         // 647\n    speed: \"Number\",                                                                                              // 648\n    callback: \"Function\",                                                                                         // 649\n    continuous: \"Boolean\"                                                                                         // 650\n  },                                                                                                              //\n  Description: \"Creates multiple canvas components that can be swiped between each other (for navigation).\"       // 652\n};                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/ihealth_framework-mobile/RC/leftNav/leftNav.jsx                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  //\nRC.LeftNav = React.createClass({                                                                                  // 2\n  displayName: \"LeftNav\",                                                                                         //\n                                                                                                                  //\n  getInitialState: function () {                                                                                  // 3\n    return {                                                                                                      // 4\n      closing: false,                                                                                             // 5\n      isOpen: this.props.openOnInit                                                                               // 6\n    };                                                                                                            //\n  },                                                                                                              //\n  open: function () {                                                                                             // 9\n    if (!this.state.closing) this.setState({ isOpen: true });                                                     // 10\n  },                                                                                                              //\n  close: function () {                                                                                            // 13\n    var self = this;                                                                                              // 14\n    this.setState({ closing: true });                                                                             // 15\n    Meteor.setTimeout(function () {                                                                               // 16\n      self.setState({ isOpen: false, closing: false });                                                           // 17\n    }, 400);                                                                                                      //\n  },                                                                                                              //\n  linkClickHandler: function (e) {                                                                                // 20\n    if (e.target.href) this.close();                                                                              // 21\n  },                                                                                                              //\n  render: function () {                                                                                           // 24\n                                                                                                                  //\n    if (!this.state.isOpen) return null;                                                                          // 26\n                                                                                                                  //\n    return React.createElement(                                                                                   // 28\n      \"nav\",                                                                                                      //\n      { className: \"transition left-nav fixed-full \" + (this.state.closing ? \"out\" : \"in\") },                     //\n      React.createElement(\"div\", { className: \"back abs-full\", onClick: this.close }),                            //\n      React.createElement(                                                                                        //\n        \"div\",                                                                                                    //\n        { className: \"inner bg-white scroll\", onClick: this.linkClickHandler },                                   //\n        React.createElement(\"div\", { onClick: this.props.toggleNavFunc }),                                        //\n        React.createElement(RC.NavList, { list: this.props.navList, showCurrent: false })                         //\n      )                                                                                                           //\n    );                                                                                                            //\n  }                                                                                                               //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/ihealth_framework-mobile/RC/leftNav/leftNav2.jsx                                                      //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  //\nRC.LeftNav2 = React.createClass({                                                                                 // 2\n    displayName: 'LeftNav2',                                                                                      //\n                                                                                                                  //\n    getInitialState: function () {                                                                                // 3\n        return {                                                                                                  // 4\n            closing: false,                                                                                       // 5\n            isOpen: this.props.openOnInit                                                                         // 6\n        };                                                                                                        //\n    },                                                                                                            //\n    open: function () {                                                                                           // 9\n        if (!this.state.closing) this.setState({ isOpen: true });                                                 // 10\n    },                                                                                                            //\n    close: function () {                                                                                          // 13\n        var self = this;                                                                                          // 14\n        this.setState({ closing: true });                                                                         // 15\n        Meteor.setTimeout(function () {                                                                           // 16\n            self.setState({ isOpen: false, closing: false });                                                     // 17\n        }, 400);                                                                                                  //\n    },                                                                                                            //\n    //linkClickHandler(e) {                                                                                       //\n    //    if (e.target.href)                                                                                      //\n    //        this.close()                                                                                        //\n    //},                                                                                                          //\n                                                                                                                  //\n    ///////////////actions//////                                                                                  //\n    /*                                                                                                            //\n    *!!! Should not change private state directly                                                                 //\n    *!!! must according to store.                                                                                 //\n    * */                                                                                                          //\n    action_close: function () {                                                                                   // 30\n        Dispatcher.dispatch({ actionType: 'LEFT_NAV_CLOSE' });                                                    // 31\n    },                                                                                                            //\n    action_linkClickHandler: function (e) {                                                                       // 33\n        if (e.target.href) {                                                                                      // 34\n            Dispatcher.dispatch({ actionType: 'LEFT_NAV_CLOSE' });                                                // 35\n        }                                                                                                         //\n    },                                                                                                            //\n                                                                                                                  //\n    ////////////////////////////////////////                                                                      //\n    //@@@ Sync parent props and private state                                                                     //\n    // property is the only entry to update the private status                                                    //\n    componentWillReceiveProps: function (nextProps) {                                                             // 42\n                                                                                                                  //\n        if (nextProps.openOnInit == false) {                                                                      // 44\n            this.close();                                                                                         // 45\n        } else if (nextProps.openOnInit == true) {                                                                //\n            this.open();                                                                                          // 47\n        }                                                                                                         //\n    },                                                                                                            //\n                                                                                                                  //\n    render: function () {                                                                                         // 51\n        if (!this.state.isOpen) return null;                                                                      // 52\n                                                                                                                  //\n        return React.createElement(                                                                               // 54\n            'nav',                                                                                                //\n            { className: \"transition left-nav fixed-full \" + (this.state.closing ? \"out\" : \"in\") },               //\n            React.createElement('div', { className: 'back abs-full', onClick: this.action_close }),               //\n            React.createElement(                                                                                  //\n                'div',                                                                                            //\n                { className: 'inner bg-white scroll', onClick: this.action_linkClickHandler },                    //\n                React.createElement('div', { onClick: this.props.toggleNavFunc }),                                //\n                React.createElement(RC.NavList, { list: this.props.navList, showCurrent: false })                 //\n            )                                                                                                     //\n        );                                                                                                        //\n    }                                                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:framework-mobile'] = {\n  RC: RC\n};\n\n})();\n","servePath":"/packages/ihealth_framework-mobile.js","sourceMap":{"version":3,"sources":["/packages/ihealth_framework-mobile/startup.js","/RC/swipe/swipe.jsx","/RC/leftNav/leftNav.jsx","/RC/leftNav/leftNav2.jsx"],"names":[],"mappings":"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","file":"/packages/ihealth_framework-mobile.js","sourcesContent":["\nif (Meteor.isCordova) {\n\n  Meteor.startup( function() {\n\n    // Back Handler\n    document.addEventListener(\"backbutton\", function(e){\n      e.preventDefault()\n      if (FlowRouter.current().path==\"/\") {\n        navigator.app.exitApp()\n      } else {\n        FlowRouter.BackButton = true\n        navigator.app.backHistory()\n      }\n    }, false)\n\n    // Important : Meta\n    var metaTag=document.createElement('meta');\n    metaTag.name = \"viewport\"\n    metaTag.content = \"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\"\n    document.getElementsByTagName('head')[0].appendChild(metaTag)\n\n  })\n\n}\n","\n/*\n * Swipe 2.0.0\n * Brad Birdsall\n * https://github.com/thebird/Swipe\n * Copyright 2013-2015, MIT License\n *\n*/\nlet SwipeJS = function(container, options) {\n  // utilities\n  var noop = function() {}; // simple no operation function\n  var offloadFn = function(fn) { setTimeout(fn || noop, 0) }; // offload a functions execution\n\n  // check browser capabilities\n  var browser = {\n    addEventListener: !!window.addEventListener,\n    touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,\n    transitions: (function(temp) {\n      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];\n      for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;\n      return false;\n    })(document.createElement('swipe'))\n  };\n\n  // quit if no root element\n  if (!container) return;\n  var element = container.children[0];\n  var slides, slidePos, width, length;\n  options = options || {};\n  var index = parseInt(options.startSlide, 10) || 0;\n  var speed = options.speed || 300;\n  options.continuous = options.continuous !== undefined ? options.continuous : true;\n\n  function setup() {\n\n    // cache slides\n    slides = element.children;\n    length = slides.length;\n\n    // set continuous to false if only one slide\n    if (slides.length < 2) options.continuous = false;\n\n    //special case if two slides\n    if (browser.transitions && options.continuous && slides.length < 3) {\n      element.appendChild(slides[0].cloneNode(true));\n      element.appendChild(element.children[1].cloneNode(true));\n      slides = element.children;\n    }\n\n    // create an array to store current positions of each slide\n    slidePos = new Array(slides.length);\n\n    // determine width of each slide\n    width = container.getBoundingClientRect().width || container.offsetWidth;\n\n    element.style.width = (slides.length * width) + 'px';\n\n    // stack elements\n    var pos = slides.length;\n    while(pos--) {\n\n      var slide = slides[pos];\n\n      slide.style.width = width + 'px';\n      slide.setAttribute('data-index', pos);\n\n      if (browser.transitions) {\n        slide.style.left = (pos * -width) + 'px';\n        move(pos, index > pos ? -width : (index < pos ? width : 0), 0);\n      }\n\n    }\n\n    // reposition elements before and after index\n    if (options.continuous && browser.transitions) {\n      move(circle(index-1), -width, 0);\n      move(circle(index+1), width, 0);\n    }\n\n    if (!browser.transitions) element.style.left = (index * -width) + 'px';\n\n    container.style.visibility = 'visible';\n\n  }\n\n  function prev() {\n\n    if (options.continuous) slide(index-1);\n    else if (index) slide(index-1);\n\n  }\n\n  function next() {\n\n    if (options.continuous) slide(index+1);\n    else if (index < slides.length - 1) slide(index+1);\n\n  }\n\n  function circle(index) {\n\n    // a simple positive modulo using slides.length\n    return (slides.length + (index % slides.length)) % slides.length;\n\n  }\n\n  function slide(to, slideSpeed) {\n\n    // do nothing if already on requested slide\n    if (index == to) return;\n\n    if (browser.transitions) {\n\n      var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward\n\n      // get the actual position of the slide\n      if (options.continuous) {\n        var natural_direction = direction;\n        direction = -slidePos[circle(to)] / width;\n\n        // if going forward but to < index, use to = slides.length + to\n        // if going backward but to > index, use to = -slides.length + to\n        if (direction !== natural_direction) to =  -direction * slides.length + to;\n\n      }\n\n      var diff = Math.abs(index-to) - 1;\n\n      // move all the slides between index and to in the right direction\n      while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);\n\n      to = circle(to);\n\n      move(index, width * direction, slideSpeed || speed);\n      move(to, 0, slideSpeed || speed);\n\n      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place\n\n    } else {\n\n      to = circle(to);\n      animate(index * -width, to * -width, slideSpeed || speed);\n      //no fallback for a circular continuous if the browser does not accept transitions\n    }\n\n    index = to;\n    offloadFn(options.callback && options.callback(index, slides[index]));\n  }\n\n  function move(index, dist, speed) {\n\n    translate(index, dist, speed);\n    slidePos[index] = dist;\n\n  }\n\n  function translate(index, dist, speed) {\n\n    var slide = slides[index];\n    var style = slide && slide.style;\n\n    if (!style) return;\n\n    style.webkitTransitionDuration =\n    style.MozTransitionDuration =\n    style.msTransitionDuration =\n    style.OTransitionDuration =\n    style.transitionDuration = speed + 'ms';\n\n    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n    style.msTransform =\n    style.MozTransform =\n    style.OTransform = 'translateX(' + dist + 'px)';\n\n  }\n\n  function animate(from, to, speed) {\n\n    // if not an animation, just reposition\n    if (!speed) {\n\n      element.style.left = to + 'px';\n      return;\n\n    }\n\n    var start = +new Date;\n\n    var timer = setInterval(function() {\n\n      var timeElap = +new Date - start;\n\n      if (timeElap > speed) {\n\n        element.style.left = to + 'px';\n\n        if (delay) begin();\n\n        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);\n\n        clearInterval(timer);\n        return;\n\n      }\n\n      element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';\n\n    }, 4);\n\n  }\n\n  // setup auto slideshow\n  var delay = options.auto || 0;\n  var interval;\n\n  function begin() {\n\n    interval = setTimeout(next, delay);\n\n  }\n\n  function stop() {\n\n    delay = 0;\n    clearTimeout(interval);\n\n  }\n\n\n  // setup initial vars\n  var start = {};\n  var delta = {};\n  var isScrolling;\n\n  // setup event capturing\n  var events = {\n\n    handleEvent: function(event) {\n\n      switch (event.type) {\n        case 'touchstart': this.start(event); break;\n        case 'touchmove': this.move(event); break;\n        case 'touchend': offloadFn(this.end(event)); break;\n        case 'webkitTransitionEnd':\n        case 'msTransitionEnd':\n        case 'oTransitionEnd':\n        case 'otransitionend':\n        case 'transitionend': offloadFn(this.transitionEnd(event)); break;\n        case 'resize': offloadFn(setup); break;\n      }\n\n      if (options.stopPropagation) event.stopPropagation();\n\n    },\n    start: function(event) {\n\n      var touches = event.touches[0];\n\n      // measure start values\n      start = {\n\n        // get initial touch coords\n        x: touches.pageX,\n        y: touches.pageY,\n\n        // store time to determine touch duration\n        time: +new Date\n\n      };\n\n      // used for testing first move event\n      isScrolling = undefined;\n\n      // reset delta and end measurements\n      delta = {};\n\n      // attach touchmove and touchend listeners\n      element.addEventListener('touchmove', this, false);\n      element.addEventListener('touchend', this, false);\n\n    },\n    move: function(event) {\n\n      // ensure swiping with one touch and not pinching\n      if ( event.touches.length > 1 || event.scale && event.scale !== 1) return\n\n      if (options.disableScroll) event.preventDefault();\n\n      var touches = event.touches[0];\n\n      // measure change in x and y\n      delta = {\n        x: touches.pageX - start.x,\n        y: touches.pageY - start.y\n      }\n\n      // determine if scrolling test has run - one time test\n      if ( typeof isScrolling == 'undefined') {\n        isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );\n      }\n\n      // if user is not trying to scroll vertically\n      if (!isScrolling) {\n\n        // prevent native scrolling\n        event.preventDefault();\n\n        // stop slideshow\n        stop();\n\n        // increase resistance if first or last slide\n        if (options.continuous) { // we don't add resistance at the end\n\n          translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);\n          translate(index, delta.x + slidePos[index], 0);\n          translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);\n\n        } else {\n\n          delta.x =\n            delta.x /\n              ( (!index && delta.x > 0               // if first slide and sliding left\n                || index == slides.length - 1        // or if last slide and sliding right\n                && delta.x < 0                       // and if sliding at all\n              ) ?\n              ( Math.abs(delta.x) / width + 1 )      // determine resistance level\n              : 1 );                                 // no resistance if false\n\n          // translate 1:1\n          translate(index-1, delta.x + slidePos[index-1], 0);\n          translate(index, delta.x + slidePos[index], 0);\n          translate(index+1, delta.x + slidePos[index+1], 0);\n        }\n\n      }\n\n    },\n    end: function(event) {\n\n      // measure duration\n      var duration = +new Date - start.time;\n\n      // determine if slide attempt triggers next/prev slide\n      var isValidSlide =\n            Number(duration) < 250               // if slide duration is less than 250ms\n            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px\n            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width\n\n      // determine if slide attempt is past start and end\n      var isPastBounds =\n            !index && delta.x > 0                            // if first slide and slide amt is greater than 0\n            || index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0\n\n      if (options.continuous) isPastBounds = false;\n\n      // determine direction of swipe (true:right, false:left)\n      var direction = delta.x < 0;\n\n      // if not scrolling vertically\n      if (!isScrolling) {\n\n        if (isValidSlide && !isPastBounds) {\n\n          if (direction) {\n\n            if (options.continuous) { // we need to get the next in this direction in place\n\n              move(circle(index-1), -width, 0);\n              move(circle(index+2), width, 0);\n\n            } else {\n              move(index-1, -width, 0);\n            }\n\n            move(index, slidePos[index]-width, speed);\n            move(circle(index+1), slidePos[circle(index+1)]-width, speed);\n            index = circle(index+1);\n\n          } else {\n            if (options.continuous) { // we need to get the next in this direction in place\n\n              move(circle(index+1), width, 0);\n              move(circle(index-2), -width, 0);\n\n            } else {\n              move(index+1, width, 0);\n            }\n\n            move(index, slidePos[index]+width, speed);\n            move(circle(index-1), slidePos[circle(index-1)]+width, speed);\n            index = circle(index-1);\n\n          }\n\n          options.callback && options.callback(index, slides[index]);\n\n        } else {\n\n          if (options.continuous) {\n\n            move(circle(index-1), -width, speed);\n            move(index, 0, speed);\n            move(circle(index+1), width, speed);\n\n          } else {\n\n            move(index-1, -width, speed);\n            move(index, 0, speed);\n            move(index+1, width, speed);\n          }\n\n        }\n\n      }\n\n      // kill touchmove and touchend event listeners until touchstart called again\n      element.removeEventListener('touchmove', events, false)\n      element.removeEventListener('touchend', events, false)\n\n    },\n    transitionEnd: function(event) {\n\n      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {\n\n        if (delay) begin();\n\n        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);\n\n      }\n\n    }\n\n  }\n\n  // trigger setup\n  setup();\n\n  // start auto slideshow if applicable\n  if (delay) begin();\n\n\n  // add event listeners\n  if (browser.addEventListener) {\n\n    // set touchstart event on element\n    if (browser.touch) element.addEventListener('touchstart', events, false);\n\n    if (browser.transitions) {\n      element.addEventListener('webkitTransitionEnd', events, false);\n      element.addEventListener('msTransitionEnd', events, false);\n      element.addEventListener('oTransitionEnd', events, false);\n      element.addEventListener('otransitionend', events, false);\n      element.addEventListener('transitionend', events, false);\n    }\n\n    // set resize event on window\n    window.addEventListener('resize', events, false);\n\n  } else {\n\n    window.onresize = function () { setup() }; // to play nice with old IE\n\n  }\n\n  // expose the Swipe API\n  return {\n    setup: function() {\n\n      setup();\n\n    },\n    slide: function(to, speed) {\n\n      // cancel slideshow\n      stop();\n\n      slide(to, speed);\n\n    },\n    prev: function() {\n\n      // cancel slideshow\n      stop();\n\n      prev();\n\n    },\n    next: function() {\n\n      // cancel slideshow\n      stop();\n\n      next();\n\n    },\n    stop: function() {\n\n      // cancel slideshow\n      stop();\n\n    },\n    getPos: function() {\n\n      // return current index position\n      return index;\n\n    },\n    getNumSlides: function() {\n\n      // return total number of slides\n      return length;\n    },\n    kill: function() {\n\n      // cancel slideshow\n      stop();\n\n      // reset element\n      element.style.width = '';\n      element.style.left = '';\n\n      // reset slides\n      var pos = slides.length;\n      while(pos--) {\n\n        var slide = slides[pos];\n        slide.style.width = '';\n        slide.style.left = '';\n\n        if (browser.transitions) translate(pos, 0, 0);\n\n      }\n\n      // removed event listeners\n      if (browser.addEventListener) {\n\n        // remove current event listeners\n        element.removeEventListener('touchstart', events, false);\n        element.removeEventListener('webkitTransitionEnd', events, false);\n        element.removeEventListener('msTransitionEnd', events, false);\n        element.removeEventListener('oTransitionEnd', events, false);\n        element.removeEventListener('otransitionend', events, false);\n        element.removeEventListener('transitionend', events, false);\n        window.removeEventListener('resize', events, false);\n\n      }\n      else {\n\n        window.onresize = null;\n\n      }\n\n    }\n  }\n\n}\n\n\nRC.Swipe = React.createClass({\n  // https://github.com/thebird/Swipe#config-options\n  propTypes: {\n    startSlide: React.PropTypes.number,\n    slideToIndex: React.PropTypes.number,\n    shouldUpdate: React.PropTypes.func,\n    speed: React.PropTypes.number,\n    auto: React.PropTypes.number,\n    continuous: React.PropTypes.bool,\n    disableScroll: React.PropTypes.bool,\n    stopPropagation: React.PropTypes.bool,\n    callback: React.PropTypes.func,\n    transitionEnd: React.PropTypes.func\n  },\n\n  componentDidMount: function () {\n    if (this.isMounted()) {\n      this.swipe = SwipeJS(React.findDOMNode(this), this.props);\n    }\n  },\n\n  componentDidUpdate: function () {\n    if (this.props.slideToIndex || this.props.slideToIndex === 0) {\n      this.swipe.slide(this.props.slideToIndex);\n    }\n  },\n\n  componentWillUnmount: function () {\n    this.swipe.kill();\n    delete this.swipe;\n  },\n\n  shouldComponentUpdate: function (nextProps) {\n    return (\n      (this.props.slideToIndex !== nextProps.slideToIndex) ||\n      (typeof this.props.shouldUpdate !== 'undefined') && this.props.shouldUpdate(nextProps)\n    );\n  },\n\n  getPos() {\n    return this.swipe.getPos()\n  },\n\n  slideTo(n) {\n    return this.swipe.slide(n)\n  },\n\n  render: function() {\n\n    let styles = {\n      container: {\n        overflow: 'hidden',\n        visibility: 'hidden',\n        position: 'relative'\n      },\n      wrapper: {\n        overflow: \"hidden\",\n        position: \"relative\",\n        height: \"100%\"\n      },\n      child: {\n        float: \"left\",\n        width: \"100%\",\n        height: \"100%\",\n        position: \"relative\"\n      }\n    }\n\n    let rootClasses = \"overflow abs-full \"+(this.props.className || \"\")+ (this.props.createNavHeight ? \" nav-padding\" : \"\")\n\n    return React.createElement('div', React.__spread({}, this.props, {className: rootClasses}),\n      React.createElement('div', {style: styles.wrapper},\n        React.Children.map(this.props.children, function (child,index) {\n          return React.cloneElement(child, {\n            ref: child.props.ref,\n            key: child.props.key,\n            style: child.props.style ? objectAssign(child.props.style,styles.child) : styles.child\n          });\n        })\n      )\n    );\n  }\n})\n\nif (h.nk(Meteor.settings, \"public.env\")!=\"live\")\n  RC.Swipe.Help = {\n    Type: \"Unique/Canvas\",\n    PropTypes: {\n      startSlide: \"Number\",\n      speed: \"Number\",\n      callback: \"Function\",\n      continuous: \"Boolean\",\n    },\n    Description: \"Creates multiple canvas components that can be swiped between each other (for navigation).\"\n  }\n","\nRC.LeftNav = React.createClass({\n  getInitialState() {\n    return {\n      closing: false,\n      isOpen: this.props.openOnInit\n    }\n  },\n  open() {\n    if (!this.state.closing)\n      this.setState({isOpen: true})\n  },\n  close() {\n    let self = this\n    this.setState({closing: true})\n    Meteor.setTimeout(function(){\n      self.setState({isOpen: false, closing: false})\n    }, 400)\n  },\n  linkClickHandler(e) {\n    if (e.target.href)\n      this.close()\n  },\n  render() {\n\n    if (!this.state.isOpen) return null\n\n    return <nav className={\"transition left-nav fixed-full \"+(this.state.closing ? \"out\" : \"in\")}>\n      <div className=\"back abs-full\" onClick={this.close}/>\n\n      <div className=\"inner bg-white scroll\" onClick={this.linkClickHandler}>\n        <div onClick={this.props.toggleNavFunc}/>\n        <RC.NavList list={this.props.navList} showCurrent={false} />\n      </div>\n\n    </nav>\n  }\n})\n","\nRC.LeftNav2 = React.createClass({\n    getInitialState() {\n        return {\n            closing: false,\n            isOpen: this.props.openOnInit\n        }\n    },\n    open() {\n        if (!this.state.closing)\n            this.setState({isOpen: true})\n    },\n    close() {\n        let self = this\n        this.setState({closing: true})\n        Meteor.setTimeout(function(){\n            self.setState({isOpen: false, closing: false})\n        }, 400)\n    },\n    //linkClickHandler(e) {\n    //    if (e.target.href)\n    //        this.close()\n    //},\n\n    ///////////////actions//////\n    /*\n    *!!! Should not change private state directly\n    *!!! must according to store.\n    * */\n    action_close(){\n        Dispatcher.dispatch({actionType:'LEFT_NAV_CLOSE'})\n    },\n    action_linkClickHandler(e) {\n        if (e.target.href){\n            Dispatcher.dispatch({actionType:'LEFT_NAV_CLOSE'})\n        }\n    },\n\n    ////////////////////////////////////////\n    //@@@ Sync parent props and private state\n    // property is the only entry to update the private status\n    componentWillReceiveProps(nextProps){\n\n        if(nextProps.openOnInit==false){\n            this.close()\n        }else if(nextProps.openOnInit==true){\n            this.open()\n        }\n    },\n\n    render() {\n        if (!this.state.isOpen) return null\n\n        return <nav className={\"transition left-nav fixed-full \"+(this.state.closing ? \"out\" : \"in\")}>\n            <div className=\"back abs-full\" onClick={this.action_close}/>\n\n            <div className=\"inner bg-white scroll\" onClick={this.action_linkClickHandler}>\n                <div onClick={this.props.toggleNavFunc}/>\n                <RC.NavList list={this.props.navList} showCurrent={false} />\n            </div>\n\n        </nav>\n    }\n})\n"]}}]