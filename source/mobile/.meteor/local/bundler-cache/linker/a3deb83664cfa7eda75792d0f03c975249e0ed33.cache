[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar DevTools = Package['ihealth:dev-tools'].DevTools;\n\n/* Package-scope variables */\nvar DevicesStub, i, j;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/ihealth_devices-stub/callback-simulator.js               //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nDevicesStub = {};                                                    // 1\n                                                                     // 2\nvar levelFilter = 2                                                  // 3\nvar debugL = _.partial(DevTools.consoleWithLevels, levelFilter);     // 4\n                                                                     // 5\nDevicesStub.sendMessages = function(cb, messageSets) {               // 6\n  if(messageSets) {                                                  // 7\n    debugL(4)(\"messageSets.length: \", messageSets.length)            // 8\n    debugL(5)(\"messageSets: \", messageSets)                          // 9\n    for(i=0; i < messageSets.length; i++) {(function(i) {            // 10\n      var messageSet = messageSets[i]                                // 11\n      var messageDelay = messageSet.messageDelay                     // 12\n      var message = messageSet.message                               // 13\n      var messageRepeat = messageSet.messageRepeat || 1              // 14\n      for(j=0; j < messageRepeat; j++) {                             // 15\n        (function(j) {                                               // 16\n          Meteor.setTimeout(function() {                             // 17\n            debugL(4)(\"sending message \" + j + \": \" + message)       // 18\n            cb(JSON.stringify(message))                              // 19\n          } , (j+1) * messageDelay )                                 // 20\n        })(j)                                                        // 21\n      }                                                              // 22\n    })(i)                                                            // 23\n    }                                                                // 24\n  }                                                                  // 25\n};                                                                   // 26\n                                                                     // 27\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:devices-stub'] = {\n  DevicesStub: DevicesStub\n};\n\n})();\n","servePath":"/packages/ihealth_devices-stub.js","sourceMap":{"version":3,"sources":["/packages/ihealth_devices-stub/callback-simulator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E","file":"/packages/ihealth_devices-stub.js","sourcesContent":["DevicesStub = {};\n\nvar levelFilter = 2\nvar debugL = _.partial(DevTools.consoleWithLevels, levelFilter);\n\nDevicesStub.sendMessages = function(cb, messageSets) {\n  if(messageSets) {\n    debugL(4)(\"messageSets.length: \", messageSets.length)\n    debugL(5)(\"messageSets: \", messageSets)\n    for(i=0; i < messageSets.length; i++) {(function(i) {\n      var messageSet = messageSets[i]\n      var messageDelay = messageSet.messageDelay\n      var message = messageSet.message\n      var messageRepeat = messageSet.messageRepeat || 1\n      for(j=0; j < messageRepeat; j++) {\n        (function(j) {\n          Meteor.setTimeout(function() {\n            debugL(4)(\"sending message \" + j + \": \" + message)\n            cb(JSON.stringify(message))\n          } , (j+1) * messageDelay )\n        })(j)\n      }\n    })(i)\n    }\n  }\n};\n"]}}]