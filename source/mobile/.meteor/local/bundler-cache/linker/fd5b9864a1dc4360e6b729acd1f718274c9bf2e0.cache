[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar SemVer410, PackageVersion;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/package-version-parser/packages/package-version-parser.js                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n(function(){                                                                                                 // 1\n                                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 3\n//                                                                                                   //      // 4\n// packages/package-version-parser/semver410.js                                                      //      // 5\n//                                                                                                   //      // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 7\n                                                                                                     //      // 8\n// <METEOR>                                                                                          // 1    // 9\n// Fool the module system detection code below so that it doesn't                                    // 2    // 10\n// do anything special.                                                                              // 3    // 11\nvar exports = SemVer, module = {}, define = {};                                                      // 4    // 12\n// Create a package-private variable.  Can't use SemVer because                                      // 5    // 13\n// of the code that says `function SemVer(...)` below (implicitly                                    // 6    // 14\n// declaring a var).  Can't use \"semver\" because that's a var in                                     // 7    // 15\n// package-version-parser.js.                                                                        // 8    // 16\nSemVer410 = SemVer;                                                                                  // 9    // 17\n// </METEOR>                                                                                         // 10   // 18\n                                                                                                     // 11   // 19\n// export the class if we are in a Node-like system.                                                 // 12   // 20\nif (typeof module === 'object' && module.exports === exports)                                        // 13   // 21\n  exports = module.exports = SemVer;                                                                 // 14   // 22\n                                                                                                     // 15   // 23\n// The debug function is excluded entirely from the minified version.                                // 16   // 24\n/* nomin */ var debug;                                                                               // 17   // 25\n/* nomin */ if (typeof process === 'object' &&                                                       // 18   // 26\n    /* nomin */ process.env &&                                                                       // 19   // 27\n    /* nomin */ process.env.NODE_DEBUG &&                                                            // 20   // 28\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))                                          // 21   // 29\n  /* nomin */ debug = function() {                                                                   // 22   // 30\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);                                 // 23   // 31\n    /* nomin */ args.unshift('SEMVER');                                                              // 24   // 32\n    /* nomin */ console.log.apply(console, args);                                                    // 25   // 33\n    /* nomin */ };                                                                                   // 26   // 34\n/* nomin */ else                                                                                     // 27   // 35\n  /* nomin */ debug = function() {};                                                                 // 28   // 36\n                                                                                                     // 29   // 37\n// Note: this is the semver.org version of the spec that it implements                               // 30   // 38\n// Not necessarily the package version of this code.                                                 // 31   // 39\nexports.SEMVER_SPEC_VERSION = '2.0.0';                                                               // 32   // 40\n                                                                                                     // 33   // 41\n// The actual regexps go on exports.re                                                               // 34   // 42\nvar re = exports.re = [];                                                                            // 35   // 43\nvar src = exports.src = [];                                                                          // 36   // 44\nvar R = 0;                                                                                           // 37   // 45\n                                                                                                     // 38   // 46\n// The following Regular Expressions can be used for tokenizing,                                     // 39   // 47\n// validating, and parsing SemVer version strings.                                                   // 40   // 48\n                                                                                                     // 41   // 49\n// ## Numeric Identifier                                                                             // 42   // 50\n// A single `0`, or a non-zero digit followed by zero or more digits.                                // 43   // 51\n                                                                                                     // 44   // 52\nvar NUMERICIDENTIFIER = R++;                                                                         // 45   // 53\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';                                                              // 46   // 54\nvar NUMERICIDENTIFIERLOOSE = R++;                                                                    // 47   // 55\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';                                                              // 48   // 56\n                                                                                                     // 49   // 57\n                                                                                                     // 50   // 58\n// ## Non-numeric Identifier                                                                         // 51   // 59\n// Zero or more digits, followed by a letter or hyphen, and then zero or                             // 52   // 60\n// more letters, digits, or hyphens.                                                                 // 53   // 61\n                                                                                                     // 54   // 62\nvar NONNUMERICIDENTIFIER = R++;                                                                      // 55   // 63\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';                                            // 56   // 64\n                                                                                                     // 57   // 65\n                                                                                                     // 58   // 66\n// ## Main Version                                                                                   // 59   // 67\n// Three dot-separated numeric identifiers.                                                          // 60   // 68\n                                                                                                     // 61   // 69\nvar MAINVERSION = R++;                                                                               // 62   // 70\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 63   // 71\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 64   // 72\n                   '(' + src[NUMERICIDENTIFIER] + ')';                                               // 65   // 73\n                                                                                                     // 66   // 74\nvar MAINVERSIONLOOSE = R++;                                                                          // 67   // 75\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 68   // 76\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 69   // 77\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';                                     // 70   // 78\n                                                                                                     // 71   // 79\n// ## Pre-release Version Identifier                                                                 // 72   // 80\n// A numeric identifier, or a non-numeric identifier.                                                // 73   // 81\n                                                                                                     // 74   // 82\nvar PRERELEASEIDENTIFIER = R++;                                                                      // 75   // 83\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +                                         // 76   // 84\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';                                   // 77   // 85\n                                                                                                     // 78   // 86\nvar PRERELEASEIDENTIFIERLOOSE = R++;                                                                 // 79   // 87\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +                               // 80   // 88\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';                              // 81   // 89\n                                                                                                     // 82   // 90\n                                                                                                     // 83   // 91\n// ## Pre-release Version                                                                            // 84   // 92\n// Hyphen, followed by one or more dot-separated pre-release version                                 // 85   // 93\n// identifiers.                                                                                      // 86   // 94\n                                                                                                     // 87   // 95\nvar PRERELEASE = R++;                                                                                // 88   // 96\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +                                              // 89   // 97\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';                                     // 90   // 98\n                                                                                                     // 91   // 99\nvar PRERELEASELOOSE = R++;                                                                           // 92   // 100\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +                                   // 93   // 101\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';                           // 94   // 102\n                                                                                                     // 95   // 103\n// ## Build Metadata Identifier                                                                      // 96   // 104\n// Any combination of digits, letters, or hyphens.                                                   // 97   // 105\n                                                                                                     // 98   // 106\nvar BUILDIDENTIFIER = R++;                                                                           // 99   // 107\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';                                                              // 100  // 108\n                                                                                                     // 101  // 109\n// ## Build Metadata                                                                                 // 102  // 110\n// Plus sign, followed by one or more period-separated build metadata                                // 103  // 111\n// identifiers.                                                                                      // 104  // 112\n                                                                                                     // 105  // 113\nvar BUILD = R++;                                                                                     // 106  // 114\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +                                                      // 107  // 115\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';                                               // 108  // 116\n                                                                                                     // 109  // 117\n                                                                                                     // 110  // 118\n// ## Full Version String                                                                            // 111  // 119\n// A main version, followed optionally by a pre-release version and                                  // 112  // 120\n// build metadata.                                                                                   // 113  // 121\n                                                                                                     // 114  // 122\n// Note that the only major, minor, patch, and pre-release sections of                               // 115  // 123\n// the version string are capturing groups.  The build metadata is not a                             // 116  // 124\n// capturing group, because it should not ever be used in version                                    // 117  // 125\n// comparison.                                                                                       // 118  // 126\n                                                                                                     // 119  // 127\nvar FULL = R++;                                                                                      // 120  // 128\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +                                                            // 121  // 129\n                src[PRERELEASE] + '?' +                                                              // 122  // 130\n                src[BUILD] + '?';                                                                    // 123  // 131\n                                                                                                     // 124  // 132\nsrc[FULL] = '^' + FULLPLAIN + '$';                                                                   // 125  // 133\n                                                                                                     // 126  // 134\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.                               // 127  // 135\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty                                 // 128  // 136\n// common in the npm registry.                                                                       // 129  // 137\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +                                                // 130  // 138\n                 src[PRERELEASELOOSE] + '?' +                                                        // 131  // 139\n                 src[BUILD] + '?';                                                                   // 132  // 140\n                                                                                                     // 133  // 141\nvar LOOSE = R++;                                                                                     // 134  // 142\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';                                                                 // 135  // 143\n                                                                                                     // 136  // 144\nvar GTLT = R++;                                                                                      // 137  // 145\nsrc[GTLT] = '((?:<|>)?=?)';                                                                          // 138  // 146\n                                                                                                     // 139  // 147\n// Something like \"2.*\" or \"1.2.x\".                                                                  // 140  // 148\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"                                // 141  // 149\n// Only the first item is strictly required.                                                         // 142  // 150\nvar XRANGEIDENTIFIERLOOSE = R++;                                                                     // 143  // 151\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';                               // 144  // 152\nvar XRANGEIDENTIFIER = R++;                                                                          // 145  // 153\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';                                         // 146  // 154\n                                                                                                     // 147  // 155\nvar XRANGEPLAIN = R++;                                                                               // 148  // 156\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +                                       // 149  // 157\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 150  // 158\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 151  // 159\n                   '(?:' + src[PRERELEASE] + ')?' +                                                  // 152  // 160\n                   src[BUILD] + '?' +                                                                // 153  // 161\n                   ')?)?';                                                                           // 154  // 162\n                                                                                                     // 155  // 163\nvar XRANGEPLAINLOOSE = R++;                                                                          // 156  // 164\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                             // 157  // 165\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 158  // 166\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 159  // 167\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +                                        // 160  // 168\n                        src[BUILD] + '?' +                                                           // 161  // 169\n                        ')?)?';                                                                      // 162  // 170\n                                                                                                     // 163  // 171\nvar XRANGE = R++;                                                                                    // 164  // 172\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';                                     // 165  // 173\nvar XRANGELOOSE = R++;                                                                               // 166  // 174\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';                           // 167  // 175\n                                                                                                     // 168  // 176\n// Tilde ranges.                                                                                     // 169  // 177\n// Meaning is \"reasonably at or greater than\"                                                        // 170  // 178\nvar LONETILDE = R++;                                                                                 // 171  // 179\nsrc[LONETILDE] = '(?:~>?)';                                                                          // 172  // 180\n                                                                                                     // 173  // 181\nvar TILDETRIM = R++;                                                                                 // 174  // 182\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';                                                 // 175  // 183\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');                                                     // 176  // 184\nvar tildeTrimReplace = '$1~';                                                                        // 177  // 185\n                                                                                                     // 178  // 186\nvar TILDE = R++;                                                                                     // 179  // 187\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';                                          // 180  // 188\nvar TILDELOOSE = R++;                                                                                // 181  // 189\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';                                // 182  // 190\n                                                                                                     // 183  // 191\n// Caret ranges.                                                                                     // 184  // 192\n// Meaning is \"at least and backwards compatible with\"                                               // 185  // 193\nvar LONECARET = R++;                                                                                 // 186  // 194\nsrc[LONECARET] = '(?:\\\\^)';                                                                          // 187  // 195\n                                                                                                     // 188  // 196\nvar CARETTRIM = R++;                                                                                 // 189  // 197\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';                                                 // 190  // 198\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');                                                     // 191  // 199\nvar caretTrimReplace = '$1^';                                                                        // 192  // 200\n                                                                                                     // 193  // 201\nvar CARET = R++;                                                                                     // 194  // 202\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';                                          // 195  // 203\nvar CARETLOOSE = R++;                                                                                // 196  // 204\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';                                // 197  // 205\n                                                                                                     // 198  // 206\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"                                     // 199  // 207\nvar COMPARATORLOOSE = R++;                                                                           // 200  // 208\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';                             // 201  // 209\nvar COMPARATOR = R++;                                                                                // 202  // 210\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';                                   // 203  // 211\n                                                                                                     // 204  // 212\n                                                                                                     // 205  // 213\n// An expression to strip any whitespace between the gtlt and the thing                              // 206  // 214\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`                                                       // 207  // 215\nvar COMPARATORTRIM = R++;                                                                            // 208  // 216\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +                                                         // 209  // 217\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';                           // 210  // 218\n                                                                                                     // 211  // 219\n// this one has to use the /g flag                                                                   // 212  // 220\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');                                           // 213  // 221\nvar comparatorTrimReplace = '$1$2$3';                                                                // 214  // 222\n                                                                                                     // 215  // 223\n                                                                                                     // 216  // 224\n// Something like `1.2.3 - 1.2.4`                                                                    // 217  // 225\n// Note that these all use the loose form, because they'll be                                        // 218  // 226\n// checked against either the strict or loose comparator form                                        // 219  // 227\n// later.                                                                                            // 220  // 228\nvar HYPHENRANGE = R++;                                                                               // 221  // 229\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +                                               // 222  // 230\n                   '\\\\s+-\\\\s+' +                                                                     // 223  // 231\n                   '(' + src[XRANGEPLAIN] + ')' +                                                    // 224  // 232\n                   '\\\\s*$';                                                                          // 225  // 233\n                                                                                                     // 226  // 234\nvar HYPHENRANGELOOSE = R++;                                                                          // 227  // 235\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +                                     // 228  // 236\n                        '\\\\s+-\\\\s+' +                                                                // 229  // 237\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +                                          // 230  // 238\n                        '\\\\s*$';                                                                     // 231  // 239\n                                                                                                     // 232  // 240\n// Star ranges basically just allow anything at all.                                                 // 233  // 241\nvar STAR = R++;                                                                                      // 234  // 242\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';                                                                       // 235  // 243\n                                                                                                     // 236  // 244\n// Compile to actual regexp objects.                                                                 // 237  // 245\n// All are flag-free, unless they were created above with a flag.                                    // 238  // 246\nfor (var i = 0; i < R; i++) {                                                                        // 239  // 247\n  debug(i, src[i]);                                                                                  // 240  // 248\n  if (!re[i])                                                                                        // 241  // 249\n    re[i] = new RegExp(src[i]);                                                                      // 242  // 250\n}                                                                                                    // 243  // 251\n                                                                                                     // 244  // 252\nexports.parse = parse;                                                                               // 245  // 253\nfunction parse(version, loose) {                                                                     // 246  // 254\n  var r = loose ? re[LOOSE] : re[FULL];                                                              // 247  // 255\n  return (r.test(version)) ? new SemVer(version, loose) : null;                                      // 248  // 256\n}                                                                                                    // 249  // 257\n                                                                                                     // 250  // 258\nexports.valid = valid;                                                                               // 251  // 259\nfunction valid(version, loose) {                                                                     // 252  // 260\n  var v = parse(version, loose);                                                                     // 253  // 261\n  return v ? v.version : null;                                                                       // 254  // 262\n}                                                                                                    // 255  // 263\n                                                                                                     // 256  // 264\n                                                                                                     // 257  // 265\nexports.clean = clean;                                                                               // 258  // 266\nfunction clean(version, loose) {                                                                     // 259  // 267\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);                                        // 260  // 268\n  return s ? s.version : null;                                                                       // 261  // 269\n}                                                                                                    // 262  // 270\n                                                                                                     // 263  // 271\nexports.SemVer = SemVer;                                                                             // 264  // 272\n                                                                                                     // 265  // 273\nfunction SemVer(version, loose) {                                                                    // 266  // 274\n  if (version instanceof SemVer) {                                                                   // 267  // 275\n    if (version.loose === loose)                                                                     // 268  // 276\n      return version;                                                                                // 269  // 277\n    else                                                                                             // 270  // 278\n      version = version.version;                                                                     // 271  // 279\n  } else if (typeof version !== 'string') {                                                          // 272  // 280\n    throw new TypeError('Invalid Version: ' + version);                                              // 273  // 281\n  }                                                                                                  // 274  // 282\n                                                                                                     // 275  // 283\n  if (!(this instanceof SemVer))                                                                     // 276  // 284\n    return new SemVer(version, loose);                                                               // 277  // 285\n                                                                                                     // 278  // 286\n  debug('SemVer', version, loose);                                                                   // 279  // 287\n  this.loose = loose;                                                                                // 280  // 288\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);                                        // 281  // 289\n                                                                                                     // 282  // 290\n  if (!m)                                                                                            // 283  // 291\n    throw new TypeError('Invalid Version: ' + version);                                              // 284  // 292\n                                                                                                     // 285  // 293\n  this.raw = version;                                                                                // 286  // 294\n                                                                                                     // 287  // 295\n  // these are actually numbers                                                                      // 288  // 296\n  this.major = +m[1];                                                                                // 289  // 297\n  this.minor = +m[2];                                                                                // 290  // 298\n  this.patch = +m[3];                                                                                // 291  // 299\n                                                                                                     // 292  // 300\n  // numberify any prerelease numeric ids                                                            // 293  // 301\n  if (!m[4])                                                                                         // 294  // 302\n    this.prerelease = [];                                                                            // 295  // 303\n  else                                                                                               // 296  // 304\n    this.prerelease = m[4].split('.').map(function(id) {                                             // 297  // 305\n      return (/^[0-9]+$/.test(id)) ? +id : id;                                                       // 298  // 306\n    });                                                                                              // 299  // 307\n                                                                                                     // 300  // 308\n  this.build = m[5] ? m[5].split('.') : [];                                                          // 301  // 309\n  this.format();                                                                                     // 302  // 310\n}                                                                                                    // 303  // 311\n                                                                                                     // 304  // 312\nSemVer.prototype.format = function() {                                                               // 305  // 313\n  this.version = this.major + '.' + this.minor + '.' + this.patch;                                   // 306  // 314\n  if (this.prerelease.length)                                                                        // 307  // 315\n    this.version += '-' + this.prerelease.join('.');                                                 // 308  // 316\n  return this.version;                                                                               // 309  // 317\n};                                                                                                   // 310  // 318\n                                                                                                     // 311  // 319\nSemVer.prototype.inspect = function() {                                                              // 312  // 320\n  return '<SemVer \"' + this + '\">';                                                                  // 313  // 321\n};                                                                                                   // 314  // 322\n                                                                                                     // 315  // 323\nSemVer.prototype.toString = function() {                                                             // 316  // 324\n  return this.version;                                                                               // 317  // 325\n};                                                                                                   // 318  // 326\n                                                                                                     // 319  // 327\nSemVer.prototype.compare = function(other) {                                                         // 320  // 328\n  debug('SemVer.compare', this.version, this.loose, other);                                          // 321  // 329\n  if (!(other instanceof SemVer))                                                                    // 322  // 330\n    other = new SemVer(other, this.loose);                                                           // 323  // 331\n                                                                                                     // 324  // 332\n  return this.compareMain(other) || this.comparePre(other);                                          // 325  // 333\n};                                                                                                   // 326  // 334\n                                                                                                     // 327  // 335\nSemVer.prototype.compareMain = function(other) {                                                     // 328  // 336\n  if (!(other instanceof SemVer))                                                                    // 329  // 337\n    other = new SemVer(other, this.loose);                                                           // 330  // 338\n                                                                                                     // 331  // 339\n  return compareIdentifiers(this.major, other.major) ||                                              // 332  // 340\n         compareIdentifiers(this.minor, other.minor) ||                                              // 333  // 341\n         compareIdentifiers(this.patch, other.patch);                                                // 334  // 342\n};                                                                                                   // 335  // 343\n                                                                                                     // 336  // 344\nSemVer.prototype.comparePre = function(other) {                                                      // 337  // 345\n  if (!(other instanceof SemVer))                                                                    // 338  // 346\n    other = new SemVer(other, this.loose);                                                           // 339  // 347\n                                                                                                     // 340  // 348\n  // NOT having a prerelease is > having one                                                         // 341  // 349\n  if (this.prerelease.length && !other.prerelease.length)                                            // 342  // 350\n    return -1;                                                                                       // 343  // 351\n  else if (!this.prerelease.length && other.prerelease.length)                                       // 344  // 352\n    return 1;                                                                                        // 345  // 353\n  else if (!this.prerelease.length && !other.prerelease.length)                                      // 346  // 354\n    return 0;                                                                                        // 347  // 355\n                                                                                                     // 348  // 356\n  var i = 0;                                                                                         // 349  // 357\n  do {                                                                                               // 350  // 358\n    var a = this.prerelease[i];                                                                      // 351  // 359\n    var b = other.prerelease[i];                                                                     // 352  // 360\n    debug('prerelease compare', i, a, b);                                                            // 353  // 361\n    if (a === undefined && b === undefined)                                                          // 354  // 362\n      return 0;                                                                                      // 355  // 363\n    else if (b === undefined)                                                                        // 356  // 364\n      return 1;                                                                                      // 357  // 365\n    else if (a === undefined)                                                                        // 358  // 366\n      return -1;                                                                                     // 359  // 367\n    else if (a === b)                                                                                // 360  // 368\n      continue;                                                                                      // 361  // 369\n    else                                                                                             // 362  // 370\n      return compareIdentifiers(a, b);                                                               // 363  // 371\n  } while (++i);                                                                                     // 364  // 372\n};                                                                                                   // 365  // 373\n                                                                                                     // 366  // 374\n// preminor will bump the version up to the next minor release, and immediately                      // 367  // 375\n// down to pre-release. premajor and prepatch work the same way.                                     // 368  // 376\nSemVer.prototype.inc = function(release, identifier) {                                               // 369  // 377\n  switch (release) {                                                                                 // 370  // 378\n    case 'premajor':                                                                                 // 371  // 379\n      this.prerelease.length = 0;                                                                    // 372  // 380\n      this.patch = 0;                                                                                // 373  // 381\n      this.minor = 0;                                                                                // 374  // 382\n      this.major++;                                                                                  // 375  // 383\n      this.inc('pre', identifier);                                                                   // 376  // 384\n      break;                                                                                         // 377  // 385\n    case 'preminor':                                                                                 // 378  // 386\n      this.prerelease.length = 0;                                                                    // 379  // 387\n      this.patch = 0;                                                                                // 380  // 388\n      this.minor++;                                                                                  // 381  // 389\n      this.inc('pre', identifier);                                                                   // 382  // 390\n      break;                                                                                         // 383  // 391\n    case 'prepatch':                                                                                 // 384  // 392\n      // If this is already a prerelease, it will bump to the next version                           // 385  // 393\n      // drop any prereleases that might already exist, since they are not                           // 386  // 394\n      // relevant at this point.                                                                     // 387  // 395\n      this.prerelease.length = 0;                                                                    // 388  // 396\n      this.inc('patch', identifier);                                                                 // 389  // 397\n      this.inc('pre', identifier);                                                                   // 390  // 398\n      break;                                                                                         // 391  // 399\n    // If the input is a non-prerelease version, this acts the same as                               // 392  // 400\n    // prepatch.                                                                                     // 393  // 401\n    case 'prerelease':                                                                               // 394  // 402\n      if (this.prerelease.length === 0)                                                              // 395  // 403\n        this.inc('patch', identifier);                                                               // 396  // 404\n      this.inc('pre', identifier);                                                                   // 397  // 405\n      break;                                                                                         // 398  // 406\n                                                                                                     // 399  // 407\n    case 'major':                                                                                    // 400  // 408\n      // If this is a pre-major version, bump up to the same major version.                          // 401  // 409\n      // Otherwise increment major.                                                                  // 402  // 410\n      // 1.0.0-5 bumps to 1.0.0                                                                      // 403  // 411\n      // 1.1.0 bumps to 2.0.0                                                                        // 404  // 412\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)                      // 405  // 413\n        this.major++;                                                                                // 406  // 414\n      this.minor = 0;                                                                                // 407  // 415\n      this.patch = 0;                                                                                // 408  // 416\n      this.prerelease = [];                                                                          // 409  // 417\n      break;                                                                                         // 410  // 418\n    case 'minor':                                                                                    // 411  // 419\n      // If this is a pre-minor version, bump up to the same minor version.                          // 412  // 420\n      // Otherwise increment minor.                                                                  // 413  // 421\n      // 1.2.0-5 bumps to 1.2.0                                                                      // 414  // 422\n      // 1.2.1 bumps to 1.3.0                                                                        // 415  // 423\n      if (this.patch !== 0 || this.prerelease.length === 0)                                          // 416  // 424\n        this.minor++;                                                                                // 417  // 425\n      this.patch = 0;                                                                                // 418  // 426\n      this.prerelease = [];                                                                          // 419  // 427\n      break;                                                                                         // 420  // 428\n    case 'patch':                                                                                    // 421  // 429\n      // If this is not a pre-release version, it will increment the patch.                          // 422  // 430\n      // If it is a pre-release it will bump up to the same patch version.                           // 423  // 431\n      // 1.2.0-5 patches to 1.2.0                                                                    // 424  // 432\n      // 1.2.0 patches to 1.2.1                                                                      // 425  // 433\n      if (this.prerelease.length === 0)                                                              // 426  // 434\n        this.patch++;                                                                                // 427  // 435\n      this.prerelease = [];                                                                          // 428  // 436\n      break;                                                                                         // 429  // 437\n    // This probably shouldn't be used publicly.                                                     // 430  // 438\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.                                // 431  // 439\n    case 'pre':                                                                                      // 432  // 440\n      if (this.prerelease.length === 0)                                                              // 433  // 441\n        this.prerelease = [0];                                                                       // 434  // 442\n      else {                                                                                         // 435  // 443\n        var i = this.prerelease.length;                                                              // 436  // 444\n        while (--i >= 0) {                                                                           // 437  // 445\n          if (typeof this.prerelease[i] === 'number') {                                              // 438  // 446\n            this.prerelease[i]++;                                                                    // 439  // 447\n            i = -2;                                                                                  // 440  // 448\n          }                                                                                          // 441  // 449\n        }                                                                                            // 442  // 450\n        if (i === -1) // didn't increment anything                                                   // 443  // 451\n          this.prerelease.push(0);                                                                   // 444  // 452\n      }                                                                                              // 445  // 453\n      if (identifier) {                                                                              // 446  // 454\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,                                                       // 447  // 455\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0                                     // 448  // 456\n        if (this.prerelease[0] === identifier) {                                                     // 449  // 457\n          if (isNaN(this.prerelease[1]))                                                             // 450  // 458\n            this.prerelease = [identifier, 0];                                                       // 451  // 459\n        } else                                                                                       // 452  // 460\n          this.prerelease = [identifier, 0];                                                         // 453  // 461\n      }                                                                                              // 454  // 462\n      break;                                                                                         // 455  // 463\n                                                                                                     // 456  // 464\n    default:                                                                                         // 457  // 465\n      throw new Error('invalid increment argument: ' + release);                                     // 458  // 466\n  }                                                                                                  // 459  // 467\n  this.format();                                                                                     // 460  // 468\n  return this;                                                                                       // 461  // 469\n};                                                                                                   // 462  // 470\n                                                                                                     // 463  // 471\nexports.inc = inc;                                                                                   // 464  // 472\nfunction inc(version, release, loose, identifier) {                                                  // 465  // 473\n  if (typeof(loose) === 'string') {                                                                  // 466  // 474\n    identifier = loose;                                                                              // 467  // 475\n    loose = undefined;                                                                               // 468  // 476\n  }                                                                                                  // 469  // 477\n                                                                                                     // 470  // 478\n  try {                                                                                              // 471  // 479\n    return new SemVer(version, loose).inc(release, identifier).version;                              // 472  // 480\n  } catch (er) {                                                                                     // 473  // 481\n    return null;                                                                                     // 474  // 482\n  }                                                                                                  // 475  // 483\n}                                                                                                    // 476  // 484\n                                                                                                     // 477  // 485\nexports.compareIdentifiers = compareIdentifiers;                                                     // 478  // 486\n                                                                                                     // 479  // 487\nvar numeric = /^[0-9]+$/;                                                                            // 480  // 488\nfunction compareIdentifiers(a, b) {                                                                  // 481  // 489\n  var anum = numeric.test(a);                                                                        // 482  // 490\n  var bnum = numeric.test(b);                                                                        // 483  // 491\n                                                                                                     // 484  // 492\n  if (anum && bnum) {                                                                                // 485  // 493\n    a = +a;                                                                                          // 486  // 494\n    b = +b;                                                                                          // 487  // 495\n  }                                                                                                  // 488  // 496\n                                                                                                     // 489  // 497\n  return (anum && !bnum) ? -1 :                                                                      // 490  // 498\n         (bnum && !anum) ? 1 :                                                                       // 491  // 499\n         a < b ? -1 :                                                                                // 492  // 500\n         a > b ? 1 :                                                                                 // 493  // 501\n         0;                                                                                          // 494  // 502\n}                                                                                                    // 495  // 503\n                                                                                                     // 496  // 504\nexports.rcompareIdentifiers = rcompareIdentifiers;                                                   // 497  // 505\nfunction rcompareIdentifiers(a, b) {                                                                 // 498  // 506\n  return compareIdentifiers(b, a);                                                                   // 499  // 507\n}                                                                                                    // 500  // 508\n                                                                                                     // 501  // 509\nexports.compare = compare;                                                                           // 502  // 510\nfunction compare(a, b, loose) {                                                                      // 503  // 511\n  return new SemVer(a, loose).compare(b);                                                            // 504  // 512\n}                                                                                                    // 505  // 513\n                                                                                                     // 506  // 514\nexports.compareLoose = compareLoose;                                                                 // 507  // 515\nfunction compareLoose(a, b) {                                                                        // 508  // 516\n  return compare(a, b, true);                                                                        // 509  // 517\n}                                                                                                    // 510  // 518\n                                                                                                     // 511  // 519\nexports.rcompare = rcompare;                                                                         // 512  // 520\nfunction rcompare(a, b, loose) {                                                                     // 513  // 521\n  return compare(b, a, loose);                                                                       // 514  // 522\n}                                                                                                    // 515  // 523\n                                                                                                     // 516  // 524\nexports.sort = sort;                                                                                 // 517  // 525\nfunction sort(list, loose) {                                                                         // 518  // 526\n  return list.sort(function(a, b) {                                                                  // 519  // 527\n    return exports.compare(a, b, loose);                                                             // 520  // 528\n  });                                                                                                // 521  // 529\n}                                                                                                    // 522  // 530\n                                                                                                     // 523  // 531\nexports.rsort = rsort;                                                                               // 524  // 532\nfunction rsort(list, loose) {                                                                        // 525  // 533\n  return list.sort(function(a, b) {                                                                  // 526  // 534\n    return exports.rcompare(a, b, loose);                                                            // 527  // 535\n  });                                                                                                // 528  // 536\n}                                                                                                    // 529  // 537\n                                                                                                     // 530  // 538\nexports.gt = gt;                                                                                     // 531  // 539\nfunction gt(a, b, loose) {                                                                           // 532  // 540\n  return compare(a, b, loose) > 0;                                                                   // 533  // 541\n}                                                                                                    // 534  // 542\n                                                                                                     // 535  // 543\nexports.lt = lt;                                                                                     // 536  // 544\nfunction lt(a, b, loose) {                                                                           // 537  // 545\n  return compare(a, b, loose) < 0;                                                                   // 538  // 546\n}                                                                                                    // 539  // 547\n                                                                                                     // 540  // 548\nexports.eq = eq;                                                                                     // 541  // 549\nfunction eq(a, b, loose) {                                                                           // 542  // 550\n  return compare(a, b, loose) === 0;                                                                 // 543  // 551\n}                                                                                                    // 544  // 552\n                                                                                                     // 545  // 553\nexports.neq = neq;                                                                                   // 546  // 554\nfunction neq(a, b, loose) {                                                                          // 547  // 555\n  return compare(a, b, loose) !== 0;                                                                 // 548  // 556\n}                                                                                                    // 549  // 557\n                                                                                                     // 550  // 558\nexports.gte = gte;                                                                                   // 551  // 559\nfunction gte(a, b, loose) {                                                                          // 552  // 560\n  return compare(a, b, loose) >= 0;                                                                  // 553  // 561\n}                                                                                                    // 554  // 562\n                                                                                                     // 555  // 563\nexports.lte = lte;                                                                                   // 556  // 564\nfunction lte(a, b, loose) {                                                                          // 557  // 565\n  return compare(a, b, loose) <= 0;                                                                  // 558  // 566\n}                                                                                                    // 559  // 567\n                                                                                                     // 560  // 568\nexports.cmp = cmp;                                                                                   // 561  // 569\nfunction cmp(a, op, b, loose) {                                                                      // 562  // 570\n  var ret;                                                                                           // 563  // 571\n  switch (op) {                                                                                      // 564  // 572\n    case '===':                                                                                      // 565  // 573\n      if (typeof a === 'object') a = a.version;                                                      // 566  // 574\n      if (typeof b === 'object') b = b.version;                                                      // 567  // 575\n      ret = a === b;                                                                                 // 568  // 576\n      break;                                                                                         // 569  // 577\n    case '!==':                                                                                      // 570  // 578\n      if (typeof a === 'object') a = a.version;                                                      // 571  // 579\n      if (typeof b === 'object') b = b.version;                                                      // 572  // 580\n      ret = a !== b;                                                                                 // 573  // 581\n      break;                                                                                         // 574  // 582\n    case '': case '=': case '==': ret = eq(a, b, loose); break;                                      // 575  // 583\n    case '!=': ret = neq(a, b, loose); break;                                                        // 576  // 584\n    case '>': ret = gt(a, b, loose); break;                                                          // 577  // 585\n    case '>=': ret = gte(a, b, loose); break;                                                        // 578  // 586\n    case '<': ret = lt(a, b, loose); break;                                                          // 579  // 587\n    case '<=': ret = lte(a, b, loose); break;                                                        // 580  // 588\n    default: throw new TypeError('Invalid operator: ' + op);                                         // 581  // 589\n  }                                                                                                  // 582  // 590\n  return ret;                                                                                        // 583  // 591\n}                                                                                                    // 584  // 592\n                                                                                                     // 585  // 593\nexports.Comparator = Comparator;                                                                     // 586  // 594\nfunction Comparator(comp, loose) {                                                                   // 587  // 595\n  if (comp instanceof Comparator) {                                                                  // 588  // 596\n    if (comp.loose === loose)                                                                        // 589  // 597\n      return comp;                                                                                   // 590  // 598\n    else                                                                                             // 591  // 599\n      comp = comp.value;                                                                             // 592  // 600\n  }                                                                                                  // 593  // 601\n                                                                                                     // 594  // 602\n  if (!(this instanceof Comparator))                                                                 // 595  // 603\n    return new Comparator(comp, loose);                                                              // 596  // 604\n                                                                                                     // 597  // 605\n  debug('comparator', comp, loose);                                                                  // 598  // 606\n  this.loose = loose;                                                                                // 599  // 607\n  this.parse(comp);                                                                                  // 600  // 608\n                                                                                                     // 601  // 609\n  if (this.semver === ANY)                                                                           // 602  // 610\n    this.value = '';                                                                                 // 603  // 611\n  else                                                                                               // 604  // 612\n    this.value = this.operator + this.semver.version;                                                // 605  // 613\n                                                                                                     // 606  // 614\n  debug('comp', this);                                                                               // 607  // 615\n}                                                                                                    // 608  // 616\n                                                                                                     // 609  // 617\nvar ANY = {};                                                                                        // 610  // 618\nComparator.prototype.parse = function(comp) {                                                        // 611  // 619\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 612  // 620\n  var m = comp.match(r);                                                                             // 613  // 621\n                                                                                                     // 614  // 622\n  if (!m)                                                                                            // 615  // 623\n    throw new TypeError('Invalid comparator: ' + comp);                                              // 616  // 624\n                                                                                                     // 617  // 625\n  this.operator = m[1];                                                                              // 618  // 626\n  if (this.operator === '=')                                                                         // 619  // 627\n    this.operator = '';                                                                              // 620  // 628\n                                                                                                     // 621  // 629\n  // if it literally is just '>' or '' then allow anything.                                          // 622  // 630\n  if (!m[2])                                                                                         // 623  // 631\n    this.semver = ANY;                                                                               // 624  // 632\n  else                                                                                               // 625  // 633\n    this.semver = new SemVer(m[2], this.loose);                                                      // 626  // 634\n};                                                                                                   // 627  // 635\n                                                                                                     // 628  // 636\nComparator.prototype.inspect = function() {                                                          // 629  // 637\n  return '<SemVer Comparator \"' + this + '\">';                                                       // 630  // 638\n};                                                                                                   // 631  // 639\n                                                                                                     // 632  // 640\nComparator.prototype.toString = function() {                                                         // 633  // 641\n  return this.value;                                                                                 // 634  // 642\n};                                                                                                   // 635  // 643\n                                                                                                     // 636  // 644\nComparator.prototype.test = function(version) {                                                      // 637  // 645\n  debug('Comparator.test', version, this.loose);                                                     // 638  // 646\n                                                                                                     // 639  // 647\n  if (this.semver === ANY)                                                                           // 640  // 648\n    return true;                                                                                     // 641  // 649\n                                                                                                     // 642  // 650\n  if (typeof version === 'string')                                                                   // 643  // 651\n    version = new SemVer(version, this.loose);                                                       // 644  // 652\n                                                                                                     // 645  // 653\n  return cmp(version, this.operator, this.semver, this.loose);                                       // 646  // 654\n};                                                                                                   // 647  // 655\n                                                                                                     // 648  // 656\n                                                                                                     // 649  // 657\nexports.Range = Range;                                                                               // 650  // 658\nfunction Range(range, loose) {                                                                       // 651  // 659\n  if ((range instanceof Range) && range.loose === loose)                                             // 652  // 660\n    return range;                                                                                    // 653  // 661\n                                                                                                     // 654  // 662\n  if (!(this instanceof Range))                                                                      // 655  // 663\n    return new Range(range, loose);                                                                  // 656  // 664\n                                                                                                     // 657  // 665\n  this.loose = loose;                                                                                // 658  // 666\n                                                                                                     // 659  // 667\n  // First, split based on boolean or ||                                                             // 660  // 668\n  this.raw = range;                                                                                  // 661  // 669\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {                                         // 662  // 670\n    return this.parseRange(range.trim());                                                            // 663  // 671\n  }, this).filter(function(c) {                                                                      // 664  // 672\n    // throw out any that are not relevant for whatever reason                                       // 665  // 673\n    return c.length;                                                                                 // 666  // 674\n  });                                                                                                // 667  // 675\n                                                                                                     // 668  // 676\n  if (!this.set.length) {                                                                            // 669  // 677\n    throw new TypeError('Invalid SemVer Range: ' + range);                                           // 670  // 678\n  }                                                                                                  // 671  // 679\n                                                                                                     // 672  // 680\n  this.format();                                                                                     // 673  // 681\n}                                                                                                    // 674  // 682\n                                                                                                     // 675  // 683\nRange.prototype.inspect = function() {                                                               // 676  // 684\n  return '<SemVer Range \"' + this.range + '\">';                                                      // 677  // 685\n};                                                                                                   // 678  // 686\n                                                                                                     // 679  // 687\nRange.prototype.format = function() {                                                                // 680  // 688\n  this.range = this.set.map(function(comps) {                                                        // 681  // 689\n    return comps.join(' ').trim();                                                                   // 682  // 690\n  }).join('||').trim();                                                                              // 683  // 691\n  return this.range;                                                                                 // 684  // 692\n};                                                                                                   // 685  // 693\n                                                                                                     // 686  // 694\nRange.prototype.toString = function() {                                                              // 687  // 695\n  return this.range;                                                                                 // 688  // 696\n};                                                                                                   // 689  // 697\n                                                                                                     // 690  // 698\nRange.prototype.parseRange = function(range) {                                                       // 691  // 699\n  var loose = this.loose;                                                                            // 692  // 700\n  range = range.trim();                                                                              // 693  // 701\n  debug('range', range, loose);                                                                      // 694  // 702\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`                                                            // 695  // 703\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];                                           // 696  // 704\n  range = range.replace(hr, hyphenReplace);                                                          // 697  // 705\n  debug('hyphen replace', range);                                                                    // 698  // 706\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`                                                            // 699  // 707\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);                                  // 700  // 708\n  debug('comparator trim', range, re[COMPARATORTRIM]);                                               // 701  // 709\n                                                                                                     // 702  // 710\n  // `~ 1.2.3` => `~1.2.3`                                                                           // 703  // 711\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);                                            // 704  // 712\n                                                                                                     // 705  // 713\n  // `^ 1.2.3` => `^1.2.3`                                                                           // 706  // 714\n  range = range.replace(re[CARETTRIM], caretTrimReplace);                                            // 707  // 715\n                                                                                                     // 708  // 716\n  // normalize spaces                                                                                // 709  // 717\n  range = range.split(/\\s+/).join(' ');                                                              // 710  // 718\n                                                                                                     // 711  // 719\n  // At this point, the range is completely trimmed and                                              // 712  // 720\n  // ready to be split into comparators.                                                             // 713  // 721\n                                                                                                     // 714  // 722\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 715  // 723\n  var set = range.split(' ').map(function(comp) {                                                    // 716  // 724\n    return parseComparator(comp, loose);                                                             // 717  // 725\n  }).join(' ').split(/\\s+/);                                                                         // 718  // 726\n  if (this.loose) {                                                                                  // 719  // 727\n    // in loose mode, throw out any that are not valid comparators                                   // 720  // 728\n    set = set.filter(function(comp) {                                                                // 721  // 729\n      return !!comp.match(compRe);                                                                   // 722  // 730\n    });                                                                                              // 723  // 731\n  }                                                                                                  // 724  // 732\n  set = set.map(function(comp) {                                                                     // 725  // 733\n    return new Comparator(comp, loose);                                                              // 726  // 734\n  });                                                                                                // 727  // 735\n                                                                                                     // 728  // 736\n  return set;                                                                                        // 729  // 737\n};                                                                                                   // 730  // 738\n                                                                                                     // 731  // 739\n// Mostly just for testing and legacy API reasons                                                    // 732  // 740\nexports.toComparators = toComparators;                                                               // 733  // 741\nfunction toComparators(range, loose) {                                                               // 734  // 742\n  return new Range(range, loose).set.map(function(comp) {                                            // 735  // 743\n    return comp.map(function(c) {                                                                    // 736  // 744\n      return c.value;                                                                                // 737  // 745\n    }).join(' ').trim().split(' ');                                                                  // 738  // 746\n  });                                                                                                // 739  // 747\n}                                                                                                    // 740  // 748\n                                                                                                     // 741  // 749\n// comprised of xranges, tildes, stars, and gtlt's at this point.                                    // 742  // 750\n// already replaced the hyphen ranges                                                                // 743  // 751\n// turn into a set of JUST comparators.                                                              // 744  // 752\nfunction parseComparator(comp, loose) {                                                              // 745  // 753\n  debug('comp', comp);                                                                               // 746  // 754\n  comp = replaceCarets(comp, loose);                                                                 // 747  // 755\n  debug('caret', comp);                                                                              // 748  // 756\n  comp = replaceTildes(comp, loose);                                                                 // 749  // 757\n  debug('tildes', comp);                                                                             // 750  // 758\n  comp = replaceXRanges(comp, loose);                                                                // 751  // 759\n  debug('xrange', comp);                                                                             // 752  // 760\n  comp = replaceStars(comp, loose);                                                                  // 753  // 761\n  debug('stars', comp);                                                                              // 754  // 762\n  return comp;                                                                                       // 755  // 763\n}                                                                                                    // 756  // 764\n                                                                                                     // 757  // 765\nfunction isX(id) {                                                                                   // 758  // 766\n  return !id || id.toLowerCase() === 'x' || id === '*';                                              // 759  // 767\n}                                                                                                    // 760  // 768\n                                                                                                     // 761  // 769\n// ~, ~> --> * (any, kinda silly)                                                                    // 762  // 770\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0                                           // 763  // 771\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0                                                   // 764  // 772\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0                                                   // 765  // 773\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0                                                                // 766  // 774\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0                                                                // 767  // 775\nfunction replaceTildes(comp, loose) {                                                                // 768  // 776\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 769  // 777\n    return replaceTilde(comp, loose);                                                                // 770  // 778\n  }).join(' ');                                                                                      // 771  // 779\n}                                                                                                    // 772  // 780\n                                                                                                     // 773  // 781\nfunction replaceTilde(comp, loose) {                                                                 // 774  // 782\n  var r = loose ? re[TILDELOOSE] : re[TILDE];                                                        // 775  // 783\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 776  // 784\n    debug('tilde', comp, _, M, m, p, pr);                                                            // 777  // 785\n    var ret;                                                                                         // 778  // 786\n                                                                                                     // 779  // 787\n    if (isX(M))                                                                                      // 780  // 788\n      ret = '';                                                                                      // 781  // 789\n    else if (isX(m))                                                                                 // 782  // 790\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 783  // 791\n    else if (isX(p))                                                                                 // 784  // 792\n      // ~1.2 == >=1.2.0- <1.3.0-                                                                    // 785  // 793\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 786  // 794\n    else if (pr) {                                                                                   // 787  // 795\n      debug('replaceTilde pr', pr);                                                                  // 788  // 796\n      if (pr.charAt(0) !== '-')                                                                      // 789  // 797\n        pr = '-' + pr;                                                                               // 790  // 798\n      ret = '>=' + M + '.' + m + '.' + p + pr +                                                      // 791  // 799\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 792  // 800\n    } else                                                                                           // 793  // 801\n      // ~1.2.3 == >=1.2.3 <1.3.0                                                                    // 794  // 802\n      ret = '>=' + M + '.' + m + '.' + p +                                                           // 795  // 803\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 796  // 804\n                                                                                                     // 797  // 805\n    debug('tilde return', ret);                                                                      // 798  // 806\n    return ret;                                                                                      // 799  // 807\n  });                                                                                                // 800  // 808\n}                                                                                                    // 801  // 809\n                                                                                                     // 802  // 810\n// ^ --> * (any, kinda silly)                                                                        // 803  // 811\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0                                                               // 804  // 812\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0                                                                   // 805  // 813\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0                                                                   // 806  // 814\n// ^1.2.3 --> >=1.2.3 <2.0.0                                                                         // 807  // 815\n// ^1.2.0 --> >=1.2.0 <2.0.0                                                                         // 808  // 816\nfunction replaceCarets(comp, loose) {                                                                // 809  // 817\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 810  // 818\n    return replaceCaret(comp, loose);                                                                // 811  // 819\n  }).join(' ');                                                                                      // 812  // 820\n}                                                                                                    // 813  // 821\n                                                                                                     // 814  // 822\nfunction replaceCaret(comp, loose) {                                                                 // 815  // 823\n  debug('caret', comp, loose);                                                                       // 816  // 824\n  var r = loose ? re[CARETLOOSE] : re[CARET];                                                        // 817  // 825\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 818  // 826\n    debug('caret', comp, _, M, m, p, pr);                                                            // 819  // 827\n    var ret;                                                                                         // 820  // 828\n                                                                                                     // 821  // 829\n    if (isX(M))                                                                                      // 822  // 830\n      ret = '';                                                                                      // 823  // 831\n    else if (isX(m))                                                                                 // 824  // 832\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 825  // 833\n    else if (isX(p)) {                                                                               // 826  // 834\n      if (M === '0')                                                                                 // 827  // 835\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                               // 828  // 836\n      else                                                                                           // 829  // 837\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';                                       // 830  // 838\n    } else if (pr) {                                                                                 // 831  // 839\n      debug('replaceCaret pr', pr);                                                                  // 832  // 840\n      if (pr.charAt(0) !== '-')                                                                      // 833  // 841\n        pr = '-' + pr;                                                                               // 834  // 842\n      if (M === '0') {                                                                               // 835  // 843\n        if (m === '0')                                                                               // 836  // 844\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 837  // 845\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 838  // 846\n        else                                                                                         // 839  // 847\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 840  // 848\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 841  // 849\n      } else                                                                                         // 842  // 850\n        ret = '>=' + M + '.' + m + '.' + p + pr +                                                    // 843  // 851\n              ' <' + (+M + 1) + '.0.0';                                                              // 844  // 852\n    } else {                                                                                         // 845  // 853\n      debug('no pr');                                                                                // 846  // 854\n      if (M === '0') {                                                                               // 847  // 855\n        if (m === '0')                                                                               // 848  // 856\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 849  // 857\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 850  // 858\n        else                                                                                         // 851  // 859\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 852  // 860\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 853  // 861\n      } else                                                                                         // 854  // 862\n        ret = '>=' + M + '.' + m + '.' + p +                                                         // 855  // 863\n              ' <' + (+M + 1) + '.0.0';                                                              // 856  // 864\n    }                                                                                                // 857  // 865\n                                                                                                     // 858  // 866\n    debug('caret return', ret);                                                                      // 859  // 867\n    return ret;                                                                                      // 860  // 868\n  });                                                                                                // 861  // 869\n}                                                                                                    // 862  // 870\n                                                                                                     // 863  // 871\nfunction replaceXRanges(comp, loose) {                                                               // 864  // 872\n  debug('replaceXRanges', comp, loose);                                                              // 865  // 873\n  return comp.split(/\\s+/).map(function(comp) {                                                      // 866  // 874\n    return replaceXRange(comp, loose);                                                               // 867  // 875\n  }).join(' ');                                                                                      // 868  // 876\n}                                                                                                    // 869  // 877\n                                                                                                     // 870  // 878\nfunction replaceXRange(comp, loose) {                                                                // 871  // 879\n  comp = comp.trim();                                                                                // 872  // 880\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];                                                      // 873  // 881\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {                                          // 874  // 882\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);                                                   // 875  // 883\n    var xM = isX(M);                                                                                 // 876  // 884\n    var xm = xM || isX(m);                                                                           // 877  // 885\n    var xp = xm || isX(p);                                                                           // 878  // 886\n    var anyX = xp;                                                                                   // 879  // 887\n                                                                                                     // 880  // 888\n    if (gtlt === '=' && anyX)                                                                        // 881  // 889\n      gtlt = '';                                                                                     // 882  // 890\n                                                                                                     // 883  // 891\n    if (xM) {                                                                                        // 884  // 892\n      if (gtlt === '>' || gtlt === '<') {                                                            // 885  // 893\n        // nothing is allowed                                                                        // 886  // 894\n        ret = '<0.0.0';                                                                              // 887  // 895\n      } else {                                                                                       // 888  // 896\n        // nothing is forbidden                                                                      // 889  // 897\n        ret = '*';                                                                                   // 890  // 898\n      }                                                                                              // 891  // 899\n    } else if (gtlt && anyX) {                                                                       // 892  // 900\n      // replace X with 0                                                                            // 893  // 901\n      if (xm)                                                                                        // 894  // 902\n        m = 0;                                                                                       // 895  // 903\n      if (xp)                                                                                        // 896  // 904\n        p = 0;                                                                                       // 897  // 905\n                                                                                                     // 898  // 906\n      if (gtlt === '>') {                                                                            // 899  // 907\n        // >1 => >=2.0.0                                                                             // 900  // 908\n        // >1.2 => >=1.3.0                                                                           // 901  // 909\n        // >1.2.3 => >= 1.2.4                                                                        // 902  // 910\n        gtlt = '>=';                                                                                 // 903  // 911\n        if (xm) {                                                                                    // 904  // 912\n          M = +M + 1;                                                                                // 905  // 913\n          m = 0;                                                                                     // 906  // 914\n          p = 0;                                                                                     // 907  // 915\n        } else if (xp) {                                                                             // 908  // 916\n          m = +m + 1;                                                                                // 909  // 917\n          p = 0;                                                                                     // 910  // 918\n        }                                                                                            // 911  // 919\n      } else if (gtlt === '<=') {                                                                    // 912  // 920\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should                                        // 913  // 921\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.                                          // 914  // 922\n        gtlt = '<'                                                                                   // 915  // 923\n        if (xm)                                                                                      // 916  // 924\n          M = +M + 1                                                                                 // 917  // 925\n        else                                                                                         // 918  // 926\n          m = +m + 1                                                                                 // 919  // 927\n      }                                                                                              // 920  // 928\n                                                                                                     // 921  // 929\n      ret = gtlt + M + '.' + m + '.' + p;                                                            // 922  // 930\n    } else if (xm) {                                                                                 // 923  // 931\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 924  // 932\n    } else if (xp) {                                                                                 // 925  // 933\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 926  // 934\n    }                                                                                                // 927  // 935\n                                                                                                     // 928  // 936\n    debug('xRange return', ret);                                                                     // 929  // 937\n                                                                                                     // 930  // 938\n    return ret;                                                                                      // 931  // 939\n  });                                                                                                // 932  // 940\n}                                                                                                    // 933  // 941\n                                                                                                     // 934  // 942\n// Because * is AND-ed with everything else in the comparator,                                       // 935  // 943\n// and '' means \"any version\", just remove the *s entirely.                                          // 936  // 944\nfunction replaceStars(comp, loose) {                                                                 // 937  // 945\n  debug('replaceStars', comp, loose);                                                                // 938  // 946\n  // Looseness is ignored here.  star is always as loose as it gets!                                 // 939  // 947\n  return comp.trim().replace(re[STAR], '');                                                          // 940  // 948\n}                                                                                                    // 941  // 949\n                                                                                                     // 942  // 950\n// This function is passed to string.replace(re[HYPHENRANGE])                                        // 943  // 951\n// M, m, patch, prerelease, build                                                                    // 944  // 952\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5                                                                    // 945  // 953\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do                                                   // 946  // 954\n// 1.2 - 3.4 => >=1.2.0 <3.5.0                                                                       // 947  // 955\nfunction hyphenReplace($0,                                                                           // 948  // 956\n                       from, fM, fm, fp, fpr, fb,                                                    // 949  // 957\n                       to, tM, tm, tp, tpr, tb) {                                                    // 950  // 958\n                                                                                                     // 951  // 959\n  if (isX(fM))                                                                                       // 952  // 960\n    from = '';                                                                                       // 953  // 961\n  else if (isX(fm))                                                                                  // 954  // 962\n    from = '>=' + fM + '.0.0';                                                                       // 955  // 963\n  else if (isX(fp))                                                                                  // 956  // 964\n    from = '>=' + fM + '.' + fm + '.0';                                                              // 957  // 965\n  else                                                                                               // 958  // 966\n    from = '>=' + from;                                                                              // 959  // 967\n                                                                                                     // 960  // 968\n  if (isX(tM))                                                                                       // 961  // 969\n    to = '';                                                                                         // 962  // 970\n  else if (isX(tm))                                                                                  // 963  // 971\n    to = '<' + (+tM + 1) + '.0.0';                                                                   // 964  // 972\n  else if (isX(tp))                                                                                  // 965  // 973\n    to = '<' + tM + '.' + (+tm + 1) + '.0';                                                          // 966  // 974\n  else if (tpr)                                                                                      // 967  // 975\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;                                                // 968  // 976\n  else                                                                                               // 969  // 977\n    to = '<=' + to;                                                                                  // 970  // 978\n                                                                                                     // 971  // 979\n  return (from + ' ' + to).trim();                                                                   // 972  // 980\n}                                                                                                    // 973  // 981\n                                                                                                     // 974  // 982\n                                                                                                     // 975  // 983\n// if ANY of the sets match ALL of its comparators, then pass                                        // 976  // 984\nRange.prototype.test = function(version) {                                                           // 977  // 985\n  if (!version)                                                                                      // 978  // 986\n    return false;                                                                                    // 979  // 987\n                                                                                                     // 980  // 988\n  if (typeof version === 'string')                                                                   // 981  // 989\n    version = new SemVer(version, this.loose);                                                       // 982  // 990\n                                                                                                     // 983  // 991\n  for (var i = 0; i < this.set.length; i++) {                                                        // 984  // 992\n    if (testSet(this.set[i], version))                                                               // 985  // 993\n      return true;                                                                                   // 986  // 994\n  }                                                                                                  // 987  // 995\n  return false;                                                                                      // 988  // 996\n};                                                                                                   // 989  // 997\n                                                                                                     // 990  // 998\nfunction testSet(set, version) {                                                                     // 991  // 999\n  for (var i = 0; i < set.length; i++) {                                                             // 992  // 1000\n    if (!set[i].test(version))                                                                       // 993  // 1001\n      return false;                                                                                  // 994  // 1002\n  }                                                                                                  // 995  // 1003\n                                                                                                     // 996  // 1004\n  if (version.prerelease.length) {                                                                   // 997  // 1005\n    // Find the set of versions that are allowed to have prereleases                                 // 998  // 1006\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0                                      // 999  // 1007\n    // That should allow `1.2.3-pr.2` to pass.                                                       // 1000\n    // However, `1.2.4-alpha.notready` should NOT be allowed,                                        // 1001\n    // even though it's within the range set by the comparators.                                     // 1002\n    for (var i = 0; i < set.length; i++) {                                                           // 1003\n      debug(set[i].semver);                                                                          // 1004\n      if (set[i].semver === ANY)                                                                     // 1005\n        return true;                                                                                 // 1006\n                                                                                                     // 1007\n      if (set[i].semver.prerelease.length > 0) {                                                     // 1008\n        var allowed = set[i].semver;                                                                 // 1009\n        if (allowed.major === version.major &&                                                       // 1010\n            allowed.minor === version.minor &&                                                       // 1011\n            allowed.patch === version.patch)                                                         // 1012\n          return true;                                                                               // 1013\n      }                                                                                              // 1014\n    }                                                                                                // 1015\n                                                                                                     // 1016\n    // Version has a -pre, but it's not one of the ones we like.                                     // 1017\n    return false;                                                                                    // 1018\n  }                                                                                                  // 1019\n                                                                                                     // 1020\n  return true;                                                                                       // 1021\n}                                                                                                    // 1022\n                                                                                                     // 1023\nexports.satisfies = satisfies;                                                                       // 1024\nfunction satisfies(version, range, loose) {                                                          // 1025\n  try {                                                                                              // 1026\n    range = new Range(range, loose);                                                                 // 1027\n  } catch (er) {                                                                                     // 1028\n    return false;                                                                                    // 1029\n  }                                                                                                  // 1030\n  return range.test(version);                                                                        // 1031\n}                                                                                                    // 1032\n                                                                                                     // 1033\nexports.maxSatisfying = maxSatisfying;                                                               // 1034\nfunction maxSatisfying(versions, range, loose) {                                                     // 1035\n  return versions.filter(function(version) {                                                         // 1036\n    return satisfies(version, range, loose);                                                         // 1037\n  }).sort(function(a, b) {                                                                           // 1038\n    return rcompare(a, b, loose);                                                                    // 1039\n  })[0] || null;                                                                                     // 1040\n}                                                                                                    // 1041\n                                                                                                     // 1042\nexports.validRange = validRange;                                                                     // 1043\nfunction validRange(range, loose) {                                                                  // 1044\n  try {                                                                                              // 1045\n    // Return '*' instead of '' so that truthiness works.                                            // 1046\n    // This will throw if it's invalid anyway                                                        // 1047\n    return new Range(range, loose).range || '*';                                                     // 1048\n  } catch (er) {                                                                                     // 1049\n    return null;                                                                                     // 1050\n  }                                                                                                  // 1051\n}                                                                                                    // 1052\n                                                                                                     // 1053\n// Determine if version is less than all the versions possible in the range                          // 1054\nexports.ltr = ltr;                                                                                   // 1055\nfunction ltr(version, range, loose) {                                                                // 1056\n  return outside(version, range, '<', loose);                                                        // 1057\n}                                                                                                    // 1058\n                                                                                                     // 1059\n// Determine if version is greater than all the versions possible in the range.                      // 1060\nexports.gtr = gtr;                                                                                   // 1061\nfunction gtr(version, range, loose) {                                                                // 1062\n  return outside(version, range, '>', loose);                                                        // 1063\n}                                                                                                    // 1064\n                                                                                                     // 1065\nexports.outside = outside;                                                                           // 1066\nfunction outside(version, range, hilo, loose) {                                                      // 1067\n  version = new SemVer(version, loose);                                                              // 1068\n  range = new Range(range, loose);                                                                   // 1069\n                                                                                                     // 1070\n  var gtfn, ltefn, ltfn, comp, ecomp;                                                                // 1071\n  switch (hilo) {                                                                                    // 1072\n    case '>':                                                                                        // 1073\n      gtfn = gt;                                                                                     // 1074\n      ltefn = lte;                                                                                   // 1075\n      ltfn = lt;                                                                                     // 1076\n      comp = '>';                                                                                    // 1077\n      ecomp = '>=';                                                                                  // 1078\n      break;                                                                                         // 1079\n    case '<':                                                                                        // 1080\n      gtfn = lt;                                                                                     // 1081\n      ltefn = gte;                                                                                   // 1082\n      ltfn = gt;                                                                                     // 1083\n      comp = '<';                                                                                    // 1084\n      ecomp = '<=';                                                                                  // 1085\n      break;                                                                                         // 1086\n    default:                                                                                         // 1087\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');                                  // 1088\n  }                                                                                                  // 1089\n                                                                                                     // 1090\n  // If it satisifes the range it is not outside                                                     // 1091\n  if (satisfies(version, range, loose)) {                                                            // 1092\n    return false;                                                                                    // 1093\n  }                                                                                                  // 1094\n                                                                                                     // 1095\n  // From now on, variable terms are as if we're in \"gtr\" mode.                                      // 1096\n  // but note that everything is flipped for the \"ltr\" function.                                     // 1097\n                                                                                                     // 1098\n  for (var i = 0; i < range.set.length; ++i) {                                                       // 1099\n    var comparators = range.set[i];                                                                  // 1100\n                                                                                                     // 1101\n    var high = null;                                                                                 // 1102\n    var low = null;                                                                                  // 1103\n                                                                                                     // 1104\n    comparators.forEach(function(comparator) {                                                       // 1105\n      high = high || comparator;                                                                     // 1106\n      low = low || comparator;                                                                       // 1107\n      if (gtfn(comparator.semver, high.semver, loose)) {                                             // 1108\n        high = comparator;                                                                           // 1109\n      } else if (ltfn(comparator.semver, low.semver, loose)) {                                       // 1110\n        low = comparator;                                                                            // 1111\n      }                                                                                              // 1112\n    });                                                                                              // 1113\n                                                                                                     // 1114\n    // If the edge version comparator has a operator then our version                                // 1115\n    // isn't outside it                                                                              // 1116\n    if (high.operator === comp || high.operator === ecomp) {                                         // 1117\n      return false;                                                                                  // 1118\n    }                                                                                                // 1119\n                                                                                                     // 1120\n    // If the lowest version comparator has an operator and our version                              // 1121\n    // is less than it then it isn't higher than the range                                           // 1122\n    if ((!low.operator || low.operator === comp) &&                                                  // 1123\n        ltefn(version, low.semver)) {                                                                // 1124\n      return false;                                                                                  // 1125\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {                                // 1126\n      return false;                                                                                  // 1127\n    }                                                                                                // 1128\n  }                                                                                                  // 1129\n  return true;                                                                                       // 1130\n}                                                                                                    // 1131\n                                                                                                     // 1132\n// Use the define() function if we're in AMD land                                                    // 1133\nif (typeof define === 'function' && define.amd)                                                      // 1134\n  define(exports);                                                                                   // 1135\n                                                                                                     // 1136\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 1145\n                                                                                                             // 1146\n}).call(this);                                                                                               // 1147\n                                                                                                             // 1148\n                                                                                                             // 1149\n                                                                                                             // 1150\n                                                                                                             // 1151\n                                                                                                             // 1152\n                                                                                                             // 1153\n(function(){                                                                                                 // 1154\n                                                                                                             // 1155\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 1156\n//                                                                                                   //      // 1157\n// packages/package-version-parser/package-version-parser.js                                         //      // 1158\n//                                                                                                   //      // 1159\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 1160\n                                                                                                     //      // 1161\n// This file is in tools/package-version-parser.js and is symlinked into                             // 1    // 1162\n// packages/package-version-parser/package-version-parser.js. It's part of both                      // 2    // 1163\n// the tool and the package!  We don't use an isopacket for it because it used                       // 3    // 1164\n// to be required as part of building isopackets (though that may no longer be                       // 4    // 1165\n// true).                                                                                            // 5    // 1166\nvar inTool = typeof Package === 'undefined';                                                         // 6    // 1167\n                                                                                                     // 7    // 1168\n                                                                                                     // 8    // 1169\nvar semver = inTool ?                                                                                // 9    // 1170\n  require ('../../dev_bundle/lib/node_modules/semver') : SemVer410;                                  // 10   // 1171\nvar __ = inTool ? require('../../dev_bundle/lib/node_modules/underscore') : _;                       // 11   // 1172\n                                                                                                     // 12   // 1173\n// Takes in a meteor version string, for example 1.2.3-rc.5_1+12345.                                 // 13   // 1174\n//                                                                                                   // 14   // 1175\n// Returns an object composed of the following:                                                      // 15   // 1176\n//  * major (integer >= 0)                                                                           // 16   // 1177\n//  * minor (integer >= 0)                                                                           // 17   // 1178\n//  * patch (integer >= 0)                                                                           // 18   // 1179\n//  * prerelease (Array of Number-or-String, possibly empty)                                         // 19   // 1180\n//  * wrapNum (integer >= 0)                                                                         // 20   // 1181\n//  * build (Array of String, possibly empty)                                                        // 21   // 1182\n//  * raw (String), the raw meteor version string                                                    // 22   // 1183\n//  * version (String), canonical meteor version without build ID                                    // 23   // 1184\n//  * semver (String), canonical semver version with build ID but no wrap num                        // 24   // 1185\n//                                                                                                   // 25   // 1186\n// The input string \"1.2.3-rc.5_1+12345\" has a (major, minor, patch) of                              // 26   // 1187\n// (1, 2, 3), a prerelease of [\"rc\", 5], a wrapNum of 1, a build of                                  // 27   // 1188\n// [\"12345\"], a raw of \"1.2.3-rc.5_1+12345\", a version of                                            // 28   // 1189\n// \"1.2.3-rc.5_1\", and a semver of \"1.2.3-rc.5+12345\".                                               // 29   // 1190\n//                                                                                                   // 30   // 1191\n// Throws if the version string is invalid in any way.                                               // 31   // 1192\n//                                                                                                   // 32   // 1193\n// You can write `PV.parse(\"1.2.3\")` as an alternative to `new PV(\"1.2.3\")`                          // 33   // 1194\nvar PV = function (versionString) {                                                                  // 34   // 1195\n  if (! (typeof versionString === 'string')) {                                                       // 35   // 1196\n    throw new Error(\"Invalid PackageVersion argument: \" + versionString);                            // 36   // 1197\n  }                                                                                                  // 37   // 1198\n  if (! versionString) {                                                                             // 38   // 1199\n    throwVersionParserError(\"Empty string is not a valid version\");                                  // 39   // 1200\n  }                                                                                                  // 40   // 1201\n                                                                                                     // 41   // 1202\n  // The buildID (\"+foo\" suffix) is part of semver, but split it off                                 // 42   // 1203\n  // because it comes after the wrapNum.  The wrapNum (\"_123\" suffix)                                // 43   // 1204\n  // is a Meteor extension to semver.                                                                // 44   // 1205\n  var plusSplit = versionString.split('+');                                                          // 45   // 1206\n  var wrapSplit = plusSplit[0].split('_');                                                           // 46   // 1207\n  var wrapNum = 0;                                                                                   // 47   // 1208\n                                                                                                     // 48   // 1209\n  if (plusSplit.length > 2) {                                                                        // 49   // 1210\n    throwVersionParserError(\"Can't have two + in version: \" + versionString);                        // 50   // 1211\n  }                                                                                                  // 51   // 1212\n  if (wrapSplit.length > 2) {                                                                        // 52   // 1213\n    throwVersionParserError(\"Can't have two _ in version: \" + versionString);                        // 53   // 1214\n  }                                                                                                  // 54   // 1215\n  if (wrapSplit.length > 1) {                                                                        // 55   // 1216\n    wrapNum = wrapSplit[1];                                                                          // 56   // 1217\n    if (! wrapNum) {                                                                                 // 57   // 1218\n      throwVersionParserError(\"A wrap number must follow _\");                                        // 58   // 1219\n    } else if (!/^\\d+$/.test(wrapNum)) {                                                             // 59   // 1220\n      throwVersionParserError(                                                                       // 60   // 1221\n        \"The wrap number (after _) must contain only digits, so \" +                                  // 61   // 1222\n          versionString + \" is invalid.\");                                                           // 62   // 1223\n    } else if (wrapNum[0] === \"0\") {                                                                 // 63   // 1224\n      throwVersionParserError(                                                                       // 64   // 1225\n        \"The wrap number (after _) must not have a leading zero, so \" +                              // 65   // 1226\n          versionString + \" is invalid.\");                                                           // 66   // 1227\n    }                                                                                                // 67   // 1228\n    wrapNum = parseInt(wrapNum, 10);                                                                 // 68   // 1229\n  }                                                                                                  // 69   // 1230\n                                                                                                     // 70   // 1231\n  // semverPart is everything but the wrapNum, so for \"1.0.0_2+xyz\",                                 // 71   // 1232\n  // it is \"1.0.0+xyz\".                                                                              // 72   // 1233\n  var semverPart = wrapSplit[0];                                                                     // 73   // 1234\n  if (plusSplit.length > 1) {                                                                        // 74   // 1235\n    semverPart += \"+\" + plusSplit[1];                                                                // 75   // 1236\n  }                                                                                                  // 76   // 1237\n                                                                                                     // 77   // 1238\n  // NPM's semver spec supports things like 'v1.0.0' and considers them valid,                       // 78   // 1239\n  // but we don't. Everything before the + or - should be of the x.x.x form.                         // 79   // 1240\n  if (! /^\\d+\\.\\d+\\.\\d+(\\+|-|$)/.test(semverPart)) {                                                 // 80   // 1241\n    throwVersionParserError(                                                                         // 81   // 1242\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 82   // 1243\n        + versionString + \"'.\");                                                                     // 83   // 1244\n  };                                                                                                 // 84   // 1245\n                                                                                                     // 85   // 1246\n  var semverParse = semver.parse(semverPart);                                                        // 86   // 1247\n  if (! semverParse) {                                                                               // 87   // 1248\n    throwVersionParserError(                                                                         // 88   // 1249\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 89   // 1250\n        + semverPart + \"'.\");                                                                        // 90   // 1251\n  }                                                                                                  // 91   // 1252\n                                                                                                     // 92   // 1253\n  this.major = semverParse.major; // Number                                                          // 93   // 1254\n  this.minor = semverParse.minor; // Number                                                          // 94   // 1255\n  this.patch = semverParse.patch; // Number                                                          // 95   // 1256\n  this.prerelease = semverParse.prerelease; // [OneOf(Number, String)]                               // 96   // 1257\n  this.wrapNum = wrapNum; // Number                                                                  // 97   // 1258\n  this.build = semverParse.build; // [String]                                                        // 98   // 1259\n  this.raw = versionString; // the entire version string                                             // 99   // 1260\n  // `.version` is everything but the build ID (\"+foo\"), and it                                      // 100  // 1261\n  // has been run through semver's canonicalization, ie \"cleaned\"                                    // 101  // 1262\n  // (for whatever that's worth)                                                                     // 102  // 1263\n  this.version = semverParse.version + (wrapNum ? '_' + wrapNum : '');                               // 103  // 1264\n  // everything but the wrapnum (\"_123\")                                                             // 104  // 1265\n  this.semver = semverParse.version + (                                                              // 105  // 1266\n    semverParse.build.length ? '+' + semverParse.build.join('.') : '');                              // 106  // 1267\n};                                                                                                   // 107  // 1268\n                                                                                                     // 108  // 1269\nPV.parse = function (versionString) {                                                                // 109  // 1270\n  return new PV(versionString);                                                                      // 110  // 1271\n};                                                                                                   // 111  // 1272\n                                                                                                     // 112  // 1273\nif (inTool) {                                                                                        // 113  // 1274\n  module.exports = PV;                                                                               // 114  // 1275\n} else {                                                                                             // 115  // 1276\n  PackageVersion = PV;                                                                               // 116  // 1277\n}                                                                                                    // 117  // 1278\n                                                                                                     // 118  // 1279\n// Converts a meteor version into a large floating point number, which                               // 119  // 1280\n// is (more or less [*]) unique to that version. Satisfies the                                       // 120  // 1281\n// following guarantee: If PV.lessThan(v1, v2) then                                                  // 121  // 1282\n// PV.versionMagnitude(v1) < PV.versionMagnitude(v2) [*]                                             // 122  // 1283\n//                                                                                                   // 123  // 1284\n// [* XXX!] We don't quite satisfy the uniqueness and comparison properties in                       // 124  // 1285\n// these cases:                                                                                      // 125  // 1286\n// 1. If any of the version parts are greater than 100 (pretty unlikely?)                            // 126  // 1287\n// 2. If we're dealing with a prerelease version, we only look at the                                // 127  // 1288\n//    first two characters of each prerelease part. So, \"1.0.0-beta\" and                             // 128  // 1289\n//    \"1.0.0-bear\" will have the same magnitude.                                                     // 129  // 1290\n// 3. If we're dealing with a prerelease version with more than two parts, eg                        // 130  // 1291\n//    \"1.0.0-rc.0.1\". In this comparison may fail since we'd get to the limit                        // 131  // 1292\n//    of JavaScript floating point precision.                                                        // 132  // 1293\n//                                                                                                   // 133  // 1294\n// If we wanted to fix this, we'd make this function return a BigFloat                               // 134  // 1295\n// instead of a vanilla JavaScript number. That will make the                                        // 135  // 1296\n// constraint solver slower (by how much?), and would require some                                   // 136  // 1297\n// careful thought.                                                                                  // 137  // 1298\n// (Or it could just return some sort of tuple, and ensure that                                      // 138  // 1299\n// the cost functions that consume this can deal with tuples...)                                     // 139  // 1300\nPV.versionMagnitude = function (versionString) {                                                     // 140  // 1301\n  var v = PV.parse(versionString);                                                                   // 141  // 1302\n                                                                                                     // 142  // 1303\n  return v.major * 100 * 100 +                                                                       // 143  // 1304\n    v.minor * 100 +                                                                                  // 144  // 1305\n    v.patch +                                                                                        // 145  // 1306\n    v.wrapNum / 100 +                                                                                // 146  // 1307\n    prereleaseIdentifierToFraction(v.prerelease) / 100 / 100;                                        // 147  // 1308\n};                                                                                                   // 148  // 1309\n                                                                                                     // 149  // 1310\n// Accepts an array, eg [\"rc\", 2, 3]. Returns a number in the range                                  // 150  // 1311\n// (-1, 0].  An empty array returns 0. A non-empty string returns a                                  // 151  // 1312\n// number that is \"as large\" as the its precedence.                                                  // 152  // 1313\nvar prereleaseIdentifierToFraction = function (prerelease) {                                         // 153  // 1314\n  if (prerelease.length === 0)                                                                       // 154  // 1315\n    return 0;                                                                                        // 155  // 1316\n                                                                                                     // 156  // 1317\n  return __.reduce(prerelease, function (memo, part, index) {                                        // 157  // 1318\n    var digit;                                                                                       // 158  // 1319\n    if (typeof part === 'number') {                                                                  // 159  // 1320\n      digit = part+1;                                                                                // 160  // 1321\n    } else if (typeof part === 'string') {                                                           // 161  // 1322\n      var VALID_CHARACTERS =                                                                         // 162  // 1323\n            \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";                       // 163  // 1324\n                                                                                                     // 164  // 1325\n      var validCharToNumber = function (ch) {                                                        // 165  // 1326\n        var result = VALID_CHARACTERS.indexOf(ch);                                                   // 166  // 1327\n        if (result === -1)                                                                           // 167  // 1328\n          throw new Error(\"Unexpected character in prerelease identifier: \" + ch);                   // 168  // 1329\n        else                                                                                         // 169  // 1330\n          return result;                                                                             // 170  // 1331\n      };                                                                                             // 171  // 1332\n                                                                                                     // 172  // 1333\n      digit = 101 + // Numeric parts always have lower precedence than non-numeric parts.            // 173  // 1334\n        validCharToNumber(part[0]) * VALID_CHARACTERS.length +                                       // 174  // 1335\n        (part[1] ? validCharToNumber(part[1]) : 0);                                                  // 175  // 1336\n    } else {                                                                                         // 176  // 1337\n      throw new Error(\"Unexpected prerelease identifier part: \" + part + \" of type \" + typeof part);         // 1338\n    }                                                                                                // 178  // 1339\n                                                                                                     // 179  // 1340\n    // 4100 > 101 + VALID_CHARACTERS.length *                                                        // 180  // 1341\n    // VALID_CHARACTERS.length. And there's a test to verify this                                    // 181  // 1342\n    // (\"test the edges of `versionMagnitude`\")                                                      // 182  // 1343\n    return memo + digit / Math.pow(4100, index+1);                                                   // 183  // 1344\n  }, -1);                                                                                            // 184  // 1345\n};                                                                                                   // 185  // 1346\n                                                                                                     // 186  // 1347\n// Takes in two meteor versions. Returns true if the first one is less than the second.              // 187  // 1348\n// Versions are strings or PackageVersion objects.                                                   // 188  // 1349\nPV.lessThan = function (versionOne, versionTwo) {                                                    // 189  // 1350\n  return PV.compare(versionOne, versionTwo) < 0;                                                     // 190  // 1351\n};                                                                                                   // 191  // 1352\n                                                                                                     // 192  // 1353\n// Given a string version, returns its major version (the first section of the                       // 193  // 1354\n// semver), as an integer. Two versions are compatible if they have the same                         // 194  // 1355\n// version number.                                                                                   // 195  // 1356\n//                                                                                                   // 196  // 1357\n// versionString: valid meteor version string.                                                       // 197  // 1358\nPV.majorVersion = function (versionString) {                                                         // 198  // 1359\n  return PV.parse(versionString).major;                                                              // 199  // 1360\n};                                                                                                   // 200  // 1361\n                                                                                                     // 201  // 1362\n// Takes in two meteor versions. Returns 0 if equal, a positive number if v1                         // 202  // 1363\n// is greater, a negative number if v2 is greater.                                                   // 203  // 1364\n// Versions are strings or PackageVersion objects.                                                   // 204  // 1365\nPV.compare = function (versionOne, versionTwo) {                                                     // 205  // 1366\n  var v1 = versionOne;                                                                               // 206  // 1367\n  if (typeof v1 === 'string') {                                                                      // 207  // 1368\n    v1 = PV.parse(v1);                                                                               // 208  // 1369\n  }                                                                                                  // 209  // 1370\n  var v2 = versionTwo;                                                                               // 210  // 1371\n  if (typeof v2 === 'string') {                                                                      // 211  // 1372\n    v2 = PV.parse(v2);                                                                               // 212  // 1373\n  }                                                                                                  // 213  // 1374\n                                                                                                     // 214  // 1375\n  // If the semver parts are different, use the semver library to compare,                           // 215  // 1376\n  // ignoring wrap numbers.  (The semver library will ignore the build ID                            // 216  // 1377\n  // per the semver spec.)                                                                           // 217  // 1378\n  if (v1.semver !== v2.semver) {                                                                     // 218  // 1379\n    return semver.compare(v1.semver, v2.semver);                                                     // 219  // 1380\n  } else {                                                                                           // 220  // 1381\n    // If the semver components are equal, then the one with the smaller wrap                        // 221  // 1382\n    // numbers is smaller.                                                                           // 222  // 1383\n    return v1.wrapNum - v2.wrapNum;                                                                  // 223  // 1384\n  }                                                                                                  // 224  // 1385\n};                                                                                                   // 225  // 1386\n                                                                                                     // 226  // 1387\n// Conceptually we have three types of constraints:                                                  // 227  // 1388\n// 1. \"compatible-with\" - A@x.y.z - constraints package A to version x.y.z or                        // 228  // 1389\n//    higher, as long as the version is backwards compatible with x.y.z.                             // 229  // 1390\n//    \"pick A compatible with x.y.z\"                                                                 // 230  // 1391\n//    It is the default type.                                                                        // 231  // 1392\n// 2. \"exactly\" - A@=x.y.z - constraints package A only to version x.y.z and                         // 232  // 1393\n//    nothing else.                                                                                  // 233  // 1394\n//    \"pick A exactly at x.y.z\"                                                                      // 234  // 1395\n// 3. \"any-reasonable\" - \"A\"                                                                         // 235  // 1396\n//    Basically, this means any version of A ... other than ones that have                           // 236  // 1397\n//    dashes in the version (ie, are prerelease) ... unless the prerelease                           // 237  // 1398\n//    version has been explicitly selected (which at this stage in the game                          // 238  // 1399\n//    means they are mentioned in a top-level constraint in the top-level                            // 239  // 1400\n//    call to the resolver).                                                                         // 240  // 1401\nvar parseSimpleConstraint = function (constraintString) {                                            // 241  // 1402\n  if (! constraintString) {                                                                          // 242  // 1403\n    throw new Error(\"Non-empty string required\");                                                    // 243  // 1404\n  }                                                                                                  // 244  // 1405\n                                                                                                     // 245  // 1406\n  var type, versionString;                                                                           // 246  // 1407\n                                                                                                     // 247  // 1408\n  if (constraintString.charAt(0) === '=') {                                                          // 248  // 1409\n    type = \"exactly\";                                                                                // 249  // 1410\n    versionString = constraintString.substr(1);                                                      // 250  // 1411\n  } else {                                                                                           // 251  // 1412\n    type = \"compatible-with\";                                                                        // 252  // 1413\n    versionString = constraintString;                                                                // 253  // 1414\n  }                                                                                                  // 254  // 1415\n                                                                                                     // 255  // 1416\n  // This will throw if the version string is invalid.                                               // 256  // 1417\n  PV.getValidServerVersion(versionString);                                                           // 257  // 1418\n                                                                                                     // 258  // 1419\n  return { type: type, versionString: versionString };                                               // 259  // 1420\n};                                                                                                   // 260  // 1421\n                                                                                                     // 261  // 1422\n                                                                                                     // 262  // 1423\n// Check to see if the versionString that we pass in is a valid meteor version.                      // 263  // 1424\n//                                                                                                   // 264  // 1425\n// Returns a valid meteor version string that can be included in the                                 // 265  // 1426\n// server. That means that it has everything EXCEPT the build id. Throws if the                      // 266  // 1427\n// entered string was invalid.                                                                       // 267  // 1428\nPV.getValidServerVersion = function (meteorVersionString) {                                          // 268  // 1429\n  return PV.parse(meteorVersionString).version;                                                      // 269  // 1430\n};                                                                                                   // 270  // 1431\n                                                                                                     // 271  // 1432\nPV.VersionConstraint = function (vConstraintString) {                                                // 272  // 1433\n  var alternatives;                                                                                  // 273  // 1434\n  // If there is no version string (\"\" or null), then our only                                       // 274  // 1435\n  // constraint is any-reasonable.                                                                   // 275  // 1436\n  if (! vConstraintString) {                                                                         // 276  // 1437\n    // .versionString === null is relied on in the tool                                              // 277  // 1438\n    alternatives =                                                                                   // 278  // 1439\n      [ { type: \"any-reasonable\", versionString: null } ];                                           // 279  // 1440\n    vConstraintString = \"\";                                                                          // 280  // 1441\n  } else {                                                                                           // 281  // 1442\n    // Parse out the versionString.                                                                  // 282  // 1443\n    var parts = vConstraintString.split(/ *\\|\\| */);                                                 // 283  // 1444\n    alternatives = __.map(parts, function (alt) {                                                    // 284  // 1445\n      if (! alt) {                                                                                   // 285  // 1446\n        throwVersionParserError(\"Invalid constraint string: \" +                                      // 286  // 1447\n                                vConstraintString);                                                  // 287  // 1448\n      }                                                                                              // 288  // 1449\n      return parseSimpleConstraint(alt);                                                             // 289  // 1450\n    });                                                                                              // 290  // 1451\n  }                                                                                                  // 291  // 1452\n                                                                                                     // 292  // 1453\n  this.raw = vConstraintString;                                                                      // 293  // 1454\n  this.alternatives = alternatives;                                                                  // 294  // 1455\n};                                                                                                   // 295  // 1456\n                                                                                                     // 296  // 1457\nPV.parseVersionConstraint = function (constraintString) {                                            // 297  // 1458\n  return new PV.VersionConstraint(constraintString);                                                 // 298  // 1459\n};                                                                                                   // 299  // 1460\n                                                                                                     // 300  // 1461\n// A PackageConstraint consists of a package name and a version constraint.                          // 301  // 1462\n// Call either with args (package, versionConstraintString) or                                       // 302  // 1463\n// (packageConstraintString), or (package, versionConstraint).                                       // 303  // 1464\n// That is, (\"foo\", \"1.2.3\") or (\"foo@1.2.3\"), or (\"foo\", vc) where vc                               // 304  // 1465\n// is instanceof PV.VersionConstraint.                                                               // 305  // 1466\nPV.PackageConstraint = function (part1, part2) {                                                     // 306  // 1467\n  if ((typeof part1 !== \"string\") ||                                                                 // 307  // 1468\n      (part2 && (typeof part2 !== \"string\") &&                                                       // 308  // 1469\n       ! (part2 instanceof PV.VersionConstraint))) {                                                 // 309  // 1470\n    throw new Error(\"constraintString must be a string\");                                            // 310  // 1471\n  }                                                                                                  // 311  // 1472\n                                                                                                     // 312  // 1473\n  var packageName, versionConstraint, vConstraintString;                                             // 313  // 1474\n  if (part2) {                                                                                       // 314  // 1475\n    packageName = part1;                                                                             // 315  // 1476\n    if (part2 instanceof PV.VersionConstraint) {                                                     // 316  // 1477\n      versionConstraint = part2;                                                                     // 317  // 1478\n    } else {                                                                                         // 318  // 1479\n      vConstraintString = part2;                                                                     // 319  // 1480\n    }                                                                                                // 320  // 1481\n  } else if (part1.indexOf(\"@\") >= 0) {                                                              // 321  // 1482\n    // Shave off last part after @, with \"a@b@c\" becoming [\"a@b\", \"c\"].                              // 322  // 1483\n    // Validating the package name will catch extra @.                                               // 323  // 1484\n    var parts = part1.match(/^(.*)@([^@]*)$/).slice(1);                                              // 324  // 1485\n    packageName = parts[0];                                                                          // 325  // 1486\n    vConstraintString = parts[1];                                                                    // 326  // 1487\n    if (! vConstraintString) {                                                                       // 327  // 1488\n      throwVersionParserError(                                                                       // 328  // 1489\n        \"Version constraint for package '\" + packageName +                                           // 329  // 1490\n          \"' cannot be empty; leave off the @ if you don't want to constrain \" +                     // 330  // 1491\n          \"the version.\");                                                                           // 331  // 1492\n    }                                                                                                // 332  // 1493\n  } else {                                                                                           // 333  // 1494\n    packageName = part1;                                                                             // 334  // 1495\n    vConstraintString = \"\";                                                                          // 335  // 1496\n  }                                                                                                  // 336  // 1497\n                                                                                                     // 337  // 1498\n  PV.validatePackageName(packageName);                                                               // 338  // 1499\n  if (versionConstraint) {                                                                           // 339  // 1500\n    vConstraintString = versionConstraint.raw;                                                       // 340  // 1501\n  } else {                                                                                           // 341  // 1502\n    versionConstraint = PV.parseVersionConstraint(vConstraintString);                                // 342  // 1503\n  }                                                                                                  // 343  // 1504\n                                                                                                     // 344  // 1505\n  this.package = packageName;                                                                        // 345  // 1506\n  this.constraintString = vConstraintString;                                                         // 346  // 1507\n  this.versionConstraint = versionConstraint;                                                        // 347  // 1508\n};                                                                                                   // 348  // 1509\n                                                                                                     // 349  // 1510\nPV.PackageConstraint.prototype.toString = function () {                                              // 350  // 1511\n  var ret = this.package;                                                                            // 351  // 1512\n  if (this.constraintString) {                                                                       // 352  // 1513\n    ret += \"@\" + this.constraintString;                                                              // 353  // 1514\n  }                                                                                                  // 354  // 1515\n  return ret;                                                                                        // 355  // 1516\n};                                                                                                   // 356  // 1517\n                                                                                                     // 357  // 1518\n// Structure of a parsed constraint:                                                                 // 358  // 1519\n//                                                                                                   // 359  // 1520\n// /*PV.PackageConstraint*/                                                                          // 360  // 1521\n// { package: String,                                                                                // 361  // 1522\n//   constraintString: String,                                                                       // 362  // 1523\n//   versionConstraint: /*PV.VersionConstraint*/ {                                                   // 363  // 1524\n//     raw: String,                                                                                  // 364  // 1525\n//     alternatives: [{versionString: String|null,                                                   // 365  // 1526\n//                     type: String}]}}                                                              // 366  // 1527\nPV.parsePackageConstraint = function (part1, part2) {                                                // 367  // 1528\n  return new PV.PackageConstraint(part1, part2);                                                     // 368  // 1529\n};                                                                                                   // 369  // 1530\n                                                                                                     // 370  // 1531\nPV.validatePackageName = function (packageName, options) {                                           // 371  // 1532\n  options = options || {};                                                                           // 372  // 1533\n                                                                                                     // 373  // 1534\n  var badChar = packageName.match(/[^a-z0-9:.\\-]/);                                                  // 374  // 1535\n  if (badChar) {                                                                                     // 375  // 1536\n    if (options.detailedColonExplanation) {                                                          // 376  // 1537\n      throwVersionParserError(                                                                       // 377  // 1538\n        \"Bad character in package name: \" + JSON.stringify(badChar[0]) +                             // 378  // 1539\n          \".\\n\\nPackage names can only contain lowercase ASCII alphanumerics, \" +                    // 379  // 1540\n          \"dash, or dot.\\nIf you plan to publish a package, it must be \" +                           // 380  // 1541\n          \"prefixed with your\\nMeteor Developer Account username and a colon.\");                     // 381  // 1542\n    }                                                                                                // 382  // 1543\n    throwVersionParserError(                                                                         // 383  // 1544\n      \"Package names can only contain lowercase ASCII alphanumerics, dash, \" +                       // 384  // 1545\n        \"dot, or colon, not \" + JSON.stringify(badChar[0]) + \".\");                                   // 385  // 1546\n  }                                                                                                  // 386  // 1547\n  if (!/[a-z]/.test(packageName)) {                                                                  // 387  // 1548\n    throwVersionParserError(\"Package name must contain a lowercase ASCII letter: \"                   // 388  // 1549\n                            + JSON.stringify(packageName));                                          // 389  // 1550\n  }                                                                                                  // 390  // 1551\n  if (packageName[0] === '.') {                                                                      // 391  // 1552\n    throwVersionParserError(\"Package name may not begin with a dot: \"                                // 392  // 1553\n                            + JSON.stringify(packageName));                                          // 393  // 1554\n  }                                                                                                  // 394  // 1555\n  if (packageName.slice(-1) === '.') {                                                               // 395  // 1556\n    throwVersionParserError(\"Package name may not end with a dot: \"                                  // 396  // 1557\n                            + JSON.stringify(packageName));                                          // 397  // 1558\n  }                                                                                                  // 398  // 1559\n                                                                                                     // 399  // 1560\n  if (packageName.slice(-1) === '.') {                                                               // 400  // 1561\n    throwVersionParserError(\"Package names may not end with a dot: \" +                               // 401  // 1562\n                            JSON.stringify(packageName));                                            // 402  // 1563\n  }                                                                                                  // 403  // 1564\n  if (packageName.indexOf('..') >= 0) {                                                              // 404  // 1565\n    throwVersionParserError(\"Package names may not contain two consecutive dots: \" +                 // 405  // 1566\n                            JSON.stringify(packageName));                                            // 406  // 1567\n  }                                                                                                  // 407  // 1568\n  if (packageName[0] === '-') {                                                                      // 408  // 1569\n    throwVersionParserError(\"Package names may not begin with a hyphen: \" +                          // 409  // 1570\n                            JSON.stringify(packageName));                                            // 410  // 1571\n  }                                                                                                  // 411  // 1572\n  // (There is already a package ending with a `-` and one with two consecutive `-`                  // 412  // 1573\n  // in troposphere, though they both look like typos.)                                              // 413  // 1574\n                                                                                                     // 414  // 1575\n  if (packageName[0] === \":\" || __.last(packageName) === \":\") {                                      // 415  // 1576\n    throwVersionParserError(\"Package names may not start or end with a colon: \" +                    // 416  // 1577\n                            JSON.stringify(packageName));                                            // 417  // 1578\n  }                                                                                                  // 418  // 1579\n};                                                                                                   // 419  // 1580\n                                                                                                     // 420  // 1581\nvar throwVersionParserError = function (message) {                                                   // 421  // 1582\n  var e = new Error(message);                                                                        // 422  // 1583\n  e.versionParserError = true;                                                                       // 423  // 1584\n  throw e;                                                                                           // 424  // 1585\n};                                                                                                   // 425  // 1586\n                                                                                                     // 426  // 1587\n// Return true if the version constraint was invalid prior to 0.9.3                                  // 427  // 1588\n// (adding _ and || support)                                                                         // 428  // 1589\n//                                                                                                   // 429  // 1590\n// NOTE: this is not used on the client yet. This package is used by the                             // 430  // 1591\n// package server to determine what is valid.                                                        // 431  // 1592\nPV.invalidFirstFormatConstraint = function (validConstraint) {                                       // 432  // 1593\n  if (!validConstraint) return false;                                                                // 433  // 1594\n  // We can check this easily right now, because we introduced some new                              // 434  // 1595\n  // characters. Anything with those characters is invalid prior to                                  // 435  // 1596\n  // 0.9.3. XXX: If we ever have to go through these, we should write a more                         // 436  // 1597\n  // complicated regex.                                                                              // 437  // 1598\n  return (/_/.test(validConstraint) ||                                                               // 438  // 1599\n          /\\|/.test(validConstraint));                                                               // 439  // 1600\n};                                                                                                   // 440  // 1601\n                                                                                                     // 441  // 1602\n// Remove a suffix like \"+foo\" if present.                                                           // 442  // 1603\nPV.removeBuildID = function (versionString) {                                                        // 443  // 1604\n  return versionString.replace(/\\+.*$/, '');                                                         // 444  // 1605\n};                                                                                                   // 445  // 1606\n                                                                                                     // 446  // 1607\n///////////////////////////////////////////////////////////////////////////////////////////////////////      // 1608\n                                                                                                             // 1609\n}).call(this);                                                                                               // 1610\n                                                                                                             // 1611\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['package-version-parser'] = {\n  PackageVersion: PackageVersion\n};\n\n})();\n","servePath":"/packages/package-version-parser.js","sourceMap":{"version":3,"sources":["/packages/package-version-parser/packages/package-version-parser.js"],"names":[],"mappingsoH","file":"/packages/package-version-parser.js","sourcesContent":["(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/package-version-parser/semver410.js                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// <METEOR>                                                                                          // 1\n// Fool the module system detection code below so that it doesn't                                    // 2\n// do anything special.                                                                              // 3\nvar exports = SemVer, module = {}, define = {};                                                      // 4\n// Create a package-private variable.  Can't use SemVer because                                      // 5\n// of the code that says `function SemVer(...)` below (implicitly                                    // 6\n// declaring a var).  Can't use \"semver\" because that's a var in                                     // 7\n// package-version-parser.js.                                                                        // 8\nSemVer410 = SemVer;                                                                                  // 9\n// </METEOR>                                                                                         // 10\n                                                                                                     // 11\n// export the class if we are in a Node-like system.                                                 // 12\nif (typeof module === 'object' && module.exports === exports)                                        // 13\n  exports = module.exports = SemVer;                                                                 // 14\n                                                                                                     // 15\n// The debug function is excluded entirely from the minified version.                                // 16\n/* nomin */ var debug;                                                                               // 17\n/* nomin */ if (typeof process === 'object' &&                                                       // 18\n    /* nomin */ process.env &&                                                                       // 19\n    /* nomin */ process.env.NODE_DEBUG &&                                                            // 20\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))                                          // 21\n  /* nomin */ debug = function() {                                                                   // 22\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);                                 // 23\n    /* nomin */ args.unshift('SEMVER');                                                              // 24\n    /* nomin */ console.log.apply(console, args);                                                    // 25\n    /* nomin */ };                                                                                   // 26\n/* nomin */ else                                                                                     // 27\n  /* nomin */ debug = function() {};                                                                 // 28\n                                                                                                     // 29\n// Note: this is the semver.org version of the spec that it implements                               // 30\n// Not necessarily the package version of this code.                                                 // 31\nexports.SEMVER_SPEC_VERSION = '2.0.0';                                                               // 32\n                                                                                                     // 33\n// The actual regexps go on exports.re                                                               // 34\nvar re = exports.re = [];                                                                            // 35\nvar src = exports.src = [];                                                                          // 36\nvar R = 0;                                                                                           // 37\n                                                                                                     // 38\n// The following Regular Expressions can be used for tokenizing,                                     // 39\n// validating, and parsing SemVer version strings.                                                   // 40\n                                                                                                     // 41\n// ## Numeric Identifier                                                                             // 42\n// A single `0`, or a non-zero digit followed by zero or more digits.                                // 43\n                                                                                                     // 44\nvar NUMERICIDENTIFIER = R++;                                                                         // 45\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';                                                              // 46\nvar NUMERICIDENTIFIERLOOSE = R++;                                                                    // 47\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';                                                              // 48\n                                                                                                     // 49\n                                                                                                     // 50\n// ## Non-numeric Identifier                                                                         // 51\n// Zero or more digits, followed by a letter or hyphen, and then zero or                             // 52\n// more letters, digits, or hyphens.                                                                 // 53\n                                                                                                     // 54\nvar NONNUMERICIDENTIFIER = R++;                                                                      // 55\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';                                            // 56\n                                                                                                     // 57\n                                                                                                     // 58\n// ## Main Version                                                                                   // 59\n// Three dot-separated numeric identifiers.                                                          // 60\n                                                                                                     // 61\nvar MAINVERSION = R++;                                                                               // 62\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 63\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 64\n                   '(' + src[NUMERICIDENTIFIER] + ')';                                               // 65\n                                                                                                     // 66\nvar MAINVERSIONLOOSE = R++;                                                                          // 67\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 68\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 69\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';                                     // 70\n                                                                                                     // 71\n// ## Pre-release Version Identifier                                                                 // 72\n// A numeric identifier, or a non-numeric identifier.                                                // 73\n                                                                                                     // 74\nvar PRERELEASEIDENTIFIER = R++;                                                                      // 75\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +                                         // 76\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';                                   // 77\n                                                                                                     // 78\nvar PRERELEASEIDENTIFIERLOOSE = R++;                                                                 // 79\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +                               // 80\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';                              // 81\n                                                                                                     // 82\n                                                                                                     // 83\n// ## Pre-release Version                                                                            // 84\n// Hyphen, followed by one or more dot-separated pre-release version                                 // 85\n// identifiers.                                                                                      // 86\n                                                                                                     // 87\nvar PRERELEASE = R++;                                                                                // 88\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +                                              // 89\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';                                     // 90\n                                                                                                     // 91\nvar PRERELEASELOOSE = R++;                                                                           // 92\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +                                   // 93\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';                           // 94\n                                                                                                     // 95\n// ## Build Metadata Identifier                                                                      // 96\n// Any combination of digits, letters, or hyphens.                                                   // 97\n                                                                                                     // 98\nvar BUILDIDENTIFIER = R++;                                                                           // 99\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';                                                              // 100\n                                                                                                     // 101\n// ## Build Metadata                                                                                 // 102\n// Plus sign, followed by one or more period-separated build metadata                                // 103\n// identifiers.                                                                                      // 104\n                                                                                                     // 105\nvar BUILD = R++;                                                                                     // 106\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +                                                      // 107\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';                                               // 108\n                                                                                                     // 109\n                                                                                                     // 110\n// ## Full Version String                                                                            // 111\n// A main version, followed optionally by a pre-release version and                                  // 112\n// build metadata.                                                                                   // 113\n                                                                                                     // 114\n// Note that the only major, minor, patch, and pre-release sections of                               // 115\n// the version string are capturing groups.  The build metadata is not a                             // 116\n// capturing group, because it should not ever be used in version                                    // 117\n// comparison.                                                                                       // 118\n                                                                                                     // 119\nvar FULL = R++;                                                                                      // 120\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +                                                            // 121\n                src[PRERELEASE] + '?' +                                                              // 122\n                src[BUILD] + '?';                                                                    // 123\n                                                                                                     // 124\nsrc[FULL] = '^' + FULLPLAIN + '$';                                                                   // 125\n                                                                                                     // 126\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.                               // 127\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty                                 // 128\n// common in the npm registry.                                                                       // 129\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +                                                // 130\n                 src[PRERELEASELOOSE] + '?' +                                                        // 131\n                 src[BUILD] + '?';                                                                   // 132\n                                                                                                     // 133\nvar LOOSE = R++;                                                                                     // 134\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';                                                                 // 135\n                                                                                                     // 136\nvar GTLT = R++;                                                                                      // 137\nsrc[GTLT] = '((?:<|>)?=?)';                                                                          // 138\n                                                                                                     // 139\n// Something like \"2.*\" or \"1.2.x\".                                                                  // 140\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"                                // 141\n// Only the first item is strictly required.                                                         // 142\nvar XRANGEIDENTIFIERLOOSE = R++;                                                                     // 143\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';                               // 144\nvar XRANGEIDENTIFIER = R++;                                                                          // 145\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';                                         // 146\n                                                                                                     // 147\nvar XRANGEPLAIN = R++;                                                                               // 148\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +                                       // 149\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 150\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 151\n                   '(?:' + src[PRERELEASE] + ')?' +                                                  // 152\n                   src[BUILD] + '?' +                                                                // 153\n                   ')?)?';                                                                           // 154\n                                                                                                     // 155\nvar XRANGEPLAINLOOSE = R++;                                                                          // 156\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                             // 157\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 158\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 159\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +                                        // 160\n                        src[BUILD] + '?' +                                                           // 161\n                        ')?)?';                                                                      // 162\n                                                                                                     // 163\nvar XRANGE = R++;                                                                                    // 164\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';                                     // 165\nvar XRANGELOOSE = R++;                                                                               // 166\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';                           // 167\n                                                                                                     // 168\n// Tilde ranges.                                                                                     // 169\n// Meaning is \"reasonably at or greater than\"                                                        // 170\nvar LONETILDE = R++;                                                                                 // 171\nsrc[LONETILDE] = '(?:~>?)';                                                                          // 172\n                                                                                                     // 173\nvar TILDETRIM = R++;                                                                                 // 174\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';                                                 // 175\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');                                                     // 176\nvar tildeTrimReplace = '$1~';                                                                        // 177\n                                                                                                     // 178\nvar TILDE = R++;                                                                                     // 179\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';                                          // 180\nvar TILDELOOSE = R++;                                                                                // 181\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';                                // 182\n                                                                                                     // 183\n// Caret ranges.                                                                                     // 184\n// Meaning is \"at least and backwards compatible with\"                                               // 185\nvar LONECARET = R++;                                                                                 // 186\nsrc[LONECARET] = '(?:\\\\^)';                                                                          // 187\n                                                                                                     // 188\nvar CARETTRIM = R++;                                                                                 // 189\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';                                                 // 190\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');                                                     // 191\nvar caretTrimReplace = '$1^';                                                                        // 192\n                                                                                                     // 193\nvar CARET = R++;                                                                                     // 194\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';                                          // 195\nvar CARETLOOSE = R++;                                                                                // 196\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';                                // 197\n                                                                                                     // 198\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"                                     // 199\nvar COMPARATORLOOSE = R++;                                                                           // 200\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';                             // 201\nvar COMPARATOR = R++;                                                                                // 202\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';                                   // 203\n                                                                                                     // 204\n                                                                                                     // 205\n// An expression to strip any whitespace between the gtlt and the thing                              // 206\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`                                                       // 207\nvar COMPARATORTRIM = R++;                                                                            // 208\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +                                                         // 209\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';                           // 210\n                                                                                                     // 211\n// this one has to use the /g flag                                                                   // 212\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');                                           // 213\nvar comparatorTrimReplace = '$1$2$3';                                                                // 214\n                                                                                                     // 215\n                                                                                                     // 216\n// Something like `1.2.3 - 1.2.4`                                                                    // 217\n// Note that these all use the loose form, because they'll be                                        // 218\n// checked against either the strict or loose comparator form                                        // 219\n// later.                                                                                            // 220\nvar HYPHENRANGE = R++;                                                                               // 221\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +                                               // 222\n                   '\\\\s+-\\\\s+' +                                                                     // 223\n                   '(' + src[XRANGEPLAIN] + ')' +                                                    // 224\n                   '\\\\s*$';                                                                          // 225\n                                                                                                     // 226\nvar HYPHENRANGELOOSE = R++;                                                                          // 227\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +                                     // 228\n                        '\\\\s+-\\\\s+' +                                                                // 229\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +                                          // 230\n                        '\\\\s*$';                                                                     // 231\n                                                                                                     // 232\n// Star ranges basically just allow anything at all.                                                 // 233\nvar STAR = R++;                                                                                      // 234\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';                                                                       // 235\n                                                                                                     // 236\n// Compile to actual regexp objects.                                                                 // 237\n// All are flag-free, unless they were created above with a flag.                                    // 238\nfor (var i = 0; i < R; i++) {                                                                        // 239\n  debug(i, src[i]);                                                                                  // 240\n  if (!re[i])                                                                                        // 241\n    re[i] = new RegExp(src[i]);                                                                      // 242\n}                                                                                                    // 243\n                                                                                                     // 244\nexports.parse = parse;                                                                               // 245\nfunction parse(version, loose) {                                                                     // 246\n  var r = loose ? re[LOOSE] : re[FULL];                                                              // 247\n  return (r.test(version)) ? new SemVer(version, loose) : null;                                      // 248\n}                                                                                                    // 249\n                                                                                                     // 250\nexports.valid = valid;                                                                               // 251\nfunction valid(version, loose) {                                                                     // 252\n  var v = parse(version, loose);                                                                     // 253\n  return v ? v.version : null;                                                                       // 254\n}                                                                                                    // 255\n                                                                                                     // 256\n                                                                                                     // 257\nexports.clean = clean;                                                                               // 258\nfunction clean(version, loose) {                                                                     // 259\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);                                        // 260\n  return s ? s.version : null;                                                                       // 261\n}                                                                                                    // 262\n                                                                                                     // 263\nexports.SemVer = SemVer;                                                                             // 264\n                                                                                                     // 265\nfunction SemVer(version, loose) {                                                                    // 266\n  if (version instanceof SemVer) {                                                                   // 267\n    if (version.loose === loose)                                                                     // 268\n      return version;                                                                                // 269\n    else                                                                                             // 270\n      version = version.version;                                                                     // 271\n  } else if (typeof version !== 'string') {                                                          // 272\n    throw new TypeError('Invalid Version: ' + version);                                              // 273\n  }                                                                                                  // 274\n                                                                                                     // 275\n  if (!(this instanceof SemVer))                                                                     // 276\n    return new SemVer(version, loose);                                                               // 277\n                                                                                                     // 278\n  debug('SemVer', version, loose);                                                                   // 279\n  this.loose = loose;                                                                                // 280\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);                                        // 281\n                                                                                                     // 282\n  if (!m)                                                                                            // 283\n    throw new TypeError('Invalid Version: ' + version);                                              // 284\n                                                                                                     // 285\n  this.raw = version;                                                                                // 286\n                                                                                                     // 287\n  // these are actually numbers                                                                      // 288\n  this.major = +m[1];                                                                                // 289\n  this.minor = +m[2];                                                                                // 290\n  this.patch = +m[3];                                                                                // 291\n                                                                                                     // 292\n  // numberify any prerelease numeric ids                                                            // 293\n  if (!m[4])                                                                                         // 294\n    this.prerelease = [];                                                                            // 295\n  else                                                                                               // 296\n    this.prerelease = m[4].split('.').map(function(id) {                                             // 297\n      return (/^[0-9]+$/.test(id)) ? +id : id;                                                       // 298\n    });                                                                                              // 299\n                                                                                                     // 300\n  this.build = m[5] ? m[5].split('.') : [];                                                          // 301\n  this.format();                                                                                     // 302\n}                                                                                                    // 303\n                                                                                                     // 304\nSemVer.prototype.format = function() {                                                               // 305\n  this.version = this.major + '.' + this.minor + '.' + this.patch;                                   // 306\n  if (this.prerelease.length)                                                                        // 307\n    this.version += '-' + this.prerelease.join('.');                                                 // 308\n  return this.version;                                                                               // 309\n};                                                                                                   // 310\n                                                                                                     // 311\nSemVer.prototype.inspect = function() {                                                              // 312\n  return '<SemVer \"' + this + '\">';                                                                  // 313\n};                                                                                                   // 314\n                                                                                                     // 315\nSemVer.prototype.toString = function() {                                                             // 316\n  return this.version;                                                                               // 317\n};                                                                                                   // 318\n                                                                                                     // 319\nSemVer.prototype.compare = function(other) {                                                         // 320\n  debug('SemVer.compare', this.version, this.loose, other);                                          // 321\n  if (!(other instanceof SemVer))                                                                    // 322\n    other = new SemVer(other, this.loose);                                                           // 323\n                                                                                                     // 324\n  return this.compareMain(other) || this.comparePre(other);                                          // 325\n};                                                                                                   // 326\n                                                                                                     // 327\nSemVer.prototype.compareMain = function(other) {                                                     // 328\n  if (!(other instanceof SemVer))                                                                    // 329\n    other = new SemVer(other, this.loose);                                                           // 330\n                                                                                                     // 331\n  return compareIdentifiers(this.major, other.major) ||                                              // 332\n         compareIdentifiers(this.minor, other.minor) ||                                              // 333\n         compareIdentifiers(this.patch, other.patch);                                                // 334\n};                                                                                                   // 335\n                                                                                                     // 336\nSemVer.prototype.comparePre = function(other) {                                                      // 337\n  if (!(other instanceof SemVer))                                                                    // 338\n    other = new SemVer(other, this.loose);                                                           // 339\n                                                                                                     // 340\n  // NOT having a prerelease is > having one                                                         // 341\n  if (this.prerelease.length && !other.prerelease.length)                                            // 342\n    return -1;                                                                                       // 343\n  else if (!this.prerelease.length && other.prerelease.length)                                       // 344\n    return 1;                                                                                        // 345\n  else if (!this.prerelease.length && !other.prerelease.length)                                      // 346\n    return 0;                                                                                        // 347\n                                                                                                     // 348\n  var i = 0;                                                                                         // 349\n  do {                                                                                               // 350\n    var a = this.prerelease[i];                                                                      // 351\n    var b = other.prerelease[i];                                                                     // 352\n    debug('prerelease compare', i, a, b);                                                            // 353\n    if (a === undefined && b === undefined)                                                          // 354\n      return 0;                                                                                      // 355\n    else if (b === undefined)                                                                        // 356\n      return 1;                                                                                      // 357\n    else if (a === undefined)                                                                        // 358\n      return -1;                                                                                     // 359\n    else if (a === b)                                                                                // 360\n      continue;                                                                                      // 361\n    else                                                                                             // 362\n      return compareIdentifiers(a, b);                                                               // 363\n  } while (++i);                                                                                     // 364\n};                                                                                                   // 365\n                                                                                                     // 366\n// preminor will bump the version up to the next minor release, and immediately                      // 367\n// down to pre-release. premajor and prepatch work the same way.                                     // 368\nSemVer.prototype.inc = function(release, identifier) {                                               // 369\n  switch (release) {                                                                                 // 370\n    case 'premajor':                                                                                 // 371\n      this.prerelease.length = 0;                                                                    // 372\n      this.patch = 0;                                                                                // 373\n      this.minor = 0;                                                                                // 374\n      this.major++;                                                                                  // 375\n      this.inc('pre', identifier);                                                                   // 376\n      break;                                                                                         // 377\n    case 'preminor':                                                                                 // 378\n      this.prerelease.length = 0;                                                                    // 379\n      this.patch = 0;                                                                                // 380\n      this.minor++;                                                                                  // 381\n      this.inc('pre', identifier);                                                                   // 382\n      break;                                                                                         // 383\n    case 'prepatch':                                                                                 // 384\n      // If this is already a prerelease, it will bump to the next version                           // 385\n      // drop any prereleases that might already exist, since they are not                           // 386\n      // relevant at this point.                                                                     // 387\n      this.prerelease.length = 0;                                                                    // 388\n      this.inc('patch', identifier);                                                                 // 389\n      this.inc('pre', identifier);                                                                   // 390\n      break;                                                                                         // 391\n    // If the input is a non-prerelease version, this acts the same as                               // 392\n    // prepatch.                                                                                     // 393\n    case 'prerelease':                                                                               // 394\n      if (this.prerelease.length === 0)                                                              // 395\n        this.inc('patch', identifier);                                                               // 396\n      this.inc('pre', identifier);                                                                   // 397\n      break;                                                                                         // 398\n                                                                                                     // 399\n    case 'major':                                                                                    // 400\n      // If this is a pre-major version, bump up to the same major version.                          // 401\n      // Otherwise increment major.                                                                  // 402\n      // 1.0.0-5 bumps to 1.0.0                                                                      // 403\n      // 1.1.0 bumps to 2.0.0                                                                        // 404\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)                      // 405\n        this.major++;                                                                                // 406\n      this.minor = 0;                                                                                // 407\n      this.patch = 0;                                                                                // 408\n      this.prerelease = [];                                                                          // 409\n      break;                                                                                         // 410\n    case 'minor':                                                                                    // 411\n      // If this is a pre-minor version, bump up to the same minor version.                          // 412\n      // Otherwise increment minor.                                                                  // 413\n      // 1.2.0-5 bumps to 1.2.0                                                                      // 414\n      // 1.2.1 bumps to 1.3.0                                                                        // 415\n      if (this.patch !== 0 || this.prerelease.length === 0)                                          // 416\n        this.minor++;                                                                                // 417\n      this.patch = 0;                                                                                // 418\n      this.prerelease = [];                                                                          // 419\n      break;                                                                                         // 420\n    case 'patch':                                                                                    // 421\n      // If this is not a pre-release version, it will increment the patch.                          // 422\n      // If it is a pre-release it will bump up to the same patch version.                           // 423\n      // 1.2.0-5 patches to 1.2.0                                                                    // 424\n      // 1.2.0 patches to 1.2.1                                                                      // 425\n      if (this.prerelease.length === 0)                                                              // 426\n        this.patch++;                                                                                // 427\n      this.prerelease = [];                                                                          // 428\n      break;                                                                                         // 429\n    // This probably shouldn't be used publicly.                                                     // 430\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.                                // 431\n    case 'pre':                                                                                      // 432\n      if (this.prerelease.length === 0)                                                              // 433\n        this.prerelease = [0];                                                                       // 434\n      else {                                                                                         // 435\n        var i = this.prerelease.length;                                                              // 436\n        while (--i >= 0) {                                                                           // 437\n          if (typeof this.prerelease[i] === 'number') {                                              // 438\n            this.prerelease[i]++;                                                                    // 439\n            i = -2;                                                                                  // 440\n          }                                                                                          // 441\n        }                                                                                            // 442\n        if (i === -1) // didn't increment anything                                                   // 443\n          this.prerelease.push(0);                                                                   // 444\n      }                                                                                              // 445\n      if (identifier) {                                                                              // 446\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,                                                       // 447\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0                                     // 448\n        if (this.prerelease[0] === identifier) {                                                     // 449\n          if (isNaN(this.prerelease[1]))                                                             // 450\n            this.prerelease = [identifier, 0];                                                       // 451\n        } else                                                                                       // 452\n          this.prerelease = [identifier, 0];                                                         // 453\n      }                                                                                              // 454\n      break;                                                                                         // 455\n                                                                                                     // 456\n    default:                                                                                         // 457\n      throw new Error('invalid increment argument: ' + release);                                     // 458\n  }                                                                                                  // 459\n  this.format();                                                                                     // 460\n  return this;                                                                                       // 461\n};                                                                                                   // 462\n                                                                                                     // 463\nexports.inc = inc;                                                                                   // 464\nfunction inc(version, release, loose, identifier) {                                                  // 465\n  if (typeof(loose) === 'string') {                                                                  // 466\n    identifier = loose;                                                                              // 467\n    loose = undefined;                                                                               // 468\n  }                                                                                                  // 469\n                                                                                                     // 470\n  try {                                                                                              // 471\n    return new SemVer(version, loose).inc(release, identifier).version;                              // 472\n  } catch (er) {                                                                                     // 473\n    return null;                                                                                     // 474\n  }                                                                                                  // 475\n}                                                                                                    // 476\n                                                                                                     // 477\nexports.compareIdentifiers = compareIdentifiers;                                                     // 478\n                                                                                                     // 479\nvar numeric = /^[0-9]+$/;                                                                            // 480\nfunction compareIdentifiers(a, b) {                                                                  // 481\n  var anum = numeric.test(a);                                                                        // 482\n  var bnum = numeric.test(b);                                                                        // 483\n                                                                                                     // 484\n  if (anum && bnum) {                                                                                // 485\n    a = +a;                                                                                          // 486\n    b = +b;                                                                                          // 487\n  }                                                                                                  // 488\n                                                                                                     // 489\n  return (anum && !bnum) ? -1 :                                                                      // 490\n         (bnum && !anum) ? 1 :                                                                       // 491\n         a < b ? -1 :                                                                                // 492\n         a > b ? 1 :                                                                                 // 493\n         0;                                                                                          // 494\n}                                                                                                    // 495\n                                                                                                     // 496\nexports.rcompareIdentifiers = rcompareIdentifiers;                                                   // 497\nfunction rcompareIdentifiers(a, b) {                                                                 // 498\n  return compareIdentifiers(b, a);                                                                   // 499\n}                                                                                                    // 500\n                                                                                                     // 501\nexports.compare = compare;                                                                           // 502\nfunction compare(a, b, loose) {                                                                      // 503\n  return new SemVer(a, loose).compare(b);                                                            // 504\n}                                                                                                    // 505\n                                                                                                     // 506\nexports.compareLoose = compareLoose;                                                                 // 507\nfunction compareLoose(a, b) {                                                                        // 508\n  return compare(a, b, true);                                                                        // 509\n}                                                                                                    // 510\n                                                                                                     // 511\nexports.rcompare = rcompare;                                                                         // 512\nfunction rcompare(a, b, loose) {                                                                     // 513\n  return compare(b, a, loose);                                                                       // 514\n}                                                                                                    // 515\n                                                                                                     // 516\nexports.sort = sort;                                                                                 // 517\nfunction sort(list, loose) {                                                                         // 518\n  return list.sort(function(a, b) {                                                                  // 519\n    return exports.compare(a, b, loose);                                                             // 520\n  });                                                                                                // 521\n}                                                                                                    // 522\n                                                                                                     // 523\nexports.rsort = rsort;                                                                               // 524\nfunction rsort(list, loose) {                                                                        // 525\n  return list.sort(function(a, b) {                                                                  // 526\n    return exports.rcompare(a, b, loose);                                                            // 527\n  });                                                                                                // 528\n}                                                                                                    // 529\n                                                                                                     // 530\nexports.gt = gt;                                                                                     // 531\nfunction gt(a, b, loose) {                                                                           // 532\n  return compare(a, b, loose) > 0;                                                                   // 533\n}                                                                                                    // 534\n                                                                                                     // 535\nexports.lt = lt;                                                                                     // 536\nfunction lt(a, b, loose) {                                                                           // 537\n  return compare(a, b, loose) < 0;                                                                   // 538\n}                                                                                                    // 539\n                                                                                                     // 540\nexports.eq = eq;                                                                                     // 541\nfunction eq(a, b, loose) {                                                                           // 542\n  return compare(a, b, loose) === 0;                                                                 // 543\n}                                                                                                    // 544\n                                                                                                     // 545\nexports.neq = neq;                                                                                   // 546\nfunction neq(a, b, loose) {                                                                          // 547\n  return compare(a, b, loose) !== 0;                                                                 // 548\n}                                                                                                    // 549\n                                                                                                     // 550\nexports.gte = gte;                                                                                   // 551\nfunction gte(a, b, loose) {                                                                          // 552\n  return compare(a, b, loose) >= 0;                                                                  // 553\n}                                                                                                    // 554\n                                                                                                     // 555\nexports.lte = lte;                                                                                   // 556\nfunction lte(a, b, loose) {                                                                          // 557\n  return compare(a, b, loose) <= 0;                                                                  // 558\n}                                                                                                    // 559\n                                                                                                     // 560\nexports.cmp = cmp;                                                                                   // 561\nfunction cmp(a, op, b, loose) {                                                                      // 562\n  var ret;                                                                                           // 563\n  switch (op) {                                                                                      // 564\n    case '===':                                                                                      // 565\n      if (typeof a === 'object') a = a.version;                                                      // 566\n      if (typeof b === 'object') b = b.version;                                                      // 567\n      ret = a === b;                                                                                 // 568\n      break;                                                                                         // 569\n    case '!==':                                                                                      // 570\n      if (typeof a === 'object') a = a.version;                                                      // 571\n      if (typeof b === 'object') b = b.version;                                                      // 572\n      ret = a !== b;                                                                                 // 573\n      break;                                                                                         // 574\n    case '': case '=': case '==': ret = eq(a, b, loose); break;                                      // 575\n    case '!=': ret = neq(a, b, loose); break;                                                        // 576\n    case '>': ret = gt(a, b, loose); break;                                                          // 577\n    case '>=': ret = gte(a, b, loose); break;                                                        // 578\n    case '<': ret = lt(a, b, loose); break;                                                          // 579\n    case '<=': ret = lte(a, b, loose); break;                                                        // 580\n    default: throw new TypeError('Invalid operator: ' + op);                                         // 581\n  }                                                                                                  // 582\n  return ret;                                                                                        // 583\n}                                                                                                    // 584\n                                                                                                     // 585\nexports.Comparator = Comparator;                                                                     // 586\nfunction Comparator(comp, loose) {                                                                   // 587\n  if (comp instanceof Comparator) {                                                                  // 588\n    if (comp.loose === loose)                                                                        // 589\n      return comp;                                                                                   // 590\n    else                                                                                             // 591\n      comp = comp.value;                                                                             // 592\n  }                                                                                                  // 593\n                                                                                                     // 594\n  if (!(this instanceof Comparator))                                                                 // 595\n    return new Comparator(comp, loose);                                                              // 596\n                                                                                                     // 597\n  debug('comparator', comp, loose);                                                                  // 598\n  this.loose = loose;                                                                                // 599\n  this.parse(comp);                                                                                  // 600\n                                                                                                     // 601\n  if (this.semver === ANY)                                                                           // 602\n    this.value = '';                                                                                 // 603\n  else                                                                                               // 604\n    this.value = this.operator + this.semver.version;                                                // 605\n                                                                                                     // 606\n  debug('comp', this);                                                                               // 607\n}                                                                                                    // 608\n                                                                                                     // 609\nvar ANY = {};                                                                                        // 610\nComparator.prototype.parse = function(comp) {                                                        // 611\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 612\n  var m = comp.match(r);                                                                             // 613\n                                                                                                     // 614\n  if (!m)                                                                                            // 615\n    throw new TypeError('Invalid comparator: ' + comp);                                              // 616\n                                                                                                     // 617\n  this.operator = m[1];                                                                              // 618\n  if (this.operator === '=')                                                                         // 619\n    this.operator = '';                                                                              // 620\n                                                                                                     // 621\n  // if it literally is just '>' or '' then allow anything.                                          // 622\n  if (!m[2])                                                                                         // 623\n    this.semver = ANY;                                                                               // 624\n  else                                                                                               // 625\n    this.semver = new SemVer(m[2], this.loose);                                                      // 626\n};                                                                                                   // 627\n                                                                                                     // 628\nComparator.prototype.inspect = function() {                                                          // 629\n  return '<SemVer Comparator \"' + this + '\">';                                                       // 630\n};                                                                                                   // 631\n                                                                                                     // 632\nComparator.prototype.toString = function() {                                                         // 633\n  return this.value;                                                                                 // 634\n};                                                                                                   // 635\n                                                                                                     // 636\nComparator.prototype.test = function(version) {                                                      // 637\n  debug('Comparator.test', version, this.loose);                                                     // 638\n                                                                                                     // 639\n  if (this.semver === ANY)                                                                           // 640\n    return true;                                                                                     // 641\n                                                                                                     // 642\n  if (typeof version === 'string')                                                                   // 643\n    version = new SemVer(version, this.loose);                                                       // 644\n                                                                                                     // 645\n  return cmp(version, this.operator, this.semver, this.loose);                                       // 646\n};                                                                                                   // 647\n                                                                                                     // 648\n                                                                                                     // 649\nexports.Range = Range;                                                                               // 650\nfunction Range(range, loose) {                                                                       // 651\n  if ((range instanceof Range) && range.loose === loose)                                             // 652\n    return range;                                                                                    // 653\n                                                                                                     // 654\n  if (!(this instanceof Range))                                                                      // 655\n    return new Range(range, loose);                                                                  // 656\n                                                                                                     // 657\n  this.loose = loose;                                                                                // 658\n                                                                                                     // 659\n  // First, split based on boolean or ||                                                             // 660\n  this.raw = range;                                                                                  // 661\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {                                         // 662\n    return this.parseRange(range.trim());                                                            // 663\n  }, this).filter(function(c) {                                                                      // 664\n    // throw out any that are not relevant for whatever reason                                       // 665\n    return c.length;                                                                                 // 666\n  });                                                                                                // 667\n                                                                                                     // 668\n  if (!this.set.length) {                                                                            // 669\n    throw new TypeError('Invalid SemVer Range: ' + range);                                           // 670\n  }                                                                                                  // 671\n                                                                                                     // 672\n  this.format();                                                                                     // 673\n}                                                                                                    // 674\n                                                                                                     // 675\nRange.prototype.inspect = function() {                                                               // 676\n  return '<SemVer Range \"' + this.range + '\">';                                                      // 677\n};                                                                                                   // 678\n                                                                                                     // 679\nRange.prototype.format = function() {                                                                // 680\n  this.range = this.set.map(function(comps) {                                                        // 681\n    return comps.join(' ').trim();                                                                   // 682\n  }).join('||').trim();                                                                              // 683\n  return this.range;                                                                                 // 684\n};                                                                                                   // 685\n                                                                                                     // 686\nRange.prototype.toString = function() {                                                              // 687\n  return this.range;                                                                                 // 688\n};                                                                                                   // 689\n                                                                                                     // 690\nRange.prototype.parseRange = function(range) {                                                       // 691\n  var loose = this.loose;                                                                            // 692\n  range = range.trim();                                                                              // 693\n  debug('range', range, loose);                                                                      // 694\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`                                                            // 695\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];                                           // 696\n  range = range.replace(hr, hyphenReplace);                                                          // 697\n  debug('hyphen replace', range);                                                                    // 698\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`                                                            // 699\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);                                  // 700\n  debug('comparator trim', range, re[COMPARATORTRIM]);                                               // 701\n                                                                                                     // 702\n  // `~ 1.2.3` => `~1.2.3`                                                                           // 703\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);                                            // 704\n                                                                                                     // 705\n  // `^ 1.2.3` => `^1.2.3`                                                                           // 706\n  range = range.replace(re[CARETTRIM], caretTrimReplace);                                            // 707\n                                                                                                     // 708\n  // normalize spaces                                                                                // 709\n  range = range.split(/\\s+/).join(' ');                                                              // 710\n                                                                                                     // 711\n  // At this point, the range is completely trimmed and                                              // 712\n  // ready to be split into comparators.                                                             // 713\n                                                                                                     // 714\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 715\n  var set = range.split(' ').map(function(comp) {                                                    // 716\n    return parseComparator(comp, loose);                                                             // 717\n  }).join(' ').split(/\\s+/);                                                                         // 718\n  if (this.loose) {                                                                                  // 719\n    // in loose mode, throw out any that are not valid comparators                                   // 720\n    set = set.filter(function(comp) {                                                                // 721\n      return !!comp.match(compRe);                                                                   // 722\n    });                                                                                              // 723\n  }                                                                                                  // 724\n  set = set.map(function(comp) {                                                                     // 725\n    return new Comparator(comp, loose);                                                              // 726\n  });                                                                                                // 727\n                                                                                                     // 728\n  return set;                                                                                        // 729\n};                                                                                                   // 730\n                                                                                                     // 731\n// Mostly just for testing and legacy API reasons                                                    // 732\nexports.toComparators = toComparators;                                                               // 733\nfunction toComparators(range, loose) {                                                               // 734\n  return new Range(range, loose).set.map(function(comp) {                                            // 735\n    return comp.map(function(c) {                                                                    // 736\n      return c.value;                                                                                // 737\n    }).join(' ').trim().split(' ');                                                                  // 738\n  });                                                                                                // 739\n}                                                                                                    // 740\n                                                                                                     // 741\n// comprised of xranges, tildes, stars, and gtlt's at this point.                                    // 742\n// already replaced the hyphen ranges                                                                // 743\n// turn into a set of JUST comparators.                                                              // 744\nfunction parseComparator(comp, loose) {                                                              // 745\n  debug('comp', comp);                                                                               // 746\n  comp = replaceCarets(comp, loose);                                                                 // 747\n  debug('caret', comp);                                                                              // 748\n  comp = replaceTildes(comp, loose);                                                                 // 749\n  debug('tildes', comp);                                                                             // 750\n  comp = replaceXRanges(comp, loose);                                                                // 751\n  debug('xrange', comp);                                                                             // 752\n  comp = replaceStars(comp, loose);                                                                  // 753\n  debug('stars', comp);                                                                              // 754\n  return comp;                                                                                       // 755\n}                                                                                                    // 756\n                                                                                                     // 757\nfunction isX(id) {                                                                                   // 758\n  return !id || id.toLowerCase() === 'x' || id === '*';                                              // 759\n}                                                                                                    // 760\n                                                                                                     // 761\n// ~, ~> --> * (any, kinda silly)                                                                    // 762\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0                                           // 763\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0                                                   // 764\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0                                                   // 765\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0                                                                // 766\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0                                                                // 767\nfunction replaceTildes(comp, loose) {                                                                // 768\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 769\n    return replaceTilde(comp, loose);                                                                // 770\n  }).join(' ');                                                                                      // 771\n}                                                                                                    // 772\n                                                                                                     // 773\nfunction replaceTilde(comp, loose) {                                                                 // 774\n  var r = loose ? re[TILDELOOSE] : re[TILDE];                                                        // 775\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 776\n    debug('tilde', comp, _, M, m, p, pr);                                                            // 777\n    var ret;                                                                                         // 778\n                                                                                                     // 779\n    if (isX(M))                                                                                      // 780\n      ret = '';                                                                                      // 781\n    else if (isX(m))                                                                                 // 782\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 783\n    else if (isX(p))                                                                                 // 784\n      // ~1.2 == >=1.2.0- <1.3.0-                                                                    // 785\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 786\n    else if (pr) {                                                                                   // 787\n      debug('replaceTilde pr', pr);                                                                  // 788\n      if (pr.charAt(0) !== '-')                                                                      // 789\n        pr = '-' + pr;                                                                               // 790\n      ret = '>=' + M + '.' + m + '.' + p + pr +                                                      // 791\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 792\n    } else                                                                                           // 793\n      // ~1.2.3 == >=1.2.3 <1.3.0                                                                    // 794\n      ret = '>=' + M + '.' + m + '.' + p +                                                           // 795\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 796\n                                                                                                     // 797\n    debug('tilde return', ret);                                                                      // 798\n    return ret;                                                                                      // 799\n  });                                                                                                // 800\n}                                                                                                    // 801\n                                                                                                     // 802\n// ^ --> * (any, kinda silly)                                                                        // 803\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0                                                               // 804\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0                                                                   // 805\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0                                                                   // 806\n// ^1.2.3 --> >=1.2.3 <2.0.0                                                                         // 807\n// ^1.2.0 --> >=1.2.0 <2.0.0                                                                         // 808\nfunction replaceCarets(comp, loose) {                                                                // 809\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 810\n    return replaceCaret(comp, loose);                                                                // 811\n  }).join(' ');                                                                                      // 812\n}                                                                                                    // 813\n                                                                                                     // 814\nfunction replaceCaret(comp, loose) {                                                                 // 815\n  debug('caret', comp, loose);                                                                       // 816\n  var r = loose ? re[CARETLOOSE] : re[CARET];                                                        // 817\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 818\n    debug('caret', comp, _, M, m, p, pr);                                                            // 819\n    var ret;                                                                                         // 820\n                                                                                                     // 821\n    if (isX(M))                                                                                      // 822\n      ret = '';                                                                                      // 823\n    else if (isX(m))                                                                                 // 824\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 825\n    else if (isX(p)) {                                                                               // 826\n      if (M === '0')                                                                                 // 827\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                               // 828\n      else                                                                                           // 829\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';                                       // 830\n    } else if (pr) {                                                                                 // 831\n      debug('replaceCaret pr', pr);                                                                  // 832\n      if (pr.charAt(0) !== '-')                                                                      // 833\n        pr = '-' + pr;                                                                               // 834\n      if (M === '0') {                                                                               // 835\n        if (m === '0')                                                                               // 836\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 837\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 838\n        else                                                                                         // 839\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 840\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 841\n      } else                                                                                         // 842\n        ret = '>=' + M + '.' + m + '.' + p + pr +                                                    // 843\n              ' <' + (+M + 1) + '.0.0';                                                              // 844\n    } else {                                                                                         // 845\n      debug('no pr');                                                                                // 846\n      if (M === '0') {                                                                               // 847\n        if (m === '0')                                                                               // 848\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 849\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 850\n        else                                                                                         // 851\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 852\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 853\n      } else                                                                                         // 854\n        ret = '>=' + M + '.' + m + '.' + p +                                                         // 855\n              ' <' + (+M + 1) + '.0.0';                                                              // 856\n    }                                                                                                // 857\n                                                                                                     // 858\n    debug('caret return', ret);                                                                      // 859\n    return ret;                                                                                      // 860\n  });                                                                                                // 861\n}                                                                                                    // 862\n                                                                                                     // 863\nfunction replaceXRanges(comp, loose) {                                                               // 864\n  debug('replaceXRanges', comp, loose);                                                              // 865\n  return comp.split(/\\s+/).map(function(comp) {                                                      // 866\n    return replaceXRange(comp, loose);                                                               // 867\n  }).join(' ');                                                                                      // 868\n}                                                                                                    // 869\n                                                                                                     // 870\nfunction replaceXRange(comp, loose) {                                                                // 871\n  comp = comp.trim();                                                                                // 872\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];                                                      // 873\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {                                          // 874\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);                                                   // 875\n    var xM = isX(M);                                                                                 // 876\n    var xm = xM || isX(m);                                                                           // 877\n    var xp = xm || isX(p);                                                                           // 878\n    var anyX = xp;                                                                                   // 879\n                                                                                                     // 880\n    if (gtlt === '=' && anyX)                                                                        // 881\n      gtlt = '';                                                                                     // 882\n                                                                                                     // 883\n    if (xM) {                                                                                        // 884\n      if (gtlt === '>' || gtlt === '<') {                                                            // 885\n        // nothing is allowed                                                                        // 886\n        ret = '<0.0.0';                                                                              // 887\n      } else {                                                                                       // 888\n        // nothing is forbidden                                                                      // 889\n        ret = '*';                                                                                   // 890\n      }                                                                                              // 891\n    } else if (gtlt && anyX) {                                                                       // 892\n      // replace X with 0                                                                            // 893\n      if (xm)                                                                                        // 894\n        m = 0;                                                                                       // 895\n      if (xp)                                                                                        // 896\n        p = 0;                                                                                       // 897\n                                                                                                     // 898\n      if (gtlt === '>') {                                                                            // 899\n        // >1 => >=2.0.0                                                                             // 900\n        // >1.2 => >=1.3.0                                                                           // 901\n        // >1.2.3 => >= 1.2.4                                                                        // 902\n        gtlt = '>=';                                                                                 // 903\n        if (xm) {                                                                                    // 904\n          M = +M + 1;                                                                                // 905\n          m = 0;                                                                                     // 906\n          p = 0;                                                                                     // 907\n        } else if (xp) {                                                                             // 908\n          m = +m + 1;                                                                                // 909\n          p = 0;                                                                                     // 910\n        }                                                                                            // 911\n      } else if (gtlt === '<=') {                                                                    // 912\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should                                        // 913\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.                                          // 914\n        gtlt = '<'                                                                                   // 915\n        if (xm)                                                                                      // 916\n          M = +M + 1                                                                                 // 917\n        else                                                                                         // 918\n          m = +m + 1                                                                                 // 919\n      }                                                                                              // 920\n                                                                                                     // 921\n      ret = gtlt + M + '.' + m + '.' + p;                                                            // 922\n    } else if (xm) {                                                                                 // 923\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 924\n    } else if (xp) {                                                                                 // 925\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 926\n    }                                                                                                // 927\n                                                                                                     // 928\n    debug('xRange return', ret);                                                                     // 929\n                                                                                                     // 930\n    return ret;                                                                                      // 931\n  });                                                                                                // 932\n}                                                                                                    // 933\n                                                                                                     // 934\n// Because * is AND-ed with everything else in the comparator,                                       // 935\n// and '' means \"any version\", just remove the *s entirely.                                          // 936\nfunction replaceStars(comp, loose) {                                                                 // 937\n  debug('replaceStars', comp, loose);                                                                // 938\n  // Looseness is ignored here.  star is always as loose as it gets!                                 // 939\n  return comp.trim().replace(re[STAR], '');                                                          // 940\n}                                                                                                    // 941\n                                                                                                     // 942\n// This function is passed to string.replace(re[HYPHENRANGE])                                        // 943\n// M, m, patch, prerelease, build                                                                    // 944\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5                                                                    // 945\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do                                                   // 946\n// 1.2 - 3.4 => >=1.2.0 <3.5.0                                                                       // 947\nfunction hyphenReplace($0,                                                                           // 948\n                       from, fM, fm, fp, fpr, fb,                                                    // 949\n                       to, tM, tm, tp, tpr, tb) {                                                    // 950\n                                                                                                     // 951\n  if (isX(fM))                                                                                       // 952\n    from = '';                                                                                       // 953\n  else if (isX(fm))                                                                                  // 954\n    from = '>=' + fM + '.0.0';                                                                       // 955\n  else if (isX(fp))                                                                                  // 956\n    from = '>=' + fM + '.' + fm + '.0';                                                              // 957\n  else                                                                                               // 958\n    from = '>=' + from;                                                                              // 959\n                                                                                                     // 960\n  if (isX(tM))                                                                                       // 961\n    to = '';                                                                                         // 962\n  else if (isX(tm))                                                                                  // 963\n    to = '<' + (+tM + 1) + '.0.0';                                                                   // 964\n  else if (isX(tp))                                                                                  // 965\n    to = '<' + tM + '.' + (+tm + 1) + '.0';                                                          // 966\n  else if (tpr)                                                                                      // 967\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;                                                // 968\n  else                                                                                               // 969\n    to = '<=' + to;                                                                                  // 970\n                                                                                                     // 971\n  return (from + ' ' + to).trim();                                                                   // 972\n}                                                                                                    // 973\n                                                                                                     // 974\n                                                                                                     // 975\n// if ANY of the sets match ALL of its comparators, then pass                                        // 976\nRange.prototype.test = function(version) {                                                           // 977\n  if (!version)                                                                                      // 978\n    return false;                                                                                    // 979\n                                                                                                     // 980\n  if (typeof version === 'string')                                                                   // 981\n    version = new SemVer(version, this.loose);                                                       // 982\n                                                                                                     // 983\n  for (var i = 0; i < this.set.length; i++) {                                                        // 984\n    if (testSet(this.set[i], version))                                                               // 985\n      return true;                                                                                   // 986\n  }                                                                                                  // 987\n  return false;                                                                                      // 988\n};                                                                                                   // 989\n                                                                                                     // 990\nfunction testSet(set, version) {                                                                     // 991\n  for (var i = 0; i < set.length; i++) {                                                             // 992\n    if (!set[i].test(version))                                                                       // 993\n      return false;                                                                                  // 994\n  }                                                                                                  // 995\n                                                                                                     // 996\n  if (version.prerelease.length) {                                                                   // 997\n    // Find the set of versions that are allowed to have prereleases                                 // 998\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0                                      // 999\n    // That should allow `1.2.3-pr.2` to pass.                                                       // 1000\n    // However, `1.2.4-alpha.notready` should NOT be allowed,                                        // 1001\n    // even though it's within the range set by the comparators.                                     // 1002\n    for (var i = 0; i < set.length; i++) {                                                           // 1003\n      debug(set[i].semver);                                                                          // 1004\n      if (set[i].semver === ANY)                                                                     // 1005\n        return true;                                                                                 // 1006\n                                                                                                     // 1007\n      if (set[i].semver.prerelease.length > 0) {                                                     // 1008\n        var allowed = set[i].semver;                                                                 // 1009\n        if (allowed.major === version.major &&                                                       // 1010\n            allowed.minor === version.minor &&                                                       // 1011\n            allowed.patch === version.patch)                                                         // 1012\n          return true;                                                                               // 1013\n      }                                                                                              // 1014\n    }                                                                                                // 1015\n                                                                                                     // 1016\n    // Version has a -pre, but it's not one of the ones we like.                                     // 1017\n    return false;                                                                                    // 1018\n  }                                                                                                  // 1019\n                                                                                                     // 1020\n  return true;                                                                                       // 1021\n}                                                                                                    // 1022\n                                                                                                     // 1023\nexports.satisfies = satisfies;                                                                       // 1024\nfunction satisfies(version, range, loose) {                                                          // 1025\n  try {                                                                                              // 1026\n    range = new Range(range, loose);                                                                 // 1027\n  } catch (er) {                                                                                     // 1028\n    return false;                                                                                    // 1029\n  }                                                                                                  // 1030\n  return range.test(version);                                                                        // 1031\n}                                                                                                    // 1032\n                                                                                                     // 1033\nexports.maxSatisfying = maxSatisfying;                                                               // 1034\nfunction maxSatisfying(versions, range, loose) {                                                     // 1035\n  return versions.filter(function(version) {                                                         // 1036\n    return satisfies(version, range, loose);                                                         // 1037\n  }).sort(function(a, b) {                                                                           // 1038\n    return rcompare(a, b, loose);                                                                    // 1039\n  })[0] || null;                                                                                     // 1040\n}                                                                                                    // 1041\n                                                                                                     // 1042\nexports.validRange = validRange;                                                                     // 1043\nfunction validRange(range, loose) {                                                                  // 1044\n  try {                                                                                              // 1045\n    // Return '*' instead of '' so that truthiness works.                                            // 1046\n    // This will throw if it's invalid anyway                                                        // 1047\n    return new Range(range, loose).range || '*';                                                     // 1048\n  } catch (er) {                                                                                     // 1049\n    return null;                                                                                     // 1050\n  }                                                                                                  // 1051\n}                                                                                                    // 1052\n                                                                                                     // 1053\n// Determine if version is less than all the versions possible in the range                          // 1054\nexports.ltr = ltr;                                                                                   // 1055\nfunction ltr(version, range, loose) {                                                                // 1056\n  return outside(version, range, '<', loose);                                                        // 1057\n}                                                                                                    // 1058\n                                                                                                     // 1059\n// Determine if version is greater than all the versions possible in the range.                      // 1060\nexports.gtr = gtr;                                                                                   // 1061\nfunction gtr(version, range, loose) {                                                                // 1062\n  return outside(version, range, '>', loose);                                                        // 1063\n}                                                                                                    // 1064\n                                                                                                     // 1065\nexports.outside = outside;                                                                           // 1066\nfunction outside(version, range, hilo, loose) {                                                      // 1067\n  version = new SemVer(version, loose);                                                              // 1068\n  range = new Range(range, loose);                                                                   // 1069\n                                                                                                     // 1070\n  var gtfn, ltefn, ltfn, comp, ecomp;                                                                // 1071\n  switch (hilo) {                                                                                    // 1072\n    case '>':                                                                                        // 1073\n      gtfn = gt;                                                                                     // 1074\n      ltefn = lte;                                                                                   // 1075\n      ltfn = lt;                                                                                     // 1076\n      comp = '>';                                                                                    // 1077\n      ecomp = '>=';                                                                                  // 1078\n      break;                                                                                         // 1079\n    case '<':                                                                                        // 1080\n      gtfn = lt;                                                                                     // 1081\n      ltefn = gte;                                                                                   // 1082\n      ltfn = gt;                                                                                     // 1083\n      comp = '<';                                                                                    // 1084\n      ecomp = '<=';                                                                                  // 1085\n      break;                                                                                         // 1086\n    default:                                                                                         // 1087\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');                                  // 1088\n  }                                                                                                  // 1089\n                                                                                                     // 1090\n  // If it satisifes the range it is not outside                                                     // 1091\n  if (satisfies(version, range, loose)) {                                                            // 1092\n    return false;                                                                                    // 1093\n  }                                                                                                  // 1094\n                                                                                                     // 1095\n  // From now on, variable terms are as if we're in \"gtr\" mode.                                      // 1096\n  // but note that everything is flipped for the \"ltr\" function.                                     // 1097\n                                                                                                     // 1098\n  for (var i = 0; i < range.set.length; ++i) {                                                       // 1099\n    var comparators = range.set[i];                                                                  // 1100\n                                                                                                     // 1101\n    var high = null;                                                                                 // 1102\n    var low = null;                                                                                  // 1103\n                                                                                                     // 1104\n    comparators.forEach(function(comparator) {                                                       // 1105\n      high = high || comparator;                                                                     // 1106\n      low = low || comparator;                                                                       // 1107\n      if (gtfn(comparator.semver, high.semver, loose)) {                                             // 1108\n        high = comparator;                                                                           // 1109\n      } else if (ltfn(comparator.semver, low.semver, loose)) {                                       // 1110\n        low = comparator;                                                                            // 1111\n      }                                                                                              // 1112\n    });                                                                                              // 1113\n                                                                                                     // 1114\n    // If the edge version comparator has a operator then our version                                // 1115\n    // isn't outside it                                                                              // 1116\n    if (high.operator === comp || high.operator === ecomp) {                                         // 1117\n      return false;                                                                                  // 1118\n    }                                                                                                // 1119\n                                                                                                     // 1120\n    // If the lowest version comparator has an operator and our version                              // 1121\n    // is less than it then it isn't higher than the range                                           // 1122\n    if ((!low.operator || low.operator === comp) &&                                                  // 1123\n        ltefn(version, low.semver)) {                                                                // 1124\n      return false;                                                                                  // 1125\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {                                // 1126\n      return false;                                                                                  // 1127\n    }                                                                                                // 1128\n  }                                                                                                  // 1129\n  return true;                                                                                       // 1130\n}                                                                                                    // 1131\n                                                                                                     // 1132\n// Use the define() function if we're in AMD land                                                    // 1133\nif (typeof define === 'function' && define.amd)                                                      // 1134\n  define(exports);                                                                                   // 1135\n                                                                                                     // 1136\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/package-version-parser/package-version-parser.js                                         //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// This file is in tools/package-version-parser.js and is symlinked into                             // 1\n// packages/package-version-parser/package-version-parser.js. It's part of both                      // 2\n// the tool and the package!  We don't use an isopacket for it because it used                       // 3\n// to be required as part of building isopackets (though that may no longer be                       // 4\n// true).                                                                                            // 5\nvar inTool = typeof Package === 'undefined';                                                         // 6\n                                                                                                     // 7\n                                                                                                     // 8\nvar semver = inTool ?                                                                                // 9\n  require ('../../dev_bundle/lib/node_modules/semver') : SemVer410;                                  // 10\nvar __ = inTool ? require('../../dev_bundle/lib/node_modules/underscore') : _;                       // 11\n                                                                                                     // 12\n// Takes in a meteor version string, for example 1.2.3-rc.5_1+12345.                                 // 13\n//                                                                                                   // 14\n// Returns an object composed of the following:                                                      // 15\n//  * major (integer >= 0)                                                                           // 16\n//  * minor (integer >= 0)                                                                           // 17\n//  * patch (integer >= 0)                                                                           // 18\n//  * prerelease (Array of Number-or-String, possibly empty)                                         // 19\n//  * wrapNum (integer >= 0)                                                                         // 20\n//  * build (Array of String, possibly empty)                                                        // 21\n//  * raw (String), the raw meteor version string                                                    // 22\n//  * version (String), canonical meteor version without build ID                                    // 23\n//  * semver (String), canonical semver version with build ID but no wrap num                        // 24\n//                                                                                                   // 25\n// The input string \"1.2.3-rc.5_1+12345\" has a (major, minor, patch) of                              // 26\n// (1, 2, 3), a prerelease of [\"rc\", 5], a wrapNum of 1, a build of                                  // 27\n// [\"12345\"], a raw of \"1.2.3-rc.5_1+12345\", a version of                                            // 28\n// \"1.2.3-rc.5_1\", and a semver of \"1.2.3-rc.5+12345\".                                               // 29\n//                                                                                                   // 30\n// Throws if the version string is invalid in any way.                                               // 31\n//                                                                                                   // 32\n// You can write `PV.parse(\"1.2.3\")` as an alternative to `new PV(\"1.2.3\")`                          // 33\nvar PV = function (versionString) {                                                                  // 34\n  if (! (typeof versionString === 'string')) {                                                       // 35\n    throw new Error(\"Invalid PackageVersion argument: \" + versionString);                            // 36\n  }                                                                                                  // 37\n  if (! versionString) {                                                                             // 38\n    throwVersionParserError(\"Empty string is not a valid version\");                                  // 39\n  }                                                                                                  // 40\n                                                                                                     // 41\n  // The buildID (\"+foo\" suffix) is part of semver, but split it off                                 // 42\n  // because it comes after the wrapNum.  The wrapNum (\"_123\" suffix)                                // 43\n  // is a Meteor extension to semver.                                                                // 44\n  var plusSplit = versionString.split('+');                                                          // 45\n  var wrapSplit = plusSplit[0].split('_');                                                           // 46\n  var wrapNum = 0;                                                                                   // 47\n                                                                                                     // 48\n  if (plusSplit.length > 2) {                                                                        // 49\n    throwVersionParserError(\"Can't have two + in version: \" + versionString);                        // 50\n  }                                                                                                  // 51\n  if (wrapSplit.length > 2) {                                                                        // 52\n    throwVersionParserError(\"Can't have two _ in version: \" + versionString);                        // 53\n  }                                                                                                  // 54\n  if (wrapSplit.length > 1) {                                                                        // 55\n    wrapNum = wrapSplit[1];                                                                          // 56\n    if (! wrapNum) {                                                                                 // 57\n      throwVersionParserError(\"A wrap number must follow _\");                                        // 58\n    } else if (!/^\\d+$/.test(wrapNum)) {                                                             // 59\n      throwVersionParserError(                                                                       // 60\n        \"The wrap number (after _) must contain only digits, so \" +                                  // 61\n          versionString + \" is invalid.\");                                                           // 62\n    } else if (wrapNum[0] === \"0\") {                                                                 // 63\n      throwVersionParserError(                                                                       // 64\n        \"The wrap number (after _) must not have a leading zero, so \" +                              // 65\n          versionString + \" is invalid.\");                                                           // 66\n    }                                                                                                // 67\n    wrapNum = parseInt(wrapNum, 10);                                                                 // 68\n  }                                                                                                  // 69\n                                                                                                     // 70\n  // semverPart is everything but the wrapNum, so for \"1.0.0_2+xyz\",                                 // 71\n  // it is \"1.0.0+xyz\".                                                                              // 72\n  var semverPart = wrapSplit[0];                                                                     // 73\n  if (plusSplit.length > 1) {                                                                        // 74\n    semverPart += \"+\" + plusSplit[1];                                                                // 75\n  }                                                                                                  // 76\n                                                                                                     // 77\n  // NPM's semver spec supports things like 'v1.0.0' and considers them valid,                       // 78\n  // but we don't. Everything before the + or - should be of the x.x.x form.                         // 79\n  if (! /^\\d+\\.\\d+\\.\\d+(\\+|-|$)/.test(semverPart)) {                                                 // 80\n    throwVersionParserError(                                                                         // 81\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 82\n        + versionString + \"'.\");                                                                     // 83\n  };                                                                                                 // 84\n                                                                                                     // 85\n  var semverParse = semver.parse(semverPart);                                                        // 86\n  if (! semverParse) {                                                                               // 87\n    throwVersionParserError(                                                                         // 88\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 89\n        + semverPart + \"'.\");                                                                        // 90\n  }                                                                                                  // 91\n                                                                                                     // 92\n  this.major = semverParse.major; // Number                                                          // 93\n  this.minor = semverParse.minor; // Number                                                          // 94\n  this.patch = semverParse.patch; // Number                                                          // 95\n  this.prerelease = semverParse.prerelease; // [OneOf(Number, String)]                               // 96\n  this.wrapNum = wrapNum; // Number                                                                  // 97\n  this.build = semverParse.build; // [String]                                                        // 98\n  this.raw = versionString; // the entire version string                                             // 99\n  // `.version` is everything but the build ID (\"+foo\"), and it                                      // 100\n  // has been run through semver's canonicalization, ie \"cleaned\"                                    // 101\n  // (for whatever that's worth)                                                                     // 102\n  this.version = semverParse.version + (wrapNum ? '_' + wrapNum : '');                               // 103\n  // everything but the wrapnum (\"_123\")                                                             // 104\n  this.semver = semverParse.version + (                                                              // 105\n    semverParse.build.length ? '+' + semverParse.build.join('.') : '');                              // 106\n};                                                                                                   // 107\n                                                                                                     // 108\nPV.parse = function (versionString) {                                                                // 109\n  return new PV(versionString);                                                                      // 110\n};                                                                                                   // 111\n                                                                                                     // 112\nif (inTool) {                                                                                        // 113\n  module.exports = PV;                                                                               // 114\n} else {                                                                                             // 115\n  PackageVersion = PV;                                                                               // 116\n}                                                                                                    // 117\n                                                                                                     // 118\n// Converts a meteor version into a large floating point number, which                               // 119\n// is (more or less [*]) unique to that version. Satisfies the                                       // 120\n// following guarantee: If PV.lessThan(v1, v2) then                                                  // 121\n// PV.versionMagnitude(v1) < PV.versionMagnitude(v2) [*]                                             // 122\n//                                                                                                   // 123\n// [* XXX!] We don't quite satisfy the uniqueness and comparison properties in                       // 124\n// these cases:                                                                                      // 125\n// 1. If any of the version parts are greater than 100 (pretty unlikely?)                            // 126\n// 2. If we're dealing with a prerelease version, we only look at the                                // 127\n//    first two characters of each prerelease part. So, \"1.0.0-beta\" and                             // 128\n//    \"1.0.0-bear\" will have the same magnitude.                                                     // 129\n// 3. If we're dealing with a prerelease version with more than two parts, eg                        // 130\n//    \"1.0.0-rc.0.1\". In this comparison may fail since we'd get to the limit                        // 131\n//    of JavaScript floating point precision.                                                        // 132\n//                                                                                                   // 133\n// If we wanted to fix this, we'd make this function return a BigFloat                               // 134\n// instead of a vanilla JavaScript number. That will make the                                        // 135\n// constraint solver slower (by how much?), and would require some                                   // 136\n// careful thought.                                                                                  // 137\n// (Or it could just return some sort of tuple, and ensure that                                      // 138\n// the cost functions that consume this can deal with tuples...)                                     // 139\nPV.versionMagnitude = function (versionString) {                                                     // 140\n  var v = PV.parse(versionString);                                                                   // 141\n                                                                                                     // 142\n  return v.major * 100 * 100 +                                                                       // 143\n    v.minor * 100 +                                                                                  // 144\n    v.patch +                                                                                        // 145\n    v.wrapNum / 100 +                                                                                // 146\n    prereleaseIdentifierToFraction(v.prerelease) / 100 / 100;                                        // 147\n};                                                                                                   // 148\n                                                                                                     // 149\n// Accepts an array, eg [\"rc\", 2, 3]. Returns a number in the range                                  // 150\n// (-1, 0].  An empty array returns 0. A non-empty string returns a                                  // 151\n// number that is \"as large\" as the its precedence.                                                  // 152\nvar prereleaseIdentifierToFraction = function (prerelease) {                                         // 153\n  if (prerelease.length === 0)                                                                       // 154\n    return 0;                                                                                        // 155\n                                                                                                     // 156\n  return __.reduce(prerelease, function (memo, part, index) {                                        // 157\n    var digit;                                                                                       // 158\n    if (typeof part === 'number') {                                                                  // 159\n      digit = part+1;                                                                                // 160\n    } else if (typeof part === 'string') {                                                           // 161\n      var VALID_CHARACTERS =                                                                         // 162\n            \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";                       // 163\n                                                                                                     // 164\n      var validCharToNumber = function (ch) {                                                        // 165\n        var result = VALID_CHARACTERS.indexOf(ch);                                                   // 166\n        if (result === -1)                                                                           // 167\n          throw new Error(\"Unexpected character in prerelease identifier: \" + ch);                   // 168\n        else                                                                                         // 169\n          return result;                                                                             // 170\n      };                                                                                             // 171\n                                                                                                     // 172\n      digit = 101 + // Numeric parts always have lower precedence than non-numeric parts.            // 173\n        validCharToNumber(part[0]) * VALID_CHARACTERS.length +                                       // 174\n        (part[1] ? validCharToNumber(part[1]) : 0);                                                  // 175\n    } else {                                                                                         // 176\n      throw new Error(\"Unexpected prerelease identifier part: \" + part + \" of type \" + typeof part);\n    }                                                                                                // 178\n                                                                                                     // 179\n    // 4100 > 101 + VALID_CHARACTERS.length *                                                        // 180\n    // VALID_CHARACTERS.length. And there's a test to verify this                                    // 181\n    // (\"test the edges of `versionMagnitude`\")                                                      // 182\n    return memo + digit / Math.pow(4100, index+1);                                                   // 183\n  }, -1);                                                                                            // 184\n};                                                                                                   // 185\n                                                                                                     // 186\n// Takes in two meteor versions. Returns true if the first one is less than the second.              // 187\n// Versions are strings or PackageVersion objects.                                                   // 188\nPV.lessThan = function (versionOne, versionTwo) {                                                    // 189\n  return PV.compare(versionOne, versionTwo) < 0;                                                     // 190\n};                                                                                                   // 191\n                                                                                                     // 192\n// Given a string version, returns its major version (the first section of the                       // 193\n// semver), as an integer. Two versions are compatible if they have the same                         // 194\n// version number.                                                                                   // 195\n//                                                                                                   // 196\n// versionString: valid meteor version string.                                                       // 197\nPV.majorVersion = function (versionString) {                                                         // 198\n  return PV.parse(versionString).major;                                                              // 199\n};                                                                                                   // 200\n                                                                                                     // 201\n// Takes in two meteor versions. Returns 0 if equal, a positive number if v1                         // 202\n// is greater, a negative number if v2 is greater.                                                   // 203\n// Versions are strings or PackageVersion objects.                                                   // 204\nPV.compare = function (versionOne, versionTwo) {                                                     // 205\n  var v1 = versionOne;                                                                               // 206\n  if (typeof v1 === 'string') {                                                                      // 207\n    v1 = PV.parse(v1);                                                                               // 208\n  }                                                                                                  // 209\n  var v2 = versionTwo;                                                                               // 210\n  if (typeof v2 === 'string') {                                                                      // 211\n    v2 = PV.parse(v2);                                                                               // 212\n  }                                                                                                  // 213\n                                                                                                     // 214\n  // If the semver parts are different, use the semver library to compare,                           // 215\n  // ignoring wrap numbers.  (The semver library will ignore the build ID                            // 216\n  // per the semver spec.)                                                                           // 217\n  if (v1.semver !== v2.semver) {                                                                     // 218\n    return semver.compare(v1.semver, v2.semver);                                                     // 219\n  } else {                                                                                           // 220\n    // If the semver components are equal, then the one with the smaller wrap                        // 221\n    // numbers is smaller.                                                                           // 222\n    return v1.wrapNum - v2.wrapNum;                                                                  // 223\n  }                                                                                                  // 224\n};                                                                                                   // 225\n                                                                                                     // 226\n// Conceptually we have three types of constraints:                                                  // 227\n// 1. \"compatible-with\" - A@x.y.z - constraints package A to version x.y.z or                        // 228\n//    higher, as long as the version is backwards compatible with x.y.z.                             // 229\n//    \"pick A compatible with x.y.z\"                                                                 // 230\n//    It is the default type.                                                                        // 231\n// 2. \"exactly\" - A@=x.y.z - constraints package A only to version x.y.z and                         // 232\n//    nothing else.                                                                                  // 233\n//    \"pick A exactly at x.y.z\"                                                                      // 234\n// 3. \"any-reasonable\" - \"A\"                                                                         // 235\n//    Basically, this means any version of A ... other than ones that have                           // 236\n//    dashes in the version (ie, are prerelease) ... unless the prerelease                           // 237\n//    version has been explicitly selected (which at this stage in the game                          // 238\n//    means they are mentioned in a top-level constraint in the top-level                            // 239\n//    call to the resolver).                                                                         // 240\nvar parseSimpleConstraint = function (constraintString) {                                            // 241\n  if (! constraintString) {                                                                          // 242\n    throw new Error(\"Non-empty string required\");                                                    // 243\n  }                                                                                                  // 244\n                                                                                                     // 245\n  var type, versionString;                                                                           // 246\n                                                                                                     // 247\n  if (constraintString.charAt(0) === '=') {                                                          // 248\n    type = \"exactly\";                                                                                // 249\n    versionString = constraintString.substr(1);                                                      // 250\n  } else {                                                                                           // 251\n    type = \"compatible-with\";                                                                        // 252\n    versionString = constraintString;                                                                // 253\n  }                                                                                                  // 254\n                                                                                                     // 255\n  // This will throw if the version string is invalid.                                               // 256\n  PV.getValidServerVersion(versionString);                                                           // 257\n                                                                                                     // 258\n  return { type: type, versionString: versionString };                                               // 259\n};                                                                                                   // 260\n                                                                                                     // 261\n                                                                                                     // 262\n// Check to see if the versionString that we pass in is a valid meteor version.                      // 263\n//                                                                                                   // 264\n// Returns a valid meteor version string that can be included in the                                 // 265\n// server. That means that it has everything EXCEPT the build id. Throws if the                      // 266\n// entered string was invalid.                                                                       // 267\nPV.getValidServerVersion = function (meteorVersionString) {                                          // 268\n  return PV.parse(meteorVersionString).version;                                                      // 269\n};                                                                                                   // 270\n                                                                                                     // 271\nPV.VersionConstraint = function (vConstraintString) {                                                // 272\n  var alternatives;                                                                                  // 273\n  // If there is no version string (\"\" or null), then our only                                       // 274\n  // constraint is any-reasonable.                                                                   // 275\n  if (! vConstraintString) {                                                                         // 276\n    // .versionString === null is relied on in the tool                                              // 277\n    alternatives =                                                                                   // 278\n      [ { type: \"any-reasonable\", versionString: null } ];                                           // 279\n    vConstraintString = \"\";                                                                          // 280\n  } else {                                                                                           // 281\n    // Parse out the versionString.                                                                  // 282\n    var parts = vConstraintString.split(/ *\\|\\| */);                                                 // 283\n    alternatives = __.map(parts, function (alt) {                                                    // 284\n      if (! alt) {                                                                                   // 285\n        throwVersionParserError(\"Invalid constraint string: \" +                                      // 286\n                                vConstraintString);                                                  // 287\n      }                                                                                              // 288\n      return parseSimpleConstraint(alt);                                                             // 289\n    });                                                                                              // 290\n  }                                                                                                  // 291\n                                                                                                     // 292\n  this.raw = vConstraintString;                                                                      // 293\n  this.alternatives = alternatives;                                                                  // 294\n};                                                                                                   // 295\n                                                                                                     // 296\nPV.parseVersionConstraint = function (constraintString) {                                            // 297\n  return new PV.VersionConstraint(constraintString);                                                 // 298\n};                                                                                                   // 299\n                                                                                                     // 300\n// A PackageConstraint consists of a package name and a version constraint.                          // 301\n// Call either with args (package, versionConstraintString) or                                       // 302\n// (packageConstraintString), or (package, versionConstraint).                                       // 303\n// That is, (\"foo\", \"1.2.3\") or (\"foo@1.2.3\"), or (\"foo\", vc) where vc                               // 304\n// is instanceof PV.VersionConstraint.                                                               // 305\nPV.PackageConstraint = function (part1, part2) {                                                     // 306\n  if ((typeof part1 !== \"string\") ||                                                                 // 307\n      (part2 && (typeof part2 !== \"string\") &&                                                       // 308\n       ! (part2 instanceof PV.VersionConstraint))) {                                                 // 309\n    throw new Error(\"constraintString must be a string\");                                            // 310\n  }                                                                                                  // 311\n                                                                                                     // 312\n  var packageName, versionConstraint, vConstraintString;                                             // 313\n  if (part2) {                                                                                       // 314\n    packageName = part1;                                                                             // 315\n    if (part2 instanceof PV.VersionConstraint) {                                                     // 316\n      versionConstraint = part2;                                                                     // 317\n    } else {                                                                                         // 318\n      vConstraintString = part2;                                                                     // 319\n    }                                                                                                // 320\n  } else if (part1.indexOf(\"@\") >= 0) {                                                              // 321\n    // Shave off last part after @, with \"a@b@c\" becoming [\"a@b\", \"c\"].                              // 322\n    // Validating the package name will catch extra @.                                               // 323\n    var parts = part1.match(/^(.*)@([^@]*)$/).slice(1);                                              // 324\n    packageName = parts[0];                                                                          // 325\n    vConstraintString = parts[1];                                                                    // 326\n    if (! vConstraintString) {                                                                       // 327\n      throwVersionParserError(                                                                       // 328\n        \"Version constraint for package '\" + packageName +                                           // 329\n          \"' cannot be empty; leave off the @ if you don't want to constrain \" +                     // 330\n          \"the version.\");                                                                           // 331\n    }                                                                                                // 332\n  } else {                                                                                           // 333\n    packageName = part1;                                                                             // 334\n    vConstraintString = \"\";                                                                          // 335\n  }                                                                                                  // 336\n                                                                                                     // 337\n  PV.validatePackageName(packageName);                                                               // 338\n  if (versionConstraint) {                                                                           // 339\n    vConstraintString = versionConstraint.raw;                                                       // 340\n  } else {                                                                                           // 341\n    versionConstraint = PV.parseVersionConstraint(vConstraintString);                                // 342\n  }                                                                                                  // 343\n                                                                                                     // 344\n  this.package = packageName;                                                                        // 345\n  this.constraintString = vConstraintString;                                                         // 346\n  this.versionConstraint = versionConstraint;                                                        // 347\n};                                                                                                   // 348\n                                                                                                     // 349\nPV.PackageConstraint.prototype.toString = function () {                                              // 350\n  var ret = this.package;                                                                            // 351\n  if (this.constraintString) {                                                                       // 352\n    ret += \"@\" + this.constraintString;                                                              // 353\n  }                                                                                                  // 354\n  return ret;                                                                                        // 355\n};                                                                                                   // 356\n                                                                                                     // 357\n// Structure of a parsed constraint:                                                                 // 358\n//                                                                                                   // 359\n// /*PV.PackageConstraint*/                                                                          // 360\n// { package: String,                                                                                // 361\n//   constraintString: String,                                                                       // 362\n//   versionConstraint: /*PV.VersionConstraint*/ {                                                   // 363\n//     raw: String,                                                                                  // 364\n//     alternatives: [{versionString: String|null,                                                   // 365\n//                     type: String}]}}                                                              // 366\nPV.parsePackageConstraint = function (part1, part2) {                                                // 367\n  return new PV.PackageConstraint(part1, part2);                                                     // 368\n};                                                                                                   // 369\n                                                                                                     // 370\nPV.validatePackageName = function (packageName, options) {                                           // 371\n  options = options || {};                                                                           // 372\n                                                                                                     // 373\n  var badChar = packageName.match(/[^a-z0-9:.\\-]/);                                                  // 374\n  if (badChar) {                                                                                     // 375\n    if (options.detailedColonExplanation) {                                                          // 376\n      throwVersionParserError(                                                                       // 377\n        \"Bad character in package name: \" + JSON.stringify(badChar[0]) +                             // 378\n          \".\\n\\nPackage names can only contain lowercase ASCII alphanumerics, \" +                    // 379\n          \"dash, or dot.\\nIf you plan to publish a package, it must be \" +                           // 380\n          \"prefixed with your\\nMeteor Developer Account username and a colon.\");                     // 381\n    }                                                                                                // 382\n    throwVersionParserError(                                                                         // 383\n      \"Package names can only contain lowercase ASCII alphanumerics, dash, \" +                       // 384\n        \"dot, or colon, not \" + JSON.stringify(badChar[0]) + \".\");                                   // 385\n  }                                                                                                  // 386\n  if (!/[a-z]/.test(packageName)) {                                                                  // 387\n    throwVersionParserError(\"Package name must contain a lowercase ASCII letter: \"                   // 388\n                            + JSON.stringify(packageName));                                          // 389\n  }                                                                                                  // 390\n  if (packageName[0] === '.') {                                                                      // 391\n    throwVersionParserError(\"Package name may not begin with a dot: \"                                // 392\n                            + JSON.stringify(packageName));                                          // 393\n  }                                                                                                  // 394\n  if (packageName.slice(-1) === '.') {                                                               // 395\n    throwVersionParserError(\"Package name may not end with a dot: \"                                  // 396\n                            + JSON.stringify(packageName));                                          // 397\n  }                                                                                                  // 398\n                                                                                                     // 399\n  if (packageName.slice(-1) === '.') {                                                               // 400\n    throwVersionParserError(\"Package names may not end with a dot: \" +                               // 401\n                            JSON.stringify(packageName));                                            // 402\n  }                                                                                                  // 403\n  if (packageName.indexOf('..') >= 0) {                                                              // 404\n    throwVersionParserError(\"Package names may not contain two consecutive dots: \" +                 // 405\n                            JSON.stringify(packageName));                                            // 406\n  }                                                                                                  // 407\n  if (packageName[0] === '-') {                                                                      // 408\n    throwVersionParserError(\"Package names may not begin with a hyphen: \" +                          // 409\n                            JSON.stringify(packageName));                                            // 410\n  }                                                                                                  // 411\n  // (There is already a package ending with a `-` and one with two consecutive `-`                  // 412\n  // in troposphere, though they both look like typos.)                                              // 413\n                                                                                                     // 414\n  if (packageName[0] === \":\" || __.last(packageName) === \":\") {                                      // 415\n    throwVersionParserError(\"Package names may not start or end with a colon: \" +                    // 416\n                            JSON.stringify(packageName));                                            // 417\n  }                                                                                                  // 418\n};                                                                                                   // 419\n                                                                                                     // 420\nvar throwVersionParserError = function (message) {                                                   // 421\n  var e = new Error(message);                                                                        // 422\n  e.versionParserError = true;                                                                       // 423\n  throw e;                                                                                           // 424\n};                                                                                                   // 425\n                                                                                                     // 426\n// Return true if the version constraint was invalid prior to 0.9.3                                  // 427\n// (adding _ and || support)                                                                         // 428\n//                                                                                                   // 429\n// NOTE: this is not used on the client yet. This package is used by the                             // 430\n// package server to determine what is valid.                                                        // 431\nPV.invalidFirstFormatConstraint = function (validConstraint) {                                       // 432\n  if (!validConstraint) return false;                                                                // 433\n  // We can check this easily right now, because we introduced some new                              // 434\n  // characters. Anything with those characters is invalid prior to                                  // 435\n  // 0.9.3. XXX: If we ever have to go through these, we should write a more                         // 436\n  // complicated regex.                                                                              // 437\n  return (/_/.test(validConstraint) ||                                                               // 438\n          /\\|/.test(validConstraint));                                                               // 439\n};                                                                                                   // 440\n                                                                                                     // 441\n// Remove a suffix like \"+foo\" if present.                                                           // 442\nPV.removeBuildID = function (versionString) {                                                        // 443\n  return versionString.replace(/\\+.*$/, '');                                                         // 444\n};                                                                                                   // 445\n                                                                                                     // 446\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]