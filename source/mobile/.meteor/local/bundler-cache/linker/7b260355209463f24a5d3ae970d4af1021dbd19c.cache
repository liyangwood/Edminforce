[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar RateLimiter = Package['rate-limit'].RateLimiter;\n\n/* Package-scope variables */\nvar DDPRateLimiter;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/ddp-rate-limiter/packages/ddp-rate-limiter.js                             //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n(function(){                                                                          // 1\n                                                                                      // 2\n//////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                              //    // 4\n// packages/ddp-rate-limiter/ddp-rate-limiter.js                                //    // 5\n//                                                                              //    // 6\n//////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                //    // 8\n// Rate Limiter built into DDP with a default error message. See README or      // 1  // 9\n// online documentation for more details.                                       // 2  // 10\nDDPRateLimiter = {};                                                            // 3  // 11\n                                                                                // 4  // 12\nvar errorMessage = function (rateLimitResult) {                                 // 5  // 13\n  return \"Error, too many requests. Please slow down. You must wait \" +         // 6  // 14\n    Math.ceil(rateLimitResult.timeToReset / 1000) + \" seconds before \" +        // 7  // 15\n    \"trying again.\";                                                            // 8  // 16\n};                                                                              // 9  // 17\nvar rateLimiter = new RateLimiter();                                            // 10\n                                                                                // 11\nDDPRateLimiter.getErrorMessage = function (rateLimitResult) {                   // 12\n  if (typeof errorMessage === 'function')                                       // 13\n    return errorMessage(rateLimitResult);                                       // 14\n  else                                                                          // 15\n    return errorMessage;                                                        // 16\n};                                                                              // 17\n                                                                                // 18\n/**                                                                             // 19\n * @summary Set error message text when method or subscription rate limit       // 20\n * exceeded.                                                                    // 21\n * @param {string|function} message Functions are passed in an object with a    // 22\n * `timeToReset` field that specifies the number of milliseconds until the next       // 31\n * method or subscription is allowed to run. The function must return a string  // 24\n * of the error message.                                                        // 25\n */                                                                             // 26\nDDPRateLimiter.setErrorMessage = function (message) {                           // 27\n  errorMessage = message;                                                       // 28\n};                                                                              // 29\n                                                                                // 30\n/**                                                                             // 31\n * @summary                                                                     // 32\n * Add a rule that matches against a stream of events describing method or      // 33\n * subscription attempts. Each event is an object with the following            // 34\n * properties:                                                                  // 35\n *                                                                              // 36\n * - `type`: Either \"method\" or \"subscription\"                                  // 37\n * - `name`: The name of the method or subscription being called                // 38\n * - `userId`: The user ID attempting the method or subscription                // 39\n * - `connectionId`: A string representing the user's DDP connection            // 40\n * - `clientAddress`: The IP address of the user                                // 41\n *                                                                              // 42\n * Returns unique `ruleId` that can be passed to `removeRule`.                  // 43\n *                                                                              // 44\n * @param {Object} matcher                                                      // 45\n *   Matchers specify which events are counted towards a rate limit. A matcher  // 46\n *   is an object that has a subset of the same properties as the event objects       // 55\n *   described above. Each value in a matcher object is one of the following:   // 48\n *                                                                              // 49\n *   - a string: for the event to satisfy the matcher, this value must be equal       // 58\n *   to the value of the same property in the event object                      // 51\n *                                                                              // 52\n *   - a function: for the event to satisfy the matcher, the function must      // 53\n *   evaluate to true when passed the value of the same property                // 54\n *   in the event object                                                        // 55\n *                                                                              // 56\n * Here's how events are counted: Each event that satisfies the matcher's       // 57\n * filter is mapped to a bucket. Buckets are uniquely determined by the         // 58\n * event object's values for all properties present in both the matcher and     // 59\n * event objects.                                                               // 60\n *                                                                              // 61\n * @param {number} numRequests  number of requests allowed per time interval.   // 62\n * Default = 10.                                                                // 63\n * @param {number} timeInterval time interval in milliseconds after which       // 64\n * rule's counters are reset. Default = 1000.                                   // 65\n */                                                                             // 66\nDDPRateLimiter.addRule = function (matcher, numRequests, timeInterval) {        // 67\n  return rateLimiter.addRule(matcher, numRequests, timeInterval);               // 68\n};                                                                              // 69\n                                                                                // 70\nDDPRateLimiter.printRules = function () {                                       // 71\n  return rateLimiter.rules;                                                     // 72\n};                                                                              // 73\n                                                                                // 74\n/**                                                                             // 75\n * @summary Removes the specified rule from the rate limiter. If rule had       // 76\n * hit a rate limit, that limit is removed as well.                             // 77\n * @param  {string} id 'ruleId' returned from `addRule`                         // 78\n * @return {boolean}    True if a rule was removed.                             // 79\n */                                                                             // 80\nDDPRateLimiter.removeRule = function (id) {                                     // 81\n  return rateLimiter.removeRule(id);                                            // 82\n};                                                                              // 83\n                                                                                // 84\n// This is accessed inside livedata_server.js, but shouldn't be called by any   // 85\n// user.                                                                        // 86\nDDPRateLimiter._increment = function (input) {                                  // 87\n  rateLimiter.increment(input);                                                 // 88\n};                                                                              // 89\n                                                                                // 90\nDDPRateLimiter._check = function (input) {                                      // 91\n  return rateLimiter.check(input);                                              // 92\n};                                                                              // 93\n                                                                                // 94\n//////////////////////////////////////////////////////////////////////////////////    // 103\n                                                                                      // 104\n}).call(this);                                                                        // 105\n                                                                                      // 106\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ddp-rate-limiter'] = {\n  DDPRateLimiter: DDPRateLimiter\n};\n\n})();\n","servePath":"/packages/ddp-rate-limiter.js","sourceMap":{"version":3,"sources":["/packages/ddp-rate-limiter/packages/ddp-rate-limiter.js"],"names":[],"mappingsfile":"/packages/ddp-rate-limiter.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/ddp-rate-limiter/ddp-rate-limiter.js                                //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n// Rate Limiter built into DDP with a default error message. See README or      // 1\n// online documentation for more details.                                       // 2\nDDPRateLimiter = {};                                                            // 3\n                                                                                // 4\nvar errorMessage = function (rateLimitResult) {                                 // 5\n  return \"Error, too many requests. Please slow down. You must wait \" +         // 6\n    Math.ceil(rateLimitResult.timeToReset / 1000) + \" seconds before \" +        // 7\n    \"trying again.\";                                                            // 8\n};                                                                              // 9\nvar rateLimiter = new RateLimiter();                                            // 10\n                                                                                // 11\nDDPRateLimiter.getErrorMessage = function (rateLimitResult) {                   // 12\n  if (typeof errorMessage === 'function')                                       // 13\n    return errorMessage(rateLimitResult);                                       // 14\n  else                                                                          // 15\n    return errorMessage;                                                        // 16\n};                                                                              // 17\n                                                                                // 18\n/**                                                                             // 19\n * @summary Set error message text when method or subscription rate limit       // 20\n * exceeded.                                                                    // 21\n * @param {string|function} message Functions are passed in an object with a    // 22\n * `timeToReset` field that specifies the number of milliseconds until the next\n * method or subscription is allowed to run. The function must return a string  // 24\n * of the error message.                                                        // 25\n */                                                                             // 26\nDDPRateLimiter.setErrorMessage = function (message) {                           // 27\n  errorMessage = message;                                                       // 28\n};                                                                              // 29\n                                                                                // 30\n/**                                                                             // 31\n * @summary                                                                     // 32\n * Add a rule that matches against a stream of events describing method or      // 33\n * subscription attempts. Each event is an object with the following            // 34\n * properties:                                                                  // 35\n *                                                                              // 36\n * - `type`: Either \"method\" or \"subscription\"                                  // 37\n * - `name`: The name of the method or subscription being called                // 38\n * - `userId`: The user ID attempting the method or subscription                // 39\n * - `connectionId`: A string representing the user's DDP connection            // 40\n * - `clientAddress`: The IP address of the user                                // 41\n *                                                                              // 42\n * Returns unique `ruleId` that can be passed to `removeRule`.                  // 43\n *                                                                              // 44\n * @param {Object} matcher                                                      // 45\n *   Matchers specify which events are counted towards a rate limit. A matcher  // 46\n *   is an object that has a subset of the same properties as the event objects\n *   described above. Each value in a matcher object is one of the following:   // 48\n *                                                                              // 49\n *   - a string: for the event to satisfy the matcher, this value must be equal\n *   to the value of the same property in the event object                      // 51\n *                                                                              // 52\n *   - a function: for the event to satisfy the matcher, the function must      // 53\n *   evaluate to true when passed the value of the same property                // 54\n *   in the event object                                                        // 55\n *                                                                              // 56\n * Here's how events are counted: Each event that satisfies the matcher's       // 57\n * filter is mapped to a bucket. Buckets are uniquely determined by the         // 58\n * event object's values for all properties present in both the matcher and     // 59\n * event objects.                                                               // 60\n *                                                                              // 61\n * @param {number} numRequests  number of requests allowed per time interval.   // 62\n * Default = 10.                                                                // 63\n * @param {number} timeInterval time interval in milliseconds after which       // 64\n * rule's counters are reset. Default = 1000.                                   // 65\n */                                                                             // 66\nDDPRateLimiter.addRule = function (matcher, numRequests, timeInterval) {        // 67\n  return rateLimiter.addRule(matcher, numRequests, timeInterval);               // 68\n};                                                                              // 69\n                                                                                // 70\nDDPRateLimiter.printRules = function () {                                       // 71\n  return rateLimiter.rules;                                                     // 72\n};                                                                              // 73\n                                                                                // 74\n/**                                                                             // 75\n * @summary Removes the specified rule from the rate limiter. If rule had       // 76\n * hit a rate limit, that limit is removed as well.                             // 77\n * @param  {string} id 'ruleId' returned from `addRule`                         // 78\n * @return {boolean}    True if a rule was removed.                             // 79\n */                                                                             // 80\nDDPRateLimiter.removeRule = function (id) {                                     // 81\n  return rateLimiter.removeRule(id);                                            // 82\n};                                                                              // 83\n                                                                                // 84\n// This is accessed inside livedata_server.js, but shouldn't be called by any   // 85\n// user.                                                                        // 86\nDDPRateLimiter._increment = function (input) {                                  // 87\n  rateLimiter.increment(input);                                                 // 88\n};                                                                              // 89\n                                                                                // 90\nDDPRateLimiter._check = function (input) {                                      // 91\n  return rateLimiter.check(input);                                              // 92\n};                                                                              // 93\n                                                                                // 94\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]