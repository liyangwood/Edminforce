[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar MeteorStubs = Package['velocity:meteor-stubs'].MeteorStubs;\nvar Karma = Package['sanjo:karma'].Karma;\nvar KarmaInternals = Package['sanjo:karma'].KarmaInternals;\nvar MeteorVersion = Package['sanjo:meteor-version'].MeteorVersion;\nvar PackageVersion = Package['package-version-parser'].PackageVersion;\nvar MeteorFilesHelpers = Package['sanjo:meteor-files-helpers'].MeteorFilesHelpers;\n\n/* Package-scope variables */\nvar log, freeport, lazyStart, MirrorStarter, parseStack, JasmineTestFramework, JasmineInterface, VelocityTestReporter, Jasmine, ServerIntegrationTestFramework, runCodeInContext, runFileInContext, coffeeRequire, fileLoader, loadOrderSort, mockLoader, packagesToIncludeInUnitTests, MockGenerator, ServerUnitTestFramework, ClientUnitTestFramework, ClientIntegrationTestFramework, getSpecFiles, frameworks, isMirror, isMainApp, isTestPackagesMode, shouldRunFramework;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/log.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals log: true */                                                                                               // 1\n                                                                                                                      // 2\nvar level = Meteor.isServer && process.env.VELOCITY_DEBUG ? 'debug' : 'info'                                          // 3\nif (Meteor.isServer && process.env.JASMINE_LOG_LEVEL) {                                                               // 4\n  level = process.env.JASMINE_LOG_LEVEL                                                                               // 5\n}                                                                                                                     // 6\nlog = loglevel.createPackageLogger('[sanjo:jasmine]', level)                                                          // 7\n                                                                                                                      // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/freeport.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals freeport: true */                                                                                          // 1\n                                                                                                                      // 2\nfreeport = Meteor.wrapAsync(Npm.require('freeport'))                                                                  // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/lazyStart.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals lazyStart: true */                                                                                         // 1\n                                                                                                                      // 2\n// Run the func when tests for the framework are available.                                                           // 3\nlazyStart = function (frameworkName, func) {                                                                          // 4\n  var testsCursor = VelocityTestFiles.find(                                                                           // 5\n    {targetFramework: frameworkName}                                                                                  // 6\n  )                                                                                                                   // 7\n                                                                                                                      // 8\n  if (testsCursor.count() > 0) {                                                                                      // 9\n    func()                                                                                                            // 10\n  } else {                                                                                                            // 11\n    // Needed for `meteor --test`                                                                                     // 12\n    log.debug('No tests for ' + frameworkName + ' found. Reporting completed.')                                       // 13\n    Meteor.call('velocity/reports/completed', {framework: frameworkName})                                             // 14\n    var testsObserver = testsCursor.observe({                                                                         // 15\n      added: _.once(function () {                                                                                     // 16\n        // Delay the stop because added can be called before observe returns                                          // 17\n        Meteor.setTimeout(function () {                                                                               // 18\n          testsObserver.stop()                                                                                        // 19\n        }, 5000)                                                                                                      // 20\n        func()                                                                                                        // 21\n      })                                                                                                              // 22\n    })                                                                                                                // 23\n  }                                                                                                                   // 24\n}                                                                                                                     // 25\n                                                                                                                      // 26\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/MirrorStarter.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals MirrorStarter: true */                                                                                     // 1\n                                                                                                                      // 2\nMirrorStarter = function (testingFrameworkName) {                                                                     // 3\n  this.name = testingFrameworkName                                                                                    // 4\n}                                                                                                                     // 5\n                                                                                                                      // 6\n_.extend(MirrorStarter.prototype, {                                                                                   // 7\n                                                                                                                      // 8\n  lazyStartMirror: function (mirrorOptions) {                                                                         // 9\n    var requestMirror = this.startMirror.bind(this, mirrorOptions)                                                    // 10\n    lazyStart(this.name, requestMirror)                                                                               // 11\n  },                                                                                                                  // 12\n                                                                                                                      // 13\n  startMirror: function (mirrorOptions) {                                                                             // 14\n    var options = {                                                                                                   // 15\n      framework: this.name                                                                                            // 16\n    }                                                                                                                 // 17\n    _.extend(options, mirrorOptions)                                                                                  // 18\n                                                                                                                      // 19\n    if (!options.port) {                                                                                              // 20\n      options.port = freeport()                                                                                       // 21\n    }                                                                                                                 // 22\n                                                                                                                      // 23\n    log.debug('Starting mirror for ' + this.name)                                                                     // 24\n                                                                                                                      // 25\n    // HACK: need to make sure after the proxy package adds the test files                                            // 26\n    Meteor.setTimeout(function() {                                                                                    // 27\n      Meteor.call(                                                                                                    // 28\n        'velocity/mirrors/request',                                                                                   // 29\n        options,                                                                                                      // 30\n        function (error) {                                                                                            // 31\n          if (error) {                                                                                                // 32\n            log.error(error)                                                                                          // 33\n          }                                                                                                           // 34\n        }                                                                                                             // 35\n      )                                                                                                               // 36\n    }, 100)                                                                                                           // 37\n  },                                                                                                                  // 38\n                                                                                                                      // 39\n  startSelfMirror: function (mirrorOptions) {                                                                         // 40\n    mirrorOptions = mirrorOptions || {}                                                                               // 41\n    VelocityMirrors.upsert(                                                                                           // 42\n      {framework: this.name},                                                                                         // 43\n      {                                                                                                               // 44\n        framework: this.name,                                                                                         // 45\n        mongoUrl: process.env.MONGO_URL,                                                                              // 46\n        host: process.env.ROOT_URL,                                                                                   // 47\n        rootUrl: process.env.ROOT_URL,                                                                                // 48\n        rootUrlPath: mirrorOptions.rootUrlPath,                                                                       // 49\n        state: 'ready',                                                                                               // 50\n        lastModified: Date.now()                                                                                      // 51\n      }                                                                                                               // 52\n    )                                                                                                                 // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n})                                                                                                                    // 56\n                                                                                                                      // 57\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/parseStack.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals parseStack: true */                                                                                        // 1\n                                                                                                                      // 2\nparseStack = {};                                                                                                      // 3\n                                                                                                                      // 4\n// Given an Error (eg, 'new Error'), return the stack associated with                                                 // 5\n// that error as an array. More recently called functions appear first                                                // 6\n// and each element is an object with keys:                                                                           // 7\n// - file: filename as it appears in the stack                                                                        // 8\n// - line: 1-indexed line number in file, as a Number                                                                 // 9\n// - column: 1-indexed column in line, as a Number                                                                    // 10\n// - func: name of the function in the frame (maybe null)                                                             // 11\n//                                                                                                                    // 12\n// Accomplishes this by parsing the text representation of the stack                                                  // 13\n// with regular expressions. Unlikely to work anywhere but v8.                                                        // 14\n//                                                                                                                    // 15\n// If a function on the stack has been marked with mark(), don't                                                      // 16\n// return anything past that function. We call this the \"user portion\"                                                // 17\n// of the stack.                                                                                                      // 18\nparseStack.parse = function (err) {                                                                                   // 19\n  var frames = err.stack.split('\\n');                                                                                 // 20\n                                                                                                                      // 21\n  frames.shift(); // at least the first line is the exception                                                         // 22\n  var stop = false;                                                                                                   // 23\n  var ret = [];                                                                                                       // 24\n                                                                                                                      // 25\n  _.each(frames, function (frame) {                                                                                   // 26\n    if (stop)                                                                                                         // 27\n      return;                                                                                                         // 28\n    var m;                                                                                                            // 29\n    if (m =                                                                                                           // 30\n        frame.match(/^\\s*at\\s*((new )?.+?)\\s*(\\[as\\s*([^\\]]*)\\]\\s*)?\\((.*?)(:(\\d+))?(:(\\d+))?\\)\\s*$/)) {              // 31\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi                                                    // 32\n      // \"    at My.Function (/path/to/myfile.js:532:39)\"                                                             // 33\n      // \"    at Array.forEach (native)\"                                                                              // 34\n      // \"    at new My.Class (file.js:1:2)\"                                                                          // 35\n      // \"    at [object Object].main.registerCommand.name [as func] (meteor/tools/commands.js:1225:19)\"              // 36\n      // \"    at __top_mark__ [as matchErr] (meteor/tools/parse-stack.js:82:14)\"                                      // 37\n      //                                                                                                              // 38\n      // In that last example, it is not at all clear to me what the                                                  // 39\n      // 'as' stanza refers to, but it is in m[3] if you find a use for it.                                           // 40\n      if (m[1].match(/(?:^|\\.)__top_mark__$/)) {                                                                      // 41\n        // m[1] could be Object.__top_mark__ or something like that                                                   // 42\n        // depending on where exactly you put the function returned by                                                // 43\n        // markTop                                                                                                    // 44\n        ret = [];                                                                                                     // 45\n        return;                                                                                                       // 46\n      }                                                                                                               // 47\n      if (m[1].match(/(?:^|\\.)__bottom_mark__$/)) {                                                                   // 48\n        stop = true;                                                                                                  // 49\n        return;                                                                                                       // 50\n      }                                                                                                               // 51\n      ret.push({                                                                                                      // 52\n        func: m[1],                                                                                                   // 53\n        file: m[5],                                                                                                   // 54\n        line: m[7] ? +m[7] : undefined,                                                                               // 55\n        column: m[9] ? +m[9] : undefined                                                                              // 56\n      });                                                                                                             // 57\n    } else if (m = frame.match(/^\\s*at\\s+(.+?)(:(\\d+))?(:(\\d+))?\\s*$/)) {                                             // 58\n      // \"    at /path/to/myfile.js:532:39\"                                                                           // 59\n      ret.push({                                                                                                      // 60\n        file: m[1],                                                                                                   // 61\n        line: m[3] ? +m[3] : undefined,                                                                               // 62\n        column: m[5] ? +m[5] : undefined                                                                              // 63\n      });                                                                                                             // 64\n    } else if (m = frame.match(/^\\s*-\\s*-\\s*-\\s*-\\s*-\\s*$/)) {                                                        // 65\n      // \"    - - - - -\"                                                                                              // 66\n      // This is something added when you throw an Error through a future. The                                        // 67\n      // stack above the dashes is the stack of the 'wait' call; the stack below                                      // 68\n      // is the stack inside the fiber where the Error is originally                                                  // 69\n      // constructed. Taking just the former seems good for now, but in the                                           // 70\n      // future we may want to sew them together (possibly in the opposite                                            // 71\n      // order?)                                                                                                      // 72\n      stop = true;                                                                                                    // 73\n    }                                                                                                                 // 74\n  });                                                                                                                 // 75\n                                                                                                                      // 76\n  return ret;                                                                                                         // 77\n};                                                                                                                    // 78\n                                                                                                                      // 79\n// Decorator. Mark the point at which a stack trace returned by                                                       // 80\n// parse() should stop: no frames earlier than this point will be                                                     // 81\n// included in the parsed stack. Confusingly, in the argot of the                                                     // 82\n// times, you'd say that frames \"higher up\" than this or \"above\" this                                                 // 83\n// will not be returned, but you'd also say that those frames are \"at                                                 // 84\n// the bottom of the stack\". Frames below the bottom are the outer                                                    // 85\n// context of the framework running the user's code.                                                                  // 86\nparseStack.markBottom = function (f) {                                                                                // 87\n  return function __bottom_mark__ () {                                                                                // 88\n    return f.apply(this, arguments);                                                                                  // 89\n  };                                                                                                                  // 90\n};                                                                                                                    // 91\n                                                                                                                      // 92\n// Decorator. Mark the point at which a stack trace returned by                                                       // 93\n// parse() should begin: no frames later than this point will be                                                      // 94\n// included in the parsed stack. The opposite of markBottom().                                                        // 95\n// Frames above the top are helper functions defined by the                                                           // 96\n// framework and executed by user code whose internal behavior                                                        // 97\n// should not be exposed.                                                                                             // 98\nparseStack.markTop = function (f) {                                                                                   // 99\n  return function __top_mark__ () {                                                                                   // 100\n    return f.apply(this, arguments);                                                                                  // 101\n  };                                                                                                                  // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/JasmineTestFramework.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals JasmineTestFramework: true */                                                                              // 1\n                                                                                                                      // 2\nJasmineTestFramework = function (options) {                                                                           // 3\n  if (!options || !options.name) {                                                                                    // 4\n    throw new Error('[JasmineTestFramework] Missing required field \"name\"')                                           // 5\n  }                                                                                                                   // 6\n                                                                                                                      // 7\n  if (!options.regex) {                                                                                               // 8\n    throw new Error('[JasmineTestFramework] Missing required field \"regex\"')                                          // 9\n  }                                                                                                                   // 10\n                                                                                                                      // 11\n  if (_.isUndefined(options.jasmineRequire)) {                                                                        // 12\n    throw new Error('[JasmineTestFramework] Missing required field \"jasmineRequire\"')                                 // 13\n  }                                                                                                                   // 14\n                                                                                                                      // 15\n  this.name = options.name                                                                                            // 16\n  this.regex = options.regex                                                                                          // 17\n  this.sampleTestGenerator = options.sampleTestGenerator                                                              // 18\n  this.logPrefix = options.logPrefix || '[' + this.name + '] '                                                        // 19\n  this.jasmineRequire = options.jasmineRequire                                                                        // 20\n                                                                                                                      // 21\n  // load jasmine-velocity reporter                                                                                   // 22\n  // [unit] mock packages                                                                                             // 23\n                                                                                                                      // 24\n}                                                                                                                     // 25\n                                                                                                                      // 26\n_.extend(JasmineTestFramework.prototype, {                                                                            // 27\n                                                                                                                      // 28\n  //////////////////////////////////////////////////////////////////////                                              // 29\n  // Public functions                                                                                                 // 30\n  //                                                                                                                  // 31\n                                                                                                                      // 32\n  runTests: function () {},                                                                                           // 33\n                                                                                                                      // 34\n  //////////////////////////////////////////////////////////////////////                                              // 35\n  // Protected functions                                                                                              // 36\n  //                                                                                                                  // 37\n                                                                                                                      // 38\n  registerWithVelocity: function () {                                                                                 // 39\n    Velocity.registerTestingFramework(this.name, {                                                                    // 40\n      regex: this.regex,                                                                                              // 41\n      sampleTestGenerator: this.sampleTestGenerator                                                                   // 42\n    })                                                                                                                // 43\n  }                                                                                                                   // 44\n                                                                                                                      // 45\n})                                                                                                                    // 46\n                                                                                                                      // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/JasmineInterface.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals JasmineInterface: true */                                                                                  // 1\n                                                                                                                      // 2\nvar jasmineRequire = Meteor.isServer ?                                                                                // 3\n  Npm.require('jasmine-core') :                                                                                       // 4\n  window.jasmineRequire                                                                                               // 5\n                                                                                                                      // 6\n/**                                                                                                                   // 7\n * Object that will be directly put into the global context of the running                                            // 8\n * tests.                                                                                                             // 9\n *                                                                                                                    // 10\n * ex.                                                                                                                // 11\n *     describe(...)   // rather than 'jasmine.describe'                                                              // 12\n *     jasmine.clock   // rather than just 'clock'                                                                    // 13\n *                                                                                                                    // 14\n * @class JasmineInterface                                                                                            // 15\n * @constructor                                                                                                       // 16\n */                                                                                                                   // 17\nJasmineInterface = function (options) {                                                                               // 18\n  if (!options || !options.jasmine) {                                                                                 // 19\n    throw new Error('[JasmineInterface] Missing required field \"jasmine\"')                                            // 20\n  }                                                                                                                   // 21\n                                                                                                                      // 22\n  var env = options.jasmine.getEnv()                                                                                  // 23\n                                                                                                                      // 24\n  _.extend(this, jasmineRequire.interface(options.jasmine, env))                                                      // 25\n                                                                                                                      // 26\n  var markBottom = function (func) {                                                                                  // 27\n    var boundFunction = parseStack.markBottom(func)                                                                   // 28\n    if (func.length > 0) {                                                                                            // 29\n      // Async test                                                                                                   // 30\n      return function (done) {                                                                                        // 31\n        return boundFunction.apply(this, arguments)                                                                   // 32\n      }                                                                                                               // 33\n    } else {                                                                                                          // 34\n      // Sync test                                                                                                    // 35\n      return function () {                                                                                            // 36\n        return boundFunction.call(this)                                                                               // 37\n      }                                                                                                               // 38\n    }                                                                                                                 // 39\n  }                                                                                                                   // 40\n                                                                                                                      // 41\n  _.forEach(['describe', 'xdescribe', 'fdescribe', 'it', 'fit'], function (word) {                                    // 42\n    var originalFunction = this[word]                                                                                 // 43\n    this[word] = function (/* arguments */) {                                                                         // 44\n      arguments[1] = markBottom(arguments[1])                                                                         // 45\n      return originalFunction.apply(this, arguments)                                                                  // 46\n    }                                                                                                                 // 47\n  }, this)                                                                                                            // 48\n                                                                                                                      // 49\n  _.forEach(['beforeEach', 'afterEach', 'beforeAll', 'afterAll'], function (word) {                                   // 50\n    var originalFunction = this[word]                                                                                 // 51\n    this[word] = function (/* arguments */) {                                                                         // 52\n      arguments[0] = markBottom(arguments[0])                                                                         // 53\n      return originalFunction.apply(this, arguments)                                                                  // 54\n    }                                                                                                                 // 55\n  }, this)                                                                                                            // 56\n}                                                                                                                     // 57\n                                                                                                                      // 58\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/lib/VelocityTestReporter.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global                                                                                                             // 1\n   VelocityTestReporter: true                                                                                         // 2\n */                                                                                                                   // 3\n                                                                                                                      // 4\n(function (Meteor) {                                                                                                  // 5\n  var noopTimer = {                                                                                                   // 6\n    start: function() {},                                                                                             // 7\n    elapsed: function() { return 0 }                                                                                  // 8\n  }                                                                                                                   // 9\n                                                                                                                      // 10\n  VelocityTestReporter = function VelocityTestReporter(options) {                                                     // 11\n    var self = this,                                                                                                  // 12\n      timer = options.timer || noopTimer,                                                                             // 13\n      ddpParentConnection = options.ddpParentConnection,                                                              // 14\n      ancestors = [],                                                                                                 // 15\n      _jasmineDone                                                                                                    // 16\n                                                                                                                      // 17\n    self.mode = options.mode                                                                                          // 18\n                                                                                                                      // 19\n    var saveTestResult = Meteor.bindEnvironment(function saveTestResult(test) {                                       // 20\n      var result = {                                                                                                  // 21\n        id: 'jasmine:' + self.mode + ' | ' + test.id,                                                                 // 22\n        //async: test.async,                                                                                          // 23\n        framework: options.framework,                                                                                 // 24\n        name: test.description,                                                                                       // 25\n        fullName: test.fullName,                                                                                      // 26\n        pending: test.status === 'pending',                                                                           // 27\n        result: test.status,                                                                                          // 28\n        duration: timer.elapsed(),                                                                                    // 29\n        //timeOut: test._timeout,                                                                                     // 30\n        //timedOut: test.timedOut,                                                                                    // 31\n        ancestors: ancestors,                                                                                         // 32\n        timestamp: new Date(),                                                                                        // 33\n        isClient: !!options.isClient,                                                                                 // 34\n        isServer: !!options.isServer                                                                                  // 35\n      }                                                                                                               // 36\n      if (test.failedExpectations[0]){                                                                                // 37\n        var stack = removeStackTraceClutter(parseStack.parse({stack: filterStack(test.failedExpectations[0].stack)}))\n        var message = _.extend({                                                                                      // 39\n          message: test.failedExpectations[0].message,                                                                // 40\n          stack: stack                                                                                                // 41\n        }, stack[0])                                                                                                  // 42\n        result.failureMessage = message.message                                                                       // 43\n        result.failureStackTrace = formatMessage([message])                                                           // 44\n      }                                                                                                               // 45\n                                                                                                                      // 46\n      if (Meteor.isClient || process.env.IS_MIRROR) {                                                                 // 47\n        ddpParentConnection.call('velocity/reports/submit', result, function (error){                                 // 48\n          if (error){                                                                                                 // 49\n            console.error('ERROR WRITING TEST', error)                                                                // 50\n          }                                                                                                           // 51\n        })                                                                                                            // 52\n      } else {                                                                                                        // 53\n        Meteor.call('velocity/reports/submit', result, function(error){                                               // 54\n          if (error){                                                                                                 // 55\n            console.error('ERROR WRITING TEST', error)                                                                // 56\n          }                                                                                                           // 57\n        })                                                                                                            // 58\n      }                                                                                                               // 59\n    }, function (error) {                                                                                             // 60\n      console.error(error)                                                                                            // 61\n    })                                                                                                                // 62\n                                                                                                                      // 63\n    if (Meteor.isClient) {                                                                                            // 64\n      _jasmineDone = function () {                                                                                    // 65\n        ddpParentConnection.call(                                                                                     // 66\n          'velocity/reports/completed',                                                                               // 67\n          {framework: options.framework},                                                                             // 68\n          function () {                                                                                               // 69\n            if (options.onComplete) {                                                                                 // 70\n              options.onComplete()                                                                                    // 71\n            }                                                                                                         // 72\n          }                                                                                                           // 73\n        )                                                                                                             // 74\n      }                                                                                                               // 75\n    } else if (Meteor.isServer) {                                                                                     // 76\n      _jasmineDone = Meteor.bindEnvironment(function jasmineDone() {                                                  // 77\n        if (options.onComplete) {                                                                                     // 78\n          options.onComplete()                                                                                        // 79\n        }                                                                                                             // 80\n      }, function (error) {                                                                                           // 81\n        console.error(error)                                                                                          // 82\n        if (options.onComplete) {                                                                                     // 83\n          options.onComplete()                                                                                        // 84\n        }                                                                                                             // 85\n      })                                                                                                              // 86\n    }                                                                                                                 // 87\n                                                                                                                      // 88\n    self.jasmineDone = _jasmineDone                                                                                   // 89\n                                                                                                                      // 90\n    self.suiteStarted = function(result) {                                                                            // 91\n      ancestors.unshift(result.description)                                                                           // 92\n    }                                                                                                                 // 93\n                                                                                                                      // 94\n    self.suiteDone = function() {                                                                                     // 95\n      ancestors.shift()                                                                                               // 96\n    }                                                                                                                 // 97\n                                                                                                                      // 98\n    self.specStarted = function () {                                                                                  // 99\n      timer.start()                                                                                                   // 100\n    }                                                                                                                 // 101\n                                                                                                                      // 102\n    self.specDone = function(result) {                                                                                // 103\n      var skipped = result.status === 'disabled' || result.status === 'pending'                                       // 104\n      if (!skipped) {                                                                                                 // 105\n        saveTestResult(result)                                                                                        // 106\n      }                                                                                                               // 107\n    }                                                                                                                 // 108\n                                                                                                                      // 109\n    function filterStack(stack) {                                                                                     // 110\n      var filteredStack = stack.split('\\n').filter(function(stackLine) {                                              // 111\n        return stackLine.indexOf('/node_modules/jasmine-core/') === -1;                                               // 112\n      }).join('\\n');                                                                                                  // 113\n      return filteredStack;                                                                                           // 114\n    }                                                                                                                 // 115\n                                                                                                                      // 116\n    function removeStackTraceClutter(parsedStackTrace) {                                                              // 117\n      return _.chain(parsedStackTrace)                                                                                // 118\n        .map(_.clone)                                                                                                 // 119\n        .map(function makeFileUrlRelative(frame) {                                                                    // 120\n          var rootUrl = Meteor.absoluteUrl();                                                                         // 121\n          if (frame.file.indexOf(rootUrl) === 0) {                                                                    // 122\n            frame.file = frame.file.substr(rootUrl.length);                                                           // 123\n          }                                                                                                           // 124\n          return frame;                                                                                               // 125\n        })                                                                                                            // 126\n        .map(function removeCacheBustingQuery(frame) {                                                                // 127\n          frame.file = frame.file.replace(/\\?[a-z0-9]+$/, '');                                                        // 128\n          return frame;                                                                                               // 129\n        })                                                                                                            // 130\n        .map(function normalizePackageName(frame) {                                                                   // 131\n          frame.file = frame.file.replace('local-test:', '');                                                         // 132\n          return frame;                                                                                               // 133\n        })                                                                                                            // 134\n        .map(function removeUselessFunc(frame) {                                                                      // 135\n          if (frame.func === 'Object.<anonymous>') {                                                                  // 136\n            frame.func = null;                                                                                        // 137\n          }                                                                                                           // 138\n          return frame;                                                                                               // 139\n        })                                                                                                            // 140\n        .value();                                                                                                     // 141\n    }                                                                                                                 // 142\n                                                                                                                      // 143\n    function formatMessage(messages) {                                                                                // 144\n      var out = '';                                                                                                   // 145\n      var already = {};                                                                                               // 146\n      var indent = '';                                                                                                // 147\n                                                                                                                      // 148\n      _.each(messages, function (message) {                                                                           // 149\n        var stack = message.stack || [];                                                                              // 150\n                                                                                                                      // 151\n        var line = indent;                                                                                            // 152\n        if (message.file) {                                                                                           // 153\n          line+= message.file;                                                                                        // 154\n          if (message.line) {                                                                                         // 155\n            line += \":\" + message.line;                                                                               // 156\n            if (message.column) {                                                                                     // 157\n              // XXX maybe exclude unless specifically requested (eg,                                                 // 158\n              // for an automated tool that's parsing our output?)                                                    // 159\n              line += \":\" + message.column;                                                                           // 160\n            }                                                                                                         // 161\n          }                                                                                                           // 162\n          line += \": \";                                                                                               // 163\n        } else {                                                                                                      // 164\n          // not sure how to display messages without a filenanme.. try this?                                         // 165\n          line += \"error: \";                                                                                          // 166\n        }                                                                                                             // 167\n        // XXX line wrapping would be nice..                                                                          // 168\n        line += message.message;                                                                                      // 169\n        if (message.func && stack.length <= 1) {                                                                      // 170\n          line += \" (at \" + message.func + \")\";                                                                       // 171\n        }                                                                                                             // 172\n        line += \"\\n\";                                                                                                 // 173\n                                                                                                                      // 174\n        if (stack.length > 1) {                                                                                       // 175\n          _.each(stack, function (frame) {                                                                            // 176\n            // If a nontrivial stack trace (more than just the file and line                                          // 177\n            // we already complained about), print it.                                                                // 178\n            var where = \"\";                                                                                           // 179\n            if (frame.file) {                                                                                         // 180\n              where += frame.file;                                                                                    // 181\n              if (frame.line) {                                                                                       // 182\n                where += \":\" + frame.line;                                                                            // 183\n                if (frame.column) {                                                                                   // 184\n                  where += \":\" + frame.column;                                                                        // 185\n                }                                                                                                     // 186\n              }                                                                                                       // 187\n            }                                                                                                         // 188\n                                                                                                                      // 189\n            if (! frame.func && ! where)                                                                              // 190\n              return; // that's a pretty lame stack frame                                                             // 191\n                                                                                                                      // 192\n            line += \"  at \";                                                                                          // 193\n            if (frame.func)                                                                                           // 194\n              line += frame.func + \" (\" + where + \")\\n\";                                                              // 195\n            else                                                                                                      // 196\n              line += where + \"\\n\";                                                                                   // 197\n          });                                                                                                         // 198\n          line += \"\\n\";                                                                                               // 199\n        }                                                                                                             // 200\n                                                                                                                      // 201\n        // Deduplicate messages (only when exact duplicates, including stack)                                         // 202\n        if (! (line in already)) {                                                                                    // 203\n          out += line;                                                                                                // 204\n          already[line] = true;                                                                                       // 205\n        }                                                                                                             // 206\n      });                                                                                                             // 207\n                                                                                                                      // 208\n      return out;                                                                                                     // 209\n    }                                                                                                                 // 210\n  }                                                                                                                   // 211\n                                                                                                                      // 212\n})(Meteor)                                                                                                            // 213\n                                                                                                                      // 214\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/integration/ServerIntegrationTestFramework.js                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals Jasmine: true, ServerIntegrationTestFramework: true */                                                     // 1\n                                                                                                                      // 2\n/**                                                                                                                   // 3\n * Design:                                                                                                            // 4\n * - Let Meteor load the tests                                                                                        // 5\n * - Let Meteor restart the mirror when a file changed.                                                               // 6\n *   This implicates only one test run per mirror run.                                                                // 7\n */                                                                                                                   // 8\n                                                                                                                      // 9\nvar ComponentMocker = Npm.require('component-mocker');                                                                // 10\nvar jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js');                                         // 11\n                                                                                                                      // 12\nvar showOnTestDeprecationInfo = _.once(function () {                                                                  // 13\n  log.info('You no longer need to wrap your server integration tests in Jasmine.onTest ;-)')                          // 14\n});                                                                                                                   // 15\n                                                                                                                      // 16\nMeteor.methods({                                                                                                      // 17\n  'jasmine/showOnTestDeprecationInfo': function () {                                                                  // 18\n    showOnTestDeprecationInfo()                                                                                       // 19\n  }                                                                                                                   // 20\n})                                                                                                                    // 21\n                                                                                                                      // 22\nvar registeredOnTestCallbacks = [];                                                                                   // 23\n                                                                                                                      // 24\nvar onTest = function (func) {                                                                                        // 25\n  registeredOnTestCallbacks.push(func)                                                                                // 26\n}                                                                                                                     // 27\n                                                                                                                      // 28\n// Flag for deprecation message                                                                                       // 29\nvar wasJasmineOnTestCalled = false;                                                                                   // 30\n                                                                                                                      // 31\nJasmine = Jasmine || {}                                                                                               // 32\n// Need to bring it on the global scope manually                                                                      // 33\n// because this package has `debugOnly: true`                                                                         // 34\nglobal.Jasmine = Jasmine                                                                                              // 35\n_.extend(Jasmine, {                                                                                                   // 36\n  // Deprecated                                                                                                       // 37\n  // You no longer need to wrap your tests in Jasmine.onTest.                                                         // 38\n  onTest: function (func) {                                                                                           // 39\n    onTest(func);                                                                                                     // 40\n    wasJasmineOnTestCalled = true;                                                                                    // 41\n  }                                                                                                                   // 42\n})                                                                                                                    // 43\n                                                                                                                      // 44\n                                                                                                                      // 45\n// Postpone the execution of the test blocks until we run the tests.                                                  // 46\n// This makes sure that the whole app is loaded before.                                                               // 47\nvar jasmineGlobals = [                                                                                                // 48\n  'describe',                                                                                                         // 49\n  'xdescribe',                                                                                                        // 50\n  'fdescribe',                                                                                                        // 51\n  'beforeEach',                                                                                                       // 52\n  'afterEach',                                                                                                        // 53\n  'beforeAll',                                                                                                        // 54\n  'afterAll'                                                                                                          // 55\n]                                                                                                                     // 56\n                                                                                                                      // 57\njasmineGlobals.forEach(function (jasmineGlobal) {                                                                     // 58\n  global[jasmineGlobal] = executeOnTestFactory(jasmineGlobal)                                                         // 59\n})                                                                                                                    // 60\n                                                                                                                      // 61\nfunction executeOnTestFactory(funcName) {                                                                             // 62\n  return function (/* arguments */) {                                                                                 // 63\n    var args = arguments                                                                                              // 64\n    onTest(function () {                                                                                              // 65\n      global[funcName].apply(global, args)                                                                            // 66\n    })                                                                                                                // 67\n  }                                                                                                                   // 68\n}                                                                                                                     // 69\n                                                                                                                      // 70\n                                                                                                                      // 71\nServerIntegrationTestFramework = function (options) {                                                                 // 72\n  options = options || {}                                                                                             // 73\n                                                                                                                      // 74\n  _.defaults(options, {                                                                                               // 75\n    name: 'jasmine-server-integration',                                                                               // 76\n    regex: '^tests/jasmine/server/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',                       // 77\n    sampleTestGenerator: function () {                                                                                // 78\n      return [                                                                                                        // 79\n        {                                                                                                             // 80\n          path: 'jasmine/server/integration/sample/spec/PlayerSpec.js',                                               // 81\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/PlayerSpec.js')                   // 82\n        },                                                                                                            // 83\n        {                                                                                                             // 84\n          path: 'jasmine/server/integration/sample/spec/SpecMatchers.js',                                             // 85\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/SpecMatchers.js')                 // 86\n        },                                                                                                            // 87\n        {                                                                                                             // 88\n          path: 'jasmine/server/integration/sample/src/Player.js',                                                    // 89\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Player.js')                        // 90\n        },                                                                                                            // 91\n        {                                                                                                             // 92\n          path: 'jasmine/server/integration/sample/src/Song.js',                                                      // 93\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Song.js')                          // 94\n        }                                                                                                             // 95\n      ]                                                                                                               // 96\n    },                                                                                                                // 97\n    jasmineRequire: jasmineRequire                                                                                    // 98\n  })                                                                                                                  // 99\n                                                                                                                      // 100\n  JasmineTestFramework.call(this, options)                                                                            // 101\n}                                                                                                                     // 102\n                                                                                                                      // 103\nServerIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)                              // 104\n                                                                                                                      // 105\n_.extend(ServerIntegrationTestFramework.prototype, {                                                                  // 106\n                                                                                                                      // 107\n  startMirror: function () {                                                                                          // 108\n    var mirrorOptions = {                                                                                             // 109\n      port: this._getCustomPort(),                                                                                    // 110\n      testsPath: 'jasmine/server/integration'                                                                         // 111\n    }                                                                                                                 // 112\n                                                                                                                      // 113\n    if (process.env.JASMINE_SERVER_MIRROR_APP_PATH) {                                                                 // 114\n      mirrorOptions.args = [                                                                                          // 115\n        '--test-app-path', process.env.JASMINE_SERVER_MIRROR_APP_PATH                                                 // 116\n      ]                                                                                                               // 117\n    }                                                                                                                 // 118\n                                                                                                                      // 119\n    var mirrorStarter = new MirrorStarter(this.name)                                                                  // 120\n    mirrorStarter.lazyStartMirror(mirrorOptions)                                                                      // 121\n  },                                                                                                                  // 122\n                                                                                                                      // 123\n  _getCustomPort: function () {                                                                                       // 124\n    var customPort = parseInt(process.env.JASMINE_SERVER_MIRROR_PORT, 10)                                             // 125\n    if (!_.isNaN(customPort)) {                                                                                       // 126\n      return customPort                                                                                               // 127\n    }                                                                                                                 // 128\n  },                                                                                                                  // 129\n                                                                                                                      // 130\n  setupEnvironment: function () {                                                                                     // 131\n    var self = this                                                                                                   // 132\n                                                                                                                      // 133\n    self.jasmine = self.jasmineRequire.core(self.jasmineRequire)                                                      // 134\n    self.env = self.jasmine.getEnv({                                                                                  // 135\n      setTimeout: Meteor.setTimeout.bind(Meteor),                                                                     // 136\n      clearTimeout: Meteor.clearTimeout.bind(Meteor)                                                                  // 137\n    })                                                                                                                // 138\n    var jasmineInterface = new JasmineInterface({jasmine: self.jasmine})                                              // 139\n                                                                                                                      // 140\n    _.extend(global, {                                                                                                // 141\n      MeteorStubs: MeteorStubs,                                                                                       // 142\n      ComponentMocker: ComponentMocker                                                                                // 143\n    })                                                                                                                // 144\n                                                                                                                      // 145\n    _.extend(global, jasmineInterface)                                                                                // 146\n                                                                                                                      // 147\n    // Load mock helper                                                                                               // 148\n    runCodeInContext(Assets.getText('src/lib/mock.js'), null)                                                         // 149\n  },                                                                                                                  // 150\n                                                                                                                      // 151\n  start: function () {                                                                                                // 152\n    var self = this;                                                                                                  // 153\n                                                                                                                      // 154\n    log.debug('Starting Server Integration mode')                                                                     // 155\n                                                                                                                      // 156\n    this._connectToMainApp()                                                                                          // 157\n                                                                                                                      // 158\n    if (isTestPackagesMode()) {                                                                                       // 159\n      self.runTests();                                                                                                // 160\n    } else {                                                                                                          // 161\n      var runServerIntegrationTests = _.once(function () {                                                            // 162\n        serverIntegrationMirrorObserver.stop();                                                                       // 163\n        self.runTests();                                                                                              // 164\n      });                                                                                                             // 165\n                                                                                                                      // 166\n      var VelocityMirrors = new Meteor.Collection(                                                                    // 167\n        'velocityMirrors',                                                                                            // 168\n        {connection: this.ddpParentConnection}                                                                        // 169\n      );                                                                                                              // 170\n      this.ddpParentConnection.subscribe('VelocityMirrors');                                                          // 171\n                                                                                                                      // 172\n      var serverIntegrationMirrorObserver = VelocityMirrors.find({                                                    // 173\n        framework: self.name,                                                                                         // 174\n        state: 'ready'                                                                                                // 175\n      }).observe({                                                                                                    // 176\n        added: runServerIntegrationTests,                                                                             // 177\n        changed: runServerIntegrationTests                                                                            // 178\n      });                                                                                                             // 179\n    }                                                                                                                 // 180\n  },                                                                                                                  // 181\n                                                                                                                      // 182\n  runTests: function () {                                                                                             // 183\n    var self = this                                                                                                   // 184\n                                                                                                                      // 185\n    log.debug('Running Server Integration test mode')                                                                 // 186\n                                                                                                                      // 187\n    this.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})                                   // 188\n                                                                                                                      // 189\n    frameworks.serverIntegration.setupEnvironment()                                                                   // 190\n                                                                                                                      // 191\n    // Load specs that were wrapped with Jasmine.onTest                                                               // 192\n    self._runOnTestCallbacks()                                                                                        // 193\n                                                                                                                      // 194\n    var velocityReporter = new VelocityTestReporter({                                                                 // 195\n      mode: 'Server Integration',                                                                                     // 196\n      framework: self.name,                                                                                           // 197\n      env: self.env,                                                                                                  // 198\n      onComplete: self._reportCompleted.bind(self),                                                                   // 199\n      timer: new self.jasmine.Timer(),                                                                                // 200\n      ddpParentConnection: self.ddpParentConnection,                                                                  // 201\n      isServer: true                                                                                                  // 202\n    })                                                                                                                // 203\n                                                                                                                      // 204\n    self.env.addReporter(velocityReporter)                                                                            // 205\n    self.env.execute()                                                                                                // 206\n  },                                                                                                                  // 207\n                                                                                                                      // 208\n  _runOnTestCallbacks: function () {                                                                                  // 209\n    var self = this                                                                                                   // 210\n                                                                                                                      // 211\n    if (wasJasmineOnTestCalled) {                                                                                     // 212\n      self.ddpParentConnection.call('jasmine/showOnTestDeprecationInfo')                                              // 213\n    }                                                                                                                 // 214\n                                                                                                                      // 215\n    _.forEach(registeredOnTestCallbacks, function (callback) {                                                        // 216\n      callback()                                                                                                      // 217\n    })                                                                                                                // 218\n  },                                                                                                                  // 219\n                                                                                                                      // 220\n  _connectToMainApp: function () {                                                                                    // 221\n    if (!this.ddpParentConnection) {                                                                                  // 222\n      if (isTestPackagesMode()) {                                                                                     // 223\n        this.ddpParentConnection = Meteor                                                                             // 224\n      } else {                                                                                                        // 225\n        log.debug('Connect to parent app \"' + process.env.PARENT_URL + '\" via DDP')                                   // 226\n        this.ddpParentConnection = DDP.connect(process.env.PARENT_URL)                                                // 227\n      }                                                                                                               // 228\n    }                                                                                                                 // 229\n  },                                                                                                                  // 230\n                                                                                                                      // 231\n  _reportCompleted: function () {                                                                                     // 232\n    this.ddpParentConnection.call('velocity/reports/completed', {framework: this.name})                               // 233\n  }                                                                                                                   // 234\n})                                                                                                                    // 235\n                                                                                                                      // 236\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/mirror-info.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nMeteor.methods({                                                                                                      // 1\n  'jasmine/environmentInfo': function () {                                                                            // 2\n    var mirrorInfo = {                                                                                                // 3\n      isMirror: isMirror(),                                                                                           // 4\n      isTestPackagesMode: isTestPackagesMode(),                                                                       // 5\n      framework: process.env.FRAMEWORK                                                                                // 6\n    };                                                                                                                // 7\n                                                                                                                      // 8\n    if (isTestPackagesMode()) {                                                                                       // 9\n      mirrorInfo.parentUrl = process.env.ROOT_URL                                                                     // 10\n    } else {                                                                                                          // 11\n      mirrorInfo.parentUrl = process.env.PARENT_URL                                                                   // 12\n    }                                                                                                                 // 13\n                                                                                                                      // 14\n    return mirrorInfo                                                                                                 // 15\n  }                                                                                                                   // 16\n})                                                                                                                    // 17\n                                                                                                                      // 18\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/runFileInContext.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals runCodeInContext: true, runFileInContext: true */                                                          // 1\n                                                                                                                      // 2\nvar vm = Npm.require('vm'),                                                                                           // 3\n    fs = Npm.require('fs'),                                                                                           // 4\n    readFile = Meteor.wrapAsync(fs.readFile)                                                                          // 5\n                                                                                                                      // 6\nrunCodeInContext = function (code, context, filename) {                                                               // 7\n  try {                                                                                                               // 8\n    if (context) {                                                                                                    // 9\n      vm.runInContext(code, context, filename)                                                                        // 10\n    } else {                                                                                                          // 11\n      vm.runInThisContext(code, filename)                                                                             // 12\n    }                                                                                                                 // 13\n  } catch(error) {                                                                                                    // 14\n    log.error('The code has syntax errors.', error)                                                                   // 15\n  }                                                                                                                   // 16\n}                                                                                                                     // 17\n                                                                                                                      // 18\nrunFileInContext = function (filename, context) {                                                                     // 19\n  var code = readFile(filename, {encoding: 'utf8'})                                                                   // 20\n  try {                                                                                                               // 21\n    if (context) {                                                                                                    // 22\n      vm.runInContext(code, context, filename)                                                                        // 23\n    } else {                                                                                                          // 24\n      vm.runInThisContext(code, filename)                                                                             // 25\n    }                                                                                                                 // 26\n  } catch(error) {                                                                                                    // 27\n    log.error('The file \"' + filename + '\" has syntax errors.', error)                                                // 28\n  }                                                                                                                   // 29\n}                                                                                                                     // 30\n                                                                                                                      // 31\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/coffee-require.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals coffeeRequire: true */                                                                                     // 1\n                                                                                                                      // 2\n// coffeeRequire                                                                                                      // 3\nvar fs = Npm.require('fs'),                                                                                           // 4\n    readFile = Meteor.wrapAsync(fs.readFile),                                                                         // 5\n    path = Npm.require('path')                                                                                        // 6\n                                                                                                                      // 7\n// The coffee-script compiler overrides Error.prepareStackTrace, mostly for the                                       // 8\n// use of coffee.run which we don't use.  This conflicts with the tool's use of                                       // 9\n// Error.prepareStackTrace to properly show error messages in linked code.  Save                                      // 10\n// the tool's one and restore it after coffee-script clobbers it.                                                     // 11\nvar prepareStackTrace = Error.prepareStackTrace;                                                                      // 12\nvar coffee = Npm.require('coffee-script');                                                                            // 13\nError.prepareStackTrace = prepareStackTrace;                                                                          // 14\n                                                                                                                      // 15\n/**                                                                                                                   // 16\n * A coffee processor that can add source maps to compiled files                                                      // 17\n *                                                                                                                    // 18\n * This is a modified version of https://github.com/karma-runner/karma-coffee-preprocessor                            // 19\n *                                                                                                                    // 20\n * @method coffeePreprocessor                                                                                         // 21\n * @param {Object} options to pass directly to the coffee-script compiler. See here                                   // 22\n */                                                                                                                   // 23\nvar coffeePreprocessor = function (options, content, file, done) {                                                    // 24\n  var result = null                                                                                                   // 25\n  var map                                                                                                             // 26\n  var dataUri                                                                                                         // 27\n                                                                                                                      // 28\n  // Clone the options because coffee.compile mutates them                                                            // 29\n  var opts = _.clone(options)                                                                                         // 30\n                                                                                                                      // 31\n  if (coffee.helpers.isLiterate(file.originalPath)) {                                                                 // 32\n    opts.literate = true;                                                                                             // 33\n  }                                                                                                                   // 34\n                                                                                                                      // 35\n  try {                                                                                                               // 36\n    result = coffee.compile(content, opts)                                                                            // 37\n  } catch (e) {                                                                                                       // 38\n    /* jshint camelcase: false */                                                                                     // 39\n    console.log('%s\\n  at %s:%d', e.message, file.originalPath, e.location.first_line)                                // 40\n    /* jshint camelcase: true */                                                                                      // 41\n    return done(e, null)                                                                                              // 42\n  }                                                                                                                   // 43\n                                                                                                                      // 44\n  if (result.v3SourceMap) {                                                                                           // 45\n    map = JSON.parse(result.v3SourceMap)                                                                              // 46\n    map.sources[0] = path.basename(file.originalPath)                                                                 // 47\n    map.sourcesContent = [content]                                                                                    // 48\n    map.file = path.basename(file.originalPath.replace(/\\.(coffee|litcoffee|coffee\\.md)$/, '.js'))                    // 49\n    file.sourceMap = map                                                                                              // 50\n    dataUri = 'data:application/json;charset=utf-8;base64,' + new Buffer(JSON.stringify(map)).toString('base64')      // 51\n    done(null, result.js + '\\n//@ sourceMappingURL=' + dataUri + '\\n')                                                // 52\n  } else {                                                                                                            // 53\n    done(null, result.js || result)                                                                                   // 54\n  }                                                                                                                   // 55\n}                                                                                                                     // 56\n                                                                                                                      // 57\n/**                                                                                                                   // 58\n * Load and execute a coffeescript file.                                                                              // 59\n *                                                                                                                    // 60\n * @method coffeeRequire                                                                                              // 61\n * @param {String} target Path to coffeescript file to load.                                                          // 62\n * @param {Object} context the context to run the CoffeeScript code within.                                           // 63\n */                                                                                                                   // 64\ncoffeeRequire = function (target, context) {                                                                          // 65\n  var file = {originalPath: target},                                                                                  // 66\n      code = readFile(target, {encoding: 'utf8'})                                                                     // 67\n                                                                                                                      // 68\n  coffeePreprocessor({                                                                                                // 69\n    bare: true,                                                                                                       // 70\n    sourceMap: false                                                                                                  // 71\n  }, code, file, function (err, code) {                                                                               // 72\n    if (!err) {                                                                                                       // 73\n      runCodeInContext(code, context, target)                                                                         // 74\n    } else {                                                                                                          // 75\n      log.error(err)                                                                                                  // 76\n    }                                                                                                                 // 77\n  })                                                                                                                  // 78\n}                                                                                                                     // 79\n                                                                                                                      // 80\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/file-loader.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals fileLoader: true, loadOrderSort: false */                                                                  // 1\n                                                                                                                      // 2\nvar appPath = MeteorFilesHelpers.getAppPath(),                                                                        // 3\n    fs = Npm.require('fs'),                                                                                           // 4\n    readDir = Meteor.wrapAsync(fs.readdir, fs),                                                                       // 5\n    path = Npm.require('path'),                                                                                       // 6\n    glob = Meteor.wrapAsync(Npm.require('glob'))                                                                      // 7\n                                                                                                                      // 8\nfileLoader = {                                                                                                        // 9\n  loadFiles: loadFiles,                                                                                               // 10\n  loadFile: loadFile                                                                                                  // 11\n}                                                                                                                     // 12\n                                                                                                                      // 13\n/**                                                                                                                   // 14\n * Loads a Meteor app's javascript and coffeescript files.                                                            // 15\n * Matches Meteor core's load order.                                                                                  // 16\n *                                                                                                                    // 17\n * Excluded directories: private, public, programs, packages, tests                                                   // 18\n *                                                                                                                    // 19\n * @method loadFiles                                                                                                  // 20\n * @param {Object} context Global context                                                                             // 21\n * @param {Object} [options]                                                                                          // 22\n * @param {Array|String} [options.ignoreDirs] Directories to ignore                                                   // 23\n */                                                                                                                   // 24\nfunction loadFiles(context, options) {                                                                                // 25\n  var files = getFiles(options)                                                                                       // 26\n  files.sort(loadOrderSort([]))                                                                                       // 27\n  log.debug('loadFiles', files)                                                                                       // 28\n  _.each(files, function (file) {                                                                                     // 29\n    loadFile(file, context)                                                                                           // 30\n  })                                                                                                                  // 31\n}                                                                                                                     // 32\n                                                                                                                      // 33\n/**                                                                                                                   // 34\n * Get all files that should be loaded.                                                                               // 35\n * @param options                                                                                                     // 36\n * @returns {Array}                                                                                                   // 37\n */                                                                                                                   // 38\nfunction getFiles(options) {                                                                                          // 39\n  options = _.extend({                                                                                                // 40\n    ignoreDirs: []                                                                                                    // 41\n  }, options)                                                                                                         // 42\n                                                                                                                      // 43\n  var filePattern = '*.{js,coffee,litcoffee,coffee.md}';                                                              // 44\n                                                                                                                      // 45\n  // Find files in the root folder                                                                                    // 46\n  var files = glob(filePattern,                                                                                       // 47\n    {                                                                                                                 // 48\n      cwd: appPath,                                                                                                   // 49\n      ignore: 'mobile-config.js'                                                                                      // 50\n    }                                                                                                                 // 51\n  )                                                                                                                   // 52\n                                                                                                                      // 53\n  // Find files in the sub folders that we don't ignore                                                               // 54\n  var shouldIgnore = ['tests', 'private', 'public', 'programs', 'packages']                                           // 55\n  shouldIgnore = shouldIgnore.concat(options.ignoreDirs)                                                              // 56\n                                                                                                                      // 57\n  var relevantDirs = readdirNoDots(appPath)                                                                           // 58\n  relevantDirs = _.filter(relevantDirs, function (dir) {                                                              // 59\n    return !_.contains(shouldIgnore, dir)                                                                             // 60\n  })                                                                                                                  // 61\n                                                                                                                      // 62\n  files = _.reduce(relevantDirs, function (files, dir) {                                                              // 63\n    var newFiles = glob(filePattern,                                                                                  // 64\n      {                                                                                                               // 65\n        cwd: path.join(appPath, dir),                                                                                 // 66\n        matchBase: true                                                                                               // 67\n      }                                                                                                               // 68\n    )                                                                                                                 // 69\n    newFiles = _.map(newFiles, function (filePath) {                                                                  // 70\n      return path.join(dir, filePath);                                                                                // 71\n    });                                                                                                               // 72\n                                                                                                                      // 73\n    return files.concat(newFiles)                                                                                     // 74\n  }, files)                                                                                                           // 75\n                                                                                                                      // 76\n  log.debug('getFiles has found the following files', files)                                                          // 77\n                                                                                                                      // 78\n  return files;                                                                                                       // 79\n}                                                                                                                     // 80\n                                                                                                                      // 81\nfunction readdirNoDots(path) {                                                                                        // 82\n  var entries                                                                                                         // 83\n  try {                                                                                                               // 84\n    entries = readDir(path);                                                                                          // 85\n  } catch (error) {                                                                                                   // 86\n    if (error.code === 'ENOENT') {                                                                                    // 87\n      return []                                                                                                       // 88\n    } else {                                                                                                          // 89\n      throw error;                                                                                                    // 90\n    }                                                                                                                 // 91\n  }                                                                                                                   // 92\n  return _.filter(entries, function (entry) {                                                                         // 93\n    return entry && entry[0] !== '.'                                                                                  // 94\n  })                                                                                                                  // 95\n}                                                                                                                     // 96\n                                                                                                                      // 97\n/**                                                                                                                   // 98\n * Load and execute the target source file.                                                                           // 99\n * Will use node's 'require' if source file has a .js extension or                                                    // 100\n * karma's coffeescript preprocessor if a .coffee/.litcoffee/.coffee.md extension                                     // 101\n *                                                                                                                    // 102\n * @method loadFile                                                                                                   // 103\n * @param {String} target file path to load, relative to meteor app                                                   // 104\n * @param {Object} context the context to load files within.                                                          // 105\n *        If omitted the file will run in this context.                                                               // 106\n */                                                                                                                   // 107\nfunction loadFile (target, context) {                                                                                 // 108\n  var filename = path.resolve(appPath, target),                                                                       // 109\n      ext                                                                                                             // 110\n                                                                                                                      // 111\n  if (fs.existsSync(filename)) {                                                                                      // 112\n    ext = path.extname(filename)                                                                                      // 113\n    if ('.js' === ext) {                                                                                              // 114\n      log.debug('loading source file:', filename)                                                                     // 115\n      runFileInContext(filename, context)                                                                             // 116\n    } else if (/\\.(coffee|litcoffee|coffee\\.md)$/.test(target)) {                                                     // 117\n      log.debug('loading source file:', filename)                                                                     // 118\n      coffeeRequire(filename, context)                                                                                // 119\n    }                                                                                                                 // 120\n  } else {                                                                                                            // 121\n    log.error(                                                                                                        // 122\n      'loadFile could not load \"' + filename + '\". ' +                                                                // 123\n      'The file does not exist.'                                                                                      // 124\n    );                                                                                                                // 125\n  }                                                                                                                   // 126\n}                                                                                                                     // 127\n                                                                                                                      // 128\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/load-order-sort.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar path = Npm.require('path')                                                                                        // 1\n                                                                                                                      // 2\n/**                                                                                                                   // 3\n * Returns a sort comparator to order files into Meteor app load order.                                               // 4\n * templateExtensions should be a list of extensions like 'html'                                                      // 5\n * which should be loaded before other extensions.                                                                    // 6\n *                                                                                                                    // 7\n * source: Meteor core file                                                                                           // 8\n *   https://github.com/meteor/meteor/blob/devel/tools/packages.js#L47-L97                                            // 9\n *   May 5, 2014                                                                                                      // 10\n *                                                                                                                    // 11\n * @method loadOrderSort                                                                                              // 12\n * @param {Array} [templateExtensions} Optional array of extensions which will                                        // 13\n *                be loaded first.                                                                                    // 14\n * @return {Number} Either 1 or -1 depending on sort result                                                           // 15\n */                                                                                                                   // 16\nloadOrderSort = function (templateExtensions) {                                                                       // 17\n  var templateExtnames = {}                                                                                           // 18\n  _.each(templateExtensions, function (extension) {                                                                   // 19\n    templateExtnames['.' + extension] = true                                                                          // 20\n  })                                                                                                                  // 21\n                                                                                                                      // 22\n  return function (a, b) {                                                                                            // 23\n    // XXX MODERATELY SIZED HACK --                                                                                   // 24\n    // push template files ahead of everything else. this is                                                          // 25\n    // important because the user wants to be able to say                                                             // 26\n    //   Template.foo.events = { ... }                                                                                // 27\n    // in a JS file and not have to worry about ordering it                                                           // 28\n    // before the corresponding .html file.                                                                           // 29\n    //                                                                                                                // 30\n    // maybe all of the templates should go in one file?                                                              // 31\n    var isTemplate_a = _.has(templateExtnames, path.extname(a))                                                       // 32\n    var isTemplate_b = _.has(templateExtnames, path.extname(b))                                                       // 33\n    if (isTemplate_a !== isTemplate_b) {                                                                              // 34\n      return (isTemplate_a ? -1 : 1)                                                                                  // 35\n    }                                                                                                                 // 36\n                                                                                                                      // 37\n    // main.* loaded last                                                                                             // 38\n    var ismain_a = (path.basename(a).indexOf('main.') === 0)                                                          // 39\n    var ismain_b = (path.basename(b).indexOf('main.') === 0)                                                          // 40\n    if (ismain_a !== ismain_b) {                                                                                      // 41\n      return (ismain_a ? 1 : -1)                                                                                      // 42\n    }                                                                                                                 // 43\n                                                                                                                      // 44\n    // /lib/ loaded first                                                                                             // 45\n    var islib_a = (a.indexOf(path.sep + 'lib' + path.sep) !== -1 ||                                                   // 46\n                   a.indexOf('lib' + path.sep) === 0)                                                                 // 47\n    var islib_b = (b.indexOf(path.sep + 'lib' + path.sep) !== -1 ||                                                   // 48\n                   b.indexOf('lib' + path.sep) === 0)                                                                 // 49\n    if (islib_a !== islib_b) {                                                                                        // 50\n      return (islib_a ? -1 : 1)                                                                                       // 51\n    }                                                                                                                 // 52\n                                                                                                                      // 53\n    // deeper paths loaded first.                                                                                     // 54\n    var len_a = a.split(path.sep).length                                                                              // 55\n    var len_b = b.split(path.sep).length                                                                              // 56\n    if (len_a !== len_b) {                                                                                            // 57\n      return (len_a < len_b ? 1 : -1)                                                                                 // 58\n    }                                                                                                                 // 59\n                                                                                                                      // 60\n    // otherwise alphabetical                                                                                         // 61\n    return (a < b ? -1 : 1)                                                                                           // 62\n  }                                                                                                                   // 63\n}                                                                                                                     // 64\n                                                                                                                      // 65\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/mock-loader.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals mockLoader: true */                                                                                        // 1\n                                                                                                                      // 2\nvar path = Npm.require('path'),                                                                                       // 3\n    glob = Npm.require('glob')                                                                                        // 4\n                                                                                                                      // 5\nmockLoader = {                                                                                                        // 6\n  loadUserMocks: function (context) {                                                                                 // 7\n    var basePath = path.join(Velocity.getAppPath(), 'tests/jasmine/server/unit')                                      // 8\n    this._getMockFiles(basePath).forEach(function (file) {                                                            // 9\n      log.debug('loading mock file:', file)                                                                           // 10\n      fileLoader.loadFile(file, context)                                                                              // 11\n    })                                                                                                                // 12\n  },                                                                                                                  // 13\n                                                                                                                      // 14\n  _getMockFiles: function (basePath) {                                                                                // 15\n    var filenamePattern = '**/*-{stub,stubs,mock,mocks}.{js,coffee,litcoffee,coffee.md}'                              // 16\n    var files = glob.sync(filenamePattern, {cwd: basePath})                                                           // 17\n    files = files.map(function (file) {                                                                               // 18\n      return path.join(basePath, file)                                                                                // 19\n    })                                                                                                                // 20\n    return files                                                                                                      // 21\n  }                                                                                                                   // 22\n}                                                                                                                     // 23\n                                                                                                                      // 24\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/unit/included-packages.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals packagesToIncludeInUnitTests: true */                                                                      // 1\n                                                                                                                      // 2\n// Packages that should be included in unit test mode                                                                 // 3\n// and therefore should not be mocked                                                                                 // 4\npackagesToIncludeInUnitTests = [                                                                                      // 5\n  'lodash',                                                                                                           // 6\n  'stevezhu:lodash',                                                                                                  // 7\n  'erasaur:meteor-lodash',                                                                                            // 8\n  'underscore',                                                                                                       // 9\n  'digilord:sugarjs',                                                                                                 // 10\n  'momentjs:moment',                                                                                                  // 11\n  'mrt:moment',                                                                                                       // 12\n  'rzymek:moment',                                                                                                    // 13\n  'xolvio:webdriver'                                                                                                  // 14\n]                                                                                                                     // 15\n                                                                                                                      // 16\nvar customIncludedPackages =                                                                                          // 17\n  process.env.JASMINE_PACKAGES_TO_INCLUDE_IN_UNIT_TESTS                                                               // 18\nif (customIncludedPackages) {                                                                                         // 19\n  packagesToIncludeInUnitTests = packagesToIncludeInUnitTests                                                         // 20\n    .concat(customIncludedPackages.split(','))                                                                        // 21\n}                                                                                                                     // 22\n                                                                                                                      // 23\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/unit/mock-generator.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals MockGenerator: true */                                                                                     // 1\n                                                                                                                      // 2\n// goal: write all package metadata to file so we can create                                                          // 3\n// the package mocks when running out-of-context                                                                      // 4\n//                                                                                                                    // 5\n// Used to mock packages for the server unit test runner                                                              // 6\n                                                                                                                      // 7\nvar ComponentMocker = Npm.require('component-mocker'),                                                                // 8\n    fs = Npm.require('fs'),                                                                                           // 9\n    path = Npm.require('path'),                                                                                       // 10\n    mkdirp = Npm.require('mkdirp'),                                                                                   // 11\n    writeFile = Meteor.wrapAsync(fs.writeFile),                                                                       // 12\n    packageMetadata = {}                                                                                              // 13\n                                                                                                                      // 14\nfunction shouldIgnorePackage (packageName) {                                                                          // 15\n  var packagesToIgnore = [                                                                                            // 16\n    'meteor',                                                                                                         // 17\n    'minifiers',                                                                                                      // 18\n    // Collides with expect of Jasmine                                                                                // 19\n    'spacejamio:chai',                                                                                                // 20\n    'practicalmeteor:chai'                                                                                            // 21\n  ]                                                                                                                   // 22\n    .concat(getEnvironmentIgnoredPackages())                                                                          // 23\n    .concat(packagesToIncludeInUnitTests)                                                                             // 24\n                                                                                                                      // 25\n  return _.contains(packagesToIgnore, packageName)                                                                    // 26\n}                                                                                                                     // 27\n                                                                                                                      // 28\nfunction getEnvironmentIgnoredPackages() {                                                                            // 29\n  var packagesToIgnore = process.env.JASMINE_IGNORE_PACKAGES                                                          // 30\n  if (packagesToIgnore) {                                                                                             // 31\n    return packagesToIgnore.split(',').map(function (packageName) {                                                   // 32\n      return packageName.trim()                                                                                       // 33\n    });                                                                                                               // 34\n  } else {                                                                                                            // 35\n    return []                                                                                                         // 36\n  }                                                                                                                   // 37\n}                                                                                                                     // 38\n                                                                                                                      // 39\nfunction shouldIgnoreExport (exportName) {                                                                            // 40\n  var exportsToIgnore = ['MongoInternals', 'NpmModuleMongodb', 'WebAppInternals']                                     // 41\n                                                                                                                      // 42\n  return _.contains(exportsToIgnore, exportName)                                                                      // 43\n}                                                                                                                     // 44\n                                                                                                                      // 45\nMockGenerator = {                                                                                                     // 46\n  // Mocks should only be generated once per app run                                                                  // 47\n  // because the app restarts when a server file has changed.                                                         // 48\n  generateMocks: _.once(function () {                                                                                 // 49\n                                                                                                                      // 50\n    /*                                                                                                                // 51\n     Package = {                                                                                                      // 52\n     \"meteor\": {                                                                                                      // 53\n     \"Meteor\": {                                                                                                      // 54\n     // ...                                                                                                           // 55\n     }                                                                                                                // 56\n     }                                                                                                                // 57\n     \"roles\": {                                                                                                       // 58\n     \"Roles\": {...}                                                                                                   // 59\n     },                                                                                                               // 60\n     \"iron-router\": {                                                                                                 // 61\n     \"Router\": {...}                                                                                                  // 62\n     }                                                                                                                // 63\n     }                                                                                                                // 64\n     */                                                                                                               // 65\n                                                                                                                      // 66\n    _.forEach(Package, function (packageObj, name) {                                                                  // 67\n      if (!shouldIgnorePackage(name)) {                                                                               // 68\n        var packageExports = {}                                                                                       // 69\n                                                                                                                      // 70\n        _.forEach(packageObj, function (packageExportObj, packageExportName) {                                        // 71\n          if (!shouldIgnoreExport(packageExportName)) {                                                               // 72\n            try {                                                                                                     // 73\n              packageExports[packageExportName] = ComponentMocker.getMetadata(packageExportObj)                       // 74\n            } catch (error) {                                                                                         // 75\n              console.error('Could not mock the export ' + packageExportName +                                        // 76\n              ' of the package ' + name + '. Will continue anyway.', error, error.stack)                              // 77\n            }                                                                                                         // 78\n          }                                                                                                           // 79\n        })                                                                                                            // 80\n                                                                                                                      // 81\n        packageMetadata[name] = packageExports                                                                        // 82\n      }                                                                                                               // 83\n    })                                                                                                                // 84\n                                                                                                                      // 85\n    // Initially load the global stubs for app code                                                                   // 86\n    writeMetadataToFile(                                                                                              // 87\n      packageMetadata,                                                                                                // 88\n      Assets.getText('src/server/unit/package-stubs.js.tpl'),                                                         // 89\n      'tests/jasmine/server/unit/package-stubs.js'                                                                    // 90\n    )                                                                                                                 // 91\n                                                                                                                      // 92\n    // Mocks the globals after each tests                                                                             // 93\n    writeMetadataToFile(                                                                                              // 94\n      packageMetadata,                                                                                                // 95\n      Assets.getText('src/server/unit/metadata-reader.js.tpl'),                                                       // 96\n      'tests/jasmine/server/unit/packageMocksSpec.js'                                                                 // 97\n    )                                                                                                                 // 98\n                                                                                                                      // 99\n    function writeMetadataToFile(metadata, template, destination) {                                                   // 100\n      var output = _.template(template, {                                                                             // 101\n        METADATA: JSON.stringify(metadata, null, '  ')                                                                // 102\n      })                                                                                                              // 103\n                                                                                                                      // 104\n      var outputPath = path.join(MeteorFilesHelpers.getAppPath(), destination)                                        // 105\n      mkdirp.sync(path.dirname(outputPath))                                                                           // 106\n      writeFile(outputPath, output, {encoding: 'utf8'})                                                               // 107\n    }                                                                                                                 // 108\n  })                                                                                                                  // 109\n}                                                                                                                     // 110\n                                                                                                                      // 111\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/unit/ServerUnitTestFramework.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals ServerUnitTestFramework: true */                                                                           // 1\n                                                                                                                      // 2\nvar path = Npm.require('path'),                                                                                       // 3\n    fs = Npm.require('fs'),                                                                                           // 4\n    vm = Npm.require('vm'),                                                                                           // 5\n    Future = Npm.require(path.join('fibers', 'future')),                                                              // 6\n    ComponentMocker = Npm.require('component-mocker'),                                                                // 7\n    jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js')                                          // 8\n                                                                                                                      // 9\nServerUnitTestFramework = function (options) {                                                                        // 10\n  options = options || {}                                                                                             // 11\n                                                                                                                      // 12\n  _.defaults(options, {                                                                                               // 13\n    name: 'jasmine-server-unit',                                                                                      // 14\n    regex: '^tests/jasmine/server/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',                                      // 15\n    sampleTestGenerator: function () {                                                                                // 16\n      return [                                                                                                        // 17\n        {                                                                                                             // 18\n          path: 'jasmine/server/unit/sample/spec/PlayerSpec.js',                                                      // 19\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/PlayerSpec.js')                          // 20\n        },                                                                                                            // 21\n        {                                                                                                             // 22\n          path: 'jasmine/server/unit/sample/spec/SpecMatchers.js',                                                    // 23\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/SpecMatchers.js')                        // 24\n        },                                                                                                            // 25\n        {                                                                                                             // 26\n          path: 'jasmine/server/unit/sample/src/Player.js',                                                           // 27\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Player.js')                               // 28\n        },                                                                                                            // 29\n        {                                                                                                             // 30\n          path: 'jasmine/server/unit/sample/src/Song.js',                                                             // 31\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Song.js')                                 // 32\n        }                                                                                                             // 33\n      ]                                                                                                               // 34\n    },                                                                                                                // 35\n    //regex: 'jasmine/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',                                                       // 36\n    jasmineRequire: jasmineRequire                                                                                    // 37\n  })                                                                                                                  // 38\n                                                                                                                      // 39\n  JasmineTestFramework.call(this, options)                                                                            // 40\n}                                                                                                                     // 41\n                                                                                                                      // 42\nServerUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)                                     // 43\n                                                                                                                      // 44\n_.extend(ServerUnitTestFramework.prototype, {                                                                         // 45\n                                                                                                                      // 46\n  _getTestFilesCursor: function () {                                                                                  // 47\n    return VelocityTestFiles.find({                                                                                   // 48\n      targetFramework: this.name,                                                                                     // 49\n      relativePath: {                                                                                                 // 50\n        $nin: [                                                                                                       // 51\n          'tests/jasmine/server/unit/packageMocksSpec.js',                                                            // 52\n          'tests/jasmine/server/unit/package-stubs.js'                                                                // 53\n        ]                                                                                                             // 54\n      }                                                                                                               // 55\n    })                                                                                                                // 56\n  },                                                                                                                  // 57\n                                                                                                                      // 58\n  start: function () {                                                                                                // 59\n    var testFilesCursor = this._getTestFilesCursor()                                                                  // 60\n                                                                                                                      // 61\n    var _runTests  = _.debounce(Meteor.bindEnvironment(this.runTests.bind(this),                                      // 62\n      '[JasmineTestFramework.start.runTests]'), 200)                                                                  // 63\n                                                                                                                      // 64\n    this._observer = testFilesCursor.observe({                                                                        // 65\n      added: _runTests,                                                                                               // 66\n      changed: _runTests,                                                                                             // 67\n      removed: _runTests                                                                                              // 68\n    });                                                                                                               // 69\n                                                                                                                      // 70\n    // Always run tests at least once.                                                                                // 71\n    // The CI runner needs a completed event.                                                                         // 72\n    _runTests()                                                                                                       // 73\n  },                                                                                                                  // 74\n                                                                                                                      // 75\n  runTests: function executeSpecsUnitMode() {                                                                         // 76\n    Meteor.call('velocity/reports/reset', {framework: this.name})                                                     // 77\n                                                                                                                      // 78\n    if (this._getTestFilesCursor().count() === 0) {                                                                   // 79\n      this._reportCompleted()                                                                                         // 80\n      return                                                                                                          // 81\n    }                                                                                                                 // 82\n                                                                                                                      // 83\n    MockGenerator.generateMocks()                                                                                     // 84\n                                                                                                                      // 85\n    var jasmine = this.jasmineRequire.core(this.jasmineRequire)                                                       // 86\n    var jasmineInterface = new JasmineInterface({jasmine: jasmine})                                                   // 87\n                                                                                                                      // 88\n    var testFilePath = path.join(Velocity.getTestsPath(), 'jasmine', 'server', 'unit')                                // 89\n                                                                                                                      // 90\n    var globalContext = {                                                                                             // 91\n      process: process,                                                                                               // 92\n      console: console,                                                                                               // 93\n      Buffer: Buffer,                                                                                                 // 94\n      Npm: Npm,                                                                                                       // 95\n      MeteorStubs: MeteorStubs,                                                                                       // 96\n      ComponentMocker: ComponentMocker,                                                                               // 97\n      // Private state data that only we use                                                                          // 98\n      __jasmine: {                                                                                                    // 99\n        Meteor: {                                                                                                     // 100\n          settings: Meteor.settings                                                                                   // 101\n        }                                                                                                             // 102\n      }                                                                                                               // 103\n    }                                                                                                                 // 104\n                                                                                                                      // 105\n    var getAsset = function (assetPath, encoding, callback) {                                                         // 106\n      var fut;                                                                                                        // 107\n      if (! callback) {                                                                                               // 108\n        fut = new Future();                                                                                           // 109\n        callback = fut.resolver();                                                                                    // 110\n      }                                                                                                               // 111\n      var _callback = Package.meteor.Meteor.bindEnvironment(function (err, result) {                                  // 112\n        if (result && ! encoding) {                                                                                   // 113\n          // Sadly, this copies in Node 0.10.                                                                         // 114\n          result = new Uint8Array(result);                                                                            // 115\n        }                                                                                                             // 116\n        callback(err, result);                                                                                        // 117\n      }, function (e) {                                                                                               // 118\n        console.log('Exception in callback of getAsset', e.stack);                                                    // 119\n      });                                                                                                             // 120\n                                                                                                                      // 121\n      var filePath = path.join(Velocity.getAppPath(), 'private', assetPath);                                          // 122\n      fs.readFile(filePath, encoding, _callback);                                                                     // 123\n      if (fut) {                                                                                                      // 124\n        return fut.wait();                                                                                            // 125\n      }                                                                                                               // 126\n    };                                                                                                                // 127\n                                                                                                                      // 128\n    globalContext.__jasmine.Assets = {                                                                                // 129\n      getText: function (assetPath, callback) {                                                                       // 130\n        return getAsset(assetPath, 'utf8', callback);                                                                 // 131\n      },                                                                                                              // 132\n      getBinary: function (assetPath, callback) {                                                                     // 133\n        return getAsset(assetPath, undefined, callback);                                                              // 134\n      }                                                                                                               // 135\n    };                                                                                                                // 136\n                                                                                                                      // 137\n    // Add all available packages that should be included                                                             // 138\n    packagesToIncludeInUnitTests.forEach(function (packageName) {                                                     // 139\n      var packageGlobals = Package[packageName]                                                                       // 140\n      if (packageGlobals) {                                                                                           // 141\n        _.forEach(packageGlobals, function (packageGlobal, packageGlobalName) {                                       // 142\n          if (!globalContext[packageGlobalName]) {                                                                    // 143\n            globalContext[packageGlobalName] = packageGlobal                                                          // 144\n          }                                                                                                           // 145\n        })                                                                                                            // 146\n      }                                                                                                               // 147\n    })                                                                                                                // 148\n                                                                                                                      // 149\n    globalContext.global = globalContext                                                                              // 150\n    _.extend(globalContext, jasmineInterface)                                                                         // 151\n                                                                                                                      // 152\n    // Need to install Meteor here so the app code files don't throw an error                                         // 153\n    // when loaded                                                                                                    // 154\n    MeteorStubs.install(globalContext)                                                                                // 155\n                                                                                                                      // 156\n    globalContext.Meteor.isServer = true                                                                              // 157\n    globalContext.Meteor.isClient = false                                                                             // 158\n    globalContext.Meteor.settings = Meteor.settings                                                                   // 159\n    globalContext.Meteor.npmRequire = Meteor.npmRequire                                                               // 160\n    globalContext.Assets = globalContext.__jasmine.Assets                                                             // 161\n                                                                                                                      // 162\n    var context = vm.createContext(globalContext)                                                                     // 163\n                                                                                                                      // 164\n    // Load mock helper                                                                                               // 165\n    runCodeInContext(                                                                                                 // 166\n      Assets.getText('src/lib/mock.js'),                                                                              // 167\n      context                                                                                                         // 168\n    )                                                                                                                 // 169\n                                                                                                                      // 170\n    // load stubs                                                                                                     // 171\n    try {                                                                                                             // 172\n      mockLoader.loadUserMocks(context)                                                                               // 173\n    }                                                                                                                 // 174\n    catch (ex) {                                                                                                      // 175\n      console.log('Error loading stubs', ex.message, ex.stack)                                                        // 176\n    }                                                                                                                 // 177\n                                                                                                                      // 178\n    // load Meteor app source files prior to running tests                                                            // 179\n    try {                                                                                                             // 180\n      fileLoader.loadFiles(context, {ignoreDirs: ['client']})                                                         // 181\n    }                                                                                                                 // 182\n    catch (ex) {                                                                                                      // 183\n      console.log('Error loading app files', ex.message, ex.stack)                                                    // 184\n    }                                                                                                                 // 185\n                                                                                                                      // 186\n    // load MeteorStubs before and after each test                                                                    // 187\n    runCodeInContext(                                                                                                 // 188\n      Assets.getText('src/server/lib/contextSpec.js'),                                                                // 189\n      context                                                                                                         // 190\n    )                                                                                                                 // 191\n                                                                                                                      // 192\n    // Load specs                                                                                                     // 193\n    var specs = getSpecFiles(testFilePath)                                                                            // 194\n    for (var i = 0; i < specs.length; i++) {                                                                          // 195\n      fileLoader.loadFile(specs[i], context)                                                                          // 196\n    }                                                                                                                 // 197\n                                                                                                                      // 198\n    var env = jasmine.getEnv()                                                                                        // 199\n                                                                                                                      // 200\n    var velocityReporter = new VelocityTestReporter({                                                                 // 201\n      mode: 'Server Unit',                                                                                            // 202\n      framework: this.name,                                                                                           // 203\n      env: env,                                                                                                       // 204\n      onComplete: this._reportCompleted.bind(this),                                                                   // 205\n      timer: new jasmine.Timer(),                                                                                     // 206\n      isServer: true                                                                                                  // 207\n    })                                                                                                                // 208\n                                                                                                                      // 209\n    env.addReporter(velocityReporter)                                                                                 // 210\n    env.execute()                                                                                                     // 211\n  },                                                                                                                  // 212\n                                                                                                                      // 213\n  _reportCompleted: function () {                                                                                     // 214\n    Meteor.call('velocity/reports/completed', {framework: this.name})                                                 // 215\n  }                                                                                                                   // 216\n})                                                                                                                    // 217\n                                                                                                                      // 218\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/client/unit/ClientUnitTestFramework.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals ClientUnitTestFramework: true, __meteor_runtime_config__: false */                                         // 1\n                                                                                                                      // 2\nvar path = Npm.require('path');                                                                                       // 3\nvar fs = Npm.require('fs');                                                                                           // 4\nvar mkdirp = Npm.require('mkdirp');                                                                                   // 5\n                                                                                                                      // 6\nClientUnitTestFramework = function (options) {                                                                        // 7\n  options = options || {}                                                                                             // 8\n                                                                                                                      // 9\n  _.defaults(options, {                                                                                               // 10\n    name: 'jasmine-client-unit',                                                                                      // 11\n    regex: '^tests/jasmine/client/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',                                      // 12\n    sampleTestGenerator: function () {                                                                                // 13\n      return [                                                                                                        // 14\n        {                                                                                                             // 15\n          path: 'jasmine/client/unit/sample/spec/PlayerSpec.js',                                                      // 16\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/PlayerSpec.js')                          // 17\n        },                                                                                                            // 18\n        {                                                                                                             // 19\n          path: 'jasmine/client/unit/sample/spec/SpecMatchers.js',                                                    // 20\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/SpecMatchers.js')                        // 21\n        },                                                                                                            // 22\n        {                                                                                                             // 23\n          path: 'jasmine/client/unit/sample/src/Player.js',                                                           // 24\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Player.js')                               // 25\n        },                                                                                                            // 26\n        {                                                                                                             // 27\n          path: 'jasmine/client/unit/sample/src/Song.js',                                                             // 28\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Song.js')                                 // 29\n        }                                                                                                             // 30\n      ]                                                                                                               // 31\n    },                                                                                                                // 32\n    jasmineRequire: null                                                                                              // 33\n  })                                                                                                                  // 34\n                                                                                                                      // 35\n  this.userKarmaConfig = {}                                                                                           // 36\n                                                                                                                      // 37\n  JasmineTestFramework.call(this, options)                                                                            // 38\n}                                                                                                                     // 39\n                                                                                                                      // 40\nClientUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)                                     // 41\n                                                                                                                      // 42\n_.extend(ClientUnitTestFramework.prototype, {                                                                         // 43\n                                                                                                                      // 44\n  start: function () {                                                                                                // 45\n    lazyStart(this.name, this.startKarma.bind(this))                                                                  // 46\n  },                                                                                                                  // 47\n                                                                                                                      // 48\n  startKarma: function () {                                                                                           // 49\n    var self = this                                                                                                   // 50\n                                                                                                                      // 51\n    self._restartKarma();                                                                                             // 52\n                                                                                                                      // 53\n    // Listen for message 'refresh:client' that signals incoming 'refreshable' autoupdate                             // 54\n    process.on('message', Meteor.bindEnvironment(function (message) {                                                 // 55\n      log.debug('client-refresh noticed, stopping Karma')                                                             // 56\n      if (message && message.refresh === 'client') {                                                                  // 57\n        // Listen for message 'on-listening' that signals that the application has been rebuild                       // 58\n        // and is ready to serve                                                                                      // 59\n        // * This callback *must* be registered here in 'on-message-refresh-client'                                   // 60\n        // * because onListening is a short-lived registration that is removed after firing once                      // 61\n        WebApp.onListening(function () {                                                                              // 62\n          log.debug('WebApp has been updated. Updating Karma config file and starting it up.');                       // 63\n          self._restartKarma();                                                                                       // 64\n        });                                                                                                           // 65\n      }                                                                                                               // 66\n    }));                                                                                                              // 67\n  },                                                                                                                  // 68\n                                                                                                                      // 69\n  _restartKarma: function () {                                                                                        // 70\n    var self = this                                                                                                   // 71\n                                                                                                                      // 72\n    var karmaConfig = this.getKarmaConfig();                                                                          // 73\n    if (Karma.isRunning(self.name)) {                                                                                 // 74\n      Karma.reloadFileList(self.name, karmaConfig.files)                                                              // 75\n    } else {                                                                                                          // 76\n      self._generateContextHtml()                                                                                     // 77\n      self._generateDebugHtml()                                                                                       // 78\n      Karma.start(self.name, karmaConfig)                                                                             // 79\n    }                                                                                                                 // 80\n  },                                                                                                                  // 81\n                                                                                                                      // 82\n  _generateContextHtml: function () {                                                                                 // 83\n    this._generateKarmaHtml('context')                                                                                // 84\n  },                                                                                                                  // 85\n                                                                                                                      // 86\n  _generateDebugHtml: function () {                                                                                   // 87\n    this._generateKarmaHtml('debug')                                                                                  // 88\n  },                                                                                                                  // 89\n                                                                                                                      // 90\n  _generateKarmaHtml: function (type) {                                                                               // 91\n    var fileName = type + '.html'                                                                                     // 92\n    var htmlPath = this._getKarmaHtmlPath(type);                                                                      // 93\n    mkdirp.sync(path.dirname(htmlPath))                                                                               // 94\n    var headHtml = this._getHeadHtml() || ''                                                                          // 95\n    var contextHtml = Assets.getText('src/client/unit/assets/' + fileName)                                            // 96\n      .replace('%HEAD%', headHtml)                                                                                    // 97\n    fs.writeFileSync(htmlPath, contextHtml, {encoding: 'utf8'})                                                       // 98\n  },                                                                                                                  // 99\n                                                                                                                      // 100\n  _getKarmaHtmlPath: function (type) {                                                                                // 101\n    var fileName = type + '.html'                                                                                     // 102\n    return path.join(                                                                                                 // 103\n      MeteorFilesHelpers.getAppPath(),                                                                                // 104\n      '.meteor/local/karma/',                                                                                         // 105\n      this.name, fileName                                                                                             // 106\n    )                                                                                                                 // 107\n  },                                                                                                                  // 108\n                                                                                                                      // 109\n  setUserKarmaConfig: function (config) {                                                                             // 110\n    var blacklist = [                                                                                                 // 111\n      'autoWatch', 'autoWatchBatchDelay',                                                                             // 112\n      'basePath', 'browserDisconnectTimeout', 'browserDisconnectTolerance',                                           // 113\n      'browserNoActivityTimeout', 'browsers', 'captureTimeout', 'client',                                             // 114\n      'exclude', 'files', 'frameworks', 'hostname', 'port', 'proxies', 'singleRun',                                   // 115\n      'urlRoot'                                                                                                       // 116\n    ]                                                                                                                 // 117\n    this.userKarmaConfig = _.omit(config, blacklist)                                                                  // 118\n  },                                                                                                                  // 119\n                                                                                                                      // 120\n  getKarmaConfig: function () {                                                                                       // 121\n    var files = [];                                                                                                   // 122\n    var proxies = {};                                                                                                 // 123\n                                                                                                                      // 124\n    this._addPreAppFiles(files, proxies)                                                                              // 125\n    this._addPackageFiles(files, proxies)                                                                             // 126\n    this._addHelperFiles(files, proxies)                                                                              // 127\n    this._addStubFiles(files, proxies)                                                                                // 128\n    this._addAppFiles(files, proxies)                                                                                 // 129\n    this._addTestFiles(files, proxies)                                                                                // 130\n                                                                                                                      // 131\n    var launcherPlugins = {                                                                                           // 132\n      'Chrome': 'karma-chrome-launcher',                                                                              // 133\n      'HiddenChrome': 'karma-chrome-launcher',                                                                        // 134\n      'ChromeCanary': 'karma-chrome-launcher',                                                                        // 135\n      'Firefox': 'karma-firefox-launcher',                                                                            // 136\n      'PhantomJS': 'karma-phantomjs-launcher',                                                                        // 137\n      'SauceLabs': 'karma-sauce-launcher'                                                                             // 138\n    }                                                                                                                 // 139\n                                                                                                                      // 140\n    var browser = process.env.JASMINE_BROWSER || 'HiddenChrome';                                                      // 141\n    var launcherPlugin = launcherPlugins[browser];                                                                    // 142\n                                                                                                                      // 143\n    var basePath = Velocity.getAppPath()                                                                              // 144\n                                                                                                                      // 145\n    /* jshint camelcase: false */                                                                                     // 146\n    var startOptions = _.extend({}, this.userKarmaConfig, {                                                           // 147\n      port: 9876,                                                                                                     // 148\n      basePath: basePath,                                                                                             // 149\n      frameworks: ['jasmine'],                                                                                        // 150\n      browsers: [browser],                                                                                            // 151\n      customLaunchers: {                                                                                              // 152\n        HiddenChrome: {                                                                                               // 153\n          base: 'Chrome',                                                                                             // 154\n          flags: ['--window-size=1024,768', '--window-position=-1024,0'],                                             // 155\n        }                                                                                                             // 156\n      },                                                                                                              // 157\n      plugins: [                                                                                                      // 158\n        'karma-jasmine',                                                                                              // 159\n        launcherPlugin,                                                                                               // 160\n        'karma-coffee-preprocessor'                                                                                   // 161\n      ],                                                                                                              // 162\n      files: files,                                                                                                   // 163\n      proxies: proxies,                                                                                               // 164\n      client: {                                                                                                       // 165\n        contextFile: this._getKarmaHtmlPath('context'),                                                               // 166\n        debugFile: this._getKarmaHtmlPath('debug'),                                                                   // 167\n        args: [_.defaults({                                                                                           // 168\n          // Make those values constant to avoid unnecessary Karma restarts                                           // 169\n          autoupdateVersion: 'unknown',                                                                               // 170\n          autoupdateVersionRefreshable: 'unknown',                                                                    // 171\n          autoupdateVersionCordova: 'none'                                                                            // 172\n                                                                                                                      // 173\n        }, __meteor_runtime_config__)]                                                                                // 174\n      },                                                                                                              // 175\n      browserDisconnectTimeout: 10000,                                                                                // 176\n      browserNoActivityTimeout: 15000,                                                                                // 177\n                                                                                                                      // 178\n      preprocessors: {                                                                                                // 179\n        '**/*.{coffee,litcoffee,coffee.md}': ['coffee']                                                               // 180\n      },                                                                                                              // 181\n                                                                                                                      // 182\n      coffeePreprocessor: {                                                                                           // 183\n        options: {                                                                                                    // 184\n          bare: true,                                                                                                 // 185\n          sourceMap: true                                                                                             // 186\n        },                                                                                                            // 187\n        transformPath: function (path) {                                                                              // 188\n          return path.replace(/\\.(coffee|litcoffee|coffee\\\\.md)$/, '.js');                                            // 189\n        }                                                                                                             // 190\n      }                                                                                                               // 191\n    })                                                                                                                // 192\n    /* jshint camelcase: true */                                                                                      // 193\n                                                                                                                      // 194\n    if (this.userKarmaConfig.plugins) {                                                                               // 195\n      startOptions.plugins = startOptions.plugins.concat(this.userKarmaConfig.plugins)                                // 196\n    }                                                                                                                 // 197\n                                                                                                                      // 198\n    if (this.userKarmaConfig.preprocessors) {                                                                         // 199\n      _.extend(startOptions.preprocessors, this.userKarmaConfig.preprocessors)                                        // 200\n    }                                                                                                                 // 201\n                                                                                                                      // 202\n    return startOptions                                                                                               // 203\n  },                                                                                                                  // 204\n                                                                                                                      // 205\n  _addPreAppFiles: function (files) {                                                                                 // 206\n    files.push(                                                                                                       // 207\n      this._getAssetPath('src/client/unit/assets/__meteor_runtime_config__.js')                                       // 208\n    )                                                                                                                 // 209\n  },                                                                                                                  // 210\n                                                                                                                      // 211\n  _addPackageFiles: function (files, proxies) {                                                                       // 212\n    _.chain(WebApp.clientPrograms['web.browser'].manifest)                                                            // 213\n      .filter(function (file) {                                                                                       // 214\n        return file.path.indexOf('packages/') === 0                                                                   // 215\n      })                                                                                                              // 216\n      .filter(function (file) {                                                                                       // 217\n        var ignoredFiles = [                                                                                          // 218\n          'packages/sanjo_jasmine.js',                                                                                // 219\n          'packages/velocity_html-reporter.js'                                                                        // 220\n        ]                                                                                                             // 221\n        return !_.contains(ignoredFiles, file.path)                                                                   // 222\n      })                                                                                                              // 223\n      .forEach(function (file) {                                                                                      // 224\n        var mockedFiles = [                                                                                           // 225\n          'packages/autoupdate.js',                                                                                   // 226\n          'packages/reload.js',                                                                                       // 227\n          'packages/meteorhacks_fast-render.js'                                                                       // 228\n        ]                                                                                                             // 229\n                                                                                                                      // 230\n        if (_.contains(mockedFiles, file.path)) {                                                                     // 231\n          files.push(this._getAssetPath('src/client/unit/assets/mocks/' + file.path))                                 // 232\n        } else {                                                                                                      // 233\n          this._addFile(file, files, proxies)                                                                         // 234\n        }                                                                                                             // 235\n      }, this)                                                                                                        // 236\n      .value()                                                                                                        // 237\n  },                                                                                                                  // 238\n                                                                                                                      // 239\n  _addAppFiles: function (files, proxies) {                                                                           // 240\n    return _.chain(WebApp.clientPrograms['web.browser'].manifest)                                                     // 241\n      .filter(function (file) {                                                                                       // 242\n        return file.path.indexOf('packages/') !== 0                                                                   // 243\n      })                                                                                                              // 244\n      .forEach(function (file) {                                                                                      // 245\n        this._addFile(file, files, proxies)                                                                           // 246\n      }, this)                                                                                                        // 247\n      .value()                                                                                                        // 248\n  },                                                                                                                  // 249\n                                                                                                                      // 250\n  _addFile: function (file, files, proxies) {                                                                         // 251\n    var basePath = '.meteor/local/build/programs/web.browser/'                                                        // 252\n    files.push({                                                                                                      // 253\n      pattern: basePath + file.path,                                                                                  // 254\n      watched: false,                                                                                                 // 255\n      included: _.contains(['js', 'css'], file.type),                                                                 // 256\n      served: true                                                                                                    // 257\n    });                                                                                                               // 258\n                                                                                                                      // 259\n    if (file.type === 'asset') {                                                                                      // 260\n      proxies[file.url] = '/base/' + basePath + file.path                                                             // 261\n    }                                                                                                                 // 262\n  },                                                                                                                  // 263\n                                                                                                                      // 264\n  _addHelperFiles: function (files) {                                                                                 // 265\n    files.push(                                                                                                       // 266\n      this._getAssetPath('src/client/unit/assets/jasmine-jquery.js'),                                                 // 267\n      this._getAssetPath('.npm/package/node_modules/component-mocker/index.js'),                                      // 268\n      this._getAssetPath('src/lib/mock.js'),                                                                          // 269\n      this._getAssetPath('src/lib/VelocityTestReporter.js'),                                                          // 270\n      this._getAssetPath('src/client/unit/assets/adapter.js'),                                                        // 271\n      '.meteor/local/build/programs/server/assets/packages/velocity_meteor-stubs/index.js',                           // 272\n      this._getAssetPath('src/client/unit/assets/helpers/iron_router.js')                                             // 273\n    )                                                                                                                 // 274\n  },                                                                                                                  // 275\n                                                                                                                      // 276\n  _addStubFiles: function (files) {                                                                                   // 277\n    files.push(                                                                                                       // 278\n      'tests/jasmine/client/unit/**/*-+(stub|stubs|mock|mocks).+(js|coffee|litcoffee|coffee.md)'                      // 279\n    )                                                                                                                 // 280\n  },                                                                                                                  // 281\n                                                                                                                      // 282\n  _addTestFiles: function (files) {                                                                                   // 283\n    // Use a match pattern directly.                                                                                  // 284\n    // That allows Karma to detect changes and rerun the tests.                                                       // 285\n    files.push(                                                                                                       // 286\n      'tests/jasmine/client/unit/**/*.+(js|coffee|litcoffee|coffee.md)'                                               // 287\n    )                                                                                                                 // 288\n  },                                                                                                                  // 289\n                                                                                                                      // 290\n  _getAssetPath: function (fileName) {                                                                                // 291\n    var assetsPath = '.meteor/local/build/programs/server/assets/packages/sanjo_jasmine/'                             // 292\n    return assetsPath + fileName;                                                                                     // 293\n  },                                                                                                                  // 294\n                                                                                                                      // 295\n  _getHeadHtml: function () {                                                                                         // 296\n    try {                                                                                                             // 297\n      return fs.readFileSync(                                                                                         // 298\n        path.join(Velocity.getAppPath(), '.meteor/local/build/programs/web.browser/head.html'),                       // 299\n        {encoding: 'utf8'}                                                                                            // 300\n      );                                                                                                              // 301\n    } catch (error) {                                                                                                 // 302\n      return null;                                                                                                    // 303\n    }                                                                                                                 // 304\n  }                                                                                                                   // 305\n});                                                                                                                   // 306\n                                                                                                                      // 307\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/client/integration/ClientIntegrationTestFramework.js                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals ClientIntegrationTestFramework: true */                                                                    // 1\n                                                                                                                      // 2\nClientIntegrationTestFramework = function (options) {                                                                 // 3\n  options = options || {}                                                                                             // 4\n                                                                                                                      // 5\n  _.defaults(options, {                                                                                               // 6\n    name: 'jasmine-client-integration',                                                                               // 7\n    regex: '^tests/jasmine/client/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',                       // 8\n    sampleTestGenerator: function () {                                                                                // 9\n      return [                                                                                                        // 10\n        {                                                                                                             // 11\n          path: 'jasmine/client/integration/sample/spec/PlayerSpec.js',                                               // 12\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/PlayerSpec.js')                   // 13\n        },                                                                                                            // 14\n        {                                                                                                             // 15\n          path: 'jasmine/client/integration/sample/spec/SpecMatchers.js',                                             // 16\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/SpecMatchers.js')                 // 17\n        },                                                                                                            // 18\n        {                                                                                                             // 19\n          path: 'jasmine/client/integration/sample/src/Player.js',                                                    // 20\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Player.js')                        // 21\n        },                                                                                                            // 22\n        {                                                                                                             // 23\n          path: 'jasmine/client/integration/sample/src/Song.js',                                                      // 24\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Song.js')                          // 25\n        }                                                                                                             // 26\n      ]                                                                                                               // 27\n    },                                                                                                                // 28\n    jasmineRequire: Meteor.isClient ? window.jasmineRequire : null                                                    // 29\n  })                                                                                                                  // 30\n                                                                                                                      // 31\n  JasmineTestFramework.call(this, options)                                                                            // 32\n                                                                                                                      // 33\n  if (Meteor.isClient) {                                                                                              // 34\n    this._setup()                                                                                                     // 35\n  }                                                                                                                   // 36\n}                                                                                                                     // 37\n                                                                                                                      // 38\nClientIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)                              // 39\n                                                                                                                      // 40\n_.extend(ClientIntegrationTestFramework.prototype, {                                                                  // 41\n                                                                                                                      // 42\n  _setup: function () {                                                                                               // 43\n    this.jasmine = this.jasmineRequire.core(this.jasmineRequire)                                                      // 44\n    this.jasmineInterface = new JasmineInterface({jasmine: this.jasmine})                                             // 45\n    _.extend(window, this.jasmineInterface)                                                                           // 46\n  },                                                                                                                  // 47\n                                                                                                                      // 48\n  startMirror: function () {                                                                                          // 49\n    var self = this;                                                                                                  // 50\n    var mirrorStarter = new MirrorStarter(this.name)                                                                  // 51\n    var mirrorOptions = {}                                                                                            // 52\n                                                                                                                      // 53\n    if (isTestPackagesMode()) {                                                                                       // 54\n      mirrorStarter.startSelfMirror(mirrorOptions)                                                                    // 55\n                                                                                                                      // 56\n      process.on('message', Meteor.bindEnvironment(function (message) {                                               // 57\n        if (message && message.refresh === 'client') {                                                                // 58\n          // Listen for message 'on-listening' that signals that the application has been rebuild                     // 59\n          // and is ready to serve                                                                                    // 60\n          // * This callback *must* be registered here in 'on-message-refresh-client'                                 // 61\n          // * because onListening is a short-lived registration that is removed after firing once                    // 62\n          WebApp.onListening(function () {                                                                            // 63\n            Meteor.call('velocity/reports/reset', {framework: self.name})                                             // 64\n          })                                                                                                          // 65\n        }                                                                                                             // 66\n      }))                                                                                                             // 67\n    } else {                                                                                                          // 68\n      _.extend(mirrorOptions, {                                                                                       // 69\n        port: this._getCustomPort(),                                                                                  // 70\n        testsPath: 'jasmine/client/integration'                                                                       // 71\n      })                                                                                                              // 72\n                                                                                                                      // 73\n      if (process.env.JASMINE_CLIENT_MIRROR_APP_PATH) {                                                               // 74\n        mirrorOptions.args = [                                                                                        // 75\n          '--test-app-path', process.env.JASMINE_CLIENT_MIRROR_APP_PATH                                               // 76\n        ]                                                                                                             // 77\n      }                                                                                                               // 78\n                                                                                                                      // 79\n      mirrorStarter.lazyStartMirror(mirrorOptions)                                                                    // 80\n    }                                                                                                                 // 81\n  },                                                                                                                  // 82\n                                                                                                                      // 83\n  _getCustomPort: function () {                                                                                       // 84\n    var customPort = parseInt(process.env.JASMINE_MIRROR_PORT, 10)                                                    // 85\n    if (!_.isNaN(customPort)) {                                                                                       // 86\n      return customPort                                                                                               // 87\n    }                                                                                                                 // 88\n  },                                                                                                                  // 89\n                                                                                                                      // 90\n  shouldRunTests: function (mirrorInfo) {                                                                             // 91\n    return mirrorInfo.isTestPackagesMode ||                                                                           // 92\n           (mirrorInfo.isMirror && mirrorInfo.framework === this.name)                                                // 93\n  },                                                                                                                  // 94\n                                                                                                                      // 95\n  runTests: function () {                                                                                             // 96\n    var self = this                                                                                                   // 97\n                                                                                                                      // 98\n    Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {                                             // 99\n      if (error) {                                                                                                    // 100\n        throw error                                                                                                   // 101\n      } else if (self.shouldRunTests(mirrorInfo)) {                                                                   // 102\n        Meteor.defer(function() {                                                                                     // 103\n          log.info('Running Jasmine tests')                                                                           // 104\n                                                                                                                      // 105\n          var ddpConnection = mirrorInfo.isTestPackagesMode ?                                                         // 106\n            Meteor :                                                                                                  // 107\n            DDP.connect(mirrorInfo.parentUrl)                                                                         // 108\n          window.initJasmineJquery()                                                                                  // 109\n          self._executeClientTests(ddpConnection)                                                                     // 110\n        })                                                                                                            // 111\n      } else if (!mirrorInfo.isMirror && !self.inIframe()) {                                                          // 112\n        self.createMirrorIframe()                                                                                     // 113\n      }                                                                                                               // 114\n    })                                                                                                                // 115\n  },                                                                                                                  // 116\n                                                                                                                      // 117\n  inIframe: function() {                                                                                              // 118\n    try {                                                                                                             // 119\n      return window.self !== window.top;                                                                              // 120\n    } catch (error) {                                                                                                 // 121\n      return true;                                                                                                    // 122\n    }                                                                                                                 // 123\n  },                                                                                                                  // 124\n                                                                                                                      // 125\n  createMirrorIframe: function () {                                                                                   // 126\n    var self = this                                                                                                   // 127\n    var iframeId = 'jasmine-mirror'                                                                                   // 128\n                                                                                                                      // 129\n    var getMirrorUrl = function (mirrorInfo) {                                                                        // 130\n      return mirrorInfo.rootUrl;                                                                                      // 131\n    }                                                                                                                 // 132\n                                                                                                                      // 133\n    var insertMirrorIframe = _.once(function (mirrorInfo) {                                                           // 134\n      var iframe = document.createElement('iframe')                                                                   // 135\n      iframe.id = iframeId                                                                                            // 136\n      iframe.src = getMirrorUrl(mirrorInfo);                                                                          // 137\n      // Make the iFrame invisible                                                                                    // 138\n      iframe.style.display = 'block'                                                                                  // 139\n      iframe.style.position = 'absolute'                                                                              // 140\n      iframe.style.width = 0                                                                                          // 141\n      iframe.style.height = 0                                                                                         // 142\n      iframe.style.border = 0                                                                                         // 143\n      document.body.appendChild(iframe)                                                                               // 144\n    })                                                                                                                // 145\n                                                                                                                      // 146\n    var updateMirrorIframe = function (mirrorInfo) {                                                                  // 147\n      var iframe = document.getElementById(iframeId)                                                                  // 148\n      if (iframe) {                                                                                                   // 149\n        iframe.src = getMirrorUrl(mirrorInfo)                                                                         // 150\n      } else {                                                                                                        // 151\n        insertMirrorIframe(mirrorInfo)                                                                                // 152\n      }                                                                                                               // 153\n    }                                                                                                                 // 154\n                                                                                                                      // 155\n    Tracker.autorun(function () {                                                                                     // 156\n      var mirror = VelocityMirrors.findOne(                                                                           // 157\n        {framework: self.name, state: 'ready'},                                                                       // 158\n        {fields: {state: 1, rootUrl: 1, lastModified: 1}}                                                             // 159\n      )                                                                                                               // 160\n      if (mirror) {                                                                                                   // 161\n        updateMirrorIframe(mirror)                                                                                    // 162\n      }                                                                                                               // 163\n    })                                                                                                                // 164\n  },                                                                                                                  // 165\n                                                                                                                      // 166\n  _executeClientTests: function (ddpConnection) {                                                                     // 167\n    var self = this;                                                                                                  // 168\n                                                                                                                      // 169\n    window.ddpParentConnection = ddpConnection                                                                        // 170\n                                                                                                                      // 171\n    window.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})                                 // 172\n                                                                                                                      // 173\n    /**                                                                                                               // 174\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n     */                                                                                                               // 176\n    self.jasmineRequire.html(self.jasmine)                                                                            // 177\n                                                                                                                      // 178\n    /**                                                                                                               // 179\n     * Create the Jasmine environment. This is used to run all specs in a project.                                    // 180\n     */                                                                                                               // 181\n    var env = self.jasmine.getEnv()                                                                                   // 182\n                                                                                                                      // 183\n    /**                                                                                                               // 184\n     * ## Runner Parameters                                                                                           // 185\n     *                                                                                                                // 186\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n     */                                                                                                               // 188\n                                                                                                                      // 189\n    var queryString = new self.jasmine.QueryString({                                                                  // 190\n      getWindowLocation: function () {                                                                                // 191\n        return window.location                                                                                        // 192\n      }                                                                                                               // 193\n    })                                                                                                                // 194\n                                                                                                                      // 195\n    var catchingExceptions = queryString.getParam('catch')                                                            // 196\n    env.catchExceptions(typeof catchingExceptions === 'undefined' ? true : catchingExceptions)                        // 197\n                                                                                                                      // 198\n    /**                                                                                                               // 199\n     * ## Reporters                                                                                                   // 200\n     */                                                                                                               // 201\n    var velocityReporter = new VelocityTestReporter({                                                                 // 202\n      mode: 'Client Integration',                                                                                     // 203\n      framework: self.name,                                                                                           // 204\n      env: env,                                                                                                       // 205\n      timer: new self.jasmine.Timer(),                                                                                // 206\n      ddpParentConnection: window.ddpParentConnection,                                                                // 207\n      isClient: true                                                                                                  // 208\n    })                                                                                                                // 209\n                                                                                                                      // 210\n    /**                                                                                                               // 211\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n     */                                                                                                               // 213\n    env.addReporter(self.jasmineInterface.jsApiReporter)                                                              // 214\n    env.addReporter(velocityReporter)                                                                                 // 215\n                                                                                                                      // 216\n    /**                                                                                                               // 217\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.          // 218\n     */                                                                                                               // 219\n    var specFilter = new self.jasmine.HtmlSpecFilter({                                                                // 220\n      filterString: function () {                                                                                     // 221\n        return queryString.getParam('spec')                                                                           // 222\n      }                                                                                                               // 223\n    })                                                                                                                // 224\n                                                                                                                      // 225\n    env.specFilter = function (spec) {                                                                                // 226\n      return specFilter.matches(spec.getFullName())                                                                   // 227\n    }                                                                                                                 // 228\n                                                                                                                      // 229\n    /**                                                                                                               // 230\n     * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n     */                                                                                                               // 232\n    window.setTimeout = window.setTimeout                                                                             // 233\n    window.setInterval = window.setInterval                                                                           // 234\n    window.clearTimeout = window.clearTimeout                                                                         // 235\n    window.clearInterval = window.clearInterval                                                                       // 236\n                                                                                                                      // 237\n    env.execute()                                                                                                     // 238\n  },                                                                                                                  // 239\n                                                                                                                      // 240\n  _reportResults: function () {                                                                                       // 241\n    Meteor.call('velocity/reports/completed', {framework: this.name})                                                 // 242\n  }                                                                                                                   // 243\n})                                                                                                                    // 244\n                                                                                                                      // 245\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/server/lib/get-files.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals getSpecFiles: true */                                                                                      // 1\n                                                                                                                      // 2\nvar fs = Npm.require('fs')                                                                                            // 3\n                                                                                                                      // 4\nfunction getFiles(dir, matcher) {                                                                                     // 5\n  var allFiles = []                                                                                                   // 6\n  var stat;                                                                                                           // 7\n                                                                                                                      // 8\n  try {                                                                                                               // 9\n    stat = fs.statSync(dir)                                                                                           // 10\n  } catch (error) {                                                                                                   // 11\n    if (error.code !== 'ENOENT') {                                                                                    // 12\n      console.error(error)                                                                                            // 13\n    }                                                                                                                 // 14\n    return allFiles;                                                                                                  // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  if (stat.isFile() && dir.match(matcher)) {                                                                          // 18\n    allFiles.push(dir)                                                                                                // 19\n  } else {                                                                                                            // 20\n    var files = fs.readdirSync(dir)                                                                                   // 21\n    for (var i = 0, len = files.length; i < len; ++i) {                                                               // 22\n      var filename = dir + '/' + files[i]                                                                             // 23\n      if (fs.statSync(filename).isFile() && filename.match(matcher)) {                                                // 24\n        allFiles.push(filename)                                                                                       // 25\n      } else if (fs.statSync(filename).isDirectory()) {                                                               // 26\n        var subfiles = getFiles(filename, matcher)                                                                    // 27\n        allFiles.push.apply(allFiles, subfiles)                                                                       // 28\n      }                                                                                                               // 29\n    }                                                                                                                 // 30\n  }                                                                                                                   // 31\n  return allFiles                                                                                                     // 32\n}                                                                                                                     // 33\n                                                                                                                      // 34\ngetSpecFiles = function (dir) {                                                                                       // 35\n  return getFiles(dir, new RegExp('\\\\.(js|coffee|litcoffee|coffee\\\\.md)$'))                                           // 36\n}                                                                                                                     // 37\n                                                                                                                      // 38\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/sanjo_jasmine/src/registerFrameworks.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals frameworks: true */                                                                                        // 1\n                                                                                                                      // 2\nframeworks = {}                                                                                                       // 3\n                                                                                                                      // 4\nisMirror = function () {                                                                                              // 5\n  return !!process.env.IS_MIRROR;                                                                                     // 6\n}                                                                                                                     // 7\n                                                                                                                      // 8\nisMainApp = function () {                                                                                             // 9\n  return !isMirror();                                                                                                 // 10\n}                                                                                                                     // 11\n                                                                                                                      // 12\nisTestPackagesMode = function () {                                                                                    // 13\n  return !!process.env.VELOCITY_TEST_PACKAGES;                                                                        // 14\n}                                                                                                                     // 15\n                                                                                                                      // 16\nshouldRunFramework = function (frameworkName) {                                                                       // 17\n  return process.env.FRAMEWORK === frameworkName || isTestPackagesMode();                                             // 18\n}                                                                                                                     // 19\n                                                                                                                      // 20\nif (process.env.VELOCITY !== '0') {                                                                                   // 21\n                                                                                                                      // 22\n  // Server Integration                                                                                               // 23\n  if (process.env.JASMINE_SERVER_INTEGRATION !== '0') {                                                               // 24\n    frameworks.serverIntegration = new ServerIntegrationTestFramework()                                               // 25\n                                                                                                                      // 26\n    if (isMainApp()) {                                                                                                // 27\n      frameworks.serverIntegration.registerWithVelocity()                                                             // 28\n      if (!isTestPackagesMode()) {                                                                                    // 29\n        Velocity.startup(function () {                                                                                // 30\n          frameworks.serverIntegration.startMirror()                                                                  // 31\n        })                                                                                                            // 32\n      }                                                                                                               // 33\n    }                                                                                                                 // 34\n                                                                                                                      // 35\n    if (shouldRunFramework('jasmine-server-integration')) {                                                           // 36\n      Meteor.startup(function () {                                                                                    // 37\n        // Queue our function after all other normal startup functions                                                // 38\n        Meteor.startup(function () {                                                                                  // 39\n          Meteor.defer(function () {                                                                                  // 40\n            frameworks.serverIntegration.start()                                                                      // 41\n          })                                                                                                          // 42\n        })                                                                                                            // 43\n      })                                                                                                              // 44\n    }                                                                                                                 // 45\n  }                                                                                                                   // 46\n                                                                                                                      // 47\n                                                                                                                      // 48\n  // Client Integration                                                                                               // 49\n  if (process.env.JASMINE_CLIENT_INTEGRATION !== '0') {                                                               // 50\n    frameworks.clientIntegration = new ClientIntegrationTestFramework()                                               // 51\n                                                                                                                      // 52\n    if (isMainApp()) {                                                                                                // 53\n      frameworks.clientIntegration.registerWithVelocity()                                                             // 54\n      Velocity.startup(function () {                                                                                  // 55\n        // In test packages mode this does not really create a new mirror                                             // 56\n        // It just registers the app as mirror.                                                                       // 57\n        frameworks.clientIntegration.startMirror()                                                                    // 58\n      })                                                                                                              // 59\n    }                                                                                                                 // 60\n  }                                                                                                                   // 61\n                                                                                                                      // 62\n                                                                                                                      // 63\n  // Client Unit                                                                                                      // 64\n  if (process.env.JASMINE_CLIENT_UNIT !== '0' && !isTestPackagesMode()) {                                             // 65\n    frameworks.clientUnit = new ClientUnitTestFramework()                                                             // 66\n                                                                                                                      // 67\n    if (isMainApp()) {                                                                                                // 68\n      frameworks.clientUnit.registerWithVelocity()                                                                    // 69\n      Velocity.startup(function () {                                                                                  // 70\n        frameworks.clientUnit.start()                                                                                 // 71\n      })                                                                                                              // 72\n    }                                                                                                                 // 73\n  }                                                                                                                   // 74\n                                                                                                                      // 75\n                                                                                                                      // 76\n  // Server Unit                                                                                                      // 77\n  if (process.env.JASMINE_SERVER_UNIT === '1' && !isTestPackagesMode()) {                                             // 78\n    frameworks.serverUnit = new ServerUnitTestFramework()                                                             // 79\n                                                                                                                      // 80\n    if (isMainApp()) {                                                                                                // 81\n      frameworks.serverUnit.registerWithVelocity()                                                                    // 82\n      Velocity.startup(function () {                                                                                  // 83\n        frameworks.serverUnit.start()                                                                                 // 84\n      })                                                                                                              // 85\n    }                                                                                                                 // 86\n  }                                                                                                                   // 87\n                                                                                                                      // 88\n}                                                                                                                     // 89\n                                                                                                                      // 90\nJasmine.setKarmaConfig = function (config) {                                                                          // 91\n  if (frameworks.clientUnit && isMainApp()) {                                                                         // 92\n    frameworks.clientUnit.setUserKarmaConfig(config)                                                                  // 93\n  }                                                                                                                   // 94\n}                                                                                                                     // 95\n                                                                                                                      // 96\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sanjo:jasmine'] = {\n  Jasmine: Jasmine\n};\n\n})();\n","servePath":"/packages/sanjo_jasmine.js","sourceMap":{"version":3,"sources":["/packages/sanjo_jasmine/src/lib/log.js","/packages/sanjo_jasmine/src/lib/freeport.js","/packages/sanjo_jasmine/src/lib/lazyStart.js","/packages/sanjo_jasmine/src/lib/MirrorStarter.js","/packages/sanjo_jasmine/src/lib/parseStack.js","/packages/sanjo_jasmine/src/lib/JasmineTestFramework.js","/packages/sanjo_jasmine/src/lib/JasmineInterface.js","/packages/sanjo_jasmine/src/lib/VelocityTestReporter.js","/packages/sanjo_jasmine/src/server/integration/ServerIntegrationTestFramework.js","/packages/sanjo_jasmine/src/server/lib/mirror-info.js","/packages/sanjo_jasmine/src/server/lib/runFileInContext.js","/packages/sanjo_jasmine/src/server/lib/coffee-require.js","/packages/sanjo_jasmine/src/server/lib/file-loader.js","/packages/sanjo_jasmine/src/server/lib/load-order-sort.js","/packages/sanjo_jasmine/src/server/lib/mock-loader.js","/packages/sanjo_jasmine/src/server/unit/included-packages.js","/packages/sanjo_jasmine/src/server/unit/mock-generator.js","/packages/sanjo_jasmine/src/server/unit/ServerUnitTestFramework.js","/packages/sanjo_jasmine/src/client/unit/ClientUnitTestFramework.js","/packages/sanjo_jasmine/src/client/integration/ClientIntegrationTestFramework.js","/packages/sanjo_jasmine/src/server/lib/get-files.js","/packages/sanjo_jasmine/src/registerFrameworks.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACxvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACzrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACtzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/sanjo_jasmine.js","sourcesContent":["/* globals log: true */\n\nvar level = Meteor.isServer && process.env.VELOCITY_DEBUG ? 'debug' : 'info'\nif (Meteor.isServer && process.env.JASMINE_LOG_LEVEL) {\n  level = process.env.JASMINE_LOG_LEVEL\n}\nlog = loglevel.createPackageLogger('[sanjo:jasmine]', level)\n","/* globals freeport: true */\n\nfreeport = Meteor.wrapAsync(Npm.require('freeport'))\n","/* globals lazyStart: true */\n\n// Run the func when tests for the framework are available.\nlazyStart = function (frameworkName, func) {\n  var testsCursor = VelocityTestFiles.find(\n    {targetFramework: frameworkName}\n  )\n\n  if (testsCursor.count() > 0) {\n    func()\n  } else {\n    // Needed for `meteor --test`\n    log.debug('No tests for ' + frameworkName + ' found. Reporting completed.')\n    Meteor.call('velocity/reports/completed', {framework: frameworkName})\n    var testsObserver = testsCursor.observe({\n      added: _.once(function () {\n        // Delay the stop because added can be called before observe returns\n        Meteor.setTimeout(function () {\n          testsObserver.stop()\n        }, 5000)\n        func()\n      })\n    })\n  }\n}\n","/* globals MirrorStarter: true */\n\nMirrorStarter = function (testingFrameworkName) {\n  this.name = testingFrameworkName\n}\n\n_.extend(MirrorStarter.prototype, {\n\n  lazyStartMirror: function (mirrorOptions) {\n    var requestMirror = this.startMirror.bind(this, mirrorOptions)\n    lazyStart(this.name, requestMirror)\n  },\n\n  startMirror: function (mirrorOptions) {\n    var options = {\n      framework: this.name\n    }\n    _.extend(options, mirrorOptions)\n\n    if (!options.port) {\n      options.port = freeport()\n    }\n\n    log.debug('Starting mirror for ' + this.name)\n\n    // HACK: need to make sure after the proxy package adds the test files\n    Meteor.setTimeout(function() {\n      Meteor.call(\n        'velocity/mirrors/request',\n        options,\n        function (error) {\n          if (error) {\n            log.error(error)\n          }\n        }\n      )\n    }, 100)\n  },\n\n  startSelfMirror: function (mirrorOptions) {\n    mirrorOptions = mirrorOptions || {}\n    VelocityMirrors.upsert(\n      {framework: this.name},\n      {\n        framework: this.name,\n        mongoUrl: process.env.MONGO_URL,\n        host: process.env.ROOT_URL,\n        rootUrl: process.env.ROOT_URL,\n        rootUrlPath: mirrorOptions.rootUrlPath,\n        state: 'ready',\n        lastModified: Date.now()\n      }\n    )\n  }\n\n})\n","/* globals parseStack: true */\n\nparseStack = {};\n\n// Given an Error (eg, 'new Error'), return the stack associated with\n// that error as an array. More recently called functions appear first\n// and each element is an object with keys:\n// - file: filename as it appears in the stack\n// - line: 1-indexed line number in file, as a Number\n// - column: 1-indexed column in line, as a Number\n// - func: name of the function in the frame (maybe null)\n//\n// Accomplishes this by parsing the text representation of the stack\n// with regular expressions. Unlikely to work anywhere but v8.\n//\n// If a function on the stack has been marked with mark(), don't\n// return anything past that function. We call this the \"user portion\"\n// of the stack.\nparseStack.parse = function (err) {\n  var frames = err.stack.split('\\n');\n\n  frames.shift(); // at least the first line is the exception\n  var stop = false;\n  var ret = [];\n\n  _.each(frames, function (frame) {\n    if (stop)\n      return;\n    var m;\n    if (m =\n        frame.match(/^\\s*at\\s*((new )?.+?)\\s*(\\[as\\s*([^\\]]*)\\]\\s*)?\\((.*?)(:(\\d+))?(:(\\d+))?\\)\\s*$/)) {\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n      // \"    at My.Function (/path/to/myfile.js:532:39)\"\n      // \"    at Array.forEach (native)\"\n      // \"    at new My.Class (file.js:1:2)\"\n      // \"    at [object Object].main.registerCommand.name [as func] (meteor/tools/commands.js:1225:19)\"\n      // \"    at __top_mark__ [as matchErr] (meteor/tools/parse-stack.js:82:14)\"\n      //\n      // In that last example, it is not at all clear to me what the\n      // 'as' stanza refers to, but it is in m[3] if you find a use for it.\n      if (m[1].match(/(?:^|\\.)__top_mark__$/)) {\n        // m[1] could be Object.__top_mark__ or something like that\n        // depending on where exactly you put the function returned by\n        // markTop\n        ret = [];\n        return;\n      }\n      if (m[1].match(/(?:^|\\.)__bottom_mark__$/)) {\n        stop = true;\n        return;\n      }\n      ret.push({\n        func: m[1],\n        file: m[5],\n        line: m[7] ? +m[7] : undefined,\n        column: m[9] ? +m[9] : undefined\n      });\n    } else if (m = frame.match(/^\\s*at\\s+(.+?)(:(\\d+))?(:(\\d+))?\\s*$/)) {\n      // \"    at /path/to/myfile.js:532:39\"\n      ret.push({\n        file: m[1],\n        line: m[3] ? +m[3] : undefined,\n        column: m[5] ? +m[5] : undefined\n      });\n    } else if (m = frame.match(/^\\s*-\\s*-\\s*-\\s*-\\s*-\\s*$/)) {\n      // \"    - - - - -\"\n      // This is something added when you throw an Error through a future. The\n      // stack above the dashes is the stack of the 'wait' call; the stack below\n      // is the stack inside the fiber where the Error is originally\n      // constructed. Taking just the former seems good for now, but in the\n      // future we may want to sew them together (possibly in the opposite\n      // order?)\n      stop = true;\n    }\n  });\n\n  return ret;\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should stop: no frames earlier than this point will be\n// included in the parsed stack. Confusingly, in the argot of the\n// times, you'd say that frames \"higher up\" than this or \"above\" this\n// will not be returned, but you'd also say that those frames are \"at\n// the bottom of the stack\". Frames below the bottom are the outer\n// context of the framework running the user's code.\nparseStack.markBottom = function (f) {\n  return function __bottom_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should begin: no frames later than this point will be\n// included in the parsed stack. The opposite of markBottom().\n// Frames above the top are helper functions defined by the\n// framework and executed by user code whose internal behavior\n// should not be exposed.\nparseStack.markTop = function (f) {\n  return function __top_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n","/* globals JasmineTestFramework: true */\n\nJasmineTestFramework = function (options) {\n  if (!options || !options.name) {\n    throw new Error('[JasmineTestFramework] Missing required field \"name\"')\n  }\n\n  if (!options.regex) {\n    throw new Error('[JasmineTestFramework] Missing required field \"regex\"')\n  }\n\n  if (_.isUndefined(options.jasmineRequire)) {\n    throw new Error('[JasmineTestFramework] Missing required field \"jasmineRequire\"')\n  }\n\n  this.name = options.name\n  this.regex = options.regex\n  this.sampleTestGenerator = options.sampleTestGenerator\n  this.logPrefix = options.logPrefix || '[' + this.name + '] '\n  this.jasmineRequire = options.jasmineRequire\n\n  // load jasmine-velocity reporter\n  // [unit] mock packages\n\n}\n\n_.extend(JasmineTestFramework.prototype, {\n\n  //////////////////////////////////////////////////////////////////////\n  // Public functions\n  //\n\n  runTests: function () {},\n\n  //////////////////////////////////////////////////////////////////////\n  // Protected functions\n  //\n\n  registerWithVelocity: function () {\n    Velocity.registerTestingFramework(this.name, {\n      regex: this.regex,\n      sampleTestGenerator: this.sampleTestGenerator\n    })\n  }\n\n})\n","/* globals JasmineInterface: true */\n\nvar jasmineRequire = Meteor.isServer ?\n  Npm.require('jasmine-core') :\n  window.jasmineRequire\n\n/**\n * Object that will be directly put into the global context of the running\n * tests.\n *\n * ex.\n *     describe(...)   // rather than 'jasmine.describe'\n *     jasmine.clock   // rather than just 'clock'\n *\n * @class JasmineInterface\n * @constructor\n */\nJasmineInterface = function (options) {\n  if (!options || !options.jasmine) {\n    throw new Error('[JasmineInterface] Missing required field \"jasmine\"')\n  }\n\n  var env = options.jasmine.getEnv()\n\n  _.extend(this, jasmineRequire.interface(options.jasmine, env))\n\n  var markBottom = function (func) {\n    var boundFunction = parseStack.markBottom(func)\n    if (func.length > 0) {\n      // Async test\n      return function (done) {\n        return boundFunction.apply(this, arguments)\n      }\n    } else {\n      // Sync test\n      return function () {\n        return boundFunction.call(this)\n      }\n    }\n  }\n\n  _.forEach(['describe', 'xdescribe', 'fdescribe', 'it', 'fit'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[1] = markBottom(arguments[1])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n\n  _.forEach(['beforeEach', 'afterEach', 'beforeAll', 'afterAll'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[0] = markBottom(arguments[0])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n}\n","/* global\n   VelocityTestReporter: true\n */\n\n(function (Meteor) {\n  var noopTimer = {\n    start: function() {},\n    elapsed: function() { return 0 }\n  }\n\n  VelocityTestReporter = function VelocityTestReporter(options) {\n    var self = this,\n      timer = options.timer || noopTimer,\n      ddpParentConnection = options.ddpParentConnection,\n      ancestors = [],\n      _jasmineDone\n\n    self.mode = options.mode\n\n    var saveTestResult = Meteor.bindEnvironment(function saveTestResult(test) {\n      var result = {\n        id: 'jasmine:' + self.mode + ' | ' + test.id,\n        //async: test.async,\n        framework: options.framework,\n        name: test.description,\n        fullName: test.fullName,\n        pending: test.status === 'pending',\n        result: test.status,\n        duration: timer.elapsed(),\n        //timeOut: test._timeout,\n        //timedOut: test.timedOut,\n        ancestors: ancestors,\n        timestamp: new Date(),\n        isClient: !!options.isClient,\n        isServer: !!options.isServer\n      }\n      if (test.failedExpectations[0]){\n        var stack = removeStackTraceClutter(parseStack.parse({stack: filterStack(test.failedExpectations[0].stack)}))\n        var message = _.extend({\n          message: test.failedExpectations[0].message,\n          stack: stack\n        }, stack[0])\n        result.failureMessage = message.message\n        result.failureStackTrace = formatMessage([message])\n      }\n\n      if (Meteor.isClient || process.env.IS_MIRROR) {\n        ddpParentConnection.call('velocity/reports/submit', result, function (error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      } else {\n        Meteor.call('velocity/reports/submit', result, function(error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      }\n    }, function (error) {\n      console.error(error)\n    })\n\n    if (Meteor.isClient) {\n      _jasmineDone = function () {\n        ddpParentConnection.call(\n          'velocity/reports/completed',\n          {framework: options.framework},\n          function () {\n            if (options.onComplete) {\n              options.onComplete()\n            }\n          }\n        )\n      }\n    } else if (Meteor.isServer) {\n      _jasmineDone = Meteor.bindEnvironment(function jasmineDone() {\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      }, function (error) {\n        console.error(error)\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      })\n    }\n\n    self.jasmineDone = _jasmineDone\n\n    self.suiteStarted = function(result) {\n      ancestors.unshift(result.description)\n    }\n\n    self.suiteDone = function() {\n      ancestors.shift()\n    }\n\n    self.specStarted = function () {\n      timer.start()\n    }\n\n    self.specDone = function(result) {\n      var skipped = result.status === 'disabled' || result.status === 'pending'\n      if (!skipped) {\n        saveTestResult(result)\n      }\n    }\n\n    function filterStack(stack) {\n      var filteredStack = stack.split('\\n').filter(function(stackLine) {\n        return stackLine.indexOf('/node_modules/jasmine-core/') === -1;\n      }).join('\\n');\n      return filteredStack;\n    }\n\n    function removeStackTraceClutter(parsedStackTrace) {\n      return _.chain(parsedStackTrace)\n        .map(_.clone)\n        .map(function makeFileUrlRelative(frame) {\n          var rootUrl = Meteor.absoluteUrl();\n          if (frame.file.indexOf(rootUrl) === 0) {\n            frame.file = frame.file.substr(rootUrl.length);\n          }\n          return frame;\n        })\n        .map(function removeCacheBustingQuery(frame) {\n          frame.file = frame.file.replace(/\\?[a-z0-9]+$/, '');\n          return frame;\n        })\n        .map(function normalizePackageName(frame) {\n          frame.file = frame.file.replace('local-test:', '');\n          return frame;\n        })\n        .map(function removeUselessFunc(frame) {\n          if (frame.func === 'Object.<anonymous>') {\n            frame.func = null;\n          }\n          return frame;\n        })\n        .value();\n    }\n\n    function formatMessage(messages) {\n      var out = '';\n      var already = {};\n      var indent = '';\n\n      _.each(messages, function (message) {\n        var stack = message.stack || [];\n\n        var line = indent;\n        if (message.file) {\n          line+= message.file;\n          if (message.line) {\n            line += \":\" + message.line;\n            if (message.column) {\n              // XXX maybe exclude unless specifically requested (eg,\n              // for an automated tool that's parsing our output?)\n              line += \":\" + message.column;\n            }\n          }\n          line += \": \";\n        } else {\n          // not sure how to display messages without a filenanme.. try this?\n          line += \"error: \";\n        }\n        // XXX line wrapping would be nice..\n        line += message.message;\n        if (message.func && stack.length <= 1) {\n          line += \" (at \" + message.func + \")\";\n        }\n        line += \"\\n\";\n\n        if (stack.length > 1) {\n          _.each(stack, function (frame) {\n            // If a nontrivial stack trace (more than just the file and line\n            // we already complained about), print it.\n            var where = \"\";\n            if (frame.file) {\n              where += frame.file;\n              if (frame.line) {\n                where += \":\" + frame.line;\n                if (frame.column) {\n                  where += \":\" + frame.column;\n                }\n              }\n            }\n\n            if (! frame.func && ! where)\n              return; // that's a pretty lame stack frame\n\n            line += \"  at \";\n            if (frame.func)\n              line += frame.func + \" (\" + where + \")\\n\";\n            else\n              line += where + \"\\n\";\n          });\n          line += \"\\n\";\n        }\n\n        // Deduplicate messages (only when exact duplicates, including stack)\n        if (! (line in already)) {\n          out += line;\n          already[line] = true;\n        }\n      });\n\n      return out;\n    }\n  }\n\n})(Meteor)\n","/* globals Jasmine: true, ServerIntegrationTestFramework: true */\n\n/**\n * Design:\n * - Let Meteor load the tests\n * - Let Meteor restart the mirror when a file changed.\n *   This implicates only one test run per mirror run.\n */\n\nvar ComponentMocker = Npm.require('component-mocker');\nvar jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js');\n\nvar showOnTestDeprecationInfo = _.once(function () {\n  log.info('You no longer need to wrap your server integration tests in Jasmine.onTest ;-)')\n});\n\nMeteor.methods({\n  'jasmine/showOnTestDeprecationInfo': function () {\n    showOnTestDeprecationInfo()\n  }\n})\n\nvar registeredOnTestCallbacks = [];\n\nvar onTest = function (func) {\n  registeredOnTestCallbacks.push(func)\n}\n\n// Flag for deprecation message\nvar wasJasmineOnTestCalled = false;\n\nJasmine = Jasmine || {}\n// Need to bring it on the global scope manually\n// because this package has `debugOnly: true`\nglobal.Jasmine = Jasmine\n_.extend(Jasmine, {\n  // Deprecated\n  // You no longer need to wrap your tests in Jasmine.onTest.\n  onTest: function (func) {\n    onTest(func);\n    wasJasmineOnTestCalled = true;\n  }\n})\n\n\n// Postpone the execution of the test blocks until we run the tests.\n// This makes sure that the whole app is loaded before.\nvar jasmineGlobals = [\n  'describe',\n  'xdescribe',\n  'fdescribe',\n  'beforeEach',\n  'afterEach',\n  'beforeAll',\n  'afterAll'\n]\n\njasmineGlobals.forEach(function (jasmineGlobal) {\n  global[jasmineGlobal] = executeOnTestFactory(jasmineGlobal)\n})\n\nfunction executeOnTestFactory(funcName) {\n  return function (/* arguments */) {\n    var args = arguments\n    onTest(function () {\n      global[funcName].apply(global, args)\n    })\n  }\n}\n\n\nServerIntegrationTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-server-integration',\n    regex: '^tests/jasmine/server/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/server/integration/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/src/Player.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/src/Song.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: jasmineRequire\n  })\n\n  JasmineTestFramework.call(this, options)\n}\n\nServerIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ServerIntegrationTestFramework.prototype, {\n\n  startMirror: function () {\n    var mirrorOptions = {\n      port: this._getCustomPort(),\n      testsPath: 'jasmine/server/integration'\n    }\n\n    if (process.env.JASMINE_SERVER_MIRROR_APP_PATH) {\n      mirrorOptions.args = [\n        '--test-app-path', process.env.JASMINE_SERVER_MIRROR_APP_PATH\n      ]\n    }\n\n    var mirrorStarter = new MirrorStarter(this.name)\n    mirrorStarter.lazyStartMirror(mirrorOptions)\n  },\n\n  _getCustomPort: function () {\n    var customPort = parseInt(process.env.JASMINE_SERVER_MIRROR_PORT, 10)\n    if (!_.isNaN(customPort)) {\n      return customPort\n    }\n  },\n\n  setupEnvironment: function () {\n    var self = this\n\n    self.jasmine = self.jasmineRequire.core(self.jasmineRequire)\n    self.env = self.jasmine.getEnv({\n      setTimeout: Meteor.setTimeout.bind(Meteor),\n      clearTimeout: Meteor.clearTimeout.bind(Meteor)\n    })\n    var jasmineInterface = new JasmineInterface({jasmine: self.jasmine})\n\n    _.extend(global, {\n      MeteorStubs: MeteorStubs,\n      ComponentMocker: ComponentMocker\n    })\n\n    _.extend(global, jasmineInterface)\n\n    // Load mock helper\n    runCodeInContext(Assets.getText('src/lib/mock.js'), null)\n  },\n\n  start: function () {\n    var self = this;\n\n    log.debug('Starting Server Integration mode')\n\n    this._connectToMainApp()\n\n    if (isTestPackagesMode()) {\n      self.runTests();\n    } else {\n      var runServerIntegrationTests = _.once(function () {\n        serverIntegrationMirrorObserver.stop();\n        self.runTests();\n      });\n\n      var VelocityMirrors = new Meteor.Collection(\n        'velocityMirrors',\n        {connection: this.ddpParentConnection}\n      );\n      this.ddpParentConnection.subscribe('VelocityMirrors');\n\n      var serverIntegrationMirrorObserver = VelocityMirrors.find({\n        framework: self.name,\n        state: 'ready'\n      }).observe({\n        added: runServerIntegrationTests,\n        changed: runServerIntegrationTests\n      });\n    }\n  },\n\n  runTests: function () {\n    var self = this\n\n    log.debug('Running Server Integration test mode')\n\n    this.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})\n\n    frameworks.serverIntegration.setupEnvironment()\n\n    // Load specs that were wrapped with Jasmine.onTest\n    self._runOnTestCallbacks()\n\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Server Integration',\n      framework: self.name,\n      env: self.env,\n      onComplete: self._reportCompleted.bind(self),\n      timer: new self.jasmine.Timer(),\n      ddpParentConnection: self.ddpParentConnection,\n      isServer: true\n    })\n\n    self.env.addReporter(velocityReporter)\n    self.env.execute()\n  },\n\n  _runOnTestCallbacks: function () {\n    var self = this\n\n    if (wasJasmineOnTestCalled) {\n      self.ddpParentConnection.call('jasmine/showOnTestDeprecationInfo')\n    }\n\n    _.forEach(registeredOnTestCallbacks, function (callback) {\n      callback()\n    })\n  },\n\n  _connectToMainApp: function () {\n    if (!this.ddpParentConnection) {\n      if (isTestPackagesMode()) {\n        this.ddpParentConnection = Meteor\n      } else {\n        log.debug('Connect to parent app \"' + process.env.PARENT_URL + '\" via DDP')\n        this.ddpParentConnection = DDP.connect(process.env.PARENT_URL)\n      }\n    }\n  },\n\n  _reportCompleted: function () {\n    this.ddpParentConnection.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","Meteor.methods({\n  'jasmine/environmentInfo': function () {\n    var mirrorInfo = {\n      isMirror: isMirror(),\n      isTestPackagesMode: isTestPackagesMode(),\n      framework: process.env.FRAMEWORK\n    };\n\n    if (isTestPackagesMode()) {\n      mirrorInfo.parentUrl = process.env.ROOT_URL\n    } else {\n      mirrorInfo.parentUrl = process.env.PARENT_URL\n    }\n\n    return mirrorInfo\n  }\n})\n","/* globals runCodeInContext: true, runFileInContext: true */\n\nvar vm = Npm.require('vm'),\n    fs = Npm.require('fs'),\n    readFile = Meteor.wrapAsync(fs.readFile)\n\nrunCodeInContext = function (code, context, filename) {\n  try {\n    if (context) {\n      vm.runInContext(code, context, filename)\n    } else {\n      vm.runInThisContext(code, filename)\n    }\n  } catch(error) {\n    log.error('The code has syntax errors.', error)\n  }\n}\n\nrunFileInContext = function (filename, context) {\n  var code = readFile(filename, {encoding: 'utf8'})\n  try {\n    if (context) {\n      vm.runInContext(code, context, filename)\n    } else {\n      vm.runInThisContext(code, filename)\n    }\n  } catch(error) {\n    log.error('The file \"' + filename + '\" has syntax errors.', error)\n  }\n}\n","/* globals coffeeRequire: true */\n\n// coffeeRequire\nvar fs = Npm.require('fs'),\n    readFile = Meteor.wrapAsync(fs.readFile),\n    path = Npm.require('path')\n\n// The coffee-script compiler overrides Error.prepareStackTrace, mostly for the\n// use of coffee.run which we don't use.  This conflicts with the tool's use of\n// Error.prepareStackTrace to properly show error messages in linked code.  Save\n// the tool's one and restore it after coffee-script clobbers it.\nvar prepareStackTrace = Error.prepareStackTrace;\nvar coffee = Npm.require('coffee-script');\nError.prepareStackTrace = prepareStackTrace;\n\n/**\n * A coffee processor that can add source maps to compiled files\n *\n * This is a modified version of https://github.com/karma-runner/karma-coffee-preprocessor\n *\n * @method coffeePreprocessor\n * @param {Object} options to pass directly to the coffee-script compiler. See here\n */\nvar coffeePreprocessor = function (options, content, file, done) {\n  var result = null\n  var map\n  var dataUri\n\n  // Clone the options because coffee.compile mutates them\n  var opts = _.clone(options)\n\n  if (coffee.helpers.isLiterate(file.originalPath)) {\n    opts.literate = true;\n  }\n\n  try {\n    result = coffee.compile(content, opts)\n  } catch (e) {\n    /* jshint camelcase: false */\n    console.log('%s\\n  at %s:%d', e.message, file.originalPath, e.location.first_line)\n    /* jshint camelcase: true */\n    return done(e, null)\n  }\n\n  if (result.v3SourceMap) {\n    map = JSON.parse(result.v3SourceMap)\n    map.sources[0] = path.basename(file.originalPath)\n    map.sourcesContent = [content]\n    map.file = path.basename(file.originalPath.replace(/\\.(coffee|litcoffee|coffee\\.md)$/, '.js'))\n    file.sourceMap = map\n    dataUri = 'data:application/json;charset=utf-8;base64,' + new Buffer(JSON.stringify(map)).toString('base64')\n    done(null, result.js + '\\n//@ sourceMappingURL=' + dataUri + '\\n')\n  } else {\n    done(null, result.js || result)\n  }\n}\n\n/**\n * Load and execute a coffeescript file.\n *\n * @method coffeeRequire\n * @param {String} target Path to coffeescript file to load.\n * @param {Object} context the context to run the CoffeeScript code within.\n */\ncoffeeRequire = function (target, context) {\n  var file = {originalPath: target},\n      code = readFile(target, {encoding: 'utf8'})\n\n  coffeePreprocessor({\n    bare: true,\n    sourceMap: false\n  }, code, file, function (err, code) {\n    if (!err) {\n      runCodeInContext(code, context, target)\n    } else {\n      log.error(err)\n    }\n  })\n}\n","/* globals fileLoader: true, loadOrderSort: false */\n\nvar appPath = MeteorFilesHelpers.getAppPath(),\n    fs = Npm.require('fs'),\n    readDir = Meteor.wrapAsync(fs.readdir, fs),\n    path = Npm.require('path'),\n    glob = Meteor.wrapAsync(Npm.require('glob'))\n\nfileLoader = {\n  loadFiles: loadFiles,\n  loadFile: loadFile\n}\n\n/**\n * Loads a Meteor app's javascript and coffeescript files.\n * Matches Meteor core's load order.\n *\n * Excluded directories: private, public, programs, packages, tests\n *\n * @method loadFiles\n * @param {Object} context Global context\n * @param {Object} [options]\n * @param {Array|String} [options.ignoreDirs] Directories to ignore\n */\nfunction loadFiles(context, options) {\n  var files = getFiles(options)\n  files.sort(loadOrderSort([]))\n  log.debug('loadFiles', files)\n  _.each(files, function (file) {\n    loadFile(file, context)\n  })\n}\n\n/**\n * Get all files that should be loaded.\n * @param options\n * @returns {Array}\n */\nfunction getFiles(options) {\n  options = _.extend({\n    ignoreDirs: []\n  }, options)\n\n  var filePattern = '*.{js,coffee,litcoffee,coffee.md}';\n\n  // Find files in the root folder\n  var files = glob(filePattern,\n    {\n      cwd: appPath,\n      ignore: 'mobile-config.js'\n    }\n  )\n\n  // Find files in the sub folders that we don't ignore\n  var shouldIgnore = ['tests', 'private', 'public', 'programs', 'packages']\n  shouldIgnore = shouldIgnore.concat(options.ignoreDirs)\n\n  var relevantDirs = readdirNoDots(appPath)\n  relevantDirs = _.filter(relevantDirs, function (dir) {\n    return !_.contains(shouldIgnore, dir)\n  })\n\n  files = _.reduce(relevantDirs, function (files, dir) {\n    var newFiles = glob(filePattern,\n      {\n        cwd: path.join(appPath, dir),\n        matchBase: true\n      }\n    )\n    newFiles = _.map(newFiles, function (filePath) {\n      return path.join(dir, filePath);\n    });\n\n    return files.concat(newFiles)\n  }, files)\n\n  log.debug('getFiles has found the following files', files)\n\n  return files;\n}\n\nfunction readdirNoDots(path) {\n  var entries\n  try {\n    entries = readDir(path);\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return []\n    } else {\n      throw error;\n    }\n  }\n  return _.filter(entries, function (entry) {\n    return entry && entry[0] !== '.'\n  })\n}\n\n/**\n * Load and execute the target source file.\n * Will use node's 'require' if source file has a .js extension or\n * karma's coffeescript preprocessor if a .coffee/.litcoffee/.coffee.md extension\n *\n * @method loadFile\n * @param {String} target file path to load, relative to meteor app\n * @param {Object} context the context to load files within.\n *        If omitted the file will run in this context.\n */\nfunction loadFile (target, context) {\n  var filename = path.resolve(appPath, target),\n      ext\n\n  if (fs.existsSync(filename)) {\n    ext = path.extname(filename)\n    if ('.js' === ext) {\n      log.debug('loading source file:', filename)\n      runFileInContext(filename, context)\n    } else if (/\\.(coffee|litcoffee|coffee\\.md)$/.test(target)) {\n      log.debug('loading source file:', filename)\n      coffeeRequire(filename, context)\n    }\n  } else {\n    log.error(\n      'loadFile could not load \"' + filename + '\". ' +\n      'The file does not exist.'\n    );\n  }\n}\n","var path = Npm.require('path')\n\n/**\n * Returns a sort comparator to order files into Meteor app load order.\n * templateExtensions should be a list of extensions like 'html'\n * which should be loaded before other extensions.\n *\n * source: Meteor core file\n *   https://github.com/meteor/meteor/blob/devel/tools/packages.js#L47-L97\n *   May 5, 2014\n *\n * @method loadOrderSort\n * @param {Array} [templateExtensions} Optional array of extensions which will\n *                be loaded first.\n * @return {Number} Either 1 or -1 depending on sort result\n */\nloadOrderSort = function (templateExtensions) {\n  var templateExtnames = {}\n  _.each(templateExtensions, function (extension) {\n    templateExtnames['.' + extension] = true\n  })\n\n  return function (a, b) {\n    // XXX MODERATELY SIZED HACK --\n    // push template files ahead of everything else. this is\n    // important because the user wants to be able to say\n    //   Template.foo.events = { ... }\n    // in a JS file and not have to worry about ordering it\n    // before the corresponding .html file.\n    //\n    // maybe all of the templates should go in one file?\n    var isTemplate_a = _.has(templateExtnames, path.extname(a))\n    var isTemplate_b = _.has(templateExtnames, path.extname(b))\n    if (isTemplate_a !== isTemplate_b) {\n      return (isTemplate_a ? -1 : 1)\n    }\n\n    // main.* loaded last\n    var ismain_a = (path.basename(a).indexOf('main.') === 0)\n    var ismain_b = (path.basename(b).indexOf('main.') === 0)\n    if (ismain_a !== ismain_b) {\n      return (ismain_a ? 1 : -1)\n    }\n\n    // /lib/ loaded first\n    var islib_a = (a.indexOf(path.sep + 'lib' + path.sep) !== -1 ||\n                   a.indexOf('lib' + path.sep) === 0)\n    var islib_b = (b.indexOf(path.sep + 'lib' + path.sep) !== -1 ||\n                   b.indexOf('lib' + path.sep) === 0)\n    if (islib_a !== islib_b) {\n      return (islib_a ? -1 : 1)\n    }\n\n    // deeper paths loaded first.\n    var len_a = a.split(path.sep).length\n    var len_b = b.split(path.sep).length\n    if (len_a !== len_b) {\n      return (len_a < len_b ? 1 : -1)\n    }\n\n    // otherwise alphabetical\n    return (a < b ? -1 : 1)\n  }\n}\n","/* globals mockLoader: true */\n\nvar path = Npm.require('path'),\n    glob = Npm.require('glob')\n\nmockLoader = {\n  loadUserMocks: function (context) {\n    var basePath = path.join(Velocity.getAppPath(), 'tests/jasmine/server/unit')\n    this._getMockFiles(basePath).forEach(function (file) {\n      log.debug('loading mock file:', file)\n      fileLoader.loadFile(file, context)\n    })\n  },\n\n  _getMockFiles: function (basePath) {\n    var filenamePattern = '**/*-{stub,stubs,mock,mocks}.{js,coffee,litcoffee,coffee.md}'\n    var files = glob.sync(filenamePattern, {cwd: basePath})\n    files = files.map(function (file) {\n      return path.join(basePath, file)\n    })\n    return files\n  }\n}\n","/* globals packagesToIncludeInUnitTests: true */\n\n// Packages that should be included in unit test mode\n// and therefore should not be mocked\npackagesToIncludeInUnitTests = [\n  'lodash',\n  'stevezhu:lodash',\n  'erasaur:meteor-lodash',\n  'underscore',\n  'digilord:sugarjs',\n  'momentjs:moment',\n  'mrt:moment',\n  'rzymek:moment',\n  'xolvio:webdriver'\n]\n\nvar customIncludedPackages =\n  process.env.JASMINE_PACKAGES_TO_INCLUDE_IN_UNIT_TESTS\nif (customIncludedPackages) {\n  packagesToIncludeInUnitTests = packagesToIncludeInUnitTests\n    .concat(customIncludedPackages.split(','))\n}\n","/* globals MockGenerator: true */\n\n// goal: write all package metadata to file so we can create\n// the package mocks when running out-of-context\n//\n// Used to mock packages for the server unit test runner\n\nvar ComponentMocker = Npm.require('component-mocker'),\n    fs = Npm.require('fs'),\n    path = Npm.require('path'),\n    mkdirp = Npm.require('mkdirp'),\n    writeFile = Meteor.wrapAsync(fs.writeFile),\n    packageMetadata = {}\n\nfunction shouldIgnorePackage (packageName) {\n  var packagesToIgnore = [\n    'meteor',\n    'minifiers',\n    // Collides with expect of Jasmine\n    'spacejamio:chai',\n    'practicalmeteor:chai'\n  ]\n    .concat(getEnvironmentIgnoredPackages())\n    .concat(packagesToIncludeInUnitTests)\n\n  return _.contains(packagesToIgnore, packageName)\n}\n\nfunction getEnvironmentIgnoredPackages() {\n  var packagesToIgnore = process.env.JASMINE_IGNORE_PACKAGES\n  if (packagesToIgnore) {\n    return packagesToIgnore.split(',').map(function (packageName) {\n      return packageName.trim()\n    });\n  } else {\n    return []\n  }\n}\n\nfunction shouldIgnoreExport (exportName) {\n  var exportsToIgnore = ['MongoInternals', 'NpmModuleMongodb', 'WebAppInternals']\n\n  return _.contains(exportsToIgnore, exportName)\n}\n\nMockGenerator = {\n  // Mocks should only be generated once per app run\n  // because the app restarts when a server file has changed.\n  generateMocks: _.once(function () {\n\n    /*\n     Package = {\n     \"meteor\": {\n     \"Meteor\": {\n     // ...\n     }\n     }\n     \"roles\": {\n     \"Roles\": {...}\n     },\n     \"iron-router\": {\n     \"Router\": {...}\n     }\n     }\n     */\n\n    _.forEach(Package, function (packageObj, name) {\n      if (!shouldIgnorePackage(name)) {\n        var packageExports = {}\n\n        _.forEach(packageObj, function (packageExportObj, packageExportName) {\n          if (!shouldIgnoreExport(packageExportName)) {\n            try {\n              packageExports[packageExportName] = ComponentMocker.getMetadata(packageExportObj)\n            } catch (error) {\n              console.error('Could not mock the export ' + packageExportName +\n              ' of the package ' + name + '. Will continue anyway.', error, error.stack)\n            }\n          }\n        })\n\n        packageMetadata[name] = packageExports\n      }\n    })\n\n    // Initially load the global stubs for app code\n    writeMetadataToFile(\n      packageMetadata,\n      Assets.getText('src/server/unit/package-stubs.js.tpl'),\n      'tests/jasmine/server/unit/package-stubs.js'\n    )\n\n    // Mocks the globals after each tests\n    writeMetadataToFile(\n      packageMetadata,\n      Assets.getText('src/server/unit/metadata-reader.js.tpl'),\n      'tests/jasmine/server/unit/packageMocksSpec.js'\n    )\n\n    function writeMetadataToFile(metadata, template, destination) {\n      var output = _.template(template, {\n        METADATA: JSON.stringify(metadata, null, '  ')\n      })\n\n      var outputPath = path.join(MeteorFilesHelpers.getAppPath(), destination)\n      mkdirp.sync(path.dirname(outputPath))\n      writeFile(outputPath, output, {encoding: 'utf8'})\n    }\n  })\n}\n","/* globals ServerUnitTestFramework: true */\n\nvar path = Npm.require('path'),\n    fs = Npm.require('fs'),\n    vm = Npm.require('vm'),\n    Future = Npm.require(path.join('fibers', 'future')),\n    ComponentMocker = Npm.require('component-mocker'),\n    jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js')\n\nServerUnitTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-server-unit',\n    regex: '^tests/jasmine/server/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/server/unit/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/src/Player.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/src/Song.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    //regex: 'jasmine/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    jasmineRequire: jasmineRequire\n  })\n\n  JasmineTestFramework.call(this, options)\n}\n\nServerUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ServerUnitTestFramework.prototype, {\n\n  _getTestFilesCursor: function () {\n    return VelocityTestFiles.find({\n      targetFramework: this.name,\n      relativePath: {\n        $nin: [\n          'tests/jasmine/server/unit/packageMocksSpec.js',\n          'tests/jasmine/server/unit/package-stubs.js'\n        ]\n      }\n    })\n  },\n\n  start: function () {\n    var testFilesCursor = this._getTestFilesCursor()\n\n    var _runTests  = _.debounce(Meteor.bindEnvironment(this.runTests.bind(this),\n      '[JasmineTestFramework.start.runTests]'), 200)\n\n    this._observer = testFilesCursor.observe({\n      added: _runTests,\n      changed: _runTests,\n      removed: _runTests\n    });\n\n    // Always run tests at least once.\n    // The CI runner needs a completed event.\n    _runTests()\n  },\n\n  runTests: function executeSpecsUnitMode() {\n    Meteor.call('velocity/reports/reset', {framework: this.name})\n\n    if (this._getTestFilesCursor().count() === 0) {\n      this._reportCompleted()\n      return\n    }\n\n    MockGenerator.generateMocks()\n\n    var jasmine = this.jasmineRequire.core(this.jasmineRequire)\n    var jasmineInterface = new JasmineInterface({jasmine: jasmine})\n\n    var testFilePath = path.join(Velocity.getTestsPath(), 'jasmine', 'server', 'unit')\n\n    var globalContext = {\n      process: process,\n      console: console,\n      Buffer: Buffer,\n      Npm: Npm,\n      MeteorStubs: MeteorStubs,\n      ComponentMocker: ComponentMocker,\n      // Private state data that only we use\n      __jasmine: {\n        Meteor: {\n          settings: Meteor.settings\n        }\n      }\n    }\n\n    var getAsset = function (assetPath, encoding, callback) {\n      var fut;\n      if (! callback) {\n        fut = new Future();\n        callback = fut.resolver();\n      }\n      var _callback = Package.meteor.Meteor.bindEnvironment(function (err, result) {\n        if (result && ! encoding) {\n          // Sadly, this copies in Node 0.10.\n          result = new Uint8Array(result);\n        }\n        callback(err, result);\n      }, function (e) {\n        console.log('Exception in callback of getAsset', e.stack);\n      });\n\n      var filePath = path.join(Velocity.getAppPath(), 'private', assetPath);\n      fs.readFile(filePath, encoding, _callback);\n      if (fut) {\n        return fut.wait();\n      }\n    };\n\n    globalContext.__jasmine.Assets = {\n      getText: function (assetPath, callback) {\n        return getAsset(assetPath, 'utf8', callback);\n      },\n      getBinary: function (assetPath, callback) {\n        return getAsset(assetPath, undefined, callback);\n      }\n    };\n\n    // Add all available packages that should be included\n    packagesToIncludeInUnitTests.forEach(function (packageName) {\n      var packageGlobals = Package[packageName]\n      if (packageGlobals) {\n        _.forEach(packageGlobals, function (packageGlobal, packageGlobalName) {\n          if (!globalContext[packageGlobalName]) {\n            globalContext[packageGlobalName] = packageGlobal\n          }\n        })\n      }\n    })\n\n    globalContext.global = globalContext\n    _.extend(globalContext, jasmineInterface)\n\n    // Need to install Meteor here so the app code files don't throw an error\n    // when loaded\n    MeteorStubs.install(globalContext)\n\n    globalContext.Meteor.isServer = true\n    globalContext.Meteor.isClient = false\n    globalContext.Meteor.settings = Meteor.settings\n    globalContext.Meteor.npmRequire = Meteor.npmRequire\n    globalContext.Assets = globalContext.__jasmine.Assets\n\n    var context = vm.createContext(globalContext)\n\n    // Load mock helper\n    runCodeInContext(\n      Assets.getText('src/lib/mock.js'),\n      context\n    )\n\n    // load stubs\n    try {\n      mockLoader.loadUserMocks(context)\n    }\n    catch (ex) {\n      console.log('Error loading stubs', ex.message, ex.stack)\n    }\n\n    // load Meteor app source files prior to running tests\n    try {\n      fileLoader.loadFiles(context, {ignoreDirs: ['client']})\n    }\n    catch (ex) {\n      console.log('Error loading app files', ex.message, ex.stack)\n    }\n\n    // load MeteorStubs before and after each test\n    runCodeInContext(\n      Assets.getText('src/server/lib/contextSpec.js'),\n      context\n    )\n\n    // Load specs\n    var specs = getSpecFiles(testFilePath)\n    for (var i = 0; i < specs.length; i++) {\n      fileLoader.loadFile(specs[i], context)\n    }\n\n    var env = jasmine.getEnv()\n\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Server Unit',\n      framework: this.name,\n      env: env,\n      onComplete: this._reportCompleted.bind(this),\n      timer: new jasmine.Timer(),\n      isServer: true\n    })\n\n    env.addReporter(velocityReporter)\n    env.execute()\n  },\n\n  _reportCompleted: function () {\n    Meteor.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","/* globals ClientUnitTestFramework: true, __meteor_runtime_config__: false */\n\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\nvar mkdirp = Npm.require('mkdirp');\n\nClientUnitTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-client-unit',\n    regex: '^tests/jasmine/client/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/client/unit/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/src/Player.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/src/Song.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: null\n  })\n\n  this.userKarmaConfig = {}\n\n  JasmineTestFramework.call(this, options)\n}\n\nClientUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ClientUnitTestFramework.prototype, {\n\n  start: function () {\n    lazyStart(this.name, this.startKarma.bind(this))\n  },\n\n  startKarma: function () {\n    var self = this\n\n    self._restartKarma();\n\n    // Listen for message 'refresh:client' that signals incoming 'refreshable' autoupdate\n    process.on('message', Meteor.bindEnvironment(function (message) {\n      log.debug('client-refresh noticed, stopping Karma')\n      if (message && message.refresh === 'client') {\n        // Listen for message 'on-listening' that signals that the application has been rebuild\n        // and is ready to serve\n        // * This callback *must* be registered here in 'on-message-refresh-client'\n        // * because onListening is a short-lived registration that is removed after firing once\n        WebApp.onListening(function () {\n          log.debug('WebApp has been updated. Updating Karma config file and starting it up.');\n          self._restartKarma();\n        });\n      }\n    }));\n  },\n\n  _restartKarma: function () {\n    var self = this\n\n    var karmaConfig = this.getKarmaConfig();\n    if (Karma.isRunning(self.name)) {\n      Karma.reloadFileList(self.name, karmaConfig.files)\n    } else {\n      self._generateContextHtml()\n      self._generateDebugHtml()\n      Karma.start(self.name, karmaConfig)\n    }\n  },\n\n  _generateContextHtml: function () {\n    this._generateKarmaHtml('context')\n  },\n\n  _generateDebugHtml: function () {\n    this._generateKarmaHtml('debug')\n  },\n\n  _generateKarmaHtml: function (type) {\n    var fileName = type + '.html'\n    var htmlPath = this._getKarmaHtmlPath(type);\n    mkdirp.sync(path.dirname(htmlPath))\n    var headHtml = this._getHeadHtml() || ''\n    var contextHtml = Assets.getText('src/client/unit/assets/' + fileName)\n      .replace('%HEAD%', headHtml)\n    fs.writeFileSync(htmlPath, contextHtml, {encoding: 'utf8'})\n  },\n\n  _getKarmaHtmlPath: function (type) {\n    var fileName = type + '.html'\n    return path.join(\n      MeteorFilesHelpers.getAppPath(),\n      '.meteor/local/karma/',\n      this.name, fileName\n    )\n  },\n\n  setUserKarmaConfig: function (config) {\n    var blacklist = [\n      'autoWatch', 'autoWatchBatchDelay',\n      'basePath', 'browserDisconnectTimeout', 'browserDisconnectTolerance',\n      'browserNoActivityTimeout', 'browsers', 'captureTimeout', 'client',\n      'exclude', 'files', 'frameworks', 'hostname', 'port', 'proxies', 'singleRun',\n      'urlRoot'\n    ]\n    this.userKarmaConfig = _.omit(config, blacklist)\n  },\n\n  getKarmaConfig: function () {\n    var files = [];\n    var proxies = {};\n\n    this._addPreAppFiles(files, proxies)\n    this._addPackageFiles(files, proxies)\n    this._addHelperFiles(files, proxies)\n    this._addStubFiles(files, proxies)\n    this._addAppFiles(files, proxies)\n    this._addTestFiles(files, proxies)\n\n    var launcherPlugins = {\n      'Chrome': 'karma-chrome-launcher',\n      'HiddenChrome': 'karma-chrome-launcher',\n      'ChromeCanary': 'karma-chrome-launcher',\n      'Firefox': 'karma-firefox-launcher',\n      'PhantomJS': 'karma-phantomjs-launcher',\n      'SauceLabs': 'karma-sauce-launcher'\n    }\n\n    var browser = process.env.JASMINE_BROWSER || 'HiddenChrome';\n    var launcherPlugin = launcherPlugins[browser];\n\n    var basePath = Velocity.getAppPath()\n\n    /* jshint camelcase: false */\n    var startOptions = _.extend({}, this.userKarmaConfig, {\n      port: 9876,\n      basePath: basePath,\n      frameworks: ['jasmine'],\n      browsers: [browser],\n      customLaunchers: {\n        HiddenChrome: {\n          base: 'Chrome',\n          flags: ['--window-size=1024,768', '--window-position=-1024,0'],\n        }\n      },\n      plugins: [\n        'karma-jasmine',\n        launcherPlugin,\n        'karma-coffee-preprocessor'\n      ],\n      files: files,\n      proxies: proxies,\n      client: {\n        contextFile: this._getKarmaHtmlPath('context'),\n        debugFile: this._getKarmaHtmlPath('debug'),\n        args: [_.defaults({\n          // Make those values constant to avoid unnecessary Karma restarts\n          autoupdateVersion: 'unknown',\n          autoupdateVersionRefreshable: 'unknown',\n          autoupdateVersionCordova: 'none'\n\n        }, __meteor_runtime_config__)]\n      },\n      browserDisconnectTimeout: 10000,\n      browserNoActivityTimeout: 15000,\n\n      preprocessors: {\n        '**/*.{coffee,litcoffee,coffee.md}': ['coffee']\n      },\n\n      coffeePreprocessor: {\n        options: {\n          bare: true,\n          sourceMap: true\n        },\n        transformPath: function (path) {\n          return path.replace(/\\.(coffee|litcoffee|coffee\\\\.md)$/, '.js');\n        }\n      }\n    })\n    /* jshint camelcase: true */\n\n    if (this.userKarmaConfig.plugins) {\n      startOptions.plugins = startOptions.plugins.concat(this.userKarmaConfig.plugins)\n    }\n\n    if (this.userKarmaConfig.preprocessors) {\n      _.extend(startOptions.preprocessors, this.userKarmaConfig.preprocessors)\n    }\n\n    return startOptions\n  },\n\n  _addPreAppFiles: function (files) {\n    files.push(\n      this._getAssetPath('src/client/unit/assets/__meteor_runtime_config__.js')\n    )\n  },\n\n  _addPackageFiles: function (files, proxies) {\n    _.chain(WebApp.clientPrograms['web.browser'].manifest)\n      .filter(function (file) {\n        return file.path.indexOf('packages/') === 0\n      })\n      .filter(function (file) {\n        var ignoredFiles = [\n          'packages/sanjo_jasmine.js',\n          'packages/velocity_html-reporter.js'\n        ]\n        return !_.contains(ignoredFiles, file.path)\n      })\n      .forEach(function (file) {\n        var mockedFiles = [\n          'packages/autoupdate.js',\n          'packages/reload.js',\n          'packages/meteorhacks_fast-render.js'\n        ]\n\n        if (_.contains(mockedFiles, file.path)) {\n          files.push(this._getAssetPath('src/client/unit/assets/mocks/' + file.path))\n        } else {\n          this._addFile(file, files, proxies)\n        }\n      }, this)\n      .value()\n  },\n\n  _addAppFiles: function (files, proxies) {\n    return _.chain(WebApp.clientPrograms['web.browser'].manifest)\n      .filter(function (file) {\n        return file.path.indexOf('packages/') !== 0\n      })\n      .forEach(function (file) {\n        this._addFile(file, files, proxies)\n      }, this)\n      .value()\n  },\n\n  _addFile: function (file, files, proxies) {\n    var basePath = '.meteor/local/build/programs/web.browser/'\n    files.push({\n      pattern: basePath + file.path,\n      watched: false,\n      included: _.contains(['js', 'css'], file.type),\n      served: true\n    });\n\n    if (file.type === 'asset') {\n      proxies[file.url] = '/base/' + basePath + file.path\n    }\n  },\n\n  _addHelperFiles: function (files) {\n    files.push(\n      this._getAssetPath('src/client/unit/assets/jasmine-jquery.js'),\n      this._getAssetPath('.npm/package/node_modules/component-mocker/index.js'),\n      this._getAssetPath('src/lib/mock.js'),\n      this._getAssetPath('src/lib/VelocityTestReporter.js'),\n      this._getAssetPath('src/client/unit/assets/adapter.js'),\n      '.meteor/local/build/programs/server/assets/packages/velocity_meteor-stubs/index.js',\n      this._getAssetPath('src/client/unit/assets/helpers/iron_router.js')\n    )\n  },\n\n  _addStubFiles: function (files) {\n    files.push(\n      'tests/jasmine/client/unit/**/*-+(stub|stubs|mock|mocks).+(js|coffee|litcoffee|coffee.md)'\n    )\n  },\n\n  _addTestFiles: function (files) {\n    // Use a match pattern directly.\n    // That allows Karma to detect changes and rerun the tests.\n    files.push(\n      'tests/jasmine/client/unit/**/*.+(js|coffee|litcoffee|coffee.md)'\n    )\n  },\n\n  _getAssetPath: function (fileName) {\n    var assetsPath = '.meteor/local/build/programs/server/assets/packages/sanjo_jasmine/'\n    return assetsPath + fileName;\n  },\n\n  _getHeadHtml: function () {\n    try {\n      return fs.readFileSync(\n        path.join(Velocity.getAppPath(), '.meteor/local/build/programs/web.browser/head.html'),\n        {encoding: 'utf8'}\n      );\n    } catch (error) {\n      return null;\n    }\n  }\n});\n","/* globals ClientIntegrationTestFramework: true */\n\nClientIntegrationTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-client-integration',\n    regex: '^tests/jasmine/client/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/client/integration/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Player.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Song.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: Meteor.isClient ? window.jasmineRequire : null\n  })\n\n  JasmineTestFramework.call(this, options)\n\n  if (Meteor.isClient) {\n    this._setup()\n  }\n}\n\nClientIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ClientIntegrationTestFramework.prototype, {\n\n  _setup: function () {\n    this.jasmine = this.jasmineRequire.core(this.jasmineRequire)\n    this.jasmineInterface = new JasmineInterface({jasmine: this.jasmine})\n    _.extend(window, this.jasmineInterface)\n  },\n\n  startMirror: function () {\n    var self = this;\n    var mirrorStarter = new MirrorStarter(this.name)\n    var mirrorOptions = {}\n\n    if (isTestPackagesMode()) {\n      mirrorStarter.startSelfMirror(mirrorOptions)\n\n      process.on('message', Meteor.bindEnvironment(function (message) {\n        if (message && message.refresh === 'client') {\n          // Listen for message 'on-listening' that signals that the application has been rebuild\n          // and is ready to serve\n          // * This callback *must* be registered here in 'on-message-refresh-client'\n          // * because onListening is a short-lived registration that is removed after firing once\n          WebApp.onListening(function () {\n            Meteor.call('velocity/reports/reset', {framework: self.name})\n          })\n        }\n      }))\n    } else {\n      _.extend(mirrorOptions, {\n        port: this._getCustomPort(),\n        testsPath: 'jasmine/client/integration'\n      })\n\n      if (process.env.JASMINE_CLIENT_MIRROR_APP_PATH) {\n        mirrorOptions.args = [\n          '--test-app-path', process.env.JASMINE_CLIENT_MIRROR_APP_PATH\n        ]\n      }\n\n      mirrorStarter.lazyStartMirror(mirrorOptions)\n    }\n  },\n\n  _getCustomPort: function () {\n    var customPort = parseInt(process.env.JASMINE_MIRROR_PORT, 10)\n    if (!_.isNaN(customPort)) {\n      return customPort\n    }\n  },\n\n  shouldRunTests: function (mirrorInfo) {\n    return mirrorInfo.isTestPackagesMode ||\n           (mirrorInfo.isMirror && mirrorInfo.framework === this.name)\n  },\n\n  runTests: function () {\n    var self = this\n\n    Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {\n      if (error) {\n        throw error\n      } else if (self.shouldRunTests(mirrorInfo)) {\n        Meteor.defer(function() {\n          log.info('Running Jasmine tests')\n\n          var ddpConnection = mirrorInfo.isTestPackagesMode ?\n            Meteor :\n            DDP.connect(mirrorInfo.parentUrl)\n          window.initJasmineJquery()\n          self._executeClientTests(ddpConnection)\n        })\n      } else if (!mirrorInfo.isMirror && !self.inIframe()) {\n        self.createMirrorIframe()\n      }\n    })\n  },\n\n  inIframe: function() {\n    try {\n      return window.self !== window.top;\n    } catch (error) {\n      return true;\n    }\n  },\n\n  createMirrorIframe: function () {\n    var self = this\n    var iframeId = 'jasmine-mirror'\n\n    var getMirrorUrl = function (mirrorInfo) {\n      return mirrorInfo.rootUrl;\n    }\n\n    var insertMirrorIframe = _.once(function (mirrorInfo) {\n      var iframe = document.createElement('iframe')\n      iframe.id = iframeId\n      iframe.src = getMirrorUrl(mirrorInfo);\n      // Make the iFrame invisible\n      iframe.style.display = 'block'\n      iframe.style.position = 'absolute'\n      iframe.style.width = 0\n      iframe.style.height = 0\n      iframe.style.border = 0\n      document.body.appendChild(iframe)\n    })\n\n    var updateMirrorIframe = function (mirrorInfo) {\n      var iframe = document.getElementById(iframeId)\n      if (iframe) {\n        iframe.src = getMirrorUrl(mirrorInfo)\n      } else {\n        insertMirrorIframe(mirrorInfo)\n      }\n    }\n\n    Tracker.autorun(function () {\n      var mirror = VelocityMirrors.findOne(\n        {framework: self.name, state: 'ready'},\n        {fields: {state: 1, rootUrl: 1, lastModified: 1}}\n      )\n      if (mirror) {\n        updateMirrorIframe(mirror)\n      }\n    })\n  },\n\n  _executeClientTests: function (ddpConnection) {\n    var self = this;\n\n    window.ddpParentConnection = ddpConnection\n\n    window.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})\n\n    /**\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n     */\n    self.jasmineRequire.html(self.jasmine)\n\n    /**\n     * Create the Jasmine environment. This is used to run all specs in a project.\n     */\n    var env = self.jasmine.getEnv()\n\n    /**\n     * ## Runner Parameters\n     *\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n     */\n\n    var queryString = new self.jasmine.QueryString({\n      getWindowLocation: function () {\n        return window.location\n      }\n    })\n\n    var catchingExceptions = queryString.getParam('catch')\n    env.catchExceptions(typeof catchingExceptions === 'undefined' ? true : catchingExceptions)\n\n    /**\n     * ## Reporters\n     */\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Client Integration',\n      framework: self.name,\n      env: env,\n      timer: new self.jasmine.Timer(),\n      ddpParentConnection: window.ddpParentConnection,\n      isClient: true\n    })\n\n    /**\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n     */\n    env.addReporter(self.jasmineInterface.jsApiReporter)\n    env.addReporter(velocityReporter)\n\n    /**\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.\n     */\n    var specFilter = new self.jasmine.HtmlSpecFilter({\n      filterString: function () {\n        return queryString.getParam('spec')\n      }\n    })\n\n    env.specFilter = function (spec) {\n      return specFilter.matches(spec.getFullName())\n    }\n\n    /**\n     * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n     */\n    window.setTimeout = window.setTimeout\n    window.setInterval = window.setInterval\n    window.clearTimeout = window.clearTimeout\n    window.clearInterval = window.clearInterval\n\n    env.execute()\n  },\n\n  _reportResults: function () {\n    Meteor.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","/* globals getSpecFiles: true */\n\nvar fs = Npm.require('fs')\n\nfunction getFiles(dir, matcher) {\n  var allFiles = []\n  var stat;\n\n  try {\n    stat = fs.statSync(dir)\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      console.error(error)\n    }\n    return allFiles;\n  }\n\n  if (stat.isFile() && dir.match(matcher)) {\n    allFiles.push(dir)\n  } else {\n    var files = fs.readdirSync(dir)\n    for (var i = 0, len = files.length; i < len; ++i) {\n      var filename = dir + '/' + files[i]\n      if (fs.statSync(filename).isFile() && filename.match(matcher)) {\n        allFiles.push(filename)\n      } else if (fs.statSync(filename).isDirectory()) {\n        var subfiles = getFiles(filename, matcher)\n        allFiles.push.apply(allFiles, subfiles)\n      }\n    }\n  }\n  return allFiles\n}\n\ngetSpecFiles = function (dir) {\n  return getFiles(dir, new RegExp('\\\\.(js|coffee|litcoffee|coffee\\\\.md)$'))\n}\n","/* globals frameworks: true */\n\nframeworks = {}\n\nisMirror = function () {\n  return !!process.env.IS_MIRROR;\n}\n\nisMainApp = function () {\n  return !isMirror();\n}\n\nisTestPackagesMode = function () {\n  return !!process.env.VELOCITY_TEST_PACKAGES;\n}\n\nshouldRunFramework = function (frameworkName) {\n  return process.env.FRAMEWORK === frameworkName || isTestPackagesMode();\n}\n\nif (process.env.VELOCITY !== '0') {\n\n  // Server Integration\n  if (process.env.JASMINE_SERVER_INTEGRATION !== '0') {\n    frameworks.serverIntegration = new ServerIntegrationTestFramework()\n\n    if (isMainApp()) {\n      frameworks.serverIntegration.registerWithVelocity()\n      if (!isTestPackagesMode()) {\n        Velocity.startup(function () {\n          frameworks.serverIntegration.startMirror()\n        })\n      }\n    }\n\n    if (shouldRunFramework('jasmine-server-integration')) {\n      Meteor.startup(function () {\n        // Queue our function after all other normal startup functions\n        Meteor.startup(function () {\n          Meteor.defer(function () {\n            frameworks.serverIntegration.start()\n          })\n        })\n      })\n    }\n  }\n\n\n  // Client Integration\n  if (process.env.JASMINE_CLIENT_INTEGRATION !== '0') {\n    frameworks.clientIntegration = new ClientIntegrationTestFramework()\n\n    if (isMainApp()) {\n      frameworks.clientIntegration.registerWithVelocity()\n      Velocity.startup(function () {\n        // In test packages mode this does not really create a new mirror\n        // It just registers the app as mirror.\n        frameworks.clientIntegration.startMirror()\n      })\n    }\n  }\n\n\n  // Client Unit\n  if (process.env.JASMINE_CLIENT_UNIT !== '0' && !isTestPackagesMode()) {\n    frameworks.clientUnit = new ClientUnitTestFramework()\n\n    if (isMainApp()) {\n      frameworks.clientUnit.registerWithVelocity()\n      Velocity.startup(function () {\n        frameworks.clientUnit.start()\n      })\n    }\n  }\n\n\n  // Server Unit\n  if (process.env.JASMINE_SERVER_UNIT === '1' && !isTestPackagesMode()) {\n    frameworks.serverUnit = new ServerUnitTestFramework()\n\n    if (isMainApp()) {\n      frameworks.serverUnit.registerWithVelocity()\n      Velocity.startup(function () {\n        frameworks.serverUnit.start()\n      })\n    }\n  }\n\n}\n\nJasmine.setKarmaConfig = function (config) {\n  if (frameworks.clientUnit && isMainApp()) {\n    frameworks.clientUnit.setUserKarmaConfig(config)\n  }\n}\n"]}}]