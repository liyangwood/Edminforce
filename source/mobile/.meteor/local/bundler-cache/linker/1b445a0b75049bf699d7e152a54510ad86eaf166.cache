[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Roles = Package['alanning:roles'].Roles;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar moment = Package['momentjs:moment'].moment;\nvar FastRender = Package['meteorhacks:fast-render'].FastRender;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar React = Package['react-runtime'].React;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\n\n/* Package-scope variables */\nvar IH, h;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ihealth_utils/lib/declarations.js                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\n/**                                                                                                                 // 2\n * Declaration                                                                                                      // 3\n */                                                                                                                 // 4\nIH = {                                                                                                              // 5\n  Callbacks: {},                                                                                                    // 6\n  Coll: {},                                                                                                         // 7\n  RC: {},                                                                                                           // 8\n  Schema: {},                                                                                                       // 9\n}                                                                                                                   // 10\n                                                                                                                    // 11\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ihealth_utils/lib/callbacks.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/*                                                                                                                  // 1\n  Ref: Telescope.callbacks [ https://github.com/TelescopeJS/Telescope ]                                             // 2\n  TODO: organize and customize; will move to a separate package                                                     // 3\n */                                                                                                                 // 4\n                                                                                                                    // 5\n/*                                                                                                                  // 6\nCallback hooks provide an easy way to add extra steps to common operations.                                         // 7\n@namespace IH.Callbacks                                                                                             // 8\n */                                                                                                                 // 9\n                                                                                                                    // 10\n/*                                                                                                                  // 11\nAdd a callback function to a hook                                                                                   // 12\n@param {String} hook - The name of the hook                                                                         // 13\n@param {Function} callback - The callback function                                                                  // 14\n */                                                                                                                 // 15\n                                                                                                                    // 16\nIH.Callbacks.Add = function(hook, callback) {                                                                       // 17\n  if (typeof IH.Callbacks[hook] === \"undefined\") {                                                                  // 18\n    IH.Callbacks[hook] = [];                                                                                        // 19\n  }                                                                                                                 // 20\n  return IH.Callbacks[hook].push(callback);                                                                         // 21\n};                                                                                                                  // 22\n                                                                                                                    // 23\n                                                                                                                    // 24\n/*                                                                                                                  // 25\nRemove a callback from a hook                                                                                       // 26\n@param {string} hook - The name of the hook                                                                         // 27\n@param {string} functionName - The name of the function to remove                                                   // 28\n */                                                                                                                 // 29\n                                                                                                                    // 30\nIH.Callbacks.Remove = function(hookName, callbackName) {                                                            // 31\n  return IH.Callbacks[hookName] = _.reject(IH.Callbacks[hookName], function(callback) {                             // 32\n    return callback.name === callbackName;                                                                          // 33\n  });                                                                                                               // 34\n};                                                                                                                  // 35\n                                                                                                                    // 36\n                                                                                                                    // 37\n/*                                                                                                                  // 38\nSuccessively run all of a hook's callbacks on an item                                                               // 39\n@param {String} hook - The name of the hook                                                                         // 40\n@param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              // 41\n@param {Object} [constant] - An optional constant that will be passed along to each callback                        // 42\n@returns {Object} Returns the item after it's been through all the callbacks for this hook                          // 43\n */                                                                                                                 // 44\n                                                                                                                    // 45\nIH.Callbacks.Run = function(hook, item, constant) {                                                                 // 46\n  var callbacks = IH.Callbacks[hook];                                                                               // 47\n  if (typeof callbacks !== \"undefined\" && !!callbacks.length) {                                                     // 48\n    return callbacks.reduce((function(result, callback) {                                                           // 49\n      return callback(result, constant);                                                                            // 50\n    }), item);                                                                                                      // 51\n  } else {                                                                                                          // 52\n    return item;                                                                                                    // 53\n  }                                                                                                                 // 54\n};                                                                                                                  // 55\n                                                                                                                    // 56\n                                                                                                                    // 57\n/*                                                                                                                  // 58\nSuccessively run all of a hook's callbacks on an item, in async mode (only works on server)                         // 59\n@param {String} hook - The name of the hook                                                                         // 60\n@param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              // 61\n@param {Object} [constant] - An optional constant that will be passed along to each callback                        // 62\n */                                                                                                                 // 63\n                                                                                                                    // 64\nIH.Callbacks.RunAsync = function(hook, item, constant) {                                                            // 65\n  var callbacks = IH.Callbacks[hook];                                                                               // 66\n  if (Meteor.isServer && typeof callbacks !== \"undefined\" && !!callbacks.length) {                                  // 67\n    return Meteor.defer(function() {                                                                                // 68\n      return callbacks.forEach(function(callback) {                                                                 // 69\n        return callback(item, constant);                                                                            // 70\n      });                                                                                                           // 71\n    });                                                                                                             // 72\n  } else {                                                                                                          // 73\n    return item;                                                                                                    // 74\n  }                                                                                                                 // 75\n}                                                                                                                   // 76\n                                                                                                                    // 77\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ihealth_utils/lib/utils.js                                                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\n/**                                                                                                                 // 2\n * Helper Functions for both Client & Server                                                                        // 3\n */                                                                                                                 // 4\nh = {                                                                                                               // 5\n  ltrim: function(str){                                                                                             // 6\n    return str.replace(/^\\s+/,\"\")                                                                                   // 7\n  },                                                                                                                // 8\n  rtrim: function(str){                                                                                             // 9\n    return str.replace(/\\s+$/,\"\")                                                                                   // 10\n  },                                                                                                                // 11\n  time_format: function(time, return_full){                                                                         // 12\n    var read = moment(time).format(\"h:mm a\")                                                                        // 13\n    if (!return_full) return read                                                                                   // 14\n                                                                                                                    // 15\n    return {                                                                                                        // 16\n      time: read,                                                                                                   // 17\n                                                                                                                    // 18\n      // TODO:                                                                                                      // 19\n      // Replace days_past with \"past\" and add W/D/Y in a differnet key                                             // 20\n      days_past: moment().diff( moment(time), \"days\")                                                               // 21\n    }                                                                                                               // 22\n  },                                                                                                                // 23\n  getPlatform: function(test) {                                                                                     // 24\n    var platform = (Meteor.isCordova && device.platform ? device.platform : \"web\").toLowerCase()                    // 25\n    return test ? platform==test : platform                                                                         // 26\n  },                                                                                                                // 27\n  nk: function(object, key) {                                                                                       // 28\n\t\tif( !_.isString(key)) return false                                                                                // 29\n                                                                                                                    // 30\n\t\tvar key = key.replace(/\\[(\\w+)\\]/g, '.$1') // convert indexes to properties                                       // 31\n\t\tkey = key.replace(/^\\./, '') // strip a leading dot                                                               // 32\n                                                                                                                    // 33\n\t\tif (key.indexOf('.')<=0)                                                                                          // 34\n\t\t\treturn object[ key] || null                                                                                      // 35\n                                                                                                                    // 36\n\t\tvar split = key.split('.')                                                                                        // 37\n\t\twhile (split.length) {                                                                                            // 38\n\t\t\tvar n = split.shift()                                                                                            // 39\n\t\t\tif (_.isObject(object) && n in object)                                                                           // 40\n\t\t\t\tobject = object[n]                                                                                              // 41\n\t\t\telse                                                                                                             // 42\n\t\t\t\treturn null                                                                                                     // 43\n\t\t}                                                                                                                 // 44\n    return object                                                                                                   // 45\n\t},                                                                                                                 // 46\n  random_string: function(len){                                                                                     // 47\n\t\tvar do_rand = function(){                                                                                         // 48\n\t\t\treturn (0|Math.random()*9e6).toString(36)                                                                        // 49\n\t\t}                                                                                                                 // 50\n                                                                                                                    // 51\n\t\tif(isNaN(len))                                                                                                    // 52\n\t\t\treturn do_rand()                                                                                                 // 53\n                                                                                                                    // 54\n\t\tvar rand = ''                                                                                                     // 55\n\t\tfor( var i = Math.floor(len/4); i>=0; i-- ){                                                                      // 56\n\t\t\trand += do_rand()                                                                                                // 57\n\t\t}                                                                                                                 // 58\n\t\treturn rand.substr(0,len)                                                                                         // 59\n\t},                                                                                                                 // 60\n  to_read: function(str) {                                                                                          // 61\n    if (!_.isString(str)) return                                                                                    // 62\n    return str.toLowerCase().trim().replace(/ /g, \"-\")                                                              // 63\n  },                                                                                                                // 64\n  capitalize: function(str) {                                                                                       // 65\n    return str.charAt(0).toUpperCase() + str.slice(1)                                                               // 66\n  },                                                                                                                // 67\n}                                                                                                                   // 68\n                                                                                                                    // 69\nif (Meteor.isClient){                                                                                               // 70\n  // ##                                                                                                             // 71\n  // Client Only Helper Functions                                                                                   // 72\n                                                                                                                    // 73\n  /**                                                                                                               // 74\n   * Get all the device informations from Session                                                                   // 75\n   */                                                                                                               // 76\n  h.getDevices = function(type){                                                                                    // 77\n    var devices = Session.get(\"devices\") || { bluetooth: false }                                                    // 78\n    return type ? devices[type] : devices                                                                           // 79\n  }                                                                                                                 // 80\n  /**                                                                                                               // 81\n   * Save device informations to Session                                                                            // 82\n   */                                                                                                               // 83\n  h.saveDevices = function(session, connected){                                                                     // 84\n    var cur = Session.get(\"devices\") || { bluetooth: false }                                                        // 85\n    var compare = _.clone(cur)                                                                                      // 86\n                                                                                                                    // 87\n    if (!_.isObject(session)) session = {}                                                                          // 88\n    if (connected) session.bluetooth = true                                                                         // 89\n    _.extend(cur,session)                                                                                           // 90\n                                                                                                                    // 91\n    if (!_.isEqual(compare,cur))                                                                                    // 92\n      Session.set(\"devices\", cur) // Cur is Extended                                                                // 93\n  }                                                                                                                 // 94\n\t/*                                                                                                                 // 95\n\t * Wait until a condition returns true before doing a function.                                                    // 96\n\t * @check = A function that determines whether the check interval should continue                                  // 97\n\t * @completeFunc = Function to run after check is true                                                             // 98\n\t * @delay = Delay between each check interval                                                                      // 99\n\t * @timeout = Give up after this timeout duration if check still fails                                             // 100\n\t */                                                                                                                // 101\n\th.wait_for = function(check, completeFunc, delay, timeout) {                                                       // 102\n\t\t// if the check returns true, execute onComplete immediately                                                      // 103\n\t\tif (check()) {                                                                                                    // 104\n\t\t  completeFunc()                                                                                                  // 105\n\t\t  return                                                                                                          // 106\n\t\t}                                                                                                                 // 107\n\t\tvar onComplete = function(){                                                                                      // 108\n\t\t\tMeteor.setTimeout( function(){                                                                                   // 109\n\t\t\t\tcompleteFunc()                                                                                                  // 110\n\t\t\t},100)                                                                                                           // 111\n\t\t}                                                                                                                 // 112\n\t\tif (!delay) delay=100                                                                                             // 113\n\t\tvar count = 1 // This incremends every loop, creating a longer interval periods in case something went wrong      // 114\n\t\tvar intervalPointer = null                                                                                        // 115\n                                                                                                                    // 116\n\t\t// if after timeout milliseconds function doesn't return true, abort                                              // 117\n\t\tvar timeoutPointer = timeout ?                                                                                    // 118\n\t\t\tMeteor.setTimeout(function() {                                                                                   // 119\n\t\t\t  Meteor.clearTimeout(intervalPointer)                                                                           // 120\n\t\t\t}, timeout) : null                                                                                               // 121\n                                                                                                                    // 122\n\t\tvar interval_func = function() {                                                                                  // 123\n\t\t\tif (!check())                                                                                                    // 124\n\t\t\t\tintervalPointer = Meteor.setTimeout(interval_func, delay)                                                       // 125\n\t\t\telse {                                                                                                           // 126\n\t\t\t\t// if the check returned true, means we're done here. clear the interval and the timeout and execute onComplete\n\t\t\t\tif (timeoutPointer) Meteor.clearTimeout(timeoutPointer)                                                         // 128\n\t\t\t\tonComplete()                                                                                                    // 129\n\t\t\t}                                                                                                                // 130\n\t\t}                                                                                                                 // 131\n\t\tintervalPointer = Meteor.setTimeout(interval_func, delay)                                                         // 132\n\t}                                                                                                                  // 133\n  h.returnComponent = function(tmpl, props){                                                                        // 134\n    if (!React) return null                                                                                         // 135\n    var props = _.isObject(props) ? props : null                                                                    // 136\n    if (_.isObject(tmpl)) {                                                                                         // 137\n      if (props)                                                                                                    // 138\n        return React.cloneElement(tmpl, props)                                                                      // 139\n      return tmpl                                                                                                   // 140\n    } else if (_.isString(tmpl) && window[tmpl])                                                                    // 141\n      return React.createElement(window[tmpl], props)                                                               // 142\n    else if (RC)                                                                                                    // 143\n      return React.createElement(RC.NotFound)                                                                       // 144\n  }                                                                                                                 // 145\n  h.serializeForm = function(form){                                                                                 // 146\n\t\tvar formData = _.map($(form).serializeArray(), function(data) {                                                   // 147\n      const name = _.isString(data.name) ? data.name.trim() : data.name                                             // 148\n      const value = _.isString(data.value) ? data.value.trim() : data.value                                         // 149\n\t\t\treturn [name, value]                                                                                             // 150\n\t\t})                                                                                                                // 151\n\t\treturn _.object(formData)                                                                                         // 152\n\t}                                                                                                                  // 153\n  h.getDomPos = function(el, args){                                                                                 // 154\n    var defs = {                                                                                                    // 155\n      reverse: false,                                                                                               // 156\n      xOffset: 0,                                                                                                   // 157\n      yOffset: 0,                                                                                                   // 158\n    }                                                                                                               // 159\n    if (_.isObject(args)) _.defaults(args, defs); else args = defs;                                                 // 160\n                                                                                                                    // 161\n    var pos = el.getBoundingClientRect()                                                                            // 162\n                                                                                                                    // 163\n    if (args.reverse) {                                                                                             // 164\n      pos.x = window.innerWidth - pos.left - pos.width - args.xOffset                                               // 165\n      pos.y = window.innerHeight - pos.top - args.yOffset                                                           // 166\n    } else {                                                                                                        // 167\n      pos.x = pos.left + pos.width + args.xOffset                                                                   // 168\n      pos.y = pos.top + args.yOffset                                                                                // 169\n    }                                                                                                               // 170\n                                                                                                                    // 171\n    return pos                                                                                                      // 172\n  }                                                                                                                 // 173\n  h.strToArray = function(str){                                                                                     // 174\n    if (!_.isString(str))                                                                                           // 175\n      return str                                                                                                    // 176\n    return _.filter( str.replace(/,/g, \" \").split(\" \"), function(t){                                                // 177\n      return t.length                                                                                               // 178\n    })                                                                                                              // 179\n  }                                                                                                                 // 180\n  h.checkColorClass = function(css){                                                                                // 181\n    return _.isString(css) && _.contains([\"brand-light\",\"brand\",\"brand1\",\"brand2\",\"brand3\",\"white\",\"dark\",\"gray\",\"blue\",\"green\",\"light\",\"stable\"], css.trim())\n  }                                                                                                                 // 183\n}                                                                                                                   // 184\n                                                                                                                    // 185\n                                                                                                                    // 186\nif (Meteor.isServer){                                                                                               // 187\n  // ##                                                                                                             // 188\n  // Server Only Helper Functions                                                                                   // 189\n}                                                                                                                   // 190\n                                                                                                                    // 191\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ihealth:utils'] = {\n  h: h,\n  IH: IH\n};\n\n})();\n","servePath":"/packages/ihealth_utils.js","sourceMap":{"version":3,"sources":["/packages/ihealth_utils/lib/declarations.js","/packages/ihealth_utils/lib/callbacks.js","/packages/ihealth_utils/lib/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yfile":"/packages/ihealth_utils.js","sourcesContent":["\n/**\n * Declaration\n */\nIH = {\n  Callbacks: {},\n  Coll: {},\n  RC: {},\n  Schema: {},\n}\n","/*\n  Ref: Telescope.callbacks [ https://github.com/TelescopeJS/Telescope ]\n  TODO: organize and customize; will move to a separate package\n */\n\n/*\nCallback hooks provide an easy way to add extra steps to common operations.\n@namespace IH.Callbacks\n */\n\n/*\nAdd a callback function to a hook\n@param {String} hook - The name of the hook\n@param {Function} callback - The callback function\n */\n\nIH.Callbacks.Add = function(hook, callback) {\n  if (typeof IH.Callbacks[hook] === \"undefined\") {\n    IH.Callbacks[hook] = [];\n  }\n  return IH.Callbacks[hook].push(callback);\n};\n\n\n/*\nRemove a callback from a hook\n@param {string} hook - The name of the hook\n@param {string} functionName - The name of the function to remove\n */\n\nIH.Callbacks.Remove = function(hookName, callbackName) {\n  return IH.Callbacks[hookName] = _.reject(IH.Callbacks[hookName], function(callback) {\n    return callback.name === callbackName;\n  });\n};\n\n\n/*\nSuccessively run all of a hook's callbacks on an item\n@param {String} hook - The name of the hook\n@param {Object} item - The post, comment, modifier, etc. on which to run the callbacks\n@param {Object} [constant] - An optional constant that will be passed along to each callback\n@returns {Object} Returns the item after it's been through all the callbacks for this hook\n */\n\nIH.Callbacks.Run = function(hook, item, constant) {\n  var callbacks = IH.Callbacks[hook];\n  if (typeof callbacks !== \"undefined\" && !!callbacks.length) {\n    return callbacks.reduce((function(result, callback) {\n      return callback(result, constant);\n    }), item);\n  } else {\n    return item;\n  }\n};\n\n\n/*\nSuccessively run all of a hook's callbacks on an item, in async mode (only works on server)\n@param {String} hook - The name of the hook\n@param {Object} item - The post, comment, modifier, etc. on which to run the callbacks\n@param {Object} [constant] - An optional constant that will be passed along to each callback\n */\n\nIH.Callbacks.RunAsync = function(hook, item, constant) {\n  var callbacks = IH.Callbacks[hook];\n  if (Meteor.isServer && typeof callbacks !== \"undefined\" && !!callbacks.length) {\n    return Meteor.defer(function() {\n      return callbacks.forEach(function(callback) {\n        return callback(item, constant);\n      });\n    });\n  } else {\n    return item;\n  }\n}\n","\n/**\n * Helper Functions for both Client & Server\n */\nh = {\n  ltrim: function(str){\n    return str.replace(/^\\s+/,\"\")\n  },\n  rtrim: function(str){\n    return str.replace(/\\s+$/,\"\")\n  },\n  time_format: function(time, return_full){\n    var read = moment(time).format(\"h:mm a\")\n    if (!return_full) return read\n\n    return {\n      time: read,\n\n      // TODO:\n      // Replace days_past with \"past\" and add W/D/Y in a differnet key\n      days_past: moment().diff( moment(time), \"days\")\n    }\n  },\n  getPlatform: function(test) {\n    var platform = (Meteor.isCordova && device.platform ? device.platform : \"web\").toLowerCase()\n    return test ? platform==test : platform\n  },\n  nk: function(object, key) {\n\t\tif( !_.isString(key)) return false\n\n\t\tvar key = key.replace(/\\[(\\w+)\\]/g, '.$1') // convert indexes to properties\n\t\tkey = key.replace(/^\\./, '') // strip a leading dot\n\n\t\tif (key.indexOf('.')<=0)\n\t\t\treturn object[ key] || null\n\n\t\tvar split = key.split('.')\n\t\twhile (split.length) {\n\t\t\tvar n = split.shift()\n\t\t\tif (_.isObject(object) && n in object)\n\t\t\t\tobject = object[n]\n\t\t\telse\n\t\t\t\treturn null\n\t\t}\n    return object\n\t},\n  random_string: function(len){\n\t\tvar do_rand = function(){\n\t\t\treturn (0|Math.random()*9e6).toString(36)\n\t\t}\n\n\t\tif(isNaN(len))\n\t\t\treturn do_rand()\n\n\t\tvar rand = ''\n\t\tfor( var i = Math.floor(len/4); i>=0; i-- ){\n\t\t\trand += do_rand()\n\t\t}\n\t\treturn rand.substr(0,len)\n\t},\n  to_read: function(str) {\n    if (!_.isString(str)) return\n    return str.toLowerCase().trim().replace(/ /g, \"-\")\n  },\n  capitalize: function(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  },\n}\n\nif (Meteor.isClient){\n  // ##\n  // Client Only Helper Functions\n\n  /**\n   * Get all the device informations from Session\n   */\n  h.getDevices = function(type){\n    var devices = Session.get(\"devices\") || { bluetooth: false }\n    return type ? devices[type] : devices\n  }\n  /**\n   * Save device informations to Session\n   */\n  h.saveDevices = function(session, connected){\n    var cur = Session.get(\"devices\") || { bluetooth: false }\n    var compare = _.clone(cur)\n\n    if (!_.isObject(session)) session = {}\n    if (connected) session.bluetooth = true\n    _.extend(cur,session)\n\n    if (!_.isEqual(compare,cur))\n      Session.set(\"devices\", cur) // Cur is Extended\n  }\n\t/*\n\t * Wait until a condition returns true before doing a function.\n\t * @check = A function that determines whether the check interval should continue\n\t * @completeFunc = Function to run after check is true\n\t * @delay = Delay between each check interval\n\t * @timeout = Give up after this timeout duration if check still fails\n\t */\n\th.wait_for = function(check, completeFunc, delay, timeout) {\n\t\t// if the check returns true, execute onComplete immediately\n\t\tif (check()) {\n\t\t  completeFunc()\n\t\t  return\n\t\t}\n\t\tvar onComplete = function(){\n\t\t\tMeteor.setTimeout( function(){\n\t\t\t\tcompleteFunc()\n\t\t\t},100)\n\t\t}\n\t\tif (!delay) delay=100\n\t\tvar count = 1 // This incremends every loop, creating a longer interval periods in case something went wrong\n\t\tvar intervalPointer = null\n\n\t\t// if after timeout milliseconds function doesn't return true, abort\n\t\tvar timeoutPointer = timeout ?\n\t\t\tMeteor.setTimeout(function() {\n\t\t\t  Meteor.clearTimeout(intervalPointer)\n\t\t\t}, timeout) : null\n\n\t\tvar interval_func = function() {\n\t\t\tif (!check())\n\t\t\t\tintervalPointer = Meteor.setTimeout(interval_func, delay)\n\t\t\telse {\n\t\t\t\t// if the check returned true, means we're done here. clear the interval and the timeout and execute onComplete\n\t\t\t\tif (timeoutPointer) Meteor.clearTimeout(timeoutPointer)\n\t\t\t\tonComplete()\n\t\t\t}\n\t\t}\n\t\tintervalPointer = Meteor.setTimeout(interval_func, delay)\n\t}\n  h.returnComponent = function(tmpl, props){\n    if (!React) return null\n    var props = _.isObject(props) ? props : null\n    if (_.isObject(tmpl)) {\n      if (props)\n        return React.cloneElement(tmpl, props)\n      return tmpl\n    } else if (_.isString(tmpl) && window[tmpl])\n      return React.createElement(window[tmpl], props)\n    else if (RC)\n      return React.createElement(RC.NotFound)\n  }\n  h.serializeForm = function(form){\n\t\tvar formData = _.map($(form).serializeArray(), function(data) {\n      const name = _.isString(data.name) ? data.name.trim() : data.name\n      const value = _.isString(data.value) ? data.value.trim() : data.value\n\t\t\treturn [name, value]\n\t\t})\n\t\treturn _.object(formData)\n\t}\n  h.getDomPos = function(el, args){\n    var defs = {\n      reverse: false,\n      xOffset: 0,\n      yOffset: 0,\n    }\n    if (_.isObject(args)) _.defaults(args, defs); else args = defs;\n\n    var pos = el.getBoundingClientRect()\n\n    if (args.reverse) {\n      pos.x = window.innerWidth - pos.left - pos.width - args.xOffset\n      pos.y = window.innerHeight - pos.top - args.yOffset\n    } else {\n      pos.x = pos.left + pos.width + args.xOffset\n      pos.y = pos.top + args.yOffset\n    }\n\n    return pos\n  }\n  h.strToArray = function(str){\n    if (!_.isString(str))\n      return str\n    return _.filter( str.replace(/,/g, \" \").split(\" \"), function(t){\n      return t.length\n    })\n  }\n  h.checkColorClass = function(css){\n    return _.isString(css) && _.contains([\"brand-light\",\"brand\",\"brand1\",\"brand2\",\"brand3\",\"white\",\"dark\",\"gray\",\"blue\",\"green\",\"light\",\"stable\"], css.trim())\n  }\n}\n\n\nif (Meteor.isServer){\n  // ##\n  // Server Only Helper Functions\n}\n"]}}]