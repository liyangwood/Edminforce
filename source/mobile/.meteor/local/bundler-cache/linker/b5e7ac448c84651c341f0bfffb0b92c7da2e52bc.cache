[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar page, qs, Triggers, Router, Group, Route, FlowRouter;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client.browserify.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser                                                                                  // 2\n                                                                                                                      // 3\nvar process = module.exports = {};                                                                                    // 4\nvar queue = [];                                                                                                       // 5\nvar draining = false;                                                                                                 // 6\nvar currentQueue;                                                                                                     // 7\nvar queueIndex = -1;                                                                                                  // 8\n                                                                                                                      // 9\nfunction cleanUpNextTick() {                                                                                          // 10\n    draining = false;                                                                                                 // 11\n    if (currentQueue.length) {                                                                                        // 12\n        queue = currentQueue.concat(queue);                                                                           // 13\n    } else {                                                                                                          // 14\n        queueIndex = -1;                                                                                              // 15\n    }                                                                                                                 // 16\n    if (queue.length) {                                                                                               // 17\n        drainQueue();                                                                                                 // 18\n    }                                                                                                                 // 19\n}                                                                                                                     // 20\n                                                                                                                      // 21\nfunction drainQueue() {                                                                                               // 22\n    if (draining) {                                                                                                   // 23\n        return;                                                                                                       // 24\n    }                                                                                                                 // 25\n    var timeout = setTimeout(cleanUpNextTick);                                                                        // 26\n    draining = true;                                                                                                  // 27\n                                                                                                                      // 28\n    var len = queue.length;                                                                                           // 29\n    while(len) {                                                                                                      // 30\n        currentQueue = queue;                                                                                         // 31\n        queue = [];                                                                                                   // 32\n        while (++queueIndex < len) {                                                                                  // 33\n            currentQueue[queueIndex].run();                                                                           // 34\n        }                                                                                                             // 35\n        queueIndex = -1;                                                                                              // 36\n        len = queue.length;                                                                                           // 37\n    }                                                                                                                 // 38\n    currentQueue = null;                                                                                              // 39\n    draining = false;                                                                                                 // 40\n    clearTimeout(timeout);                                                                                            // 41\n}                                                                                                                     // 42\n                                                                                                                      // 43\nprocess.nextTick = function (fun) {                                                                                   // 44\n    var args = new Array(arguments.length - 1);                                                                       // 45\n    if (arguments.length > 1) {                                                                                       // 46\n        for (var i = 1; i < arguments.length; i++) {                                                                  // 47\n            args[i - 1] = arguments[i];                                                                               // 48\n        }                                                                                                             // 49\n    }                                                                                                                 // 50\n    queue.push(new Item(fun, args));                                                                                  // 51\n    if (queue.length === 1 && !draining) {                                                                            // 52\n        setTimeout(drainQueue, 0);                                                                                    // 53\n    }                                                                                                                 // 54\n};                                                                                                                    // 55\n                                                                                                                      // 56\n// v8 likes predictible objects                                                                                       // 57\nfunction Item(fun, array) {                                                                                           // 58\n    this.fun = fun;                                                                                                   // 59\n    this.array = array;                                                                                               // 60\n}                                                                                                                     // 61\nItem.prototype.run = function () {                                                                                    // 62\n    this.fun.apply(null, this.array);                                                                                 // 63\n};                                                                                                                    // 64\nprocess.title = 'browser';                                                                                            // 65\nprocess.browser = true;                                                                                               // 66\nprocess.env = {};                                                                                                     // 67\nprocess.argv = [];                                                                                                    // 68\nprocess.version = ''; // empty string to avoid regexp issues                                                          // 69\nprocess.versions = {};                                                                                                // 70\n                                                                                                                      // 71\nfunction noop() {}                                                                                                    // 72\n                                                                                                                      // 73\nprocess.on = noop;                                                                                                    // 74\nprocess.addListener = noop;                                                                                           // 75\nprocess.once = noop;                                                                                                  // 76\nprocess.off = noop;                                                                                                   // 77\nprocess.removeListener = noop;                                                                                        // 78\nprocess.removeAllListeners = noop;                                                                                    // 79\nprocess.emit = noop;                                                                                                  // 80\n                                                                                                                      // 81\nprocess.binding = function (name) {                                                                                   // 82\n    throw new Error('process.binding is not supported');                                                              // 83\n};                                                                                                                    // 84\n                                                                                                                      // 85\n// TODO(shtylman)                                                                                                     // 86\nprocess.cwd = function () { return '/' };                                                                             // 87\nprocess.chdir = function (dir) {                                                                                      // 88\n    throw new Error('process.chdir is not supported');                                                                // 89\n};                                                                                                                    // 90\nprocess.umask = function() { return 0; };                                                                             // 91\n                                                                                                                      // 92\n},{}],2:[function(require,module,exports){                                                                            // 93\n(function (process){                                                                                                  // 94\n  /* globals require, module */                                                                                       // 95\n                                                                                                                      // 96\n  'use strict';                                                                                                       // 97\n                                                                                                                      // 98\n  /**                                                                                                                 // 99\n   * Module dependencies.                                                                                             // 100\n   */                                                                                                                 // 101\n                                                                                                                      // 102\n  var pathtoRegexp = require('path-to-regexp');                                                                       // 103\n                                                                                                                      // 104\n  /**                                                                                                                 // 105\n   * Module exports.                                                                                                  // 106\n   */                                                                                                                 // 107\n                                                                                                                      // 108\n  module.exports = page;                                                                                              // 109\n                                                                                                                      // 110\n  /**                                                                                                                 // 111\n   * Detect click event                                                                                               // 112\n   */                                                                                                                 // 113\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';               // 114\n                                                                                                                      // 115\n  /**                                                                                                                 // 116\n   * To work properly with the URL                                                                                    // 117\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API                               // 118\n   */                                                                                                                 // 119\n                                                                                                                      // 120\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);                     // 121\n                                                                                                                      // 122\n  /**                                                                                                                 // 123\n   * Perform initial dispatch.                                                                                        // 124\n   */                                                                                                                 // 125\n                                                                                                                      // 126\n  var dispatch = true;                                                                                                // 127\n                                                                                                                      // 128\n                                                                                                                      // 129\n  /**                                                                                                                 // 130\n   * Decode URL components (query string, pathname, hash).                                                            // 131\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.                                     // 132\n   */                                                                                                                 // 133\n  var decodeURLComponents = true;                                                                                     // 134\n                                                                                                                      // 135\n  /**                                                                                                                 // 136\n   * Base path.                                                                                                       // 137\n   */                                                                                                                 // 138\n                                                                                                                      // 139\n  var base = '';                                                                                                      // 140\n                                                                                                                      // 141\n  /**                                                                                                                 // 142\n   * Running flag.                                                                                                    // 143\n   */                                                                                                                 // 144\n                                                                                                                      // 145\n  var running;                                                                                                        // 146\n                                                                                                                      // 147\n  /**                                                                                                                 // 148\n   * HashBang option                                                                                                  // 149\n   */                                                                                                                 // 150\n                                                                                                                      // 151\n  var hashbang = false;                                                                                               // 152\n                                                                                                                      // 153\n  /**                                                                                                                 // 154\n   * Previous context, for capturing                                                                                  // 155\n   * page exit events.                                                                                                // 156\n   */                                                                                                                 // 157\n                                                                                                                      // 158\n  var prevContext;                                                                                                    // 159\n                                                                                                                      // 160\n  /**                                                                                                                 // 161\n   * Register `path` with callback `fn()`,                                                                            // 162\n   * or route `path`, or redirection,                                                                                 // 163\n   * or `page.start()`.                                                                                               // 164\n   *                                                                                                                  // 165\n   *   page(fn);                                                                                                      // 166\n   *   page('*', fn);                                                                                                 // 167\n   *   page('/user/:id', load, user);                                                                                 // 168\n   *   page('/user/' + user.id, { some: 'thing' });                                                                   // 169\n   *   page('/user/' + user.id);                                                                                      // 170\n   *   page('/from', '/to')                                                                                           // 171\n   *   page();                                                                                                        // 172\n   *                                                                                                                  // 173\n   * @param {String|Function} path                                                                                    // 174\n   * @param {Function} fn...                                                                                          // 175\n   * @api public                                                                                                      // 176\n   */                                                                                                                 // 177\n                                                                                                                      // 178\n  function page(path, fn) {                                                                                           // 179\n    // <callback>                                                                                                     // 180\n    if ('function' === typeof path) {                                                                                 // 181\n      return page('*', path);                                                                                         // 182\n    }                                                                                                                 // 183\n                                                                                                                      // 184\n    // route <path> to <callback ...>                                                                                 // 185\n    if ('function' === typeof fn) {                                                                                   // 186\n      var route = new Route(path);                                                                                    // 187\n      for (var i = 1; i < arguments.length; ++i) {                                                                    // 188\n        page.callbacks.push(route.middleware(arguments[i]));                                                          // 189\n      }                                                                                                               // 190\n      // show <path> with [state]                                                                                     // 191\n    } else if ('string' === typeof path) {                                                                            // 192\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);                                                   // 193\n      // start [options]                                                                                              // 194\n    } else {                                                                                                          // 195\n      page.start(path);                                                                                               // 196\n    }                                                                                                                 // 197\n  }                                                                                                                   // 198\n                                                                                                                      // 199\n  /**                                                                                                                 // 200\n   * Callback functions.                                                                                              // 201\n   */                                                                                                                 // 202\n                                                                                                                      // 203\n  page.callbacks = [];                                                                                                // 204\n  page.exits = [];                                                                                                    // 205\n                                                                                                                      // 206\n  /**                                                                                                                 // 207\n   * Current path being processed                                                                                     // 208\n   * @type {String}                                                                                                   // 209\n   */                                                                                                                 // 210\n  page.current = '';                                                                                                  // 211\n                                                                                                                      // 212\n  /**                                                                                                                 // 213\n   * Number of pages navigated to.                                                                                    // 214\n   * @type {number}                                                                                                   // 215\n   *                                                                                                                  // 216\n   *     page.len == 0;                                                                                               // 217\n   *     page('/login');                                                                                              // 218\n   *     page.len == 1;                                                                                               // 219\n   */                                                                                                                 // 220\n                                                                                                                      // 221\n  page.len = 0;                                                                                                       // 222\n                                                                                                                      // 223\n  /**                                                                                                                 // 224\n   * Get or set basepath to `path`.                                                                                   // 225\n   *                                                                                                                  // 226\n   * @param {String} path                                                                                             // 227\n   * @api public                                                                                                      // 228\n   */                                                                                                                 // 229\n                                                                                                                      // 230\n  page.base = function(path) {                                                                                        // 231\n    if (0 === arguments.length) return base;                                                                          // 232\n    base = path;                                                                                                      // 233\n  };                                                                                                                  // 234\n                                                                                                                      // 235\n  /**                                                                                                                 // 236\n   * Bind with the given `options`.                                                                                   // 237\n   *                                                                                                                  // 238\n   * Options:                                                                                                         // 239\n   *                                                                                                                  // 240\n   *    - `click` bind to click events [true]                                                                         // 241\n   *    - `popstate` bind to popstate [true]                                                                          // 242\n   *    - `dispatch` perform initial dispatch [true]                                                                  // 243\n   *                                                                                                                  // 244\n   * @param {Object} options                                                                                          // 245\n   * @api public                                                                                                      // 246\n   */                                                                                                                 // 247\n                                                                                                                      // 248\n  page.start = function(options) {                                                                                    // 249\n    options = options || {};                                                                                          // 250\n    if (running) return;                                                                                              // 251\n    running = true;                                                                                                   // 252\n    if (false === options.dispatch) dispatch = false;                                                                 // 253\n    if (false === options.decodeURLComponents) decodeURLComponents = false;                                           // 254\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);                           // 255\n    if (false !== options.click) {                                                                                    // 256\n      document.addEventListener(clickEvent, onclick, false);                                                          // 257\n    }                                                                                                                 // 258\n    if (true === options.hashbang) hashbang = true;                                                                   // 259\n    if (!dispatch) return;                                                                                            // 260\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);                                                                          // 262\n  };                                                                                                                  // 263\n                                                                                                                      // 264\n  /**                                                                                                                 // 265\n   * Unbind click and popstate event handlers.                                                                        // 266\n   *                                                                                                                  // 267\n   * @api public                                                                                                      // 268\n   */                                                                                                                 // 269\n                                                                                                                      // 270\n  page.stop = function() {                                                                                            // 271\n    if (!running) return;                                                                                             // 272\n    page.current = '';                                                                                                // 273\n    page.len = 0;                                                                                                     // 274\n    running = false;                                                                                                  // 275\n    document.removeEventListener(clickEvent, onclick, false);                                                         // 276\n    window.removeEventListener('popstate', onpopstate, false);                                                        // 277\n  };                                                                                                                  // 278\n                                                                                                                      // 279\n  /**                                                                                                                 // 280\n   * Show `path` with optional `state` object.                                                                        // 281\n   *                                                                                                                  // 282\n   * @param {String} path                                                                                             // 283\n   * @param {Object} state                                                                                            // 284\n   * @param {Boolean} dispatch                                                                                        // 285\n   * @return {Context}                                                                                                // 286\n   * @api public                                                                                                      // 287\n   */                                                                                                                 // 288\n                                                                                                                      // 289\n  page.show = function(path, state, dispatch, push) {                                                                 // 290\n    var ctx = new Context(path, state);                                                                               // 291\n    page.current = ctx.path;                                                                                          // 292\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 293\n    if (false !== ctx.handled && false !== push) ctx.pushState();                                                     // 294\n    return ctx;                                                                                                       // 295\n  };                                                                                                                  // 296\n                                                                                                                      // 297\n  /**                                                                                                                 // 298\n   * Goes back in the history                                                                                         // 299\n   * Back should always let the current route push state and then go back.                                            // 300\n   *                                                                                                                  // 301\n   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base    // 302\n   * @param {Object} [state]                                                                                          // 303\n   * @api public                                                                                                      // 304\n   */                                                                                                                 // 305\n                                                                                                                      // 306\n  page.back = function(path, state) {                                                                                 // 307\n    if (page.len > 0) {                                                                                               // 308\n      // this may need more testing to see if all browsers                                                            // 309\n      // wait for the next tick to go back in history                                                                 // 310\n      history.back();                                                                                                 // 311\n      page.len--;                                                                                                     // 312\n    } else if (path) {                                                                                                // 313\n      setTimeout(function() {                                                                                         // 314\n        page.show(path, state);                                                                                       // 315\n      });                                                                                                             // 316\n    }else{                                                                                                            // 317\n      setTimeout(function() {                                                                                         // 318\n        page.show(base, state);                                                                                       // 319\n      });                                                                                                             // 320\n    }                                                                                                                 // 321\n  };                                                                                                                  // 322\n                                                                                                                      // 323\n                                                                                                                      // 324\n  /**                                                                                                                 // 325\n   * Register route to redirect from one path to other                                                                // 326\n   * or just redirect to another route                                                                                // 327\n   *                                                                                                                  // 328\n   * @param {String} from - if param 'to' is undefined redirects to 'from'                                            // 329\n   * @param {String} [to]                                                                                             // 330\n   * @api public                                                                                                      // 331\n   */                                                                                                                 // 332\n  page.redirect = function(from, to) {                                                                                // 333\n    // Define route from a path to another                                                                            // 334\n    if ('string' === typeof from && 'string' === typeof to) {                                                         // 335\n      page(from, function(e) {                                                                                        // 336\n        setTimeout(function() {                                                                                       // 337\n          page.replace(to);                                                                                           // 338\n        }, 0);                                                                                                        // 339\n      });                                                                                                             // 340\n    }                                                                                                                 // 341\n                                                                                                                      // 342\n    // Wait for the push state and replace it with another                                                            // 343\n    if ('string' === typeof from && 'undefined' === typeof to) {                                                      // 344\n      setTimeout(function() {                                                                                         // 345\n        page.replace(from);                                                                                           // 346\n      }, 0);                                                                                                          // 347\n    }                                                                                                                 // 348\n  };                                                                                                                  // 349\n                                                                                                                      // 350\n  /**                                                                                                                 // 351\n   * Replace `path` with optional `state` object.                                                                     // 352\n   *                                                                                                                  // 353\n   * @param {String} path                                                                                             // 354\n   * @param {Object} state                                                                                            // 355\n   * @return {Context}                                                                                                // 356\n   * @api public                                                                                                      // 357\n   */                                                                                                                 // 358\n                                                                                                                      // 359\n                                                                                                                      // 360\n  page.replace = function(path, state, init, dispatch) {                                                              // 361\n    var ctx = new Context(path, state);                                                                               // 362\n    page.current = ctx.path;                                                                                          // 363\n    ctx.init = init;                                                                                                  // 364\n    ctx.save(); // save before dispatching, which may redirect                                                        // 365\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 366\n    return ctx;                                                                                                       // 367\n  };                                                                                                                  // 368\n                                                                                                                      // 369\n  /**                                                                                                                 // 370\n   * Dispatch the given `ctx`.                                                                                        // 371\n   *                                                                                                                  // 372\n   * @param {Object} ctx                                                                                              // 373\n   * @api private                                                                                                     // 374\n   */                                                                                                                 // 375\n                                                                                                                      // 376\n  page.dispatch = function(ctx) {                                                                                     // 377\n    var prev = prevContext,                                                                                           // 378\n      i = 0,                                                                                                          // 379\n      j = 0;                                                                                                          // 380\n                                                                                                                      // 381\n    prevContext = ctx;                                                                                                // 382\n                                                                                                                      // 383\n    function nextExit() {                                                                                             // 384\n      var fn = page.exits[j++];                                                                                       // 385\n      if (!fn) return nextEnter();                                                                                    // 386\n      fn(prev, nextExit);                                                                                             // 387\n    }                                                                                                                 // 388\n                                                                                                                      // 389\n    function nextEnter() {                                                                                            // 390\n      var fn = page.callbacks[i++];                                                                                   // 391\n                                                                                                                      // 392\n      if (ctx.path !== page.current) {                                                                                // 393\n        ctx.handled = false;                                                                                          // 394\n        return;                                                                                                       // 395\n      }                                                                                                               // 396\n      if (!fn) return unhandled(ctx);                                                                                 // 397\n      fn(ctx, nextEnter);                                                                                             // 398\n    }                                                                                                                 // 399\n                                                                                                                      // 400\n    if (prev) {                                                                                                       // 401\n      nextExit();                                                                                                     // 402\n    } else {                                                                                                          // 403\n      nextEnter();                                                                                                    // 404\n    }                                                                                                                 // 405\n  };                                                                                                                  // 406\n                                                                                                                      // 407\n  /**                                                                                                                 // 408\n   * Unhandled `ctx`. When it's not the initial                                                                       // 409\n   * popstate then redirect. If you wish to handle                                                                    // 410\n   * 404s on your own use `page('*', callback)`.                                                                      // 411\n   *                                                                                                                  // 412\n   * @param {Context} ctx                                                                                             // 413\n   * @api private                                                                                                     // 414\n   */                                                                                                                 // 415\n                                                                                                                      // 416\n  function unhandled(ctx) {                                                                                           // 417\n    if (ctx.handled) return;                                                                                          // 418\n    var current;                                                                                                      // 419\n                                                                                                                      // 420\n    if (hashbang) {                                                                                                   // 421\n      current = base + location.hash.replace('#!', '');                                                               // 422\n    } else {                                                                                                          // 423\n      current = location.pathname + location.search;                                                                  // 424\n    }                                                                                                                 // 425\n                                                                                                                      // 426\n    if (current === ctx.canonicalPath) return;                                                                        // 427\n    page.stop();                                                                                                      // 428\n    ctx.handled = false;                                                                                              // 429\n    location.href = ctx.canonicalPath;                                                                                // 430\n  }                                                                                                                   // 431\n                                                                                                                      // 432\n  /**                                                                                                                 // 433\n   * Register an exit route on `path` with                                                                            // 434\n   * callback `fn()`, which will be called                                                                            // 435\n   * on the previous context when a new                                                                               // 436\n   * page is visited.                                                                                                 // 437\n   */                                                                                                                 // 438\n  page.exit = function(path, fn) {                                                                                    // 439\n    if (typeof path === 'function') {                                                                                 // 440\n      return page.exit('*', path);                                                                                    // 441\n    }                                                                                                                 // 442\n                                                                                                                      // 443\n    var route = new Route(path);                                                                                      // 444\n    for (var i = 1; i < arguments.length; ++i) {                                                                      // 445\n      page.exits.push(route.middleware(arguments[i]));                                                                // 446\n    }                                                                                                                 // 447\n  };                                                                                                                  // 448\n                                                                                                                      // 449\n  /**                                                                                                                 // 450\n   * Remove URL encoding from the given `str`.                                                                        // 451\n   * Accommodates whitespace in both x-www-form-urlencoded                                                            // 452\n   * and regular percent-encoded form.                                                                                // 453\n   *                                                                                                                  // 454\n   * @param {str} URL component to decode                                                                             // 455\n   */                                                                                                                 // 456\n  function decodeURLEncodedURIComponent(val) {                                                                        // 457\n    if (typeof val !== 'string') { return val; }                                                                      // 458\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;                                   // 459\n  }                                                                                                                   // 460\n                                                                                                                      // 461\n  /**                                                                                                                 // 462\n   * Initialize a new \"request\" `Context`                                                                             // 463\n   * with the given `path` and optional initial `state`.                                                              // 464\n   *                                                                                                                  // 465\n   * @param {String} path                                                                                             // 466\n   * @param {Object} state                                                                                            // 467\n   * @api public                                                                                                      // 468\n   */                                                                                                                 // 469\n                                                                                                                      // 470\n  function Context(path, state) {                                                                                     // 471\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;                     // 472\n    var i = path.indexOf('?');                                                                                        // 473\n                                                                                                                      // 474\n    this.canonicalPath = path;                                                                                        // 475\n    this.path = path.replace(base, '') || '/';                                                                        // 476\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';                                                     // 477\n                                                                                                                      // 478\n    this.title = document.title;                                                                                      // 479\n    this.state = state || {};                                                                                         // 480\n    this.state.path = path;                                                                                           // 481\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';                                     // 482\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);                                       // 483\n    this.params = {};                                                                                                 // 484\n                                                                                                                      // 485\n    // fragment                                                                                                       // 486\n    this.hash = '';                                                                                                   // 487\n    if (!hashbang) {                                                                                                  // 488\n      if (!~this.path.indexOf('#')) return;                                                                           // 489\n      var parts = this.path.split('#');                                                                               // 490\n      this.path = parts[0];                                                                                           // 491\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';                                                       // 492\n      this.querystring = this.querystring.split('#')[0];                                                              // 493\n    }                                                                                                                 // 494\n  }                                                                                                                   // 495\n                                                                                                                      // 496\n  /**                                                                                                                 // 497\n   * Expose `Context`.                                                                                                // 498\n   */                                                                                                                 // 499\n                                                                                                                      // 500\n  page.Context = Context;                                                                                             // 501\n                                                                                                                      // 502\n  /**                                                                                                                 // 503\n   * Push state.                                                                                                      // 504\n   *                                                                                                                  // 505\n   * @api private                                                                                                     // 506\n   */                                                                                                                 // 507\n                                                                                                                      // 508\n  Context.prototype.pushState = function() {                                                                          // 509\n    page.len++;                                                                                                       // 510\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 512\n                                                                                                                      // 513\n  /**                                                                                                                 // 514\n   * Save the context state.                                                                                          // 515\n   *                                                                                                                  // 516\n   * @api public                                                                                                      // 517\n   */                                                                                                                 // 518\n                                                                                                                      // 519\n  Context.prototype.save = function() {                                                                               // 520\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 522\n                                                                                                                      // 523\n  /**                                                                                                                 // 524\n   * Initialize `Route` with the given HTTP `path`,                                                                   // 525\n   * and an array of `callbacks` and `options`.                                                                       // 526\n   *                                                                                                                  // 527\n   * Options:                                                                                                         // 528\n   *                                                                                                                  // 529\n   *   - `sensitive`    enable case-sensitive routes                                                                  // 530\n   *   - `strict`       enable strict matching for trailing slashes                                                   // 531\n   *                                                                                                                  // 532\n   * @param {String} path                                                                                             // 533\n   * @param {Object} options.                                                                                         // 534\n   * @api private                                                                                                     // 535\n   */                                                                                                                 // 536\n                                                                                                                      // 537\n  function Route(path, options) {                                                                                     // 538\n    options = options || {};                                                                                          // 539\n    this.path = (path === '*') ? '(.*)' : path;                                                                       // 540\n    this.method = 'GET';                                                                                              // 541\n    this.regexp = pathtoRegexp(this.path,                                                                             // 542\n      this.keys = [],                                                                                                 // 543\n      options.sensitive,                                                                                              // 544\n      options.strict);                                                                                                // 545\n  }                                                                                                                   // 546\n                                                                                                                      // 547\n  /**                                                                                                                 // 548\n   * Expose `Route`.                                                                                                  // 549\n   */                                                                                                                 // 550\n                                                                                                                      // 551\n  page.Route = Route;                                                                                                 // 552\n                                                                                                                      // 553\n  /**                                                                                                                 // 554\n   * Return route middleware with                                                                                     // 555\n   * the given callback `fn()`.                                                                                       // 556\n   *                                                                                                                  // 557\n   * @param {Function} fn                                                                                             // 558\n   * @return {Function}                                                                                               // 559\n   * @api public                                                                                                      // 560\n   */                                                                                                                 // 561\n                                                                                                                      // 562\n  Route.prototype.middleware = function(fn) {                                                                         // 563\n    var self = this;                                                                                                  // 564\n    return function(ctx, next) {                                                                                      // 565\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);                                                     // 566\n      next();                                                                                                         // 567\n    };                                                                                                                // 568\n  };                                                                                                                  // 569\n                                                                                                                      // 570\n  /**                                                                                                                 // 571\n   * Check if this route matches `path`, if so                                                                        // 572\n   * populate `params`.                                                                                               // 573\n   *                                                                                                                  // 574\n   * @param {String} path                                                                                             // 575\n   * @param {Object} params                                                                                           // 576\n   * @return {Boolean}                                                                                                // 577\n   * @api private                                                                                                     // 578\n   */                                                                                                                 // 579\n                                                                                                                      // 580\n  Route.prototype.match = function(path, params) {                                                                    // 581\n    var keys = this.keys,                                                                                             // 582\n      qsIndex = path.indexOf('?'),                                                                                    // 583\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,                                                            // 584\n      m = this.regexp.exec(decodeURIComponent(pathname));                                                             // 585\n                                                                                                                      // 586\n    if (!m) return false;                                                                                             // 587\n                                                                                                                      // 588\n    for (var i = 1, len = m.length; i < len; ++i) {                                                                   // 589\n      var key = keys[i - 1];                                                                                          // 590\n      var val = decodeURLEncodedURIComponent(m[i]);                                                                   // 591\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {                                            // 592\n        params[key.name] = val;                                                                                       // 593\n      }                                                                                                               // 594\n    }                                                                                                                 // 595\n                                                                                                                      // 596\n    return true;                                                                                                      // 597\n  };                                                                                                                  // 598\n                                                                                                                      // 599\n                                                                                                                      // 600\n  /**                                                                                                                 // 601\n   * Handle \"populate\" events.                                                                                        // 602\n   */                                                                                                                 // 603\n                                                                                                                      // 604\n  var onpopstate = (function () {                                                                                     // 605\n    var loaded = false;                                                                                               // 606\n    if ('undefined' === typeof window) {                                                                              // 607\n      return;                                                                                                         // 608\n    }                                                                                                                 // 609\n    if (document.readyState === 'complete') {                                                                         // 610\n      loaded = true;                                                                                                  // 611\n    } else {                                                                                                          // 612\n      window.addEventListener('load', function() {                                                                    // 613\n        setTimeout(function() {                                                                                       // 614\n          loaded = true;                                                                                              // 615\n        }, 0);                                                                                                        // 616\n      });                                                                                                             // 617\n    }                                                                                                                 // 618\n    return function onpopstate(e) {                                                                                   // 619\n      if (!loaded) return;                                                                                            // 620\n      if (e.state) {                                                                                                  // 621\n        var path = e.state.path;                                                                                      // 622\n        page.replace(path, e.state);                                                                                  // 623\n      } else {                                                                                                        // 624\n        page.show(location.pathname + location.hash, undefined, undefined, false);                                    // 625\n      }                                                                                                               // 626\n    };                                                                                                                // 627\n  })();                                                                                                               // 628\n  /**                                                                                                                 // 629\n   * Handle \"click\" events.                                                                                           // 630\n   */                                                                                                                 // 631\n                                                                                                                      // 632\n  function onclick(e) {                                                                                               // 633\n                                                                                                                      // 634\n    if (1 !== which(e)) return;                                                                                       // 635\n                                                                                                                      // 636\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;                                                                 // 637\n    if (e.defaultPrevented) return;                                                                                   // 638\n                                                                                                                      // 639\n                                                                                                                      // 640\n                                                                                                                      // 641\n    // ensure link                                                                                                    // 642\n    var el = e.target;                                                                                                // 643\n    while (el && 'A' !== el.nodeName) el = el.parentNode;                                                             // 644\n    if (!el || 'A' !== el.nodeName) return;                                                                           // 645\n                                                                                                                      // 646\n                                                                                                                      // 647\n                                                                                                                      // 648\n    // Ignore if tag has                                                                                              // 649\n    // 1. \"download\" attribute                                                                                        // 650\n    // 2. rel=\"external\" attribute                                                                                    // 651\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;                                 // 652\n                                                                                                                      // 653\n    // ensure non-hash for the same path                                                                              // 654\n    var link = el.getAttribute('href');                                                                               // 655\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;                          // 656\n                                                                                                                      // 657\n                                                                                                                      // 658\n                                                                                                                      // 659\n    // Check for mailto: in the href                                                                                  // 660\n    if (link && link.indexOf('mailto:') > -1) return;                                                                 // 661\n                                                                                                                      // 662\n    // check target                                                                                                   // 663\n    if (el.target) return;                                                                                            // 664\n                                                                                                                      // 665\n    // x-origin                                                                                                       // 666\n    if (!sameOrigin(el.href)) return;                                                                                 // 667\n                                                                                                                      // 668\n                                                                                                                      // 669\n                                                                                                                      // 670\n    // rebuild path                                                                                                   // 671\n    var path = el.pathname + el.search + (el.hash || '');                                                             // 672\n                                                                                                                      // 673\n    path = path[0] !== '/' ? '/' + path : path;                                                                       // 674\n                                                                                                                      // 675\n    // strip leading \"/[drive letter]:\" on NW.js on Windows                                                           // 676\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {                                             // 677\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');                                                                     // 678\n    }                                                                                                                 // 679\n                                                                                                                      // 680\n    // same page                                                                                                      // 681\n    var orig = path;                                                                                                  // 682\n                                                                                                                      // 683\n    if (path.indexOf(base) === 0) {                                                                                   // 684\n      path = path.substr(base.length);                                                                                // 685\n    }                                                                                                                 // 686\n                                                                                                                      // 687\n    if (hashbang) path = path.replace('#!', '');                                                                      // 688\n                                                                                                                      // 689\n    if (base && orig === path) return;                                                                                // 690\n                                                                                                                      // 691\n    e.preventDefault();                                                                                               // 692\n    page.show(orig);                                                                                                  // 693\n  }                                                                                                                   // 694\n                                                                                                                      // 695\n  /**                                                                                                                 // 696\n   * Event button.                                                                                                    // 697\n   */                                                                                                                 // 698\n                                                                                                                      // 699\n  function which(e) {                                                                                                 // 700\n    e = e || window.event;                                                                                            // 701\n    return null === e.which ? e.button : e.which;                                                                     // 702\n  }                                                                                                                   // 703\n                                                                                                                      // 704\n  /**                                                                                                                 // 705\n   * Check if `href` is the same origin.                                                                              // 706\n   */                                                                                                                 // 707\n                                                                                                                      // 708\n  function sameOrigin(href) {                                                                                         // 709\n    var origin = location.protocol + '//' + location.hostname;                                                        // 710\n    if (location.port) origin += ':' + location.port;                                                                 // 711\n    return (href && (0 === href.indexOf(origin)));                                                                    // 712\n  }                                                                                                                   // 713\n                                                                                                                      // 714\n  page.sameOrigin = sameOrigin;                                                                                       // 715\n                                                                                                                      // 716\n}).call(this,require('_process'))                                                                                     // 717\n                                                                                                                      // 718\n},{\"_process\":1,\"path-to-regexp\":3}],3:[function(require,module,exports){                                             // 719\nvar isArray = require('isarray');                                                                                     // 720\n                                                                                                                      // 721\n/**                                                                                                                   // 722\n * Expose `pathToRegexp`.                                                                                             // 723\n */                                                                                                                   // 724\nmodule.exports = pathToRegexp;                                                                                        // 725\n                                                                                                                      // 726\n/**                                                                                                                   // 727\n * The main path matching regexp utility.                                                                             // 728\n *                                                                                                                    // 729\n * @type {RegExp}                                                                                                     // 730\n */                                                                                                                   // 731\nvar PATH_REGEXP = new RegExp([                                                                                        // 732\n  // Match escaped characters that would otherwise appear in future matches.                                          // 733\n  // This allows the user to escape special characters that won't transform.                                          // 734\n  '(\\\\\\\\.)',                                                                                                          // 735\n  // Match Express-style parameters and un-named parameters with a prefix                                             // 736\n  // and optional suffixes. Matches appear as:                                                                        // 737\n  //                                                                                                                  // 738\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]                                                          // 739\n  // \"/route(\\\\d+)\" => [undefined, undefined, undefined, \"\\d+\", undefined]                                            // 740\n  '([\\\\/.])?(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^)])*)\\\\))?|\\\\(((?:\\\\\\\\.|[^)])*)\\\\))([+*?])?',                               // 741\n  // Match regexp special characters that are always escaped.                                                         // 742\n  '([.+*?=^!:${}()[\\\\]|\\\\/])'                                                                                         // 743\n].join('|'), 'g');                                                                                                    // 744\n                                                                                                                      // 745\n/**                                                                                                                   // 746\n * Escape the capturing group by escaping special characters and meaning.                                             // 747\n *                                                                                                                    // 748\n * @param  {String} group                                                                                             // 749\n * @return {String}                                                                                                   // 750\n */                                                                                                                   // 751\nfunction escapeGroup (group) {                                                                                        // 752\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');                                                                      // 753\n}                                                                                                                     // 754\n                                                                                                                      // 755\n/**                                                                                                                   // 756\n * Attach the keys as a property of the regexp.                                                                       // 757\n *                                                                                                                    // 758\n * @param  {RegExp} re                                                                                                // 759\n * @param  {Array}  keys                                                                                              // 760\n * @return {RegExp}                                                                                                   // 761\n */                                                                                                                   // 762\nfunction attachKeys (re, keys) {                                                                                      // 763\n  re.keys = keys;                                                                                                     // 764\n  return re;                                                                                                          // 765\n}                                                                                                                     // 766\n                                                                                                                      // 767\n/**                                                                                                                   // 768\n * Get the flags for a regexp from the options.                                                                       // 769\n *                                                                                                                    // 770\n * @param  {Object} options                                                                                           // 771\n * @return {String}                                                                                                   // 772\n */                                                                                                                   // 773\nfunction flags (options) {                                                                                            // 774\n  return options.sensitive ? '' : 'i';                                                                                // 775\n}                                                                                                                     // 776\n                                                                                                                      // 777\n/**                                                                                                                   // 778\n * Pull out keys from a regexp.                                                                                       // 779\n *                                                                                                                    // 780\n * @param  {RegExp} path                                                                                              // 781\n * @param  {Array}  keys                                                                                              // 782\n * @return {RegExp}                                                                                                   // 783\n */                                                                                                                   // 784\nfunction regexpToRegexp (path, keys) {                                                                                // 785\n  // Use a negative lookahead to match only capturing groups.                                                         // 786\n  var groups = path.source.match(/\\((?!\\?)/g);                                                                        // 787\n                                                                                                                      // 788\n  if (groups) {                                                                                                       // 789\n    for (var i = 0; i < groups.length; i++) {                                                                         // 790\n      keys.push({                                                                                                     // 791\n        name:      i,                                                                                                 // 792\n        delimiter: null,                                                                                              // 793\n        optional:  false,                                                                                             // 794\n        repeat:    false                                                                                              // 795\n      });                                                                                                             // 796\n    }                                                                                                                 // 797\n  }                                                                                                                   // 798\n                                                                                                                      // 799\n  return attachKeys(path, keys);                                                                                      // 800\n}                                                                                                                     // 801\n                                                                                                                      // 802\n/**                                                                                                                   // 803\n * Transform an array into a regexp.                                                                                  // 804\n *                                                                                                                    // 805\n * @param  {Array}  path                                                                                              // 806\n * @param  {Array}  keys                                                                                              // 807\n * @param  {Object} options                                                                                           // 808\n * @return {RegExp}                                                                                                   // 809\n */                                                                                                                   // 810\nfunction arrayToRegexp (path, keys, options) {                                                                        // 811\n  var parts = [];                                                                                                     // 812\n                                                                                                                      // 813\n  for (var i = 0; i < path.length; i++) {                                                                             // 814\n    parts.push(pathToRegexp(path[i], keys, options).source);                                                          // 815\n  }                                                                                                                   // 816\n                                                                                                                      // 817\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));                                             // 818\n  return attachKeys(regexp, keys);                                                                                    // 819\n}                                                                                                                     // 820\n                                                                                                                      // 821\n/**                                                                                                                   // 822\n * Replace the specific tags with regexp strings.                                                                     // 823\n *                                                                                                                    // 824\n * @param  {String} path                                                                                              // 825\n * @param  {Array}  keys                                                                                              // 826\n * @return {String}                                                                                                   // 827\n */                                                                                                                   // 828\nfunction replacePath (path, keys) {                                                                                   // 829\n  var index = 0;                                                                                                      // 830\n                                                                                                                      // 831\n  function replace (_, escaped, prefix, key, capture, group, suffix, escape) {                                        // 832\n    if (escaped) {                                                                                                    // 833\n      return escaped;                                                                                                 // 834\n    }                                                                                                                 // 835\n                                                                                                                      // 836\n    if (escape) {                                                                                                     // 837\n      return '\\\\' + escape;                                                                                           // 838\n    }                                                                                                                 // 839\n                                                                                                                      // 840\n    var repeat   = suffix === '+' || suffix === '*';                                                                  // 841\n    var optional = suffix === '?' || suffix === '*';                                                                  // 842\n                                                                                                                      // 843\n    keys.push({                                                                                                       // 844\n      name:      key || index++,                                                                                      // 845\n      delimiter: prefix || '/',                                                                                       // 846\n      optional:  optional,                                                                                            // 847\n      repeat:    repeat                                                                                               // 848\n    });                                                                                                               // 849\n                                                                                                                      // 850\n    prefix = prefix ? ('\\\\' + prefix) : '';                                                                           // 851\n    capture = escapeGroup(capture || group || '[^' + (prefix || '\\\\/') + ']+?');                                      // 852\n                                                                                                                      // 853\n    if (repeat) {                                                                                                     // 854\n      capture = capture + '(?:' + prefix + capture + ')*';                                                            // 855\n    }                                                                                                                 // 856\n                                                                                                                      // 857\n    if (optional) {                                                                                                   // 858\n      return '(?:' + prefix + '(' + capture + '))?';                                                                  // 859\n    }                                                                                                                 // 860\n                                                                                                                      // 861\n    // Basic parameter support.                                                                                       // 862\n    return prefix + '(' + capture + ')';                                                                              // 863\n  }                                                                                                                   // 864\n                                                                                                                      // 865\n  return path.replace(PATH_REGEXP, replace);                                                                          // 866\n}                                                                                                                     // 867\n                                                                                                                      // 868\n/**                                                                                                                   // 869\n * Normalize the given path string, returning a regular expression.                                                   // 870\n *                                                                                                                    // 871\n * An empty array can be passed in for the keys, which will hold the                                                  // 872\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will                                          // 873\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.                                        // 874\n *                                                                                                                    // 875\n * @param  {(String|RegExp|Array)} path                                                                               // 876\n * @param  {Array}                 [keys]                                                                             // 877\n * @param  {Object}                [options]                                                                          // 878\n * @return {RegExp}                                                                                                   // 879\n */                                                                                                                   // 880\nfunction pathToRegexp (path, keys, options) {                                                                         // 881\n  keys = keys || [];                                                                                                  // 882\n                                                                                                                      // 883\n  if (!isArray(keys)) {                                                                                               // 884\n    options = keys;                                                                                                   // 885\n    keys = [];                                                                                                        // 886\n  } else if (!options) {                                                                                              // 887\n    options = {};                                                                                                     // 888\n  }                                                                                                                   // 889\n                                                                                                                      // 890\n  if (path instanceof RegExp) {                                                                                       // 891\n    return regexpToRegexp(path, keys, options);                                                                       // 892\n  }                                                                                                                   // 893\n                                                                                                                      // 894\n  if (isArray(path)) {                                                                                                // 895\n    return arrayToRegexp(path, keys, options);                                                                        // 896\n  }                                                                                                                   // 897\n                                                                                                                      // 898\n  var strict = options.strict;                                                                                        // 899\n  var end = options.end !== false;                                                                                    // 900\n  var route = replacePath(path, keys);                                                                                // 901\n  var endsWithSlash = path.charAt(path.length - 1) === '/';                                                           // 902\n                                                                                                                      // 903\n  // In non-strict mode we allow a slash at the end of match. If the path to                                          // 904\n  // match already ends with a slash, we remove it for consistency. The slash                                         // 905\n  // is valid at the end of a path match, not in the middle. This is important                                        // 906\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".                                               // 907\n  if (!strict) {                                                                                                      // 908\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';                                           // 909\n  }                                                                                                                   // 910\n                                                                                                                      // 911\n  if (end) {                                                                                                          // 912\n    route += '$';                                                                                                     // 913\n  } else {                                                                                                            // 914\n    // In non-ending mode, we need the capturing groups to match as much as                                           // 915\n    // possible by using a positive lookahead to the end or next path segment.                                        // 916\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';                                                              // 917\n  }                                                                                                                   // 918\n                                                                                                                      // 919\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);                                                   // 920\n}                                                                                                                     // 921\n                                                                                                                      // 922\n},{\"isarray\":4}],4:[function(require,module,exports){                                                                 // 923\nmodule.exports = Array.isArray || function (arr) {                                                                    // 924\n  return Object.prototype.toString.call(arr) == '[object Array]';                                                     // 925\n};                                                                                                                    // 926\n                                                                                                                      // 927\n},{}],5:[function(require,module,exports){                                                                            // 928\nmodule.exports = require('./lib/');                                                                                   // 929\n                                                                                                                      // 930\n},{\"./lib/\":6}],6:[function(require,module,exports){                                                                  // 931\n// Load modules                                                                                                       // 932\n                                                                                                                      // 933\nvar Stringify = require('./stringify');                                                                               // 934\nvar Parse = require('./parse');                                                                                       // 935\n                                                                                                                      // 936\n                                                                                                                      // 937\n// Declare internals                                                                                                  // 938\n                                                                                                                      // 939\nvar internals = {};                                                                                                   // 940\n                                                                                                                      // 941\n                                                                                                                      // 942\nmodule.exports = {                                                                                                    // 943\n    stringify: Stringify,                                                                                             // 944\n    parse: Parse                                                                                                      // 945\n};                                                                                                                    // 946\n                                                                                                                      // 947\n},{\"./parse\":7,\"./stringify\":8}],7:[function(require,module,exports){                                                 // 948\n// Load modules                                                                                                       // 949\n                                                                                                                      // 950\nvar Utils = require('./utils');                                                                                       // 951\n                                                                                                                      // 952\n                                                                                                                      // 953\n// Declare internals                                                                                                  // 954\n                                                                                                                      // 955\nvar internals = {                                                                                                     // 956\n    delimiter: '&',                                                                                                   // 957\n    depth: 5,                                                                                                         // 958\n    arrayLimit: 20,                                                                                                   // 959\n    parameterLimit: 1000,                                                                                             // 960\n    strictNullHandling: false                                                                                         // 961\n};                                                                                                                    // 962\n                                                                                                                      // 963\n                                                                                                                      // 964\ninternals.parseValues = function (str, options) {                                                                     // 965\n                                                                                                                      // 966\n    var obj = {};                                                                                                     // 967\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n                                                                                                                      // 969\n    for (var i = 0, il = parts.length; i < il; ++i) {                                                                 // 970\n        var part = parts[i];                                                                                          // 971\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;                             // 972\n                                                                                                                      // 973\n        if (pos === -1) {                                                                                             // 974\n            obj[Utils.decode(part)] = '';                                                                             // 975\n                                                                                                                      // 976\n            if (options.strictNullHandling) {                                                                         // 977\n                obj[Utils.decode(part)] = null;                                                                       // 978\n            }                                                                                                         // 979\n        }                                                                                                             // 980\n        else {                                                                                                        // 981\n            var key = Utils.decode(part.slice(0, pos));                                                               // 982\n            var val = Utils.decode(part.slice(pos + 1));                                                              // 983\n                                                                                                                      // 984\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {                                                    // 985\n                obj[key] = val;                                                                                       // 986\n            }                                                                                                         // 987\n            else {                                                                                                    // 988\n                obj[key] = [].concat(obj[key]).concat(val);                                                           // 989\n            }                                                                                                         // 990\n        }                                                                                                             // 991\n    }                                                                                                                 // 992\n                                                                                                                      // 993\n    return obj;                                                                                                       // 994\n};                                                                                                                    // 995\n                                                                                                                      // 996\n                                                                                                                      // 997\ninternals.parseObject = function (chain, val, options) {                                                              // 998\n                                                                                                                      // 999\n    if (!chain.length) {                                                                                              // 1000\n        return val;                                                                                                   // 1001\n    }                                                                                                                 // 1002\n                                                                                                                      // 1003\n    var root = chain.shift();                                                                                         // 1004\n                                                                                                                      // 1005\n    var obj;                                                                                                          // 1006\n    if (root === '[]') {                                                                                              // 1007\n        obj = [];                                                                                                     // 1008\n        obj = obj.concat(internals.parseObject(chain, val, options));                                                 // 1009\n    }                                                                                                                 // 1010\n    else {                                                                                                            // 1011\n        obj = Object.create(null);                                                                                    // 1012\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;     // 1013\n        var index = parseInt(cleanRoot, 10);                                                                          // 1014\n        var indexString = '' + index;                                                                                 // 1015\n        if (!isNaN(index) &&                                                                                          // 1016\n            root !== cleanRoot &&                                                                                     // 1017\n            indexString === cleanRoot &&                                                                              // 1018\n            index >= 0 &&                                                                                             // 1019\n            (options.parseArrays &&                                                                                   // 1020\n             index <= options.arrayLimit)) {                                                                          // 1021\n                                                                                                                      // 1022\n            obj = [];                                                                                                 // 1023\n            obj[index] = internals.parseObject(chain, val, options);                                                  // 1024\n        }                                                                                                             // 1025\n        else {                                                                                                        // 1026\n            obj[cleanRoot] = internals.parseObject(chain, val, options);                                              // 1027\n        }                                                                                                             // 1028\n    }                                                                                                                 // 1029\n                                                                                                                      // 1030\n    return obj;                                                                                                       // 1031\n};                                                                                                                    // 1032\n                                                                                                                      // 1033\n                                                                                                                      // 1034\ninternals.parseKeys = function (key, val, options) {                                                                  // 1035\n                                                                                                                      // 1036\n    if (!key) {                                                                                                       // 1037\n        return;                                                                                                       // 1038\n    }                                                                                                                 // 1039\n                                                                                                                      // 1040\n    // Transform dot notation to bracket notation                                                                     // 1041\n                                                                                                                      // 1042\n    if (options.allowDots) {                                                                                          // 1043\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');                                                                   // 1044\n    }                                                                                                                 // 1045\n                                                                                                                      // 1046\n    // The regex chunks                                                                                               // 1047\n                                                                                                                      // 1048\n    var parent = /^([^\\[\\]]*)/;                                                                                       // 1049\n    var child = /(\\[[^\\[\\]]*\\])/g;                                                                                    // 1050\n                                                                                                                      // 1051\n    // Get the parent                                                                                                 // 1052\n                                                                                                                      // 1053\n    var segment = parent.exec(key);                                                                                   // 1054\n                                                                                                                      // 1055\n    // Stash the parent if it exists                                                                                  // 1056\n                                                                                                                      // 1057\n    var keys = [];                                                                                                    // 1058\n    if (segment[1]) {                                                                                                 // 1059\n        keys.push(segment[1]);                                                                                        // 1060\n    }                                                                                                                 // 1061\n                                                                                                                      // 1062\n    // Loop through children appending to the array until we hit depth                                                // 1063\n                                                                                                                      // 1064\n    var i = 0;                                                                                                        // 1065\n    while ((segment = child.exec(key)) !== null && i < options.depth) {                                               // 1066\n                                                                                                                      // 1067\n        ++i;                                                                                                          // 1068\n        keys.push(segment[1]);                                                                                        // 1069\n    }                                                                                                                 // 1070\n                                                                                                                      // 1071\n    // If there's a remainder, just add whatever is left                                                              // 1072\n                                                                                                                      // 1073\n    if (segment) {                                                                                                    // 1074\n        keys.push('[' + key.slice(segment.index) + ']');                                                              // 1075\n    }                                                                                                                 // 1076\n                                                                                                                      // 1077\n    return internals.parseObject(keys, val, options);                                                                 // 1078\n};                                                                                                                    // 1079\n                                                                                                                      // 1080\n                                                                                                                      // 1081\nmodule.exports = function (str, options) {                                                                            // 1082\n                                                                                                                      // 1083\n    if (str === '' ||                                                                                                 // 1084\n        str === null ||                                                                                               // 1085\n        typeof str === 'undefined') {                                                                                 // 1086\n                                                                                                                      // 1087\n        return Object.create(null);                                                                                   // 1088\n    }                                                                                                                 // 1089\n                                                                                                                      // 1090\n    options = options || {};                                                                                          // 1091\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;                              // 1093\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;          // 1094\n    options.parseArrays = options.parseArrays !== false;                                                              // 1095\n    options.allowDots = options.allowDots !== false;                                                                  // 1096\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n                                                                                                                      // 1099\n                                                                                                                      // 1100\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;                                // 1101\n    var obj = Object.create(null);                                                                                    // 1102\n                                                                                                                      // 1103\n    // Iterate over the keys and setup the new object                                                                 // 1104\n                                                                                                                      // 1105\n    var keys = Object.keys(tempObj);                                                                                  // 1106\n    for (var i = 0, il = keys.length; i < il; ++i) {                                                                  // 1107\n        var key = keys[i];                                                                                            // 1108\n        var newObj = internals.parseKeys(key, tempObj[key], options);                                                 // 1109\n        obj = Utils.merge(obj, newObj);                                                                               // 1110\n    }                                                                                                                 // 1111\n                                                                                                                      // 1112\n    return Utils.compact(obj);                                                                                        // 1113\n};                                                                                                                    // 1114\n                                                                                                                      // 1115\n},{\"./utils\":9}],8:[function(require,module,exports){                                                                 // 1116\n// Load modules                                                                                                       // 1117\n                                                                                                                      // 1118\nvar Utils = require('./utils');                                                                                       // 1119\n                                                                                                                      // 1120\n                                                                                                                      // 1121\n// Declare internals                                                                                                  // 1122\n                                                                                                                      // 1123\nvar internals = {                                                                                                     // 1124\n    delimiter: '&',                                                                                                   // 1125\n    arrayPrefixGenerators: {                                                                                          // 1126\n        brackets: function (prefix, key) {                                                                            // 1127\n                                                                                                                      // 1128\n            return prefix + '[]';                                                                                     // 1129\n        },                                                                                                            // 1130\n        indices: function (prefix, key) {                                                                             // 1131\n                                                                                                                      // 1132\n            return prefix + '[' + key + ']';                                                                          // 1133\n        },                                                                                                            // 1134\n        repeat: function (prefix, key) {                                                                              // 1135\n                                                                                                                      // 1136\n            return prefix;                                                                                            // 1137\n        }                                                                                                             // 1138\n    },                                                                                                                // 1139\n    strictNullHandling: false                                                                                         // 1140\n};                                                                                                                    // 1141\n                                                                                                                      // 1142\n                                                                                                                      // 1143\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, filter) {                       // 1144\n                                                                                                                      // 1145\n    if (typeof filter === 'function') {                                                                               // 1146\n        obj = filter(prefix, obj);                                                                                    // 1147\n    }                                                                                                                 // 1148\n    else if (Utils.isBuffer(obj)) {                                                                                   // 1149\n        obj = obj.toString();                                                                                         // 1150\n    }                                                                                                                 // 1151\n    else if (obj instanceof Date) {                                                                                   // 1152\n        obj = obj.toISOString();                                                                                      // 1153\n    }                                                                                                                 // 1154\n    else if (obj === null) {                                                                                          // 1155\n        if (strictNullHandling) {                                                                                     // 1156\n            return Utils.encode(prefix);                                                                              // 1157\n        }                                                                                                             // 1158\n                                                                                                                      // 1159\n        obj = '';                                                                                                     // 1160\n    }                                                                                                                 // 1161\n                                                                                                                      // 1162\n    if (typeof obj === 'string' ||                                                                                    // 1163\n        typeof obj === 'number' ||                                                                                    // 1164\n        typeof obj === 'boolean') {                                                                                   // 1165\n                                                                                                                      // 1166\n        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];                                                      // 1167\n    }                                                                                                                 // 1168\n                                                                                                                      // 1169\n    var values = [];                                                                                                  // 1170\n                                                                                                                      // 1171\n    if (typeof obj === 'undefined') {                                                                                 // 1172\n        return values;                                                                                                // 1173\n    }                                                                                                                 // 1174\n                                                                                                                      // 1175\n    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);                                                  // 1176\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 1177\n        var key = objKeys[i];                                                                                         // 1178\n                                                                                                                      // 1179\n        if (Array.isArray(obj)) {                                                                                     // 1180\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, filter));\n        }                                                                                                             // 1182\n        else {                                                                                                        // 1183\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, filter));\n        }                                                                                                             // 1185\n    }                                                                                                                 // 1186\n                                                                                                                      // 1187\n    return values;                                                                                                    // 1188\n};                                                                                                                    // 1189\n                                                                                                                      // 1190\n                                                                                                                      // 1191\nmodule.exports = function (obj, options) {                                                                            // 1192\n                                                                                                                      // 1193\n    options = options || {};                                                                                          // 1194\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;               // 1195\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var objKeys;                                                                                                      // 1197\n    var filter;                                                                                                       // 1198\n    if (typeof options.filter === 'function') {                                                                       // 1199\n        filter = options.filter;                                                                                      // 1200\n        obj = filter('', obj);                                                                                        // 1201\n    }                                                                                                                 // 1202\n    else if (Array.isArray(options.filter)) {                                                                         // 1203\n        objKeys = filter = options.filter;                                                                            // 1204\n    }                                                                                                                 // 1205\n                                                                                                                      // 1206\n    var keys = [];                                                                                                    // 1207\n                                                                                                                      // 1208\n    if (typeof obj !== 'object' ||                                                                                    // 1209\n        obj === null) {                                                                                               // 1210\n                                                                                                                      // 1211\n        return '';                                                                                                    // 1212\n    }                                                                                                                 // 1213\n                                                                                                                      // 1214\n    var arrayFormat;                                                                                                  // 1215\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {                                                     // 1216\n        arrayFormat = options.arrayFormat;                                                                            // 1217\n    }                                                                                                                 // 1218\n    else if ('indices' in options) {                                                                                  // 1219\n        arrayFormat = options.indices ? 'indices' : 'repeat';                                                         // 1220\n    }                                                                                                                 // 1221\n    else {                                                                                                            // 1222\n        arrayFormat = 'indices';                                                                                      // 1223\n    }                                                                                                                 // 1224\n                                                                                                                      // 1225\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];                                           // 1226\n                                                                                                                      // 1227\n    if (!objKeys) {                                                                                                   // 1228\n        objKeys = Object.keys(obj);                                                                                   // 1229\n    }                                                                                                                 // 1230\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 1231\n        var key = objKeys[i];                                                                                         // 1232\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, filter));      // 1233\n    }                                                                                                                 // 1234\n                                                                                                                      // 1235\n    return keys.join(delimiter);                                                                                      // 1236\n};                                                                                                                    // 1237\n                                                                                                                      // 1238\n},{\"./utils\":9}],9:[function(require,module,exports){                                                                 // 1239\n// Load modules                                                                                                       // 1240\n                                                                                                                      // 1241\n                                                                                                                      // 1242\n// Declare internals                                                                                                  // 1243\n                                                                                                                      // 1244\nvar internals = {};                                                                                                   // 1245\ninternals.hexTable = new Array(256);                                                                                  // 1246\nfor (var i = 0; i < 256; ++i) {                                                                                       // 1247\n    internals.hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();                               // 1248\n}                                                                                                                     // 1249\n                                                                                                                      // 1250\n                                                                                                                      // 1251\nexports.arrayToObject = function (source) {                                                                           // 1252\n                                                                                                                      // 1253\n    var obj = Object.create(null);                                                                                    // 1254\n    for (var i = 0, il = source.length; i < il; ++i) {                                                                // 1255\n        if (typeof source[i] !== 'undefined') {                                                                       // 1256\n                                                                                                                      // 1257\n            obj[i] = source[i];                                                                                       // 1258\n        }                                                                                                             // 1259\n    }                                                                                                                 // 1260\n                                                                                                                      // 1261\n    return obj;                                                                                                       // 1262\n};                                                                                                                    // 1263\n                                                                                                                      // 1264\n                                                                                                                      // 1265\nexports.merge = function (target, source) {                                                                           // 1266\n                                                                                                                      // 1267\n    if (!source) {                                                                                                    // 1268\n        return target;                                                                                                // 1269\n    }                                                                                                                 // 1270\n                                                                                                                      // 1271\n    if (typeof source !== 'object') {                                                                                 // 1272\n        if (Array.isArray(target)) {                                                                                  // 1273\n            target.push(source);                                                                                      // 1274\n        }                                                                                                             // 1275\n        else if (typeof target === 'object') {                                                                        // 1276\n            target[source] = true;                                                                                    // 1277\n        }                                                                                                             // 1278\n        else {                                                                                                        // 1279\n            target = [target, source];                                                                                // 1280\n        }                                                                                                             // 1281\n                                                                                                                      // 1282\n        return target;                                                                                                // 1283\n    }                                                                                                                 // 1284\n                                                                                                                      // 1285\n    if (typeof target !== 'object') {                                                                                 // 1286\n        target = [target].concat(source);                                                                             // 1287\n        return target;                                                                                                // 1288\n    }                                                                                                                 // 1289\n                                                                                                                      // 1290\n    if (Array.isArray(target) &&                                                                                      // 1291\n        !Array.isArray(source)) {                                                                                     // 1292\n                                                                                                                      // 1293\n        target = exports.arrayToObject(target);                                                                       // 1294\n    }                                                                                                                 // 1295\n                                                                                                                      // 1296\n    var keys = Object.keys(source);                                                                                   // 1297\n    for (var k = 0, kl = keys.length; k < kl; ++k) {                                                                  // 1298\n        var key = keys[k];                                                                                            // 1299\n        var value = source[key];                                                                                      // 1300\n                                                                                                                      // 1301\n        if (!target[key]) {                                                                                           // 1302\n            target[key] = value;                                                                                      // 1303\n        }                                                                                                             // 1304\n        else {                                                                                                        // 1305\n            target[key] = exports.merge(target[key], value);                                                          // 1306\n        }                                                                                                             // 1307\n    }                                                                                                                 // 1308\n                                                                                                                      // 1309\n    return target;                                                                                                    // 1310\n};                                                                                                                    // 1311\n                                                                                                                      // 1312\n                                                                                                                      // 1313\nexports.decode = function (str) {                                                                                     // 1314\n                                                                                                                      // 1315\n    try {                                                                                                             // 1316\n        return decodeURIComponent(str.replace(/\\+/g, ' '));                                                           // 1317\n    } catch (e) {                                                                                                     // 1318\n        return str;                                                                                                   // 1319\n    }                                                                                                                 // 1320\n};                                                                                                                    // 1321\n                                                                                                                      // 1322\nexports.encode = function (str) {                                                                                     // 1323\n                                                                                                                      // 1324\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.               // 1325\n    // It has been adapted here for stricter adherence to RFC 3986                                                    // 1326\n    if (str.length === 0) {                                                                                           // 1327\n        return str;                                                                                                   // 1328\n    }                                                                                                                 // 1329\n                                                                                                                      // 1330\n    if (typeof str !== 'string') {                                                                                    // 1331\n        str = '' + str;                                                                                               // 1332\n    }                                                                                                                 // 1333\n                                                                                                                      // 1334\n    var out = '';                                                                                                     // 1335\n    for (var i = 0, il = str.length; i < il; ++i) {                                                                   // 1336\n        var c = str.charCodeAt(i);                                                                                    // 1337\n                                                                                                                      // 1338\n        if (c === 0x2D || // -                                                                                        // 1339\n            c === 0x2E || // .                                                                                        // 1340\n            c === 0x5F || // _                                                                                        // 1341\n            c === 0x7E || // ~                                                                                        // 1342\n            (c >= 0x30 && c <= 0x39) || // 0-9                                                                        // 1343\n            (c >= 0x41 && c <= 0x5A) || // a-z                                                                        // 1344\n            (c >= 0x61 && c <= 0x7A)) { // A-Z                                                                        // 1345\n                                                                                                                      // 1346\n            out += str[i];                                                                                            // 1347\n            continue;                                                                                                 // 1348\n        }                                                                                                             // 1349\n                                                                                                                      // 1350\n        if (c < 0x80) {                                                                                               // 1351\n            out += internals.hexTable[c];                                                                             // 1352\n            continue;                                                                                                 // 1353\n        }                                                                                                             // 1354\n                                                                                                                      // 1355\n        if (c < 0x800) {                                                                                              // 1356\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];                       // 1357\n            continue;                                                                                                 // 1358\n        }                                                                                                             // 1359\n                                                                                                                      // 1360\n        if (c < 0xD800 || c >= 0xE000) {                                                                              // 1361\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;                                                                                                 // 1363\n        }                                                                                                             // 1364\n                                                                                                                      // 1365\n        ++i;                                                                                                          // 1366\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));                                            // 1367\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }                                                                                                                 // 1369\n                                                                                                                      // 1370\n    return out;                                                                                                       // 1371\n};                                                                                                                    // 1372\n                                                                                                                      // 1373\nexports.compact = function (obj, refs) {                                                                              // 1374\n                                                                                                                      // 1375\n    if (typeof obj !== 'object' ||                                                                                    // 1376\n        obj === null) {                                                                                               // 1377\n                                                                                                                      // 1378\n        return obj;                                                                                                   // 1379\n    }                                                                                                                 // 1380\n                                                                                                                      // 1381\n    refs = refs || [];                                                                                                // 1382\n    var lookup = refs.indexOf(obj);                                                                                   // 1383\n    if (lookup !== -1) {                                                                                              // 1384\n        return refs[lookup];                                                                                          // 1385\n    }                                                                                                                 // 1386\n                                                                                                                      // 1387\n    refs.push(obj);                                                                                                   // 1388\n                                                                                                                      // 1389\n    if (Array.isArray(obj)) {                                                                                         // 1390\n        var compacted = [];                                                                                           // 1391\n                                                                                                                      // 1392\n        for (var i = 0, il = obj.length; i < il; ++i) {                                                               // 1393\n            if (typeof obj[i] !== 'undefined') {                                                                      // 1394\n                compacted.push(obj[i]);                                                                               // 1395\n            }                                                                                                         // 1396\n        }                                                                                                             // 1397\n                                                                                                                      // 1398\n        return compacted;                                                                                             // 1399\n    }                                                                                                                 // 1400\n                                                                                                                      // 1401\n    var keys = Object.keys(obj);                                                                                      // 1402\n    for (i = 0, il = keys.length; i < il; ++i) {                                                                      // 1403\n        var key = keys[i];                                                                                            // 1404\n        obj[key] = exports.compact(obj[key], refs);                                                                   // 1405\n    }                                                                                                                 // 1406\n                                                                                                                      // 1407\n    return obj;                                                                                                       // 1408\n};                                                                                                                    // 1409\n                                                                                                                      // 1410\n                                                                                                                      // 1411\nexports.isRegExp = function (obj) {                                                                                   // 1412\n                                                                                                                      // 1413\n    return Object.prototype.toString.call(obj) === '[object RegExp]';                                                 // 1414\n};                                                                                                                    // 1415\n                                                                                                                      // 1416\n                                                                                                                      // 1417\nexports.isBuffer = function (obj) {                                                                                   // 1418\n                                                                                                                      // 1419\n    if (obj === null ||                                                                                               // 1420\n        typeof obj === 'undefined') {                                                                                 // 1421\n                                                                                                                      // 1422\n        return false;                                                                                                 // 1423\n    }                                                                                                                 // 1424\n                                                                                                                      // 1425\n    return !!(obj.constructor &&                                                                                      // 1426\n              obj.constructor.isBuffer &&                                                                             // 1427\n              obj.constructor.isBuffer(obj));                                                                         // 1428\n};                                                                                                                    // 1429\n                                                                                                                      // 1430\n},{}],10:[function(require,module,exports){                                                                           // 1431\npage = require('page');                                                                                               // 1432\nqs   = require('qs');                                                                                                 // 1433\n                                                                                                                      // 1434\n},{\"page\":2,\"qs\":5}]},{},[10])                                                                                        // 1435\n//# sourceMappingURL=kadira:flow-router/client.browserify.js                                                          // 1436\n                                                                                                                      // 1437\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/triggers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// a set of utility functions for triggers                                                                            // 1\n                                                                                                                      // 2\nTriggers = {};                                                                                                        // 3\n                                                                                                                      // 4\n// Apply filters for a set of triggers                                                                                // 5\n// @triggers - a set of triggers                                                                                      // 6\n// @filter - filter with array fileds with `only` and `except`                                                        // 7\n//           support only either `only` or `except`, but not both                                                     // 8\nTriggers.applyFilters = function(triggers, filter) {                                                                  // 9\n  if(!(triggers instanceof Array)) {                                                                                  // 10\n    triggers = [triggers];                                                                                            // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  if(!filter) {                                                                                                       // 14\n    return triggers;                                                                                                  // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  if(filter.only && filter.except) {                                                                                  // 18\n    throw new Error(\"Triggers don't support only and except filters at once\");                                        // 19\n  }                                                                                                                   // 20\n                                                                                                                      // 21\n  if(filter.only && !(filter.only instanceof Array)) {                                                                // 22\n    throw new Error(\"only filters needs to be an array\");                                                             // 23\n  }                                                                                                                   // 24\n                                                                                                                      // 25\n  if(filter.except && !(filter.except instanceof Array)) {                                                            // 26\n    throw new Error(\"except filters needs to be an array\");                                                           // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  if(filter.only) {                                                                                                   // 30\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);                                                  // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  if(filter.except) {                                                                                                 // 34\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);                                          // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  throw new Error(\"Provided a filter but not supported\");                                                             // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\n//  create triggers by bounding them to a set of route names                                                          // 41\n//  @triggers - a set of triggers                                                                                     // 42\n//  @names - list of route names to be bound (trigger runs only for these names)                                      // 43\n//  @negate - negate the result (triggers won't run for above names)                                                  // 44\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {                                               // 45\n  var namesMap = {};                                                                                                  // 46\n  _.each(names, function(name) {                                                                                      // 47\n    namesMap[name] = true;                                                                                            // 48\n  });                                                                                                                 // 49\n                                                                                                                      // 50\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {                                                  // 51\n    var modifiedTrigger = function(context, next) {                                                                   // 52\n      var routeName = context.route.name;                                                                             // 53\n      var matched = (namesMap[routeName])? 1: -1;                                                                     // 54\n      matched = (negate)? matched * -1 : matched;                                                                     // 55\n                                                                                                                      // 56\n      if(matched === 1) {                                                                                             // 57\n        originalTrigger(context, next);                                                                               // 58\n      }                                                                                                               // 59\n    };                                                                                                                // 60\n    return modifiedTrigger;                                                                                           // 61\n  });                                                                                                                 // 62\n                                                                                                                      // 63\n  return filteredTriggers;                                                                                            // 64\n};                                                                                                                    // 65\n                                                                                                                      // 66\n//  run triggers and abort if redirected or callback stopped                                                          // 67\n//  @triggers - a set of triggers                                                                                     // 68\n//  @context - context we need to pass (it must have the route)                                                       // 69\n//  @redirectFn - function which used to redirect                                                                     // 70\n//  @after - called after if only all the triggers runs                                                               // 71\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {                                               // 72\n  var abort = false;                                                                                                  // 73\n  var inCurrentLoop = true;                                                                                           // 74\n  var alreadyRedirected = false;                                                                                      // 75\n                                                                                                                      // 76\n  for(var lc=0; lc<triggers.length; lc++) {                                                                           // 77\n    var trigger = triggers[lc];                                                                                       // 78\n    trigger(context, doRedirect, doStop);                                                                             // 79\n                                                                                                                      // 80\n    if(abort) {                                                                                                       // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n  }                                                                                                                   // 84\n                                                                                                                      // 85\n  // mark that, we've exceeds the currentEventloop for                                                                // 86\n  // this set of triggers.                                                                                            // 87\n  inCurrentLoop = false;                                                                                              // 88\n  after();                                                                                                            // 89\n                                                                                                                      // 90\n  function doRedirect(url, params, queryParams) {                                                                     // 91\n    if(alreadyRedirected) {                                                                                           // 92\n      throw new Error(\"already redirected\");                                                                          // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    if(!inCurrentLoop) {                                                                                              // 96\n      throw new Error(\"redirect needs to be done in sync\");                                                           // 97\n    }                                                                                                                 // 98\n                                                                                                                      // 99\n    if(!url) {                                                                                                        // 100\n      throw new Error(\"trigger redirect requires an URL\");                                                            // 101\n    }                                                                                                                 // 102\n                                                                                                                      // 103\n    abort = true;                                                                                                     // 104\n    alreadyRedirected = true;                                                                                         // 105\n    redirectFn(url, params, queryParams);                                                                             // 106\n  }                                                                                                                   // 107\n                                                                                                                      // 108\n  function doStop() {                                                                                                 // 109\n    abort = true;                                                                                                     // 110\n  }                                                                                                                   // 111\n};                                                                                                                    // 112\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/router.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRouter = function () {                                                                                                // 1\n  var self = this;                                                                                                    // 2\n  this.globals = [];                                                                                                  // 3\n  this.subscriptions = Function.prototype;                                                                            // 4\n                                                                                                                      // 5\n  this._tracker = this._buildTracker();                                                                               // 6\n  this._current = {};                                                                                                 // 7\n                                                                                                                      // 8\n  // tracks the current path change                                                                                   // 9\n  this._onEveryPath = new Tracker.Dependency();                                                                       // 10\n                                                                                                                      // 11\n  this._globalRoute = new Route(this);                                                                                // 12\n                                                                                                                      // 13\n  // holds onRoute callbacks                                                                                          // 14\n  this._onRouteCallbacks = [];                                                                                        // 15\n                                                                                                                      // 16\n  // if _askedToWait is true. We don't automatically start the router                                                 // 17\n  // in Meteor.startup callback. (see client/_init.js)                                                                // 18\n  // Instead user need to call `.initialize()                                                                         // 19\n  this._askedToWait = false;                                                                                          // 20\n  this._initialized = false;                                                                                          // 21\n  this._triggersEnter = [];                                                                                           // 22\n  this._triggersExit = [];                                                                                            // 23\n  this._routes = [];                                                                                                  // 24\n  this._routesMap = {};                                                                                               // 25\n  this._updateCallbacks();                                                                                            // 26\n  this.notFound = this.notfound = null;                                                                               // 27\n  // indicate it's okay (or not okay) to run the tracker                                                              // 28\n  // when doing subscriptions                                                                                         // 29\n  // using a number and increment it help us to support FlowRouter.go()                                               // 30\n  // and legitimate reruns inside tracker on the same event loop.                                                     // 31\n  // this is a solution for #145                                                                                      // 32\n  this.safeToRun = 0;                                                                                                 // 33\n                                                                                                                      // 34\n  // Meteor exposes to the client the path prefix that was defined using the                                          // 35\n  // ROOT_URL environement variable on the server using the global runtime                                            // 36\n  // configuration. See #315.                                                                                         // 37\n  this._basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                              // 38\n                                                                                                                      // 39\n  // this is a chain contains a list of old routes                                                                    // 40\n  // most of the time, there is only one old route                                                                    // 41\n  // but when it's the time for a trigger redirect we've a chain                                                      // 42\n  this._oldRouteChain = [];                                                                                           // 43\n                                                                                                                      // 44\n  this.env = {                                                                                                        // 45\n    replaceState: new Meteor.EnvironmentVariable(),                                                                   // 46\n    reload: new Meteor.EnvironmentVariable(),                                                                         // 47\n    trailingSlash: new Meteor.EnvironmentVariable()                                                                   // 48\n  };                                                                                                                  // 49\n                                                                                                                      // 50\n  // redirect function used inside triggers                                                                           // 51\n  this._redirectFn = function(pathDef, fields, queryParams) {                                                         // 52\n    if (/^http(s)?:\\/\\//.test(pathDef)) {                                                                             // 53\n        var message = \"Redirects to URLs outside of the app are not supported in this version of Flow Router. Use 'window.location = yourUrl' instead\";\n        throw new Error(message);                                                                                     // 55\n    }                                                                                                                 // 56\n    self.withReplaceState(function() {                                                                                // 57\n      var path = FlowRouter.path(pathDef, fields, queryParams);                                                       // 58\n      self._page.redirect(path);                                                                                      // 59\n    });                                                                                                               // 60\n  };                                                                                                                  // 61\n  this._initTriggersAPI();                                                                                            // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\nRouter.prototype.route = function(pathDef, options, group) {                                                          // 65\n  if (!/^\\/.*/.test(pathDef)) {                                                                                       // 66\n    var message = \"route's path must start with '/'\";                                                                 // 67\n    throw new Error(message);                                                                                         // 68\n  }                                                                                                                   // 69\n                                                                                                                      // 70\n  options = options || {};                                                                                            // 71\n  var self = this;                                                                                                    // 72\n  var route = new Route(this, pathDef, options, group);                                                               // 73\n                                                                                                                      // 74\n  // calls when the page route being activates                                                                        // 75\n  route._actionHandle = function (context, next) {                                                                    // 76\n    var oldRoute = self._current.route;                                                                               // 77\n    self._oldRouteChain.push(oldRoute);                                                                               // 78\n                                                                                                                      // 79\n    var queryParams = self._qs.parse(context.querystring);                                                            // 80\n    // _qs.parse() gives us a object without prototypes,                                                              // 81\n    // created with Object.create(null)                                                                               // 82\n    // Meteor's check doesn't play nice with it.                                                                      // 83\n    // So, we need to fix it by cloning it.                                                                           // 84\n    // see more: https://github.com/meteorhacks/flow-router/issues/164                                                // 85\n    queryParams = JSON.parse(JSON.stringify(queryParams));                                                            // 86\n                                                                                                                      // 87\n    self._current = {                                                                                                 // 88\n      path: context.path,                                                                                             // 89\n      context: context,                                                                                               // 90\n      params: context.params,                                                                                         // 91\n      queryParams: queryParams,                                                                                       // 92\n      route: route,                                                                                                   // 93\n      oldRoute: oldRoute                                                                                              // 94\n    };                                                                                                                // 95\n                                                                                                                      // 96\n    // we need to invalidate if all the triggers have been completed                                                  // 97\n    // if not that means, we've been redirected to another path                                                       // 98\n    // then we don't need to invalidate                                                                               // 99\n    var afterAllTriggersRan = function() {                                                                            // 100\n      self._invalidateTracker();                                                                                      // 101\n    };                                                                                                                // 102\n                                                                                                                      // 103\n    var triggers = self._triggersEnter.concat(route._triggersEnter);                                                  // 104\n    Triggers.runTriggers(                                                                                             // 105\n      triggers,                                                                                                       // 106\n      self._current,                                                                                                  // 107\n      self._redirectFn,                                                                                               // 108\n      afterAllTriggersRan                                                                                             // 109\n    );                                                                                                                // 110\n  };                                                                                                                  // 111\n                                                                                                                      // 112\n  // calls when you exit from the page js route                                                                       // 113\n  route._exitHandle = function(context, next) {                                                                       // 114\n    var triggers = self._triggersExit.concat(route._triggersExit);                                                    // 115\n    Triggers.runTriggers(                                                                                             // 116\n      triggers,                                                                                                       // 117\n      self._current,                                                                                                  // 118\n      self._redirectFn,                                                                                               // 119\n      next                                                                                                            // 120\n    );                                                                                                                // 121\n  };                                                                                                                  // 122\n                                                                                                                      // 123\n  this._routes.push(route);                                                                                           // 124\n  if (options.name) {                                                                                                 // 125\n    this._routesMap[options.name] = route;                                                                            // 126\n  }                                                                                                                   // 127\n                                                                                                                      // 128\n  this._updateCallbacks();                                                                                            // 129\n  this._triggerRouteRegister(route);                                                                                  // 130\n                                                                                                                      // 131\n  return route;                                                                                                       // 132\n};                                                                                                                    // 133\n                                                                                                                      // 134\nRouter.prototype.group = function(options) {                                                                          // 135\n  return new Group(this, options);                                                                                    // 136\n};                                                                                                                    // 137\n                                                                                                                      // 138\nRouter.prototype.path = function(pathDef, fields, queryParams) {                                                      // 139\n  if (this._routesMap[pathDef]) {                                                                                     // 140\n    pathDef = this._routesMap[pathDef].pathDef;                                                                       // 141\n  }                                                                                                                   // 142\n                                                                                                                      // 143\n  var path = \"\";                                                                                                      // 144\n                                                                                                                      // 145\n  // Prefix the path with the router global prefix                                                                    // 146\n  if (this._basePath) {                                                                                               // 147\n    path += \"/\" + this._basePath + \"/\";                                                                               // 148\n  }                                                                                                                   // 149\n                                                                                                                      // 150\n  fields = fields || {};                                                                                              // 151\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;                                                                            // 152\n  path += pathDef.replace(regExp, function(key) {                                                                     // 153\n    var firstRegexpChar = key.indexOf(\"(\");                                                                           // 154\n    // get the content behind : and (\\\\d+/)                                                                           // 155\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);                                        // 156\n    // remove +?*                                                                                                     // 157\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");                                                                              // 158\n                                                                                                                      // 159\n    // this is to allow page js to keep the custom characters as it is                                                // 160\n    // we need to encode 2 times otherwise \"/\" char does not work properly                                            // 161\n    // So, in that case, when I includes \"/\" it will think it's a part of the                                         // 162\n    // route. encoding 2times fixes it                                                                                // 163\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));                                                 // 164\n  });                                                                                                                 // 165\n                                                                                                                      // 166\n  // Replace multiple slashes with single slash                                                                       // 167\n  path = path.replace(/\\/\\/+/g, \"/\");                                                                                 // 168\n                                                                                                                      // 169\n  // remove trailing slash                                                                                            // 170\n  // but keep the root slash if it's the only one                                                                     // 171\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");                                                       // 172\n                                                                                                                      // 173\n  // explictly asked to add a trailing slash                                                                          // 174\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {                                                          // 175\n    path += \"/\";                                                                                                      // 176\n  }                                                                                                                   // 177\n                                                                                                                      // 178\n  var strQueryParams = this._qs.stringify(queryParams || {});                                                         // 179\n  if(strQueryParams) {                                                                                                // 180\n    path += \"?\" + strQueryParams;                                                                                     // 181\n  }                                                                                                                   // 182\n                                                                                                                      // 183\n  return path;                                                                                                        // 184\n};                                                                                                                    // 185\n                                                                                                                      // 186\nRouter.prototype.go = function(pathDef, fields, queryParams) {                                                        // 187\n  var path = this.path(pathDef, fields, queryParams);                                                                 // 188\n                                                                                                                      // 189\n  var useReplaceState = this.env.replaceState.get();                                                                  // 190\n  if(useReplaceState) {                                                                                               // 191\n    this._page.replace(path);                                                                                         // 192\n  } else {                                                                                                            // 193\n    this._page(path);                                                                                                 // 194\n  }                                                                                                                   // 195\n};                                                                                                                    // 196\n                                                                                                                      // 197\nRouter.prototype.reload = function() {                                                                                // 198\n  var self = this;                                                                                                    // 199\n                                                                                                                      // 200\n  self.env.reload.withValue(true, function() {                                                                        // 201\n    self._page.replace(self._current.path);                                                                           // 202\n  });                                                                                                                 // 203\n};                                                                                                                    // 204\n                                                                                                                      // 205\nRouter.prototype.redirect = function(path) {                                                                          // 206\n  this._page.redirect(path);                                                                                          // 207\n};                                                                                                                    // 208\n                                                                                                                      // 209\nRouter.prototype.setParams = function(newParams) {                                                                    // 210\n  if(!this._current.route) {return false;}                                                                            // 211\n                                                                                                                      // 212\n  var pathDef = this._current.route.pathDef;                                                                          // 213\n  var existingParams = this._current.params;                                                                          // 214\n  var params = {};                                                                                                    // 215\n  _.each(_.keys(existingParams), function(key) {                                                                      // 216\n    params[key] = existingParams[key];                                                                                // 217\n  });                                                                                                                 // 218\n                                                                                                                      // 219\n  params = _.extend(params, newParams);                                                                               // 220\n  var queryParams = this._current.queryParams;                                                                        // 221\n                                                                                                                      // 222\n  this.go(pathDef, params, queryParams);                                                                              // 223\n  return true;                                                                                                        // 224\n};                                                                                                                    // 225\n                                                                                                                      // 226\nRouter.prototype.setQueryParams = function(newParams) {                                                               // 227\n  if(!this._current.route) {return false;}                                                                            // 228\n                                                                                                                      // 229\n  var queryParams = _.clone(this._current.queryParams);                                                               // 230\n  _.extend(queryParams, newParams);                                                                                   // 231\n                                                                                                                      // 232\n  for (var k in queryParams) {                                                                                        // 233\n    if (queryParams[k] === null || queryParams[k] === undefined) {                                                    // 234\n      delete queryParams[k];                                                                                          // 235\n    }                                                                                                                 // 236\n  }                                                                                                                   // 237\n                                                                                                                      // 238\n  var pathDef = this._current.route.pathDef;                                                                          // 239\n  var params = this._current.params;                                                                                  // 240\n  this.go(pathDef, params, queryParams);                                                                              // 241\n  return true;                                                                                                        // 242\n};                                                                                                                    // 243\n                                                                                                                      // 244\n// .current is not reactive                                                                                           // 245\n// This is by design. use .getParam() instead                                                                         // 246\n// If you really need to watch the path change, use .watchPathChange()                                                // 247\nRouter.prototype.current = function() {                                                                               // 248\n  // We can't trust outside, that's why we clone this                                                                 // 249\n  // Anyway, we can't clone the whole object since it has non-jsonable values                                         // 250\n  // That's why we clone what's really needed.                                                                        // 251\n  var current = _.clone(this._current);                                                                               // 252\n  current.queryParams = EJSON.clone(current.queryParams);                                                             // 253\n  current.params = EJSON.clone(current.params);                                                                       // 254\n  return current;                                                                                                     // 255\n};                                                                                                                    // 256\n                                                                                                                      // 257\n// Implementing Reactive APIs                                                                                         // 258\nvar reactiveApis = [                                                                                                  // 259\n  'getParam', 'getQueryParam',                                                                                        // 260\n  'getRouteName', 'watchPathChange'                                                                                   // 261\n];                                                                                                                    // 262\nreactiveApis.forEach(function(api) {                                                                                  // 263\n  Router.prototype[api] = function(arg1) {                                                                            // 264\n    // when this is calling, there may not be any route initiated                                                     // 265\n    // so we need to handle it                                                                                        // 266\n    var currentRoute = this._current.route;                                                                           // 267\n    if(!currentRoute) {                                                                                               // 268\n      this._onEveryPath.depend();                                                                                     // 269\n      return;                                                                                                         // 270\n    }                                                                                                                 // 271\n                                                                                                                      // 272\n    // currently, there is only one argument. If we've more let's add more args                                       // 273\n    // this is not clean code, but better in performance                                                              // 274\n    return currentRoute[api].call(currentRoute, arg1);                                                                // 275\n  };                                                                                                                  // 276\n});                                                                                                                   // 277\n                                                                                                                      // 278\nRouter.prototype.subsReady = function() {                                                                             // 279\n  var callback = null;                                                                                                // 280\n  var args = _.toArray(arguments);                                                                                    // 281\n                                                                                                                      // 282\n  if (typeof _.last(args) === \"function\") {                                                                           // 283\n    callback = args.pop();                                                                                            // 284\n  }                                                                                                                   // 285\n                                                                                                                      // 286\n  var currentRoute = this.current().route;                                                                            // 287\n  var globalRoute = this._globalRoute;                                                                                // 288\n                                                                                                                      // 289\n  // we need to depend for every route change and                                                                     // 290\n  // rerun subscriptions to check the ready state                                                                     // 291\n  this._onEveryPath.depend();                                                                                         // 292\n                                                                                                                      // 293\n  if(!currentRoute) {                                                                                                 // 294\n    return false;                                                                                                     // 295\n  }                                                                                                                   // 296\n                                                                                                                      // 297\n  var subscriptions;                                                                                                  // 298\n  if(args.length === 0) {                                                                                             // 299\n    subscriptions = _.values(globalRoute.getAllSubscriptions());                                                      // 300\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));                               // 301\n  } else {                                                                                                            // 302\n    subscriptions = _.map(args, function(subName) {                                                                   // 303\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);                           // 304\n    });                                                                                                               // 305\n  }                                                                                                                   // 306\n                                                                                                                      // 307\n  var isReady = function() {                                                                                          // 308\n    var ready =  _.every(subscriptions, function(sub) {                                                               // 309\n      return sub && sub.ready();                                                                                      // 310\n    });                                                                                                               // 311\n                                                                                                                      // 312\n    return ready;                                                                                                     // 313\n  };                                                                                                                  // 314\n                                                                                                                      // 315\n  if (callback) {                                                                                                     // 316\n    Tracker.autorun(function(c) {                                                                                     // 317\n      if (isReady()) {                                                                                                // 318\n        callback();                                                                                                   // 319\n        c.stop();                                                                                                     // 320\n      }                                                                                                               // 321\n    });                                                                                                               // 322\n  } else {                                                                                                            // 323\n    return isReady();                                                                                                 // 324\n  }                                                                                                                   // 325\n};                                                                                                                    // 326\n                                                                                                                      // 327\nRouter.prototype.withReplaceState = function(fn) {                                                                    // 328\n  return this.env.replaceState.withValue(true, fn);                                                                   // 329\n};                                                                                                                    // 330\n                                                                                                                      // 331\nRouter.prototype.withTrailingSlash = function(fn) {                                                                   // 332\n  return this.env.trailingSlash.withValue(true, fn);                                                                  // 333\n};                                                                                                                    // 334\n                                                                                                                      // 335\nRouter.prototype._notfoundRoute = function(context) {                                                                 // 336\n  this._current = {                                                                                                   // 337\n    path: context.path,                                                                                               // 338\n    context: context,                                                                                                 // 339\n    params: [],                                                                                                       // 340\n    queryParams: {},                                                                                                  // 341\n  };                                                                                                                  // 342\n                                                                                                                      // 343\n  // XXX this.notfound kept for backwards compatibility                                                               // 344\n  this.notFound = this.notFound || this.notfound;                                                                     // 345\n  if(!this.notFound) {                                                                                                // 346\n    console.error(\"There is no route for the path:\", context.path);                                                   // 347\n    return;                                                                                                           // 348\n  }                                                                                                                   // 349\n                                                                                                                      // 350\n  this._current.route = new Route(this, \"*\", this.notFound);                                                          // 351\n  this._invalidateTracker();                                                                                          // 352\n};                                                                                                                    // 353\n                                                                                                                      // 354\nRouter.prototype.initialize = function(options) {                                                                     // 355\n  options = options || {};                                                                                            // 356\n                                                                                                                      // 357\n  if(this._initialized) {                                                                                             // 358\n    throw new Error(\"FlowRouter is already initialized\");                                                             // 359\n  }                                                                                                                   // 360\n                                                                                                                      // 361\n  var self = this;                                                                                                    // 362\n  this._updateCallbacks();                                                                                            // 363\n                                                                                                                      // 364\n  // Implementing idempotent routing                                                                                  // 365\n  // by overriding page.js`s \"show\" method.                                                                           // 366\n  // Why?                                                                                                             // 367\n  // It is impossible to bypass exit triggers,                                                                        // 368\n  // because they execute before the handler and                                                                      // 369\n  // can not know what the next path is, inside exit trigger.                                                         // 370\n  //                                                                                                                  // 371\n  // we need override both show, replace to make this work                                                            // 372\n  // since we use redirect when we are talking about withReplaceState                                                 // 373\n  _.each(['show', 'replace'], function(fnName) {                                                                      // 374\n    var original = self._page[fnName];                                                                                // 375\n    self._page[fnName] = function(path, state, dispatch, push) {                                                      // 376\n      var reload = self.env.reload.get();                                                                             // 377\n      if (!reload && self._current.path === path) {                                                                   // 378\n        return;                                                                                                       // 379\n      }                                                                                                               // 380\n                                                                                                                      // 381\n      original.call(this, path, state, dispatch, push);                                                               // 382\n    };                                                                                                                // 383\n  });                                                                                                                 // 384\n                                                                                                                      // 385\n  // this is very ugly part of pagejs and it does decoding few times                                                  // 386\n  // in unpredicatable manner. See #168                                                                               // 387\n  // this is the default behaviour and we need keep it like that                                                      // 388\n  // we are doing a hack. see .path()                                                                                 // 389\n  this._page.base(this._basePath);                                                                                    // 390\n  this._page({                                                                                                        // 391\n    decodeURLComponents: true,                                                                                        // 392\n    hashbang: !!options.hashbang                                                                                      // 393\n  });                                                                                                                 // 394\n                                                                                                                      // 395\n  this._initialized = true;                                                                                           // 396\n};                                                                                                                    // 397\n                                                                                                                      // 398\nRouter.prototype._buildTracker = function() {                                                                         // 399\n  var self = this;                                                                                                    // 400\n                                                                                                                      // 401\n  // main autorun function                                                                                            // 402\n  var tracker = Tracker.autorun(function () {                                                                         // 403\n    if(!self._current || !self._current.route) {                                                                      // 404\n      return;                                                                                                         // 405\n    }                                                                                                                 // 406\n                                                                                                                      // 407\n    // see the definition of `this._processingContexts`                                                               // 408\n    var currentContext = self._current;                                                                               // 409\n    var route = currentContext.route;                                                                                 // 410\n    var path = currentContext.path;                                                                                   // 411\n                                                                                                                      // 412\n    if(self.safeToRun === 0) {                                                                                        // 413\n      var message =                                                                                                   // 414\n        \"You can't use reactive data sources like Session\" +                                                          // 415\n        \" inside the `.subscriptions` method!\";                                                                       // 416\n      throw new Error(message);                                                                                       // 417\n    }                                                                                                                 // 418\n                                                                                                                      // 419\n    // We need to run subscriptions inside a Tracker                                                                  // 420\n    // to stop subs when switching between routes                                                                     // 421\n    // But we don't need to run this tracker with                                                                     // 422\n    // other reactive changes inside the .subscription method                                                         // 423\n    // We tackle this with the `safeToRun` variable                                                                   // 424\n    self._globalRoute.clearSubscriptions();                                                                           // 425\n    self.subscriptions.call(self._globalRoute, path);                                                                 // 426\n    route.callSubscriptions(currentContext);                                                                          // 427\n                                                                                                                      // 428\n    // otherwise, computations inside action will trigger to re-run                                                   // 429\n    // this computation. which we do not need.                                                                        // 430\n    Tracker.nonreactive(function() {                                                                                  // 431\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;                                           // 432\n      var isFirstRoute = !currentContext.oldRoute;                                                                    // 433\n      // first route is not a route change                                                                            // 434\n      if(isFirstRoute) {                                                                                              // 435\n        isRouteChange = false;                                                                                        // 436\n      }                                                                                                               // 437\n                                                                                                                      // 438\n      // Clear oldRouteChain just before calling the action                                                           // 439\n      // We still need to get a copy of the oldestRoute first                                                         // 440\n      // It's very important to get the oldest route and registerRouteClose() it                                      // 441\n      // See: https://github.com/kadirahq/flow-router/issues/314                                                      // 442\n      var oldestRoute = self._oldRouteChain[0];                                                                       // 443\n      self._oldRouteChain = [];                                                                                       // 444\n                                                                                                                      // 445\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);                                        // 446\n      route.callAction(currentContext);                                                                               // 447\n                                                                                                                      // 448\n      Tracker.afterFlush(function() {                                                                                 // 449\n        self._onEveryPath.changed();                                                                                  // 450\n        if(isRouteChange) {                                                                                           // 451\n          // We need to trigger that route (definition itself) has changed.                                           // 452\n          // So, we need to re-run all the register callbacks to current route                                        // 453\n          // This is pretty important, otherwise tracker                                                              // 454\n          // can't identify new route's items                                                                         // 455\n                                                                                                                      // 456\n          // We also need to afterFlush, otherwise this will re-run                                                   // 457\n          // helpers on templates which are marked for destroying                                                     // 458\n          if(oldestRoute) {                                                                                           // 459\n            oldestRoute.registerRouteClose();                                                                         // 460\n          }                                                                                                           // 461\n        }                                                                                                             // 462\n      });                                                                                                             // 463\n    });                                                                                                               // 464\n                                                                                                                      // 465\n    self.safeToRun--;                                                                                                 // 466\n  });                                                                                                                 // 467\n                                                                                                                      // 468\n  return tracker;                                                                                                     // 469\n};                                                                                                                    // 470\n                                                                                                                      // 471\nRouter.prototype._invalidateTracker = function() {                                                                    // 472\n  var self = this;                                                                                                    // 473\n  this.safeToRun++;                                                                                                   // 474\n  this._tracker.invalidate();                                                                                         // 475\n  // After the invalidation we need to flush to make changes imediately                                               // 476\n  // otherwise, we have face some issues context mix-maches and so on.                                                // 477\n  // But there are some cases we can't flush. So we need to ready for that.                                           // 478\n                                                                                                                      // 479\n  // we clearly know, we can't flush inside an autorun                                                                // 480\n  // this may leads some issues on flow-routing                                                                       // 481\n  // we may need to do some warning                                                                                   // 482\n  if(!Tracker.currentComputation) {                                                                                   // 483\n    // Still there are some cases where we can't flush                                                                // 484\n    //  eg:- when there is a flush currently                                                                          // 485\n    // But we've no public API or hacks to get that state                                                             // 486\n    // So, this is the only solution                                                                                  // 487\n    try {                                                                                                             // 488\n      Tracker.flush();                                                                                                // 489\n    } catch(ex) {                                                                                                     // 490\n      // only handling \"while flushing\" errors                                                                        // 491\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {                                                         // 492\n        return;                                                                                                       // 493\n      }                                                                                                               // 494\n                                                                                                                      // 495\n      // XXX: fix this with a proper solution by removing subscription mgt.                                           // 496\n      // from the router. Then we don't need to run invalidate using a tracker                                        // 497\n                                                                                                                      // 498\n      // this happens when we are trying to invoke a route change                                                     // 499\n      // with inside a route chnage. (eg:- Template.onCreated)                                                        // 500\n      // Since we use page.js and tracker, we don't have much control                                                 // 501\n      // over this process.                                                                                           // 502\n      // only solution is to defer route execution.                                                                   // 503\n                                                                                                                      // 504\n      // It's possible to have more than one path want to defer                                                       // 505\n      // But, we only need to pick the last one.                                                                      // 506\n      // self._nextPath = self._current.path;                                                                         // 507\n      Meteor.defer(function() {                                                                                       // 508\n        var path = self._nextPath;                                                                                    // 509\n        if(!path) {                                                                                                   // 510\n          return;                                                                                                     // 511\n        }                                                                                                             // 512\n                                                                                                                      // 513\n        delete self._nextPath;                                                                                        // 514\n        self.env.reload.withValue(true, function() {                                                                  // 515\n          self.go(path);                                                                                              // 516\n        });                                                                                                           // 517\n      });                                                                                                             // 518\n    }                                                                                                                 // 519\n  }                                                                                                                   // 520\n};                                                                                                                    // 521\n                                                                                                                      // 522\nRouter.prototype._updateCallbacks = function () {                                                                     // 523\n  var self = this;                                                                                                    // 524\n                                                                                                                      // 525\n  self._page.callbacks = [];                                                                                          // 526\n  self._page.exits = [];                                                                                              // 527\n                                                                                                                      // 528\n  _.each(self._routes, function(route) {                                                                              // 529\n    self._page(route.pathDef, route._actionHandle);                                                                   // 530\n    self._page.exit(route.pathDef, route._exitHandle);                                                                // 531\n  });                                                                                                                 // 532\n                                                                                                                      // 533\n  self._page(\"*\", function(context) {                                                                                 // 534\n    self._notfoundRoute(context);                                                                                     // 535\n  });                                                                                                                 // 536\n};                                                                                                                    // 537\n                                                                                                                      // 538\nRouter.prototype._initTriggersAPI = function() {                                                                      // 539\n  var self = this;                                                                                                    // 540\n  this.triggers = {                                                                                                   // 541\n    enter: function(triggers, filter) {                                                                               // 542\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 543\n      if(triggers.length) {                                                                                           // 544\n        self._triggersEnter = self._triggersEnter.concat(triggers);                                                   // 545\n      }                                                                                                               // 546\n    },                                                                                                                // 547\n                                                                                                                      // 548\n    exit: function(triggers, filter) {                                                                                // 549\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 550\n      if(triggers.length) {                                                                                           // 551\n        self._triggersExit = self._triggersExit.concat(triggers);                                                     // 552\n      }                                                                                                               // 553\n    }                                                                                                                 // 554\n  };                                                                                                                  // 555\n};                                                                                                                    // 556\n                                                                                                                      // 557\nRouter.prototype.wait = function() {                                                                                  // 558\n  if(this._initialized) {                                                                                             // 559\n    throw new Error(\"can't wait after FlowRouter has been initialized\");                                              // 560\n  }                                                                                                                   // 561\n                                                                                                                      // 562\n  this._askedToWait = true;                                                                                           // 563\n};                                                                                                                    // 564\n                                                                                                                      // 565\nRouter.prototype.onRouteRegister = function(cb) {                                                                     // 566\n  this._onRouteCallbacks.push(cb);                                                                                    // 567\n};                                                                                                                    // 568\n                                                                                                                      // 569\nRouter.prototype._triggerRouteRegister = function(currentRoute) {                                                     // 570\n  // We should only need to send a safe set of fields on the route                                                    // 571\n  // object.                                                                                                          // 572\n  // This is not to hide what's inside the route object, but to show                                                  // 573\n  // these are the public APIs                                                                                        // 574\n  var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');                                               // 575\n  var omittingOptionFields = [                                                                                        // 576\n    'triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'                                                // 577\n  ];                                                                                                                  // 578\n  routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);                                        // 579\n                                                                                                                      // 580\n  _.each(this._onRouteCallbacks, function(cb) {                                                                       // 581\n    cb(routePublicApi);                                                                                               // 582\n  });                                                                                                                 // 583\n};                                                                                                                    // 584\n                                                                                                                      // 585\nRouter.prototype._page = page;                                                                                        // 586\nRouter.prototype._qs = qs;                                                                                            // 587\n                                                                                                                      // 588\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/group.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nGroup = function(router, options, parent) {                                                                           // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {                                                              // 4\n    var message = \"group's prefix must start with '/'\";                                                               // 5\n    throw new Error(message);                                                                                         // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  this._router = router;                                                                                              // 9\n  this.prefix = options.prefix || '';                                                                                 // 10\n  this.name = options.name;                                                                                           // 11\n                                                                                                                      // 12\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 13\n  this._triggersExit = options.triggersExit || [];                                                                    // 14\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 15\n                                                                                                                      // 16\n  this.parent = parent;                                                                                               // 17\n  if (this.parent) {                                                                                                  // 18\n    this.prefix = parent.prefix + this.prefix;                                                                        // 19\n                                                                                                                      // 20\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);                                          // 21\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);                                             // 22\n  }                                                                                                                   // 23\n};                                                                                                                    // 24\n                                                                                                                      // 25\nGroup.prototype.route = function(pathDef, options, group) {                                                           // 26\n  options = options || {};                                                                                            // 27\n                                                                                                                      // 28\n  if (!/^\\/.*/.test(pathDef)) {                                                                                       // 29\n    var message = \"route's path must start with '/'\";                                                                 // 30\n    throw new Error(message);                                                                                         // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  group = group || this;                                                                                              // 34\n  pathDef = this.prefix + pathDef;                                                                                    // 35\n                                                                                                                      // 36\n  var triggersEnter = options.triggersEnter || [];                                                                    // 37\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);                                                  // 38\n                                                                                                                      // 39\n  var triggersExit = options.triggersExit || [];                                                                      // 40\n  options.triggersExit = triggersExit.concat(this._triggersExit);                                                     // 41\n                                                                                                                      // 42\n  return this._router.route(pathDef, options, group);                                                                 // 43\n};                                                                                                                    // 44\n                                                                                                                      // 45\nGroup.prototype.group = function(options) {                                                                           // 46\n  return new Group(this._router, options, this);                                                                      // 47\n};                                                                                                                    // 48\n                                                                                                                      // 49\nGroup.prototype.callSubscriptions = function(current) {                                                               // 50\n  if (this.parent) {                                                                                                  // 51\n    this.parent.callSubscriptions(current);                                                                           // 52\n  }                                                                                                                   // 53\n                                                                                                                      // 54\n  this._subscriptions.call(current.route, current.params, current.queryParams);                                       // 55\n};                                                                                                                    // 56\n                                                                                                                      // 57\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/route.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRoute = function(router, pathDef, options, group) {                                                                   // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  this.options = options;                                                                                             // 4\n  this.pathDef = pathDef                                                                                              // 5\n                                                                                                                      // 6\n  // Route.path is deprecated and will be removed in 3.0                                                              // 7\n  this.path = pathDef;                                                                                                // 8\n                                                                                                                      // 9\n  if (options.name) {                                                                                                 // 10\n    this.name = options.name;                                                                                         // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  this._action = options.action || Function.prototype;                                                                // 14\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 15\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 16\n  this._triggersExit = options.triggersExit || [];                                                                    // 17\n  this._subsMap = {};                                                                                                 // 18\n  this._router = router;                                                                                              // 19\n                                                                                                                      // 20\n  this._params = new ReactiveDict();                                                                                  // 21\n  this._queryParams = new ReactiveDict();                                                                             // 22\n  this._routeCloseDep = new Tracker.Dependency();                                                                     // 23\n                                                                                                                      // 24\n  // tracks the changes in the URL                                                                                    // 25\n  this._pathChangeDep = new Tracker.Dependency();                                                                     // 26\n                                                                                                                      // 27\n  this.group = group;                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\nRoute.prototype.clearSubscriptions = function() {                                                                     // 31\n  this._subsMap = {};                                                                                                 // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\nRoute.prototype.register = function(name, sub, options) {                                                             // 35\n  this._subsMap[name] = sub;                                                                                          // 36\n};                                                                                                                    // 37\n                                                                                                                      // 38\n                                                                                                                      // 39\nRoute.prototype.getSubscription = function(name) {                                                                    // 40\n  return this._subsMap[name];                                                                                         // 41\n};                                                                                                                    // 42\n                                                                                                                      // 43\n                                                                                                                      // 44\nRoute.prototype.getAllSubscriptions = function() {                                                                    // 45\n  return this._subsMap;                                                                                               // 46\n};                                                                                                                    // 47\n                                                                                                                      // 48\nRoute.prototype.callAction = function(current) {                                                                      // 49\n  var self = this;                                                                                                    // 50\n  self._action(current.params, current.queryParams);                                                                  // 51\n};                                                                                                                    // 52\n                                                                                                                      // 53\nRoute.prototype.callSubscriptions = function(current) {                                                               // 54\n  this.clearSubscriptions();                                                                                          // 55\n  if (this.group) {                                                                                                   // 56\n    this.group.callSubscriptions(current);                                                                            // 57\n  }                                                                                                                   // 58\n                                                                                                                      // 59\n  this._subscriptions(current.params, current.queryParams);                                                           // 60\n};                                                                                                                    // 61\n                                                                                                                      // 62\nRoute.prototype.getRouteName = function() {                                                                           // 63\n  this._routeCloseDep.depend();                                                                                       // 64\n  return this.name;                                                                                                   // 65\n};                                                                                                                    // 66\n                                                                                                                      // 67\nRoute.prototype.getParam = function(key) {                                                                            // 68\n  this._routeCloseDep.depend();                                                                                       // 69\n  return this._params.get(key);                                                                                       // 70\n};                                                                                                                    // 71\n                                                                                                                      // 72\nRoute.prototype.getQueryParam = function(key) {                                                                       // 73\n  this._routeCloseDep.depend();                                                                                       // 74\n  return this._queryParams.get(key);                                                                                  // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\nRoute.prototype.watchPathChange = function() {                                                                        // 78\n  this._pathChangeDep.depend();                                                                                       // 79\n};                                                                                                                    // 80\n                                                                                                                      // 81\nRoute.prototype.registerRouteClose = function() {                                                                     // 82\n  this._params = new ReactiveDict();                                                                                  // 83\n  this._queryParams = new ReactiveDict();                                                                             // 84\n  this._routeCloseDep.changed();                                                                                      // 85\n  this._pathChangeDep.changed();                                                                                      // 86\n};                                                                                                                    // 87\n                                                                                                                      // 88\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {                                       // 89\n  // register params                                                                                                  // 90\n  var params = currentContext.params;                                                                                 // 91\n  this._updateReactiveDict(this._params, params);                                                                     // 92\n                                                                                                                      // 93\n  // register query params                                                                                            // 94\n  var queryParams = currentContext.queryParams;                                                                       // 95\n  this._updateReactiveDict(this._queryParams, queryParams);                                                           // 96\n                                                                                                                      // 97\n  // if the route is changing, we need to defer triggering path changing                                              // 98\n  // if we did this, old route's path watchers will detect this                                                       // 99\n  // Real issue is, above watcher will get removed with the new route                                                 // 100\n  // So, we don't need to trigger it now                                                                              // 101\n  // We are doing it on the route close event. So, if they exists they'll                                             // 102\n  // get notify that                                                                                                  // 103\n  if(!routeChanging) {                                                                                                // 104\n    this._pathChangeDep.changed();                                                                                    // 105\n  }                                                                                                                   // 106\n};                                                                                                                    // 107\n                                                                                                                      // 108\nRoute.prototype._updateReactiveDict = function(dict, newValues) {                                                     // 109\n  var currentKeys = _.keys(newValues);                                                                                // 110\n  var oldKeys = _.keys(dict.keyDeps);                                                                                 // 111\n                                                                                                                      // 112\n  // set new values                                                                                                   // 113\n  //  params is an array. So, _.each(params) does not works                                                           // 114\n  //  to iterate params                                                                                               // 115\n  _.each(currentKeys, function(key) {                                                                                 // 116\n    dict.set(key, newValues[key]);                                                                                    // 117\n  });                                                                                                                 // 118\n                                                                                                                      // 119\n  // remove keys which does not exisits here                                                                          // 120\n  var removedKeys = _.difference(oldKeys, currentKeys);                                                               // 121\n  _.each(removedKeys, function(key) {                                                                                 // 122\n    dict.set(key, undefined);                                                                                         // 123\n  });                                                                                                                 // 124\n};                                                                                                                    // 125\n                                                                                                                      // 126\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/_init.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Export Router Instance                                                                                             // 1\nFlowRouter = new Router();                                                                                            // 2\nFlowRouter.Router = Router;                                                                                           // 3\nFlowRouter.Route = Route;                                                                                             // 4\n                                                                                                                      // 5\n// Initialize FlowRouter                                                                                              // 6\nMeteor.startup(function () {                                                                                          // 7\n  if(!FlowRouter._askedToWait) {                                                                                      // 8\n    FlowRouter.initialize();                                                                                          // 9\n  }                                                                                                                   // 10\n});                                                                                                                   // 11\n                                                                                                                      // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['kadira:flow-router'] = {\n  FlowRouter: FlowRouter\n};\n\n})();\n","servePath":"/packages/kadira_flow-router.js","sourceMap":{"version":3,"sources":["/packages/kadira_flow-router/client.browserify.js","/packages/kadira_flow-router/client/triggers.js","/packages/kadira_flow-router/client/router.js","/packages/kadira_flow-router/client/group.js","/packages/kadira_flow-router/client/route.js","/packages/kadira_flow-router/client/_init.js"],"names":[],"mappingskBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/kadira_flow-router.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\n(function (process){\n  /* globals require, module */\n\n  'use strict';\n\n  /**\n   * Module dependencies.\n   */\n\n  var pathtoRegexp = require('path-to-regexp');\n\n  /**\n   * Module exports.\n   */\n\n  module.exports = page;\n\n  /**\n   * Detect click event\n   */\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';\n\n  /**\n   * To work properly with the URL\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API\n   */\n\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);\n\n  /**\n   * Perform initial dispatch.\n   */\n\n  var dispatch = true;\n\n\n  /**\n   * Decode URL components (query string, pathname, hash).\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.\n   */\n  var decodeURLComponents = true;\n\n  /**\n   * Base path.\n   */\n\n  var base = '';\n\n  /**\n   * Running flag.\n   */\n\n  var running;\n\n  /**\n   * HashBang option\n   */\n\n  var hashbang = false;\n\n  /**\n   * Previous context, for capturing\n   * page exit events.\n   */\n\n  var prevContext;\n\n  /**\n   * Register `path` with callback `fn()`,\n   * or route `path`, or redirection,\n   * or `page.start()`.\n   *\n   *   page(fn);\n   *   page('*', fn);\n   *   page('/user/:id', load, user);\n   *   page('/user/' + user.id, { some: 'thing' });\n   *   page('/user/' + user.id);\n   *   page('/from', '/to')\n   *   page();\n   *\n   * @param {String|Function} path\n   * @param {Function} fn...\n   * @api public\n   */\n\n  function page(path, fn) {\n    // <callback>\n    if ('function' === typeof path) {\n      return page('*', path);\n    }\n\n    // route <path> to <callback ...>\n    if ('function' === typeof fn) {\n      var route = new Route(path);\n      for (var i = 1; i < arguments.length; ++i) {\n        page.callbacks.push(route.middleware(arguments[i]));\n      }\n      // show <path> with [state]\n    } else if ('string' === typeof path) {\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);\n      // start [options]\n    } else {\n      page.start(path);\n    }\n  }\n\n  /**\n   * Callback functions.\n   */\n\n  page.callbacks = [];\n  page.exits = [];\n\n  /**\n   * Current path being processed\n   * @type {String}\n   */\n  page.current = '';\n\n  /**\n   * Number of pages navigated to.\n   * @type {number}\n   *\n   *     page.len == 0;\n   *     page('/login');\n   *     page.len == 1;\n   */\n\n  page.len = 0;\n\n  /**\n   * Get or set basepath to `path`.\n   *\n   * @param {String} path\n   * @api public\n   */\n\n  page.base = function(path) {\n    if (0 === arguments.length) return base;\n    base = path;\n  };\n\n  /**\n   * Bind with the given `options`.\n   *\n   * Options:\n   *\n   *    - `click` bind to click events [true]\n   *    - `popstate` bind to popstate [true]\n   *    - `dispatch` perform initial dispatch [true]\n   *\n   * @param {Object} options\n   * @api public\n   */\n\n  page.start = function(options) {\n    options = options || {};\n    if (running) return;\n    running = true;\n    if (false === options.dispatch) dispatch = false;\n    if (false === options.decodeURLComponents) decodeURLComponents = false;\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);\n    if (false !== options.click) {\n      document.addEventListener(clickEvent, onclick, false);\n    }\n    if (true === options.hashbang) hashbang = true;\n    if (!dispatch) return;\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);\n  };\n\n  /**\n   * Unbind click and popstate event handlers.\n   *\n   * @api public\n   */\n\n  page.stop = function() {\n    if (!running) return;\n    page.current = '';\n    page.len = 0;\n    running = false;\n    document.removeEventListener(clickEvent, onclick, false);\n    window.removeEventListener('popstate', onpopstate, false);\n  };\n\n  /**\n   * Show `path` with optional `state` object.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @param {Boolean} dispatch\n   * @return {Context}\n   * @api public\n   */\n\n  page.show = function(path, state, dispatch, push) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    if (false !== dispatch) page.dispatch(ctx);\n    if (false !== ctx.handled && false !== push) ctx.pushState();\n    return ctx;\n  };\n\n  /**\n   * Goes back in the history\n   * Back should always let the current route push state and then go back.\n   *\n   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base\n   * @param {Object} [state]\n   * @api public\n   */\n\n  page.back = function(path, state) {\n    if (page.len > 0) {\n      // this may need more testing to see if all browsers\n      // wait for the next tick to go back in history\n      history.back();\n      page.len--;\n    } else if (path) {\n      setTimeout(function() {\n        page.show(path, state);\n      });\n    }else{\n      setTimeout(function() {\n        page.show(base, state);\n      });\n    }\n  };\n\n\n  /**\n   * Register route to redirect from one path to other\n   * or just redirect to another route\n   *\n   * @param {String} from - if param 'to' is undefined redirects to 'from'\n   * @param {String} [to]\n   * @api public\n   */\n  page.redirect = function(from, to) {\n    // Define route from a path to another\n    if ('string' === typeof from && 'string' === typeof to) {\n      page(from, function(e) {\n        setTimeout(function() {\n          page.replace(to);\n        }, 0);\n      });\n    }\n\n    // Wait for the push state and replace it with another\n    if ('string' === typeof from && 'undefined' === typeof to) {\n      setTimeout(function() {\n        page.replace(from);\n      }, 0);\n    }\n  };\n\n  /**\n   * Replace `path` with optional `state` object.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @return {Context}\n   * @api public\n   */\n\n\n  page.replace = function(path, state, init, dispatch) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    ctx.init = init;\n    ctx.save(); // save before dispatching, which may redirect\n    if (false !== dispatch) page.dispatch(ctx);\n    return ctx;\n  };\n\n  /**\n   * Dispatch the given `ctx`.\n   *\n   * @param {Object} ctx\n   * @api private\n   */\n\n  page.dispatch = function(ctx) {\n    var prev = prevContext,\n      i = 0,\n      j = 0;\n\n    prevContext = ctx;\n\n    function nextExit() {\n      var fn = page.exits[j++];\n      if (!fn) return nextEnter();\n      fn(prev, nextExit);\n    }\n\n    function nextEnter() {\n      var fn = page.callbacks[i++];\n\n      if (ctx.path !== page.current) {\n        ctx.handled = false;\n        return;\n      }\n      if (!fn) return unhandled(ctx);\n      fn(ctx, nextEnter);\n    }\n\n    if (prev) {\n      nextExit();\n    } else {\n      nextEnter();\n    }\n  };\n\n  /**\n   * Unhandled `ctx`. When it's not the initial\n   * popstate then redirect. If you wish to handle\n   * 404s on your own use `page('*', callback)`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n\n  function unhandled(ctx) {\n    if (ctx.handled) return;\n    var current;\n\n    if (hashbang) {\n      current = base + location.hash.replace('#!', '');\n    } else {\n      current = location.pathname + location.search;\n    }\n\n    if (current === ctx.canonicalPath) return;\n    page.stop();\n    ctx.handled = false;\n    location.href = ctx.canonicalPath;\n  }\n\n  /**\n   * Register an exit route on `path` with\n   * callback `fn()`, which will be called\n   * on the previous context when a new\n   * page is visited.\n   */\n  page.exit = function(path, fn) {\n    if (typeof path === 'function') {\n      return page.exit('*', path);\n    }\n\n    var route = new Route(path);\n    for (var i = 1; i < arguments.length; ++i) {\n      page.exits.push(route.middleware(arguments[i]));\n    }\n  };\n\n  /**\n   * Remove URL encoding from the given `str`.\n   * Accommodates whitespace in both x-www-form-urlencoded\n   * and regular percent-encoded form.\n   *\n   * @param {str} URL component to decode\n   */\n  function decodeURLEncodedURIComponent(val) {\n    if (typeof val !== 'string') { return val; }\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;\n  }\n\n  /**\n   * Initialize a new \"request\" `Context`\n   * with the given `path` and optional initial `state`.\n   *\n   * @param {String} path\n   * @param {Object} state\n   * @api public\n   */\n\n  function Context(path, state) {\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;\n    var i = path.indexOf('?');\n\n    this.canonicalPath = path;\n    this.path = path.replace(base, '') || '/';\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';\n\n    this.title = document.title;\n    this.state = state || {};\n    this.state.path = path;\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);\n    this.params = {};\n\n    // fragment\n    this.hash = '';\n    if (!hashbang) {\n      if (!~this.path.indexOf('#')) return;\n      var parts = this.path.split('#');\n      this.path = parts[0];\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';\n      this.querystring = this.querystring.split('#')[0];\n    }\n  }\n\n  /**\n   * Expose `Context`.\n   */\n\n  page.Context = Context;\n\n  /**\n   * Push state.\n   *\n   * @api private\n   */\n\n  Context.prototype.pushState = function() {\n    page.len++;\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Save the context state.\n   *\n   * @api public\n   */\n\n  Context.prototype.save = function() {\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Initialize `Route` with the given HTTP `path`,\n   * and an array of `callbacks` and `options`.\n   *\n   * Options:\n   *\n   *   - `sensitive`    enable case-sensitive routes\n   *   - `strict`       enable strict matching for trailing slashes\n   *\n   * @param {String} path\n   * @param {Object} options.\n   * @api private\n   */\n\n  function Route(path, options) {\n    options = options || {};\n    this.path = (path === '*') ? '(.*)' : path;\n    this.method = 'GET';\n    this.regexp = pathtoRegexp(this.path,\n      this.keys = [],\n      options.sensitive,\n      options.strict);\n  }\n\n  /**\n   * Expose `Route`.\n   */\n\n  page.Route = Route;\n\n  /**\n   * Return route middleware with\n   * the given callback `fn()`.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   * @api public\n   */\n\n  Route.prototype.middleware = function(fn) {\n    var self = this;\n    return function(ctx, next) {\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);\n      next();\n    };\n  };\n\n  /**\n   * Check if this route matches `path`, if so\n   * populate `params`.\n   *\n   * @param {String} path\n   * @param {Object} params\n   * @return {Boolean}\n   * @api private\n   */\n\n  Route.prototype.match = function(path, params) {\n    var keys = this.keys,\n      qsIndex = path.indexOf('?'),\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,\n      m = this.regexp.exec(decodeURIComponent(pathname));\n\n    if (!m) return false;\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      var key = keys[i - 1];\n      var val = decodeURLEncodedURIComponent(m[i]);\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {\n        params[key.name] = val;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * Handle \"populate\" events.\n   */\n\n  var onpopstate = (function () {\n    var loaded = false;\n    if ('undefined' === typeof window) {\n      return;\n    }\n    if (document.readyState === 'complete') {\n      loaded = true;\n    } else {\n      window.addEventListener('load', function() {\n        setTimeout(function() {\n          loaded = true;\n        }, 0);\n      });\n    }\n    return function onpopstate(e) {\n      if (!loaded) return;\n      if (e.state) {\n        var path = e.state.path;\n        page.replace(path, e.state);\n      } else {\n        page.show(location.pathname + location.hash, undefined, undefined, false);\n      }\n    };\n  })();\n  /**\n   * Handle \"click\" events.\n   */\n\n  function onclick(e) {\n\n    if (1 !== which(e)) return;\n\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n    if (e.defaultPrevented) return;\n\n\n\n    // ensure link\n    var el = e.target;\n    while (el && 'A' !== el.nodeName) el = el.parentNode;\n    if (!el || 'A' !== el.nodeName) return;\n\n\n\n    // Ignore if tag has\n    // 1. \"download\" attribute\n    // 2. rel=\"external\" attribute\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;\n\n    // ensure non-hash for the same path\n    var link = el.getAttribute('href');\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;\n\n\n\n    // Check for mailto: in the href\n    if (link && link.indexOf('mailto:') > -1) return;\n\n    // check target\n    if (el.target) return;\n\n    // x-origin\n    if (!sameOrigin(el.href)) return;\n\n\n\n    // rebuild path\n    var path = el.pathname + el.search + (el.hash || '');\n\n    path = path[0] !== '/' ? '/' + path : path;\n\n    // strip leading \"/[drive letter]:\" on NW.js on Windows\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');\n    }\n\n    // same page\n    var orig = path;\n\n    if (path.indexOf(base) === 0) {\n      path = path.substr(base.length);\n    }\n\n    if (hashbang) path = path.replace('#!', '');\n\n    if (base && orig === path) return;\n\n    e.preventDefault();\n    page.show(orig);\n  }\n\n  /**\n   * Event button.\n   */\n\n  function which(e) {\n    e = e || window.event;\n    return null === e.which ? e.button : e.which;\n  }\n\n  /**\n   * Check if `href` is the same origin.\n   */\n\n  function sameOrigin(href) {\n    var origin = location.protocol + '//' + location.hostname;\n    if (location.port) origin += ':' + location.port;\n    return (href && (0 === href.indexOf(origin)));\n  }\n\n  page.sameOrigin = sameOrigin;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1,\"path-to-regexp\":3}],3:[function(require,module,exports){\nvar isArray = require('isarray');\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\" => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '([\\\\/.])?(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^)])*)\\\\))?|\\\\(((?:\\\\\\\\.|[^)])*)\\\\))([+*?])?',\n  // Match regexp special characters that are always escaped.\n  '([.+*?=^!:${}()[\\\\]|\\\\/])'\n].join('|'), 'g');\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {String} group\n * @return {String}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {RegExp} re\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re;\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {String}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {RegExp} path\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name:      i,\n        delimiter: null,\n        optional:  false,\n        repeat:    false\n      });\n    }\n  }\n\n  return attachKeys(path, keys);\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {Array}  path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n  return attachKeys(regexp, keys);\n}\n\n/**\n * Replace the specific tags with regexp strings.\n *\n * @param  {String} path\n * @param  {Array}  keys\n * @return {String}\n */\nfunction replacePath (path, keys) {\n  var index = 0;\n\n  function replace (_, escaped, prefix, key, capture, group, suffix, escape) {\n    if (escaped) {\n      return escaped;\n    }\n\n    if (escape) {\n      return '\\\\' + escape;\n    }\n\n    var repeat   = suffix === '+' || suffix === '*';\n    var optional = suffix === '?' || suffix === '*';\n\n    keys.push({\n      name:      key || index++,\n      delimiter: prefix || '/',\n      optional:  optional,\n      repeat:    repeat\n    });\n\n    prefix = prefix ? ('\\\\' + prefix) : '';\n    capture = escapeGroup(capture || group || '[^' + (prefix || '\\\\/') + ']+?');\n\n    if (repeat) {\n      capture = capture + '(?:' + prefix + capture + ')*';\n    }\n\n    if (optional) {\n      return '(?:' + prefix + '(' + capture + '))?';\n    }\n\n    // Basic parameter support.\n    return prefix + '(' + capture + ')';\n  }\n\n  return path.replace(PATH_REGEXP, replace);\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(String|RegExp|Array)} path\n * @param  {Array}                 [keys]\n * @param  {Object}                [options]\n * @return {RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  keys = keys || [];\n\n  if (!isArray(keys)) {\n    options = keys;\n    keys = [];\n  } else if (!options) {\n    options = {};\n  }\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys, options);\n  }\n\n  if (isArray(path)) {\n    return arrayToRegexp(path, keys, options);\n  }\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = replacePath(path, keys);\n  var endsWithSlash = path.charAt(path.length - 1) === '/';\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);\n}\n\n},{\"isarray\":4}],4:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],5:[function(require,module,exports){\nmodule.exports = require('./lib/');\n\n},{\"./lib/\":6}],6:[function(require,module,exports){\n// Load modules\n\nvar Stringify = require('./stringify');\nvar Parse = require('./parse');\n\n\n// Declare internals\n\nvar internals = {};\n\n\nmodule.exports = {\n    stringify: Stringify,\n    parse: Parse\n};\n\n},{\"./parse\":7,\"./stringify\":8}],7:[function(require,module,exports){\n// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    depth: 5,\n    arrayLimit: 20,\n    parameterLimit: 1000,\n    strictNullHandling: false\n};\n\n\ninternals.parseValues = function (str, options) {\n\n    var obj = {};\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n\n    for (var i = 0, il = parts.length; i < il; ++i) {\n        var part = parts[i];\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n        if (pos === -1) {\n            obj[Utils.decode(part)] = '';\n\n            if (options.strictNullHandling) {\n                obj[Utils.decode(part)] = null;\n            }\n        }\n        else {\n            var key = Utils.decode(part.slice(0, pos));\n            var val = Utils.decode(part.slice(pos + 1));\n\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n                obj[key] = val;\n            }\n            else {\n                obj[key] = [].concat(obj[key]).concat(val);\n            }\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseObject = function (chain, val, options) {\n\n    if (!chain.length) {\n        return val;\n    }\n\n    var root = chain.shift();\n\n    var obj;\n    if (root === '[]') {\n        obj = [];\n        obj = obj.concat(internals.parseObject(chain, val, options));\n    }\n    else {\n        obj = Object.create(null);\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;\n        var index = parseInt(cleanRoot, 10);\n        var indexString = '' + index;\n        if (!isNaN(index) &&\n            root !== cleanRoot &&\n            indexString === cleanRoot &&\n            index >= 0 &&\n            (options.parseArrays &&\n             index <= options.arrayLimit)) {\n\n            obj = [];\n            obj[index] = internals.parseObject(chain, val, options);\n        }\n        else {\n            obj[cleanRoot] = internals.parseObject(chain, val, options);\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseKeys = function (key, val, options) {\n\n    if (!key) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n\n    if (options.allowDots) {\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');\n    }\n\n    // The regex chunks\n\n    var parent = /^([^\\[\\]]*)/;\n    var child = /(\\[[^\\[\\]]*\\])/g;\n\n    // Get the parent\n\n    var segment = parent.exec(key);\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (segment[1]) {\n        keys.push(segment[1]);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n\n        ++i;\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return internals.parseObject(keys, val, options);\n};\n\n\nmodule.exports = function (str, options) {\n\n    if (str === '' ||\n        str === null ||\n        typeof str === 'undefined') {\n\n        return Object.create(null);\n    }\n\n    options = options || {};\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.allowDots = options.allowDots !== false;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n\n\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;\n    var obj = Object.create(null);\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        var newObj = internals.parseKeys(key, tempObj[key], options);\n        obj = Utils.merge(obj, newObj);\n    }\n\n    return Utils.compact(obj);\n};\n\n},{\"./utils\":9}],8:[function(require,module,exports){\n// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    arrayPrefixGenerators: {\n        brackets: function (prefix, key) {\n\n            return prefix + '[]';\n        },\n        indices: function (prefix, key) {\n\n            return prefix + '[' + key + ']';\n        },\n        repeat: function (prefix, key) {\n\n            return prefix;\n        }\n    },\n    strictNullHandling: false\n};\n\n\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, filter) {\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (Utils.isBuffer(obj)) {\n        obj = obj.toString();\n    }\n    else if (obj instanceof Date) {\n        obj = obj.toISOString();\n    }\n    else if (obj === null) {\n        if (strictNullHandling) {\n            return Utils.encode(prefix);\n        }\n\n        obj = '';\n    }\n\n    if (typeof obj === 'string' ||\n        typeof obj === 'number' ||\n        typeof obj === 'boolean') {\n\n        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n\n        if (Array.isArray(obj)) {\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, filter));\n        }\n        else {\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, filter));\n        }\n    }\n\n    return values;\n};\n\n\nmodule.exports = function (obj, options) {\n\n    options = options || {};\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var objKeys;\n    var filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (Array.isArray(options.filter)) {\n        objKeys = filter = options.filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return '';\n    }\n\n    var arrayFormat;\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {\n        arrayFormat = options.arrayFormat;\n    }\n    else if ('indices' in options) {\n        arrayFormat = options.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, filter));\n    }\n\n    return keys.join(delimiter);\n};\n\n},{\"./utils\":9}],9:[function(require,module,exports){\n// Load modules\n\n\n// Declare internals\n\nvar internals = {};\ninternals.hexTable = new Array(256);\nfor (var i = 0; i < 256; ++i) {\n    internals.hexTable[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();\n}\n\n\nexports.arrayToObject = function (source) {\n\n    var obj = Object.create(null);\n    for (var i = 0, il = source.length; i < il; ++i) {\n        if (typeof source[i] !== 'undefined') {\n\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\n\nexports.merge = function (target, source) {\n\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (Array.isArray(target)) {\n            target.push(source);\n        }\n        else if (typeof target === 'object') {\n            target[source] = true;\n        }\n        else {\n            target = [target, source];\n        }\n\n        return target;\n    }\n\n    if (typeof target !== 'object') {\n        target = [target].concat(source);\n        return target;\n    }\n\n    if (Array.isArray(target) &&\n        !Array.isArray(source)) {\n\n        target = exports.arrayToObject(target);\n    }\n\n    var keys = Object.keys(source);\n    for (var k = 0, kl = keys.length; k < kl; ++k) {\n        var key = keys[k];\n        var value = source[key];\n\n        if (!target[key]) {\n            target[key] = value;\n        }\n        else {\n            target[key] = exports.merge(target[key], value);\n        }\n    }\n\n    return target;\n};\n\n\nexports.decode = function (str) {\n\n    try {\n        return decodeURIComponent(str.replace(/\\+/g, ' '));\n    } catch (e) {\n        return str;\n    }\n};\n\nexports.encode = function (str) {\n\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    if (typeof str !== 'string') {\n        str = '' + str;\n    }\n\n    var out = '';\n    for (var i = 0, il = str.length; i < il; ++i) {\n        var c = str.charCodeAt(i);\n\n        if (c === 0x2D || // -\n            c === 0x2E || // .\n            c === 0x5F || // _\n            c === 0x7E || // ~\n            (c >= 0x30 && c <= 0x39) || // 0-9\n            (c >= 0x41 && c <= 0x5A) || // a-z\n            (c >= 0x61 && c <= 0x7A)) { // A-Z\n\n            out += str[i];\n            continue;\n        }\n\n        if (c < 0x80) {\n            out += internals.hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        ++i;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nexports.compact = function (obj, refs) {\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return obj;\n    }\n\n    refs = refs || [];\n    var lookup = refs.indexOf(obj);\n    if (lookup !== -1) {\n        return refs[lookup];\n    }\n\n    refs.push(obj);\n\n    if (Array.isArray(obj)) {\n        var compacted = [];\n\n        for (var i = 0, il = obj.length; i < il; ++i) {\n            if (typeof obj[i] !== 'undefined') {\n                compacted.push(obj[i]);\n            }\n        }\n\n        return compacted;\n    }\n\n    var keys = Object.keys(obj);\n    for (i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        obj[key] = exports.compact(obj[key], refs);\n    }\n\n    return obj;\n};\n\n\nexports.isRegExp = function (obj) {\n\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\n\nexports.isBuffer = function (obj) {\n\n    if (obj === null ||\n        typeof obj === 'undefined') {\n\n        return false;\n    }\n\n    return !!(obj.constructor &&\n              obj.constructor.isBuffer &&\n              obj.constructor.isBuffer(obj));\n};\n\n},{}],10:[function(require,module,exports){\npage = require('page');\nqs   = require('qs');\n\n},{\"page\":2,\"qs\":5}]},{},[10])\n//# sourceMappingURL=kadira:flow-router/client.browserify.js\n","// a set of utility functions for triggers\n\nTriggers = {};\n\n// Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fileds with `only` and `except` \n//           support only either `only` or `except`, but not both\nTriggers.applyFilters = function(triggers, filter) {\n  if(!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if(!filter) {\n    return triggers;\n  }\n\n  if(filter.only && filter.except) {\n    throw new Error(\"Triggers don't support only and except filters at once\");\n  }\n\n  if(filter.only && !(filter.only instanceof Array)) {\n    throw new Error(\"only filters needs to be an array\");\n  }\n\n  if(filter.except && !(filter.except instanceof Array)) {\n    throw new Error(\"except filters needs to be an array\");\n  }\n\n  if(filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if(filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error(\"Provided a filter but not supported\");\n};\n\n//  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers \n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {\n  var namesMap = {};\n  _.each(names, function(name) {\n    namesMap[name] = true;\n  });\n\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {\n    var modifiedTrigger = function(context, next) {\n      var routeName = context.route.name;\n      var matched = (namesMap[routeName])? 1: -1;\n      matched = (negate)? matched * -1 : matched;\n\n      if(matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n    return modifiedTrigger;\n  });\n\n  return filteredTriggers;\n};\n\n//  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers \n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect \n//  @after - called after if only all the triggers runs\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {\n  var abort = false;\n  var inCurrentLoop = true;\n  var alreadyRedirected = false;\n\n  for(var lc=0; lc<triggers.length; lc++) {\n    var trigger = triggers[lc];\n    trigger(context, doRedirect, doStop);\n\n    if(abort) {\n      return;\n    }\n  }\n\n  // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n  inCurrentLoop = false;\n  after();\n\n  function doRedirect(url, params, queryParams) {\n    if(alreadyRedirected) {\n      throw new Error(\"already redirected\");\n    }\n\n    if(!inCurrentLoop) {\n      throw new Error(\"redirect needs to be done in sync\");\n    }\n\n    if(!url) {\n      throw new Error(\"trigger redirect requires an URL\");\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  }\n\n  function doStop() {\n    abort = true;\n  }\n};","Router = function () {\n  var self = this;\n  this.globals = [];\n  this.subscriptions = Function.prototype;\n\n  this._tracker = this._buildTracker();\n  this._current = {};\n\n  // tracks the current path change\n  this._onEveryPath = new Tracker.Dependency();\n\n  this._globalRoute = new Route(this);\n\n  // holds onRoute callbacks\n  this._onRouteCallbacks = [];\n\n  // if _askedToWait is true. We don't automatically start the router\n  // in Meteor.startup callback. (see client/_init.js)\n  // Instead user need to call `.initialize()\n  this._askedToWait = false;\n  this._initialized = false;\n  this._triggersEnter = [];\n  this._triggersExit = [];\n  this._routes = [];\n  this._routesMap = {};\n  this._updateCallbacks();\n  this.notFound = this.notfound = null;\n  // indicate it's okay (or not okay) to run the tracker\n  // when doing subscriptions\n  // using a number and increment it help us to support FlowRouter.go()\n  // and legitimate reruns inside tracker on the same event loop.\n  // this is a solution for #145\n  this.safeToRun = 0;\n\n  // Meteor exposes to the client the path prefix that was defined using the\n  // ROOT_URL environement variable on the server using the global runtime\n  // configuration. See #315.\n  this._basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n\n  // this is a chain contains a list of old routes\n  // most of the time, there is only one old route\n  // but when it's the time for a trigger redirect we've a chain\n  this._oldRouteChain = [];\n\n  this.env = {\n    replaceState: new Meteor.EnvironmentVariable(),\n    reload: new Meteor.EnvironmentVariable(),\n    trailingSlash: new Meteor.EnvironmentVariable()\n  };\n\n  // redirect function used inside triggers\n  this._redirectFn = function(pathDef, fields, queryParams) {\n    if (/^http(s)?:\\/\\//.test(pathDef)) {\n        var message = \"Redirects to URLs outside of the app are not supported in this version of Flow Router. Use 'window.location = yourUrl' instead\";\n        throw new Error(message);\n    }\n    self.withReplaceState(function() {\n      var path = FlowRouter.path(pathDef, fields, queryParams);\n      self._page.redirect(path);\n    });\n  };\n  this._initTriggersAPI();\n};\n\nRouter.prototype.route = function(pathDef, options, group) {\n  if (!/^\\/.*/.test(pathDef)) {\n    var message = \"route's path must start with '/'\";\n    throw new Error(message);\n  }\n\n  options = options || {};\n  var self = this;\n  var route = new Route(this, pathDef, options, group);\n\n  // calls when the page route being activates\n  route._actionHandle = function (context, next) {\n    var oldRoute = self._current.route;\n    self._oldRouteChain.push(oldRoute);\n\n    var queryParams = self._qs.parse(context.querystring);\n    // _qs.parse() gives us a object without prototypes,\n    // created with Object.create(null)\n    // Meteor's check doesn't play nice with it.\n    // So, we need to fix it by cloning it.\n    // see more: https://github.com/meteorhacks/flow-router/issues/164\n    queryParams = JSON.parse(JSON.stringify(queryParams));\n\n    self._current = {\n      path: context.path,\n      context: context,\n      params: context.params,\n      queryParams: queryParams,\n      route: route,\n      oldRoute: oldRoute\n    };\n\n    // we need to invalidate if all the triggers have been completed\n    // if not that means, we've been redirected to another path\n    // then we don't need to invalidate\n    var afterAllTriggersRan = function() {\n      self._invalidateTracker();\n    };\n\n    var triggers = self._triggersEnter.concat(route._triggersEnter);\n    Triggers.runTriggers(\n      triggers,\n      self._current,\n      self._redirectFn,\n      afterAllTriggersRan\n    );\n  };\n\n  // calls when you exit from the page js route\n  route._exitHandle = function(context, next) {\n    var triggers = self._triggersExit.concat(route._triggersExit);\n    Triggers.runTriggers(\n      triggers,\n      self._current,\n      self._redirectFn,\n      next\n    );\n  };\n\n  this._routes.push(route);\n  if (options.name) {\n    this._routesMap[options.name] = route;\n  }\n\n  this._updateCallbacks();\n  this._triggerRouteRegister(route);\n\n  return route;\n};\n\nRouter.prototype.group = function(options) {\n  return new Group(this, options);\n};\n\nRouter.prototype.path = function(pathDef, fields, queryParams) {\n  if (this._routesMap[pathDef]) {\n    pathDef = this._routesMap[pathDef].pathDef;\n  }\n\n  var path = \"\";\n\n  // Prefix the path with the router global prefix\n  if (this._basePath) {\n    path += \"/\" + this._basePath + \"/\";\n  }\n\n  fields = fields || {};\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;\n  path += pathDef.replace(regExp, function(key) {\n    var firstRegexpChar = key.indexOf(\"(\");\n    // get the content behind : and (\\\\d+/)\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);\n    // remove +?*\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");\n\n    // this is to allow page js to keep the custom characters as it is\n    // we need to encode 2 times otherwise \"/\" char does not work properly\n    // So, in that case, when I includes \"/\" it will think it's a part of the\n    // route. encoding 2times fixes it\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));\n  });\n\n  // Replace multiple slashes with single slash\n  path = path.replace(/\\/\\/+/g, \"/\");\n\n  // remove trailing slash\n  // but keep the root slash if it's the only one\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");\n\n  // explictly asked to add a trailing slash\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {\n    path += \"/\";\n  }\n\n  var strQueryParams = this._qs.stringify(queryParams || {});\n  if(strQueryParams) {\n    path += \"?\" + strQueryParams;\n  }\n\n  return path;\n};\n\nRouter.prototype.go = function(pathDef, fields, queryParams) {\n  var path = this.path(pathDef, fields, queryParams);\n\n  var useReplaceState = this.env.replaceState.get();\n  if(useReplaceState) {\n    this._page.replace(path);\n  } else {\n    this._page(path);\n  }\n};\n\nRouter.prototype.reload = function() {\n  var self = this;\n\n  self.env.reload.withValue(true, function() {\n    self._page.replace(self._current.path);\n  });\n};\n\nRouter.prototype.redirect = function(path) {\n  this._page.redirect(path);\n};\n\nRouter.prototype.setParams = function(newParams) {\n  if(!this._current.route) {return false;}\n\n  var pathDef = this._current.route.pathDef;\n  var existingParams = this._current.params;\n  var params = {};\n  _.each(_.keys(existingParams), function(key) {\n    params[key] = existingParams[key];\n  });\n\n  params = _.extend(params, newParams);\n  var queryParams = this._current.queryParams;\n\n  this.go(pathDef, params, queryParams);\n  return true;\n};\n\nRouter.prototype.setQueryParams = function(newParams) {\n  if(!this._current.route) {return false;}\n\n  var queryParams = _.clone(this._current.queryParams);\n  _.extend(queryParams, newParams);\n\n  for (var k in queryParams) {\n    if (queryParams[k] === null || queryParams[k] === undefined) {\n      delete queryParams[k];\n    }\n  }\n\n  var pathDef = this._current.route.pathDef;\n  var params = this._current.params;\n  this.go(pathDef, params, queryParams);\n  return true;\n};\n\n// .current is not reactive\n// This is by design. use .getParam() instead\n// If you really need to watch the path change, use .watchPathChange()\nRouter.prototype.current = function() {\n  // We can't trust outside, that's why we clone this\n  // Anyway, we can't clone the whole object since it has non-jsonable values\n  // That's why we clone what's really needed.\n  var current = _.clone(this._current);\n  current.queryParams = EJSON.clone(current.queryParams);\n  current.params = EJSON.clone(current.params);\n  return current;\n};\n\n// Implementing Reactive APIs\nvar reactiveApis = [\n  'getParam', 'getQueryParam',\n  'getRouteName', 'watchPathChange'\n];\nreactiveApis.forEach(function(api) {\n  Router.prototype[api] = function(arg1) {\n    // when this is calling, there may not be any route initiated\n    // so we need to handle it\n    var currentRoute = this._current.route;\n    if(!currentRoute) {\n      this._onEveryPath.depend();\n      return;\n    }\n\n    // currently, there is only one argument. If we've more let's add more args\n    // this is not clean code, but better in performance\n    return currentRoute[api].call(currentRoute, arg1);\n  };\n});\n\nRouter.prototype.subsReady = function() {\n  var callback = null;\n  var args = _.toArray(arguments);\n\n  if (typeof _.last(args) === \"function\") {\n    callback = args.pop();\n  }\n\n  var currentRoute = this.current().route;\n  var globalRoute = this._globalRoute;\n\n  // we need to depend for every route change and\n  // rerun subscriptions to check the ready state\n  this._onEveryPath.depend();\n\n  if(!currentRoute) {\n    return false;\n  }\n\n  var subscriptions;\n  if(args.length === 0) {\n    subscriptions = _.values(globalRoute.getAllSubscriptions());\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));\n  } else {\n    subscriptions = _.map(args, function(subName) {\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);\n    });\n  }\n\n  var isReady = function() {\n    var ready =  _.every(subscriptions, function(sub) {\n      return sub && sub.ready();\n    });\n\n    return ready;\n  };\n\n  if (callback) {\n    Tracker.autorun(function(c) {\n      if (isReady()) {\n        callback();\n        c.stop();\n      }\n    });\n  } else {\n    return isReady();\n  }\n};\n\nRouter.prototype.withReplaceState = function(fn) {\n  return this.env.replaceState.withValue(true, fn);\n};\n\nRouter.prototype.withTrailingSlash = function(fn) {\n  return this.env.trailingSlash.withValue(true, fn);\n};\n\nRouter.prototype._notfoundRoute = function(context) {\n  this._current = {\n    path: context.path,\n    context: context,\n    params: [],\n    queryParams: {},\n  };\n\n  // XXX this.notfound kept for backwards compatibility\n  this.notFound = this.notFound || this.notfound;\n  if(!this.notFound) {\n    console.error(\"There is no route for the path:\", context.path);\n    return;\n  }\n\n  this._current.route = new Route(this, \"*\", this.notFound);\n  this._invalidateTracker();\n};\n\nRouter.prototype.initialize = function(options) {\n  options = options || {};\n\n  if(this._initialized) {\n    throw new Error(\"FlowRouter is already initialized\");\n  }\n\n  var self = this;\n  this._updateCallbacks();\n\n  // Implementing idempotent routing\n  // by overriding page.js`s \"show\" method.\n  // Why?\n  // It is impossible to bypass exit triggers,\n  // because they execute before the handler and\n  // can not know what the next path is, inside exit trigger.\n  //\n  // we need override both show, replace to make this work\n  // since we use redirect when we are talking about withReplaceState\n  _.each(['show', 'replace'], function(fnName) {\n    var original = self._page[fnName];\n    self._page[fnName] = function(path, state, dispatch, push) {\n      var reload = self.env.reload.get();\n      if (!reload && self._current.path === path) {\n        return;\n      }\n\n      original.call(this, path, state, dispatch, push);\n    };\n  });\n\n  // this is very ugly part of pagejs and it does decoding few times\n  // in unpredicatable manner. See #168\n  // this is the default behaviour and we need keep it like that\n  // we are doing a hack. see .path()\n  this._page.base(this._basePath);\n  this._page({\n    decodeURLComponents: true,\n    hashbang: !!options.hashbang\n  });\n\n  this._initialized = true;\n};\n\nRouter.prototype._buildTracker = function() {\n  var self = this;\n\n  // main autorun function\n  var tracker = Tracker.autorun(function () {\n    if(!self._current || !self._current.route) {\n      return;\n    }\n\n    // see the definition of `this._processingContexts`\n    var currentContext = self._current;\n    var route = currentContext.route;\n    var path = currentContext.path;\n\n    if(self.safeToRun === 0) {\n      var message =\n        \"You can't use reactive data sources like Session\" +\n        \" inside the `.subscriptions` method!\";\n      throw new Error(message);\n    }\n\n    // We need to run subscriptions inside a Tracker\n    // to stop subs when switching between routes\n    // But we don't need to run this tracker with\n    // other reactive changes inside the .subscription method\n    // We tackle this with the `safeToRun` variable\n    self._globalRoute.clearSubscriptions();\n    self.subscriptions.call(self._globalRoute, path);\n    route.callSubscriptions(currentContext);\n\n    // otherwise, computations inside action will trigger to re-run\n    // this computation. which we do not need.\n    Tracker.nonreactive(function() {\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;\n      var isFirstRoute = !currentContext.oldRoute;\n      // first route is not a route change\n      if(isFirstRoute) {\n        isRouteChange = false;\n      }\n\n      // Clear oldRouteChain just before calling the action\n      // We still need to get a copy of the oldestRoute first\n      // It's very important to get the oldest route and registerRouteClose() it\n      // See: https://github.com/kadirahq/flow-router/issues/314\n      var oldestRoute = self._oldRouteChain[0];\n      self._oldRouteChain = [];\n\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);\n      route.callAction(currentContext);\n\n      Tracker.afterFlush(function() {\n        self._onEveryPath.changed();\n        if(isRouteChange) {\n          // We need to trigger that route (definition itself) has changed.\n          // So, we need to re-run all the register callbacks to current route\n          // This is pretty important, otherwise tracker\n          // can't identify new route's items\n\n          // We also need to afterFlush, otherwise this will re-run\n          // helpers on templates which are marked for destroying\n          if(oldestRoute) {\n            oldestRoute.registerRouteClose();\n          }\n        }\n      });\n    });\n\n    self.safeToRun--;\n  });\n\n  return tracker;\n};\n\nRouter.prototype._invalidateTracker = function() {\n  var self = this;\n  this.safeToRun++;\n  this._tracker.invalidate();\n  // After the invalidation we need to flush to make changes imediately\n  // otherwise, we have face some issues context mix-maches and so on.\n  // But there are some cases we can't flush. So we need to ready for that.\n\n  // we clearly know, we can't flush inside an autorun\n  // this may leads some issues on flow-routing\n  // we may need to do some warning\n  if(!Tracker.currentComputation) {\n    // Still there are some cases where we can't flush\n    //  eg:- when there is a flush currently\n    // But we've no public API or hacks to get that state\n    // So, this is the only solution\n    try {\n      Tracker.flush();\n    } catch(ex) {\n      // only handling \"while flushing\" errors\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {\n        return;\n      }\n\n      // XXX: fix this with a proper solution by removing subscription mgt.\n      // from the router. Then we don't need to run invalidate using a tracker\n\n      // this happens when we are trying to invoke a route change\n      // with inside a route chnage. (eg:- Template.onCreated)\n      // Since we use page.js and tracker, we don't have much control\n      // over this process.\n      // only solution is to defer route execution.\n\n      // It's possible to have more than one path want to defer\n      // But, we only need to pick the last one.\n      // self._nextPath = self._current.path;\n      Meteor.defer(function() {\n        var path = self._nextPath;\n        if(!path) {\n          return;\n        }\n\n        delete self._nextPath;\n        self.env.reload.withValue(true, function() {\n          self.go(path);\n        });\n      });\n    }\n  }\n};\n\nRouter.prototype._updateCallbacks = function () {\n  var self = this;\n\n  self._page.callbacks = [];\n  self._page.exits = [];\n\n  _.each(self._routes, function(route) {\n    self._page(route.pathDef, route._actionHandle);\n    self._page.exit(route.pathDef, route._exitHandle);\n  });\n\n  self._page(\"*\", function(context) {\n    self._notfoundRoute(context);\n  });\n};\n\nRouter.prototype._initTriggersAPI = function() {\n  var self = this;\n  this.triggers = {\n    enter: function(triggers, filter) {\n      triggers = Triggers.applyFilters(triggers, filter);\n      if(triggers.length) {\n        self._triggersEnter = self._triggersEnter.concat(triggers);\n      }\n    },\n\n    exit: function(triggers, filter) {\n      triggers = Triggers.applyFilters(triggers, filter);\n      if(triggers.length) {\n        self._triggersExit = self._triggersExit.concat(triggers);\n      }\n    }\n  };\n};\n\nRouter.prototype.wait = function() {\n  if(this._initialized) {\n    throw new Error(\"can't wait after FlowRouter has been initialized\");\n  }\n\n  this._askedToWait = true;\n};\n\nRouter.prototype.onRouteRegister = function(cb) {\n  this._onRouteCallbacks.push(cb);\n};\n\nRouter.prototype._triggerRouteRegister = function(currentRoute) {\n  // We should only need to send a safe set of fields on the route\n  // object.\n  // This is not to hide what's inside the route object, but to show\n  // these are the public APIs\n  var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n  var omittingOptionFields = [\n    'triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'\n  ];\n  routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n  _.each(this._onRouteCallbacks, function(cb) {\n    cb(routePublicApi);\n  });\n};\n\nRouter.prototype._page = page;\nRouter.prototype._qs = qs;\n","Group = function(router, options, parent) {\n  options = options || {};\n\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {\n    var message = \"group's prefix must start with '/'\";\n    throw new Error(message);\n  }\n\n  this._router = router;\n  this.prefix = options.prefix || '';\n  this.name = options.name;\n\n  this._triggersEnter = options.triggersEnter || [];\n  this._triggersExit = options.triggersExit || [];\n  this._subscriptions = options.subscriptions || Function.prototype;\n\n  this.parent = parent;\n  if (this.parent) {\n    this.prefix = parent.prefix + this.prefix;\n\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);\n  }\n};\n\nGroup.prototype.route = function(pathDef, options, group) {\n  options = options || {};\n\n  if (!/^\\/.*/.test(pathDef)) {\n    var message = \"route's path must start with '/'\";\n    throw new Error(message);\n  }\n\n  group = group || this;\n  pathDef = this.prefix + pathDef;\n\n  var triggersEnter = options.triggersEnter || [];\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);\n\n  var triggersExit = options.triggersExit || [];\n  options.triggersExit = triggersExit.concat(this._triggersExit);\n\n  return this._router.route(pathDef, options, group);\n};\n\nGroup.prototype.group = function(options) {\n  return new Group(this._router, options, this);\n};\n\nGroup.prototype.callSubscriptions = function(current) {\n  if (this.parent) {\n    this.parent.callSubscriptions(current);\n  }\n\n  this._subscriptions.call(current.route, current.params, current.queryParams);\n};\n","Route = function(router, pathDef, options, group) {\n  options = options || {};\n\n  this.options = options;\n  this.pathDef = pathDef\n\n  // Route.path is deprecated and will be removed in 3.0\n  this.path = pathDef;\n\n  if (options.name) {\n    this.name = options.name;\n  }\n\n  this._action = options.action || Function.prototype;\n  this._subscriptions = options.subscriptions || Function.prototype;\n  this._triggersEnter = options.triggersEnter || [];\n  this._triggersExit = options.triggersExit || [];\n  this._subsMap = {};\n  this._router = router;\n\n  this._params = new ReactiveDict();\n  this._queryParams = new ReactiveDict();\n  this._routeCloseDep = new Tracker.Dependency();\n\n  // tracks the changes in the URL\n  this._pathChangeDep = new Tracker.Dependency();\n\n  this.group = group;\n};\n\nRoute.prototype.clearSubscriptions = function() {\n  this._subsMap = {};\n};\n\nRoute.prototype.register = function(name, sub, options) {\n  this._subsMap[name] = sub;\n};\n\n\nRoute.prototype.getSubscription = function(name) {\n  return this._subsMap[name];\n};\n\n\nRoute.prototype.getAllSubscriptions = function() {\n  return this._subsMap;\n};\n\nRoute.prototype.callAction = function(current) {\n  var self = this;\n  self._action(current.params, current.queryParams);\n};\n\nRoute.prototype.callSubscriptions = function(current) {\n  this.clearSubscriptions();\n  if (this.group) {\n    this.group.callSubscriptions(current);\n  }\n\n  this._subscriptions(current.params, current.queryParams);\n};\n\nRoute.prototype.getRouteName = function() {\n  this._routeCloseDep.depend();\n  return this.name;\n};\n\nRoute.prototype.getParam = function(key) {\n  this._routeCloseDep.depend();\n  return this._params.get(key);\n};\n\nRoute.prototype.getQueryParam = function(key) {\n  this._routeCloseDep.depend();\n  return this._queryParams.get(key);\n};\n\nRoute.prototype.watchPathChange = function() {\n  this._pathChangeDep.depend();\n};\n\nRoute.prototype.registerRouteClose = function() {\n  this._params = new ReactiveDict();\n  this._queryParams = new ReactiveDict();\n  this._routeCloseDep.changed();\n  this._pathChangeDep.changed();\n};\n\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {\n  // register params\n  var params = currentContext.params;\n  this._updateReactiveDict(this._params, params);\n\n  // register query params\n  var queryParams = currentContext.queryParams;\n  this._updateReactiveDict(this._queryParams, queryParams);\n\n  // if the route is changing, we need to defer triggering path changing\n  // if we did this, old route's path watchers will detect this\n  // Real issue is, above watcher will get removed with the new route\n  // So, we don't need to trigger it now\n  // We are doing it on the route close event. So, if they exists they'll \n  // get notify that\n  if(!routeChanging) {\n    this._pathChangeDep.changed();\n  }\n};\n\nRoute.prototype._updateReactiveDict = function(dict, newValues) {\n  var currentKeys = _.keys(newValues);\n  var oldKeys = _.keys(dict.keyDeps);\n\n  // set new values\n  //  params is an array. So, _.each(params) does not works\n  //  to iterate params\n  _.each(currentKeys, function(key) {\n    dict.set(key, newValues[key]);\n  });\n\n  // remove keys which does not exisits here\n  var removedKeys = _.difference(oldKeys, currentKeys);\n  _.each(removedKeys, function(key) {\n    dict.set(key, undefined);\n  });\n};\n","// Export Router Instance\nFlowRouter = new Router();\nFlowRouter.Router = Router;\nFlowRouter.Route = Route;\n\n// Initialize FlowRouter\nMeteor.startup(function () {\n  if(!FlowRouter._askedToWait) {\n    FlowRouter.initialize();\n  }\n});\n"]}}]