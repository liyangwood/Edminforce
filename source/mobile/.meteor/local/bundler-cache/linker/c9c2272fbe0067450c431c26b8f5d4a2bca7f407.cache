[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Reload = Package.reload.Reload;\nvar WebApp = Package.webapp.WebApp;\nvar DDP = Package['ddp-client'].DDP;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar MeteorStubs = Package['velocity:meteor-stubs'].MeteorStubs;\n\n/* Package-scope variables */\nvar exports, log, parseStack, JasmineTestFramework, JasmineInterface, VelocityTestReporter, ClientIntegrationTestFramework;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/.npm/package/node_modules/component-mocker/index.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2014, Facebook, Inc. All rights reserved.                                                             // 2\n *                                                                                                                     // 3\n * This source code is licensed under the BSD-style license found in the                                               // 4\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 5\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6\n */                                                                                                                    // 7\n// This module uses arguments.callee, so it can't currently run in strict mode                                         // 8\n/* jshint strict:false */                                                                                              // 9\n                                                                                                                       // 10\n;(function () {                                                                                                        // 11\n  // Reference to global object                                                                                        // 12\n  var root = this;                                                                                                     // 13\n  var previousMocker = root.mocker;                                                                                    // 14\n                                                                                                                       // 15\n  function isA(typeName, value) {                                                                                      // 16\n    return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';                                     // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  function getType(ref) {                                                                                              // 20\n    if (isA('RegExp', ref)) {                                                                                          // 21\n      return 'regexp';                                                                                                 // 22\n    }                                                                                                                  // 23\n                                                                                                                       // 24\n    if (isA('Array', ref)) {                                                                                           // 25\n      return 'array';                                                                                                  // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    if (isA('Function', ref)) {                                                                                        // 29\n      return 'function';                                                                                               // 30\n    }                                                                                                                  // 31\n                                                                                                                       // 32\n    if (isA('Object', ref)) {                                                                                          // 33\n      return 'object';                                                                                                 // 34\n    }                                                                                                                  // 35\n                                                                                                                       // 36\n    // Infinity must be special cased because JSON.stringify will convert it to null                                   // 37\n    if (ref === Infinity) {                                                                                            // 38\n      return 'infinity';                                                                                               // 39\n    }                                                                                                                  // 40\n    // consider number and string fields to be constants that we want to                                               // 41\n    // pick up as they are                                                                                             // 42\n    if (isA('Number', ref) || isA('String', ref)) {                                                                    // 43\n      return 'constant';                                                                                               // 44\n    }                                                                                                                  // 45\n                                                                                                                       // 46\n    if (ref === undefined) {                                                                                           // 47\n      return 'undefined';                                                                                              // 48\n    }                                                                                                                  // 49\n                                                                                                                       // 50\n    if (ref === null) {                                                                                                // 51\n      return 'null';                                                                                                   // 52\n    }                                                                                                                  // 53\n                                                                                                                       // 54\n    return null;                                                                                                       // 55\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  function makeComponent(metadata) {                                                                                   // 58\n    switch (metadata.type) {                                                                                           // 59\n    case 'object':                                                                                                     // 60\n      return {};                                                                                                       // 61\n                                                                                                                       // 62\n    case 'array':                                                                                                      // 63\n      return [];                                                                                                       // 64\n                                                                                                                       // 65\n    case 'regexp':                                                                                                     // 66\n      return new RegExp();                                                                                             // 67\n                                                                                                                       // 68\n    case 'constant':                                                                                                   // 69\n    case 'null':                                                                                                       // 70\n    case 'undefined':                                                                                                  // 71\n      return metadata.value;                                                                                           // 72\n                                                                                                                       // 73\n    case 'infinity':                                                                                                   // 74\n      return Infinity;                                                                                                 // 75\n                                                                                                                       // 76\n    case 'function':                                                                                                   // 77\n      var defaultReturnValue;                                                                                          // 78\n      var specificReturnValues = [];                                                                                   // 79\n      var mockImpl;                                                                                                    // 80\n      var isReturnValueLastSet = false;                                                                                // 81\n      var calls = [];                                                                                                  // 82\n      var instances = [];                                                                                              // 83\n      var prototype =                                                                                                  // 84\n        (metadata.members && metadata.members.prototype &&                                                             // 85\n          metadata.members.prototype.members) || {};                                                                   // 86\n                                                                                                                       // 87\n      var f = function () {                                                                                            // 88\n        instances.push(this);                                                                                          // 89\n        calls.push(Array.prototype.slice.call(arguments));                                                             // 90\n        /* jshint noarg:false */                                                                                       // 91\n        if (this instanceof arguments.callee) {                                                                        // 92\n          // This is probably being called as a constructor                                                            // 93\n          for (var slot in prototype) {                                                                                // 94\n            // Copy prototype methods to the instance to make                                                          // 95\n            // it easier to interact with mock instance call and                                                       // 96\n            // return values                                                                                           // 97\n            if (prototype[slot].type === 'function') {                                                                 // 98\n              var protoImpl = this[slot];                                                                              // 99\n              this[slot] = generateFromMetadata(prototype[slot]);                                                      // 100\n              this[slot]._protoImpl = protoImpl;                                                                       // 101\n            }                                                                                                          // 102\n          }                                                                                                            // 103\n                                                                                                                       // 104\n          // Run the mock constructor implementation                                                                   // 105\n          return mockImpl && mockImpl.apply(this, arguments);                                                          // 106\n        }                                                                                                              // 107\n                                                                                                                       // 108\n        var returnValue;                                                                                               // 109\n        // If return value is last set, either specific or default, i.e.                                               // 110\n        // mockReturnValueOnce()/mockReturnValue() is called and no                                                    // 111\n        // mockImplementation() is called after that.                                                                  // 112\n        // use the set return value.                                                                                   // 113\n        if (isReturnValueLastSet) {                                                                                    // 114\n          returnValue = specificReturnValues.shift();                                                                  // 115\n          if (returnValue === undefined) {                                                                             // 116\n            returnValue = defaultReturnValue;                                                                          // 117\n          }                                                                                                            // 118\n        }                                                                                                              // 119\n                                                                                                                       // 120\n        // If mockImplementation() is last set, or specific return values                                              // 121\n        // are used up, use the mock implementation.                                                                   // 122\n        if (mockImpl && returnValue === undefined) {                                                                   // 123\n          return mockImpl.apply(this, arguments);                                                                      // 124\n        }                                                                                                              // 125\n                                                                                                                       // 126\n        // Otherwise use prototype implementation                                                                      // 127\n        if (returnValue === undefined && arguments.callee._protoImpl) {                                                // 128\n          return arguments.callee._protoImpl.apply(this, arguments);                                                   // 129\n        }                                                                                                              // 130\n                                                                                                                       // 131\n        return returnValue;                                                                                            // 132\n      };                                                                                                               // 133\n                                                                                                                       // 134\n      f._isMockFunction = true;                                                                                        // 135\n                                                                                                                       // 136\n      f.mock = {                                                                                                       // 137\n        calls: calls,                                                                                                  // 138\n        instances: instances                                                                                           // 139\n      };                                                                                                               // 140\n                                                                                                                       // 141\n      f.mockClear = function () {                                                                                      // 142\n        calls.length = 0;                                                                                              // 143\n        instances.length = 0;                                                                                          // 144\n      };                                                                                                               // 145\n                                                                                                                       // 146\n      f.mockReturnValueOnce = function (value) {                                                                       // 147\n        // next function call will return this value or default return value                                           // 148\n        isReturnValueLastSet = true;                                                                                   // 149\n        specificReturnValues.push(value);                                                                              // 150\n        return f;                                                                                                      // 151\n      };                                                                                                               // 152\n                                                                                                                       // 153\n      f.mockReturnValue = function (value) {                                                                           // 154\n        // next function call will return specified return value or this one                                           // 155\n        isReturnValueLastSet = true;                                                                                   // 156\n        defaultReturnValue = value;                                                                                    // 157\n        return f;                                                                                                      // 158\n      };                                                                                                               // 159\n                                                                                                                       // 160\n      f.mockImplementation = f.mockImpl = function (fn) {                                                              // 161\n        // next function call will use mock implementation return value                                                // 162\n        isReturnValueLastSet = false;                                                                                  // 163\n        mockImpl = fn;                                                                                                 // 164\n        return f;                                                                                                      // 165\n      };                                                                                                               // 166\n                                                                                                                       // 167\n      f.mockReturnThis = function () {                                                                                 // 168\n        return f.mockImplementation(function () {                                                                      // 169\n          return this;                                                                                                 // 170\n        });                                                                                                            // 171\n      };                                                                                                               // 172\n                                                                                                                       // 173\n      f._getMockImplementation = function () {                                                                         // 174\n        return mockImpl;                                                                                               // 175\n      };                                                                                                               // 176\n                                                                                                                       // 177\n      if (metadata.mockImpl) {                                                                                         // 178\n        f.mockImplementation(metadata.mockImpl);                                                                       // 179\n      }                                                                                                                // 180\n                                                                                                                       // 181\n      return f;                                                                                                        // 182\n    }                                                                                                                  // 183\n                                                                                                                       // 184\n    throw new Error('Unrecognized type ' + metadata.type);                                                             // 185\n  }                                                                                                                    // 186\n                                                                                                                       // 187\n  function generateFromMetadata(_metadata) {                                                                           // 188\n    var callbacks = [];                                                                                                // 189\n    var refs = {};                                                                                                     // 190\n                                                                                                                       // 191\n    function generateMock(metadata) {                                                                                  // 192\n      var mock = makeComponent(metadata);                                                                              // 193\n      if (metadata.refID !== null && metadata.refID !== undefined) {                                                   // 194\n        refs[metadata.refID] = mock;                                                                                   // 195\n      }                                                                                                                // 196\n                                                                                                                       // 197\n      function getRefCallback(slot, ref) {                                                                             // 198\n        return function () {                                                                                           // 199\n          mock[slot] = refs[ref];                                                                                      // 200\n        };                                                                                                             // 201\n      }                                                                                                                // 202\n                                                                                                                       // 203\n      if (metadata.__TCmeta) {                                                                                         // 204\n        mock.__TCmeta = metadata.__TCmeta;                                                                             // 205\n      }                                                                                                                // 206\n                                                                                                                       // 207\n      for (var slot in metadata.members) {                                                                             // 208\n        var slotMetadata = metadata.members[slot];                                                                     // 209\n        if (slotMetadata.ref !== null && slotMetadata.ref !== undefined) {                                             // 210\n          callbacks.push(getRefCallback(slot, slotMetadata.ref));                                                      // 211\n        } else {                                                                                                       // 212\n          mock[slot] = generateMock(slotMetadata);                                                                     // 213\n        }                                                                                                              // 214\n      }                                                                                                                // 215\n                                                                                                                       // 216\n      if (metadata.type !== 'undefined'                                                                                // 217\n        && metadata.type !== 'null'                                                                                    // 218\n        && mock.prototype) {                                                                                           // 219\n        mock.prototype.constructor = mock;                                                                             // 220\n      }                                                                                                                // 221\n                                                                                                                       // 222\n      return mock;                                                                                                     // 223\n    }                                                                                                                  // 224\n                                                                                                                       // 225\n    var mock = generateMock(_metadata);                                                                                // 226\n    callbacks.forEach(function (setter) {                                                                              // 227\n      setter();                                                                                                        // 228\n    });                                                                                                                // 229\n                                                                                                                       // 230\n    return mock;                                                                                                       // 231\n  }                                                                                                                    // 232\n                                                                                                                       // 233\n  function _getMetadata(component, _refs) {                                                                            // 234\n    var refs = _refs || [];                                                                                            // 235\n                                                                                                                       // 236\n    // This is a potential performance drain, since the whole list is scanned                                          // 237\n    // for every component                                                                                             // 238\n    var ref = refs.indexOf(component);                                                                                 // 239\n    if (ref > -1) {                                                                                                    // 240\n      return {ref: ref};                                                                                               // 241\n    }                                                                                                                  // 242\n                                                                                                                       // 243\n    var type = getType(component);                                                                                     // 244\n    if (!type) {                                                                                                       // 245\n      return null;                                                                                                     // 246\n    }                                                                                                                  // 247\n                                                                                                                       // 248\n    var metadata = {type: type};                                                                                       // 249\n    if (type === 'constant'                                                                                            // 250\n      || type === 'undefined'                                                                                          // 251\n      || type === 'null') {                                                                                            // 252\n      metadata.value = component;                                                                                      // 253\n      return metadata;                                                                                                 // 254\n    } else if (type === 'infinity') {                                                                                  // 255\n      metadata.value = 'infinity';                                                                                     // 256\n      return metadata;                                                                                                 // 257\n    } else if (type === 'function') {                                                                                  // 258\n      metadata.__TCmeta = component.__TCmeta;                                                                          // 259\n      if (component._isMockFunction) {                                                                                 // 260\n        metadata.mockImpl = component._getMockImplementation();                                                        // 261\n      }                                                                                                                // 262\n    }                                                                                                                  // 263\n                                                                                                                       // 264\n    metadata.refID = refs.length;                                                                                      // 265\n    refs.push(component);                                                                                              // 266\n                                                                                                                       // 267\n    var members = null;                                                                                                // 268\n                                                                                                                       // 269\n    function addMember(slot, data) {                                                                                   // 270\n      if (!data) {                                                                                                     // 271\n        return;                                                                                                        // 272\n      }                                                                                                                // 273\n      if (!members) {                                                                                                  // 274\n        members = {};                                                                                                  // 275\n      }                                                                                                                // 276\n      members[slot] = data;                                                                                            // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    // Leave arrays alone                                                                                              // 280\n    if (type !== 'array') {                                                                                            // 281\n      if (type !== 'undefined') {                                                                                      // 282\n        for (var slot in component) {                                                                                  // 283\n          if (slot.charAt(0) === '_' ||                                                                                // 284\n            (type === 'function' && component._isMockFunction &&                                                       // 285\n              slot.match(/^mock/))) {                                                                                  // 286\n            continue;                                                                                                  // 287\n          }                                                                                                            // 288\n                                                                                                                       // 289\n          if (!component.hasOwnProperty && component[slot] !== undefined ||                                            // 290\n            component.hasOwnProperty(slot) ||                                                                          // 291\n            /* jshint eqeqeq:false */                                                                                  // 292\n            (type === 'object' && component[slot] != Object.prototype[slot])) {                                        // 293\n            addMember(slot, _getMetadata(component[slot], refs));                                                      // 294\n          }                                                                                                            // 295\n        }                                                                                                              // 296\n      }                                                                                                                // 297\n                                                                                                                       // 298\n      // If component is native code function, prototype might be undefined                                            // 299\n      if (type === 'function' && component.prototype) {                                                                // 300\n        var prototype = _getMetadata(component.prototype, refs);                                                       // 301\n        if (prototype && prototype.members) {                                                                          // 302\n          addMember('prototype', prototype);                                                                           // 303\n        }                                                                                                              // 304\n      }                                                                                                                // 305\n    }                                                                                                                  // 306\n                                                                                                                       // 307\n    if (members) {                                                                                                     // 308\n      metadata.members = members;                                                                                      // 309\n    }                                                                                                                  // 310\n                                                                                                                       // 311\n    return metadata;                                                                                                   // 312\n  }                                                                                                                    // 313\n                                                                                                                       // 314\n  function removeUnusedRefs(metadata) {                                                                                // 315\n    function visit(metadata, f) {                                                                                      // 316\n      f(metadata);                                                                                                     // 317\n      if (metadata.members) {                                                                                          // 318\n        for (var slot in metadata.members) {                                                                           // 319\n          visit(metadata.members[slot], f);                                                                            // 320\n        }                                                                                                              // 321\n      }                                                                                                                // 322\n    }                                                                                                                  // 323\n                                                                                                                       // 324\n    var usedRefs = {};                                                                                                 // 325\n    visit(metadata, function (metadata) {                                                                              // 326\n      if (metadata.ref !== null && metadata.ref !== undefined) {                                                       // 327\n        usedRefs[metadata.ref] = true;                                                                                 // 328\n      }                                                                                                                // 329\n    });                                                                                                                // 330\n                                                                                                                       // 331\n    visit(metadata, function (metadata) {                                                                              // 332\n      if (!usedRefs[metadata.refID]) {                                                                                 // 333\n        delete metadata.refID;                                                                                         // 334\n      }                                                                                                                // 335\n    });                                                                                                                // 336\n  }                                                                                                                    // 337\n                                                                                                                       // 338\n  var mocker = {                                                                                                       // 339\n    /**                                                                                                                // 340\n     * Generates a mock based on the given metadata. Mocks treat functions                                             // 341\n     * specially, and all mock functions have additional members, described in the                                     // 342\n     * documentation for getMockFunction in this module.                                                               // 343\n     *                                                                                                                 // 344\n     * One important note: function prototoypes are handled specially by this                                          // 345\n     * mocking framework. For functions with prototypes, when called as a                                              // 346\n     * constructor, the mock will install mocked function members on the instance.                                     // 347\n     * This allows different instances of the same constructor to have different                                       // 348\n     * values for its mocks member and its return values.                                                              // 349\n     *                                                                                                                 // 350\n     * @param metadata Metadata for the mock in the schema returned by the                                             // 351\n     * getMetadata method of this module.                                                                              // 352\n     *                                                                                                                 // 353\n     */                                                                                                                // 354\n    generateFromMetadata: generateFromMetadata,                                                                        // 355\n                                                                                                                       // 356\n    /**                                                                                                                // 357\n     * Inspects the argument and returns its schema in the following recursive                                         // 358\n     * format:                                                                                                         // 359\n     * {                                                                                                               // 360\n     *  type: ...                                                                                                      // 361\n     *  members : {}                                                                                                   // 362\n     * }                                                                                                               // 363\n     *                                                                                                                 // 364\n     * Where type is one of 'array', 'object', 'function', or 'ref', and members                                       // 365\n     * is an optional dictionary where the keys are member names and the values                                        // 366\n     * are metadata objects. Function prototypes are defined simply by defining                                        // 367\n     * metadata for the member.prototype of the function. The type of a function                                       // 368\n     * prototype should always be \"object\". For instance, a simple class might be                                      // 369\n     * defined like this:                                                                                              // 370\n     *                                                                                                                 // 371\n     * {                                                                                                               // 372\n     *  type: 'function',                                                                                              // 373\n     *  members: {                                                                                                     // 374\n     *    staticMethod: {type: 'function'},                                                                            // 375\n     *    prototype: {                                                                                                 // 376\n     *      type: 'object',                                                                                            // 377\n     *      members: {                                                                                                 // 378\n     *        instanceMethod: {type: 'function'}                                                                       // 379\n     *      }                                                                                                          // 380\n     *    }                                                                                                            // 381\n     *  }                                                                                                              // 382\n     * }                                                                                                               // 383\n     *                                                                                                                 // 384\n     * Metadata may also contain references to other objects defined within the                                        // 385\n     * same metadata object. The metadata for the referent must be marked with                                         // 386\n     * 'refID' key and an arbitrary value. The referer must be marked with a                                           // 387\n     * 'ref' key that has the same value as object with refID that it refers to.                                       // 388\n     * For instance, this metadata blob:                                                                               // 389\n     * {                                                                                                               // 390\n     *  type: 'object',                                                                                                // 391\n     *  refID: 1,                                                                                                      // 392\n     *  members: {                                                                                                     // 393\n     *    self: {ref: 1}                                                                                               // 394\n     *  }                                                                                                              // 395\n     * }                                                                                                               // 396\n     *                                                                                                                 // 397\n     * defines an object with a slot named 'self' that refers back to the object.                                      // 398\n     *                                                                                                                 // 399\n     * @param component The component for which to retrieve metadata.                                                  // 400\n     */                                                                                                                // 401\n    getMetadata: function (component) {                                                                                // 402\n      var metadata = _getMetadata(component);                                                                          // 403\n      // to make it easier to work with mock metadata, only preserve references                                        // 404\n      // that are actually used                                                                                        // 405\n      if (metadata !== null) {                                                                                         // 406\n        removeUnusedRefs(metadata);                                                                                    // 407\n      }                                                                                                                // 408\n      return metadata;                                                                                                 // 409\n    },                                                                                                                 // 410\n                                                                                                                       // 411\n    /**                                                                                                                // 412\n     * Generates a stand-alone function with members that help drive unit tests or                                     // 413\n     * confirm expectations. Specifically, functions returned by this method have                                      // 414\n     * the following members:                                                                                          // 415\n     *                                                                                                                 // 416\n     * .mock:                                                                                                          // 417\n     * An object with two members, \"calls\", and \"instances\", which are both                                            // 418\n     * lists. The items in the \"calls\" list are the arguments with which the                                           // 419\n     * function was called. The \"instances\" list stores the value of 'this' for                                        // 420\n     * each call to the function. This is useful for retrieving instances from a                                       // 421\n     * constructor.                                                                                                    // 422\n     *                                                                                                                 // 423\n     * .mockReturnValueOnce(value)                                                                                     // 424\n     * Pushes the given value onto a FIFO queue of return values for the                                               // 425\n     * function.                                                                                                       // 426\n     *                                                                                                                 // 427\n     * .mockReturnValue(value)                                                                                         // 428\n     * Sets the default return value for the function.                                                                 // 429\n     *                                                                                                                 // 430\n     * .mockImplementation(function)                                                                                   // 431\n     * Sets a mock implementation for the function.                                                                    // 432\n     *                                                                                                                 // 433\n     * .mockReturnThis()                                                                                               // 434\n     * Syntactic sugar for .mockImplementation(function() {return this;})                                              // 435\n     *                                                                                                                 // 436\n     * In case both mockImplementation() and                                                                           // 437\n     * mockReturnValueOnce()/mockReturnValue() are called. The priority of                                             // 438\n     * which to use is based on what is the last call:                                                                 // 439\n     * - if the last call is mockReturnValueOnce() or mockReturnValue(),                                               // 440\n     *   use the specific return specific return value or default return value.                                        // 441\n     *   If specific return values are used up or no default return value is set,                                      // 442\n     *   fall back to try mockImplementation();                                                                        // 443\n     * - if the last call is mockImplementation(), run the given implementation                                        // 444\n     *   and return the result.                                                                                        // 445\n     */                                                                                                                // 446\n    getMockFunction: function () {                                                                                     // 447\n      return makeComponent({type: 'function'});                                                                        // 448\n    },                                                                                                                 // 449\n                                                                                                                       // 450\n    // Just a short-hand alias                                                                                         // 451\n    getMockFn: function () {                                                                                           // 452\n      return this.getMockFunction();                                                                                   // 453\n    },                                                                                                                 // 454\n                                                                                                                       // 455\n    noConflict: function() {                                                                                           // 456\n      root.mocker = previousMocker;                                                                                    // 457\n      return mocker;                                                                                                   // 458\n    }                                                                                                                  // 459\n  };                                                                                                                   // 460\n                                                                                                                       // 461\n  if (typeof exports !== 'undefined') {                                                                                // 462\n    if (typeof module !== 'undefined' && module.exports) {                                                             // 463\n      exports = module.exports = mocker;                                                                               // 464\n    }                                                                                                                  // 465\n    exports.mocker = mocker;                                                                                           // 466\n  } else {                                                                                                             // 467\n    root.mocker = mocker;                                                                                              // 468\n  }                                                                                                                    // 469\n}.call(this));                                                                                                         // 470\n                                                                                                                       // 471\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/.npm/package/node_modules/jasmine-core/lib/jasmine-core/jasmine.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nCopyright (c) 2008-2015 Pivotal Labs                                                                                   // 2\n                                                                                                                       // 3\nPermission is hereby granted, free of charge, to any person obtaining                                                  // 4\na copy of this software and associated documentation files (the                                                        // 5\n\"Software\"), to deal in the Software without restriction, including                                                    // 6\nwithout limitation the rights to use, copy, modify, merge, publish,                                                    // 7\ndistribute, sublicense, and/or sell copies of the Software, and to                                                     // 8\npermit persons to whom the Software is furnished to do so, subject to                                                  // 9\nthe following conditions:                                                                                              // 10\n                                                                                                                       // 11\nThe above copyright notice and this permission notice shall be                                                         // 12\nincluded in all copies or substantial portions of the Software.                                                        // 13\n                                                                                                                       // 14\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                        // 15\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                     // 16\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                                  // 17\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                                 // 18\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                                 // 19\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                                  // 20\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                        // 21\n*/                                                                                                                     // 22\nvar getJasmineRequireObj = (function (jasmineGlobal) {                                                                 // 23\n  var jasmineRequire;                                                                                                  // 24\n                                                                                                                       // 25\n  if (typeof module !== 'undefined' && module.exports) {                                                               // 26\n    jasmineGlobal = global;                                                                                            // 27\n    jasmineRequire = exports;                                                                                          // 28\n  } else {                                                                                                             // 29\n    if (typeof window !== 'undefined' && typeof window.toString === 'function' && window.toString() === '[object GjsGlobal]') {\n      jasmineGlobal = window;                                                                                          // 31\n    }                                                                                                                  // 32\n    jasmineRequire = jasmineGlobal.jasmineRequire = jasmineGlobal.jasmineRequire || {};                                // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  function getJasmineRequire() {                                                                                       // 36\n    return jasmineRequire;                                                                                             // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  getJasmineRequire().core = function(jRequire) {                                                                      // 40\n    var j$ = {};                                                                                                       // 41\n                                                                                                                       // 42\n    jRequire.base(j$, jasmineGlobal);                                                                                  // 43\n    j$.util = jRequire.util();                                                                                         // 44\n    j$.errors = jRequire.errors();                                                                                     // 45\n    j$.Any = jRequire.Any(j$);                                                                                         // 46\n    j$.Anything = jRequire.Anything(j$);                                                                               // 47\n    j$.CallTracker = jRequire.CallTracker();                                                                           // 48\n    j$.MockDate = jRequire.MockDate();                                                                                 // 49\n    j$.Clock = jRequire.Clock();                                                                                       // 50\n    j$.DelayedFunctionScheduler = jRequire.DelayedFunctionScheduler();                                                 // 51\n    j$.Env = jRequire.Env(j$);                                                                                         // 52\n    j$.ExceptionFormatter = jRequire.ExceptionFormatter();                                                             // 53\n    j$.Expectation = jRequire.Expectation();                                                                           // 54\n    j$.buildExpectationResult = jRequire.buildExpectationResult();                                                     // 55\n    j$.JsApiReporter = jRequire.JsApiReporter();                                                                       // 56\n    j$.matchersUtil = jRequire.matchersUtil(j$);                                                                       // 57\n    j$.ObjectContaining = jRequire.ObjectContaining(j$);                                                               // 58\n    j$.ArrayContaining = jRequire.ArrayContaining(j$);                                                                 // 59\n    j$.pp = jRequire.pp(j$);                                                                                           // 60\n    j$.QueueRunner = jRequire.QueueRunner(j$);                                                                         // 61\n    j$.ReportDispatcher = jRequire.ReportDispatcher();                                                                 // 62\n    j$.Spec = jRequire.Spec(j$);                                                                                       // 63\n    j$.SpyRegistry = jRequire.SpyRegistry(j$);                                                                         // 64\n    j$.SpyStrategy = jRequire.SpyStrategy();                                                                           // 65\n    j$.StringMatching = jRequire.StringMatching(j$);                                                                   // 66\n    j$.Suite = jRequire.Suite(j$);                                                                                     // 67\n    j$.Timer = jRequire.Timer();                                                                                       // 68\n    j$.TreeProcessor = jRequire.TreeProcessor();                                                                       // 69\n    j$.version = jRequire.version();                                                                                   // 70\n                                                                                                                       // 71\n    j$.matchers = jRequire.requireMatchers(jRequire, j$);                                                              // 72\n                                                                                                                       // 73\n    return j$;                                                                                                         // 74\n  };                                                                                                                   // 75\n                                                                                                                       // 76\n  return getJasmineRequire;                                                                                            // 77\n})(this);                                                                                                              // 78\n                                                                                                                       // 79\ngetJasmineRequireObj().requireMatchers = function(jRequire, j$) {                                                      // 80\n  var availableMatchers = [                                                                                            // 81\n      'toBe',                                                                                                          // 82\n      'toBeCloseTo',                                                                                                   // 83\n      'toBeDefined',                                                                                                   // 84\n      'toBeFalsy',                                                                                                     // 85\n      'toBeGreaterThan',                                                                                               // 86\n      'toBeLessThan',                                                                                                  // 87\n      'toBeNaN',                                                                                                       // 88\n      'toBeNull',                                                                                                      // 89\n      'toBeTruthy',                                                                                                    // 90\n      'toBeUndefined',                                                                                                 // 91\n      'toContain',                                                                                                     // 92\n      'toEqual',                                                                                                       // 93\n      'toHaveBeenCalled',                                                                                              // 94\n      'toHaveBeenCalledWith',                                                                                          // 95\n      'toMatch',                                                                                                       // 96\n      'toThrow',                                                                                                       // 97\n      'toThrowError'                                                                                                   // 98\n    ],                                                                                                                 // 99\n    matchers = {};                                                                                                     // 100\n                                                                                                                       // 101\n  for (var i = 0; i < availableMatchers.length; i++) {                                                                 // 102\n    var name = availableMatchers[i];                                                                                   // 103\n    matchers[name] = jRequire[name](j$);                                                                               // 104\n  }                                                                                                                    // 105\n                                                                                                                       // 106\n  return matchers;                                                                                                     // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\ngetJasmineRequireObj().base = function(j$, jasmineGlobal) {                                                            // 110\n  j$.unimplementedMethod_ = function() {                                                                               // 111\n    throw new Error('unimplemented method');                                                                           // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  j$.MAX_PRETTY_PRINT_DEPTH = 40;                                                                                      // 115\n  j$.MAX_PRETTY_PRINT_ARRAY_LENGTH = 100;                                                                              // 116\n  j$.DEFAULT_TIMEOUT_INTERVAL = 5000;                                                                                  // 117\n                                                                                                                       // 118\n  j$.getGlobal = function() {                                                                                          // 119\n    return jasmineGlobal;                                                                                              // 120\n  };                                                                                                                   // 121\n                                                                                                                       // 122\n  j$.getEnv = function(options) {                                                                                      // 123\n    var env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options);                                                  // 124\n    //jasmine. singletons in here (setTimeout blah blah).                                                              // 125\n    return env;                                                                                                        // 126\n  };                                                                                                                   // 127\n                                                                                                                       // 128\n  j$.isArray_ = function(value) {                                                                                      // 129\n    return j$.isA_('Array', value);                                                                                    // 130\n  };                                                                                                                   // 131\n                                                                                                                       // 132\n  j$.isString_ = function(value) {                                                                                     // 133\n    return j$.isA_('String', value);                                                                                   // 134\n  };                                                                                                                   // 135\n                                                                                                                       // 136\n  j$.isNumber_ = function(value) {                                                                                     // 137\n    return j$.isA_('Number', value);                                                                                   // 138\n  };                                                                                                                   // 139\n                                                                                                                       // 140\n  j$.isA_ = function(typeName, value) {                                                                                // 141\n    return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';                                     // 142\n  };                                                                                                                   // 143\n                                                                                                                       // 144\n  j$.isDomNode = function(obj) {                                                                                       // 145\n    return obj.nodeType > 0;                                                                                           // 146\n  };                                                                                                                   // 147\n                                                                                                                       // 148\n  j$.fnNameFor = function(func) {                                                                                      // 149\n    return func.name || func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/)[1];                                         // 150\n  };                                                                                                                   // 151\n                                                                                                                       // 152\n  j$.any = function(clazz) {                                                                                           // 153\n    return new j$.Any(clazz);                                                                                          // 154\n  };                                                                                                                   // 155\n                                                                                                                       // 156\n  j$.anything = function() {                                                                                           // 157\n    return new j$.Anything();                                                                                          // 158\n  };                                                                                                                   // 159\n                                                                                                                       // 160\n  j$.objectContaining = function(sample) {                                                                             // 161\n    return new j$.ObjectContaining(sample);                                                                            // 162\n  };                                                                                                                   // 163\n                                                                                                                       // 164\n  j$.stringMatching = function(expected) {                                                                             // 165\n    return new j$.StringMatching(expected);                                                                            // 166\n  };                                                                                                                   // 167\n                                                                                                                       // 168\n  j$.arrayContaining = function(sample) {                                                                              // 169\n    return new j$.ArrayContaining(sample);                                                                             // 170\n  };                                                                                                                   // 171\n                                                                                                                       // 172\n  j$.createSpy = function(name, originalFn) {                                                                          // 173\n                                                                                                                       // 174\n    var spyStrategy = new j$.SpyStrategy({                                                                             // 175\n        name: name,                                                                                                    // 176\n        fn: originalFn,                                                                                                // 177\n        getSpy: function() { return spy; }                                                                             // 178\n      }),                                                                                                              // 179\n      callTracker = new j$.CallTracker(),                                                                              // 180\n      spy = function() {                                                                                               // 181\n        var callData = {                                                                                               // 182\n          object: this,                                                                                                // 183\n          args: Array.prototype.slice.apply(arguments)                                                                 // 184\n        };                                                                                                             // 185\n                                                                                                                       // 186\n        callTracker.track(callData);                                                                                   // 187\n        var returnValue = spyStrategy.exec.apply(this, arguments);                                                     // 188\n        callData.returnValue = returnValue;                                                                            // 189\n                                                                                                                       // 190\n        return returnValue;                                                                                            // 191\n      };                                                                                                               // 192\n                                                                                                                       // 193\n    for (var prop in originalFn) {                                                                                     // 194\n      if (prop === 'and' || prop === 'calls') {                                                                        // 195\n        throw new Error('Jasmine spies would overwrite the \\'and\\' and \\'calls\\' properties on the object being spied upon');\n      }                                                                                                                // 197\n                                                                                                                       // 198\n      spy[prop] = originalFn[prop];                                                                                    // 199\n    }                                                                                                                  // 200\n                                                                                                                       // 201\n    spy.and = spyStrategy;                                                                                             // 202\n    spy.calls = callTracker;                                                                                           // 203\n                                                                                                                       // 204\n    return spy;                                                                                                        // 205\n  };                                                                                                                   // 206\n                                                                                                                       // 207\n  j$.isSpy = function(putativeSpy) {                                                                                   // 208\n    if (!putativeSpy) {                                                                                                // 209\n      return false;                                                                                                    // 210\n    }                                                                                                                  // 211\n    return putativeSpy.and instanceof j$.SpyStrategy &&                                                                // 212\n      putativeSpy.calls instanceof j$.CallTracker;                                                                     // 213\n  };                                                                                                                   // 214\n                                                                                                                       // 215\n  j$.createSpyObj = function(baseName, methodNames) {                                                                  // 216\n    if (j$.isArray_(baseName) && j$.util.isUndefined(methodNames)) {                                                   // 217\n      methodNames = baseName;                                                                                          // 218\n      baseName = 'unknown';                                                                                            // 219\n    }                                                                                                                  // 220\n                                                                                                                       // 221\n    if (!j$.isArray_(methodNames) || methodNames.length === 0) {                                                       // 222\n      throw 'createSpyObj requires a non-empty array of method names to create spies for';                             // 223\n    }                                                                                                                  // 224\n    var obj = {};                                                                                                      // 225\n    for (var i = 0; i < methodNames.length; i++) {                                                                     // 226\n      obj[methodNames[i]] = j$.createSpy(baseName + '.' + methodNames[i]);                                             // 227\n    }                                                                                                                  // 228\n    return obj;                                                                                                        // 229\n  };                                                                                                                   // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\ngetJasmineRequireObj().util = function() {                                                                             // 233\n                                                                                                                       // 234\n  var util = {};                                                                                                       // 235\n                                                                                                                       // 236\n  util.inherit = function(childClass, parentClass) {                                                                   // 237\n    var Subclass = function() {                                                                                        // 238\n    };                                                                                                                 // 239\n    Subclass.prototype = parentClass.prototype;                                                                        // 240\n    childClass.prototype = new Subclass();                                                                             // 241\n  };                                                                                                                   // 242\n                                                                                                                       // 243\n  util.htmlEscape = function(str) {                                                                                    // 244\n    if (!str) {                                                                                                        // 245\n      return str;                                                                                                      // 246\n    }                                                                                                                  // 247\n    return str.replace(/&/g, '&amp;')                                                                                  // 248\n      .replace(/</g, '&lt;')                                                                                           // 249\n      .replace(/>/g, '&gt;');                                                                                          // 250\n  };                                                                                                                   // 251\n                                                                                                                       // 252\n  util.argsToArray = function(args) {                                                                                  // 253\n    var arrayOfArgs = [];                                                                                              // 254\n    for (var i = 0; i < args.length; i++) {                                                                            // 255\n      arrayOfArgs.push(args[i]);                                                                                       // 256\n    }                                                                                                                  // 257\n    return arrayOfArgs;                                                                                                // 258\n  };                                                                                                                   // 259\n                                                                                                                       // 260\n  util.isUndefined = function(obj) {                                                                                   // 261\n    return obj === void 0;                                                                                             // 262\n  };                                                                                                                   // 263\n                                                                                                                       // 264\n  util.arrayContains = function(array, search) {                                                                       // 265\n    var i = array.length;                                                                                              // 266\n    while (i--) {                                                                                                      // 267\n      if (array[i] === search) {                                                                                       // 268\n        return true;                                                                                                   // 269\n      }                                                                                                                // 270\n    }                                                                                                                  // 271\n    return false;                                                                                                      // 272\n  };                                                                                                                   // 273\n                                                                                                                       // 274\n  util.clone = function(obj) {                                                                                         // 275\n    if (Object.prototype.toString.apply(obj) === '[object Array]') {                                                   // 276\n      return obj.slice();                                                                                              // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    var cloned = {};                                                                                                   // 280\n    for (var prop in obj) {                                                                                            // 281\n      if (obj.hasOwnProperty(prop)) {                                                                                  // 282\n        cloned[prop] = obj[prop];                                                                                      // 283\n      }                                                                                                                // 284\n    }                                                                                                                  // 285\n                                                                                                                       // 286\n    return cloned;                                                                                                     // 287\n  };                                                                                                                   // 288\n                                                                                                                       // 289\n  return util;                                                                                                         // 290\n};                                                                                                                     // 291\n                                                                                                                       // 292\ngetJasmineRequireObj().Spec = function(j$) {                                                                           // 293\n  function Spec(attrs) {                                                                                               // 294\n    this.expectationFactory = attrs.expectationFactory;                                                                // 295\n    this.resultCallback = attrs.resultCallback || function() {};                                                       // 296\n    this.id = attrs.id;                                                                                                // 297\n    this.description = attrs.description || '';                                                                        // 298\n    this.queueableFn = attrs.queueableFn;                                                                              // 299\n    this.beforeAndAfterFns = attrs.beforeAndAfterFns || function() { return {befores: [], afters: []}; };              // 300\n    this.userContext = attrs.userContext || function() { return {}; };                                                 // 301\n    this.onStart = attrs.onStart || function() {};                                                                     // 302\n    this.getSpecName = attrs.getSpecName || function() { return ''; };                                                 // 303\n    this.expectationResultFactory = attrs.expectationResultFactory || function() { };                                  // 304\n    this.queueRunnerFactory = attrs.queueRunnerFactory || function() {};                                               // 305\n    this.catchingExceptions = attrs.catchingExceptions || function() { return true; };                                 // 306\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;                                                // 307\n                                                                                                                       // 308\n    if (!this.queueableFn.fn) {                                                                                        // 309\n      this.pend();                                                                                                     // 310\n    }                                                                                                                  // 311\n                                                                                                                       // 312\n    this.result = {                                                                                                    // 313\n      id: this.id,                                                                                                     // 314\n      description: this.description,                                                                                   // 315\n      fullName: this.getFullName(),                                                                                    // 316\n      failedExpectations: [],                                                                                          // 317\n      passedExpectations: [],                                                                                          // 318\n      pendingReason: ''                                                                                                // 319\n    };                                                                                                                 // 320\n  }                                                                                                                    // 321\n                                                                                                                       // 322\n  Spec.prototype.addExpectationResult = function(passed, data, isError) {                                              // 323\n    var expectationResult = this.expectationResultFactory(data);                                                       // 324\n    if (passed) {                                                                                                      // 325\n      this.result.passedExpectations.push(expectationResult);                                                          // 326\n    } else {                                                                                                           // 327\n      this.result.failedExpectations.push(expectationResult);                                                          // 328\n                                                                                                                       // 329\n      if (this.throwOnExpectationFailure && !isError) {                                                                // 330\n        throw new j$.errors.ExpectationFailed();                                                                       // 331\n      }                                                                                                                // 332\n    }                                                                                                                  // 333\n  };                                                                                                                   // 334\n                                                                                                                       // 335\n  Spec.prototype.expect = function(actual) {                                                                           // 336\n    return this.expectationFactory(actual, this);                                                                      // 337\n  };                                                                                                                   // 338\n                                                                                                                       // 339\n  Spec.prototype.execute = function(onComplete, enabled) {                                                             // 340\n    var self = this;                                                                                                   // 341\n                                                                                                                       // 342\n    this.onStart(this);                                                                                                // 343\n                                                                                                                       // 344\n    if (!this.isExecutable() || this.markedPending || enabled === false) {                                             // 345\n      complete(enabled);                                                                                               // 346\n      return;                                                                                                          // 347\n    }                                                                                                                  // 348\n                                                                                                                       // 349\n    var fns = this.beforeAndAfterFns();                                                                                // 350\n    var allFns = fns.befores.concat(this.queueableFn).concat(fns.afters);                                              // 351\n                                                                                                                       // 352\n    this.queueRunnerFactory({                                                                                          // 353\n      queueableFns: allFns,                                                                                            // 354\n      onException: function() { self.onException.apply(self, arguments); },                                            // 355\n      onComplete: complete,                                                                                            // 356\n      userContext: this.userContext()                                                                                  // 357\n    });                                                                                                                // 358\n                                                                                                                       // 359\n    function complete(enabledAgain) {                                                                                  // 360\n      self.result.status = self.status(enabledAgain);                                                                  // 361\n      self.resultCallback(self.result);                                                                                // 362\n                                                                                                                       // 363\n      if (onComplete) {                                                                                                // 364\n        onComplete();                                                                                                  // 365\n      }                                                                                                                // 366\n    }                                                                                                                  // 367\n  };                                                                                                                   // 368\n                                                                                                                       // 369\n  Spec.prototype.onException = function onException(e) {                                                               // 370\n    if (Spec.isPendingSpecException(e)) {                                                                              // 371\n      this.pend(extractCustomPendingMessage(e));                                                                       // 372\n      return;                                                                                                          // 373\n    }                                                                                                                  // 374\n                                                                                                                       // 375\n    if (e instanceof j$.errors.ExpectationFailed) {                                                                    // 376\n      return;                                                                                                          // 377\n    }                                                                                                                  // 378\n                                                                                                                       // 379\n    this.addExpectationResult(false, {                                                                                 // 380\n      matcherName: '',                                                                                                 // 381\n      passed: false,                                                                                                   // 382\n      expected: '',                                                                                                    // 383\n      actual: '',                                                                                                      // 384\n      error: e                                                                                                         // 385\n    }, true);                                                                                                          // 386\n  };                                                                                                                   // 387\n                                                                                                                       // 388\n  Spec.prototype.disable = function() {                                                                                // 389\n    this.disabled = true;                                                                                              // 390\n  };                                                                                                                   // 391\n                                                                                                                       // 392\n  Spec.prototype.pend = function(message) {                                                                            // 393\n    this.markedPending = true;                                                                                         // 394\n    if (message) {                                                                                                     // 395\n      this.result.pendingReason = message;                                                                             // 396\n    }                                                                                                                  // 397\n  };                                                                                                                   // 398\n                                                                                                                       // 399\n  Spec.prototype.getResult = function() {                                                                              // 400\n    this.result.status = this.status();                                                                                // 401\n    return this.result;                                                                                                // 402\n  };                                                                                                                   // 403\n                                                                                                                       // 404\n  Spec.prototype.status = function(enabled) {                                                                          // 405\n    if (this.disabled || enabled === false) {                                                                          // 406\n      return 'disabled';                                                                                               // 407\n    }                                                                                                                  // 408\n                                                                                                                       // 409\n    if (this.markedPending) {                                                                                          // 410\n      return 'pending';                                                                                                // 411\n    }                                                                                                                  // 412\n                                                                                                                       // 413\n    if (this.result.failedExpectations.length > 0) {                                                                   // 414\n      return 'failed';                                                                                                 // 415\n    } else {                                                                                                           // 416\n      return 'passed';                                                                                                 // 417\n    }                                                                                                                  // 418\n  };                                                                                                                   // 419\n                                                                                                                       // 420\n  Spec.prototype.isExecutable = function() {                                                                           // 421\n    return !this.disabled;                                                                                             // 422\n  };                                                                                                                   // 423\n                                                                                                                       // 424\n  Spec.prototype.getFullName = function() {                                                                            // 425\n    return this.getSpecName(this);                                                                                     // 426\n  };                                                                                                                   // 427\n                                                                                                                       // 428\n  var extractCustomPendingMessage = function(e) {                                                                      // 429\n    var fullMessage = e.toString(),                                                                                    // 430\n        boilerplateStart = fullMessage.indexOf(Spec.pendingSpecExceptionMessage),                                      // 431\n        boilerplateEnd = boilerplateStart + Spec.pendingSpecExceptionMessage.length;                                   // 432\n                                                                                                                       // 433\n    return fullMessage.substr(boilerplateEnd);                                                                         // 434\n  };                                                                                                                   // 435\n                                                                                                                       // 436\n  Spec.pendingSpecExceptionMessage = '=> marked Pending';                                                              // 437\n                                                                                                                       // 438\n  Spec.isPendingSpecException = function(e) {                                                                          // 439\n    return !!(e && e.toString && e.toString().indexOf(Spec.pendingSpecExceptionMessage) !== -1);                       // 440\n  };                                                                                                                   // 441\n                                                                                                                       // 442\n  return Spec;                                                                                                         // 443\n};                                                                                                                     // 444\n                                                                                                                       // 445\nif (typeof window == void 0 && typeof exports == 'object') {                                                           // 446\n  exports.Spec = jasmineRequire.Spec;                                                                                  // 447\n}                                                                                                                      // 448\n                                                                                                                       // 449\ngetJasmineRequireObj().Env = function(j$) {                                                                            // 450\n  function Env(options) {                                                                                              // 451\n    options = options || {};                                                                                           // 452\n                                                                                                                       // 453\n    var self = this;                                                                                                   // 454\n    var global = options.global || j$.getGlobal();                                                                     // 455\n                                                                                                                       // 456\n    var totalSpecsDefined = 0;                                                                                         // 457\n                                                                                                                       // 458\n    var catchExceptions = true;                                                                                        // 459\n                                                                                                                       // 460\n    var realSetTimeout = options.setTimeout || j$.getGlobal().setTimeout;                                              // 461\n    var realClearTimeout = options.clearTimeout || j$.getGlobal().clearTimeout;                                        // 462\n    this.clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));\n                                                                                                                       // 464\n    var runnableLookupTable = {};                                                                                      // 465\n    var runnableResources = {};                                                                                        // 466\n                                                                                                                       // 467\n    var currentSpec = null;                                                                                            // 468\n    var currentlyExecutingSuites = [];                                                                                 // 469\n    var currentDeclarationSuite = null;                                                                                // 470\n    var throwOnExpectationFailure = false;                                                                             // 471\n                                                                                                                       // 472\n    var currentSuite = function() {                                                                                    // 473\n      return currentlyExecutingSuites[currentlyExecutingSuites.length - 1];                                            // 474\n    };                                                                                                                 // 475\n                                                                                                                       // 476\n    var currentRunnable = function() {                                                                                 // 477\n      return currentSpec || currentSuite();                                                                            // 478\n    };                                                                                                                 // 479\n                                                                                                                       // 480\n    var reporter = new j$.ReportDispatcher([                                                                           // 481\n      'jasmineStarted',                                                                                                // 482\n      'jasmineDone',                                                                                                   // 483\n      'suiteStarted',                                                                                                  // 484\n      'suiteDone',                                                                                                     // 485\n      'specStarted',                                                                                                   // 486\n      'specDone'                                                                                                       // 487\n    ]);                                                                                                                // 488\n                                                                                                                       // 489\n    this.specFilter = function() {                                                                                     // 490\n      return true;                                                                                                     // 491\n    };                                                                                                                 // 492\n                                                                                                                       // 493\n    this.addCustomEqualityTester = function(tester) {                                                                  // 494\n      if(!currentRunnable()) {                                                                                         // 495\n        throw new Error('Custom Equalities must be added in a before function or a spec');                             // 496\n      }                                                                                                                // 497\n      runnableResources[currentRunnable().id].customEqualityTesters.push(tester);                                      // 498\n    };                                                                                                                 // 499\n                                                                                                                       // 500\n    this.addMatchers = function(matchersToAdd) {                                                                       // 501\n      if(!currentRunnable()) {                                                                                         // 502\n        throw new Error('Matchers must be added in a before function or a spec');                                      // 503\n      }                                                                                                                // 504\n      var customMatchers = runnableResources[currentRunnable().id].customMatchers;                                     // 505\n      for (var matcherName in matchersToAdd) {                                                                         // 506\n        customMatchers[matcherName] = matchersToAdd[matcherName];                                                      // 507\n      }                                                                                                                // 508\n    };                                                                                                                 // 509\n                                                                                                                       // 510\n    j$.Expectation.addCoreMatchers(j$.matchers);                                                                       // 511\n                                                                                                                       // 512\n    var nextSpecId = 0;                                                                                                // 513\n    var getNextSpecId = function() {                                                                                   // 514\n      return 'spec' + nextSpecId++;                                                                                    // 515\n    };                                                                                                                 // 516\n                                                                                                                       // 517\n    var nextSuiteId = 0;                                                                                               // 518\n    var getNextSuiteId = function() {                                                                                  // 519\n      return 'suite' + nextSuiteId++;                                                                                  // 520\n    };                                                                                                                 // 521\n                                                                                                                       // 522\n    var expectationFactory = function(actual, spec) {                                                                  // 523\n      return j$.Expectation.Factory({                                                                                  // 524\n        util: j$.matchersUtil,                                                                                         // 525\n        customEqualityTesters: runnableResources[spec.id].customEqualityTesters,                                       // 526\n        customMatchers: runnableResources[spec.id].customMatchers,                                                     // 527\n        actual: actual,                                                                                                // 528\n        addExpectationResult: addExpectationResult                                                                     // 529\n      });                                                                                                              // 530\n                                                                                                                       // 531\n      function addExpectationResult(passed, result) {                                                                  // 532\n        return spec.addExpectationResult(passed, result);                                                              // 533\n      }                                                                                                                // 534\n    };                                                                                                                 // 535\n                                                                                                                       // 536\n    var defaultResourcesForRunnable = function(id, parentRunnableId) {                                                 // 537\n      var resources = {spies: [], customEqualityTesters: [], customMatchers: {}};                                      // 538\n                                                                                                                       // 539\n      if(runnableResources[parentRunnableId]){                                                                         // 540\n        resources.customEqualityTesters = j$.util.clone(runnableResources[parentRunnableId].customEqualityTesters);    // 541\n        resources.customMatchers = j$.util.clone(runnableResources[parentRunnableId].customMatchers);                  // 542\n      }                                                                                                                // 543\n                                                                                                                       // 544\n      runnableResources[id] = resources;                                                                               // 545\n    };                                                                                                                 // 546\n                                                                                                                       // 547\n    var clearResourcesForRunnable = function(id) {                                                                     // 548\n        spyRegistry.clearSpies();                                                                                      // 549\n        delete runnableResources[id];                                                                                  // 550\n    };                                                                                                                 // 551\n                                                                                                                       // 552\n    var beforeAndAfterFns = function(suite) {                                                                          // 553\n      return function() {                                                                                              // 554\n        var befores = [],                                                                                              // 555\n          afters = [];                                                                                                 // 556\n                                                                                                                       // 557\n        while(suite) {                                                                                                 // 558\n          befores = befores.concat(suite.beforeFns);                                                                   // 559\n          afters = afters.concat(suite.afterFns);                                                                      // 560\n                                                                                                                       // 561\n          suite = suite.parentSuite;                                                                                   // 562\n        }                                                                                                              // 563\n                                                                                                                       // 564\n        return {                                                                                                       // 565\n          befores: befores.reverse(),                                                                                  // 566\n          afters: afters                                                                                               // 567\n        };                                                                                                             // 568\n      };                                                                                                               // 569\n    };                                                                                                                 // 570\n                                                                                                                       // 571\n    var getSpecName = function(spec, suite) {                                                                          // 572\n      return suite.getFullName() + ' ' + spec.description;                                                             // 573\n    };                                                                                                                 // 574\n                                                                                                                       // 575\n    // TODO: we may just be able to pass in the fn instead of wrapping here                                            // 576\n    var buildExpectationResult = j$.buildExpectationResult,                                                            // 577\n        exceptionFormatter = new j$.ExceptionFormatter(),                                                              // 578\n        expectationResultFactory = function(attrs) {                                                                   // 579\n          attrs.messageFormatter = exceptionFormatter.message;                                                         // 580\n          attrs.stackFormatter = exceptionFormatter.stack;                                                             // 581\n                                                                                                                       // 582\n          return buildExpectationResult(attrs);                                                                        // 583\n        };                                                                                                             // 584\n                                                                                                                       // 585\n    // TODO: fix this naming, and here's where the value comes in                                                      // 586\n    this.catchExceptions = function(value) {                                                                           // 587\n      catchExceptions = !!value;                                                                                       // 588\n      return catchExceptions;                                                                                          // 589\n    };                                                                                                                 // 590\n                                                                                                                       // 591\n    this.catchingExceptions = function() {                                                                             // 592\n      return catchExceptions;                                                                                          // 593\n    };                                                                                                                 // 594\n                                                                                                                       // 595\n    var maximumSpecCallbackDepth = 20;                                                                                 // 596\n    var currentSpecCallbackDepth = 0;                                                                                  // 597\n                                                                                                                       // 598\n    function clearStack(fn) {                                                                                          // 599\n      currentSpecCallbackDepth++;                                                                                      // 600\n      if (currentSpecCallbackDepth >= maximumSpecCallbackDepth) {                                                      // 601\n        currentSpecCallbackDepth = 0;                                                                                  // 602\n        realSetTimeout(fn, 0);                                                                                         // 603\n      } else {                                                                                                         // 604\n        fn();                                                                                                          // 605\n      }                                                                                                                // 606\n    }                                                                                                                  // 607\n                                                                                                                       // 608\n    var catchException = function(e) {                                                                                 // 609\n      return j$.Spec.isPendingSpecException(e) || catchExceptions;                                                     // 610\n    };                                                                                                                 // 611\n                                                                                                                       // 612\n    this.throwOnExpectationFailure = function(value) {                                                                 // 613\n      throwOnExpectationFailure = !!value;                                                                             // 614\n    };                                                                                                                 // 615\n                                                                                                                       // 616\n    this.throwingExpectationFailures = function() {                                                                    // 617\n      return throwOnExpectationFailure;                                                                                // 618\n    };                                                                                                                 // 619\n                                                                                                                       // 620\n    var queueRunnerFactory = function(options) {                                                                       // 621\n      options.catchException = catchException;                                                                         // 622\n      options.clearStack = options.clearStack || clearStack;                                                           // 623\n      options.timeout = {setTimeout: realSetTimeout, clearTimeout: realClearTimeout};                                  // 624\n      options.fail = self.fail;                                                                                        // 625\n                                                                                                                       // 626\n      new j$.QueueRunner(options).execute();                                                                           // 627\n    };                                                                                                                 // 628\n                                                                                                                       // 629\n    var topSuite = new j$.Suite({                                                                                      // 630\n      env: this,                                                                                                       // 631\n      id: getNextSuiteId(),                                                                                            // 632\n      description: 'Jasmine__TopLevel__Suite',                                                                         // 633\n      queueRunner: queueRunnerFactory                                                                                  // 634\n    });                                                                                                                // 635\n    runnableLookupTable[topSuite.id] = topSuite;                                                                       // 636\n    defaultResourcesForRunnable(topSuite.id);                                                                          // 637\n    currentDeclarationSuite = topSuite;                                                                                // 638\n                                                                                                                       // 639\n    this.topSuite = function() {                                                                                       // 640\n      return topSuite;                                                                                                 // 641\n    };                                                                                                                 // 642\n                                                                                                                       // 643\n    this.execute = function(runnablesToRun) {                                                                          // 644\n      if(!runnablesToRun) {                                                                                            // 645\n        if (focusedRunnables.length) {                                                                                 // 646\n          runnablesToRun = focusedRunnables;                                                                           // 647\n        } else {                                                                                                       // 648\n          runnablesToRun = [topSuite.id];                                                                              // 649\n        }                                                                                                              // 650\n      }                                                                                                                // 651\n      var processor = new j$.TreeProcessor({                                                                           // 652\n        tree: topSuite,                                                                                                // 653\n        runnableIds: runnablesToRun,                                                                                   // 654\n        queueRunnerFactory: queueRunnerFactory,                                                                        // 655\n        nodeStart: function(suite) {                                                                                   // 656\n          currentlyExecutingSuites.push(suite);                                                                        // 657\n          defaultResourcesForRunnable(suite.id, suite.parentSuite.id);                                                 // 658\n          reporter.suiteStarted(suite.result);                                                                         // 659\n        },                                                                                                             // 660\n        nodeComplete: function(suite, result) {                                                                        // 661\n          if (!suite.disabled) {                                                                                       // 662\n            clearResourcesForRunnable(suite.id);                                                                       // 663\n          }                                                                                                            // 664\n          currentlyExecutingSuites.pop();                                                                              // 665\n          reporter.suiteDone(result);                                                                                  // 666\n        }                                                                                                              // 667\n      });                                                                                                              // 668\n                                                                                                                       // 669\n      if(!processor.processTree().valid) {                                                                             // 670\n        throw new Error('Invalid order: would cause a beforeAll or afterAll to be run multiple times');                // 671\n      }                                                                                                                // 672\n                                                                                                                       // 673\n      reporter.jasmineStarted({                                                                                        // 674\n        totalSpecsDefined: totalSpecsDefined                                                                           // 675\n      });                                                                                                              // 676\n                                                                                                                       // 677\n      processor.execute(reporter.jasmineDone);                                                                         // 678\n    };                                                                                                                 // 679\n                                                                                                                       // 680\n    this.addReporter = function(reporterToAdd) {                                                                       // 681\n      reporter.addReporter(reporterToAdd);                                                                             // 682\n    };                                                                                                                 // 683\n                                                                                                                       // 684\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {                                                   // 685\n      if(!currentRunnable()) {                                                                                         // 686\n        throw new Error('Spies must be created in a before function or a spec');                                       // 687\n      }                                                                                                                // 688\n      return runnableResources[currentRunnable().id].spies;                                                            // 689\n    }});                                                                                                               // 690\n                                                                                                                       // 691\n    this.spyOn = function() {                                                                                          // 692\n      return spyRegistry.spyOn.apply(spyRegistry, arguments);                                                          // 693\n    };                                                                                                                 // 694\n                                                                                                                       // 695\n    var suiteFactory = function(description) {                                                                         // 696\n      var suite = new j$.Suite({                                                                                       // 697\n        env: self,                                                                                                     // 698\n        id: getNextSuiteId(),                                                                                          // 699\n        description: description,                                                                                      // 700\n        parentSuite: currentDeclarationSuite,                                                                          // 701\n        expectationFactory: expectationFactory,                                                                        // 702\n        expectationResultFactory: expectationResultFactory,                                                            // 703\n        throwOnExpectationFailure: throwOnExpectationFailure                                                           // 704\n      });                                                                                                              // 705\n                                                                                                                       // 706\n      runnableLookupTable[suite.id] = suite;                                                                           // 707\n      return suite;                                                                                                    // 708\n    };                                                                                                                 // 709\n                                                                                                                       // 710\n    this.describe = function(description, specDefinitions) {                                                           // 711\n      var suite = suiteFactory(description);                                                                           // 712\n      addSpecsToSuite(suite, specDefinitions);                                                                         // 713\n      return suite;                                                                                                    // 714\n    };                                                                                                                 // 715\n                                                                                                                       // 716\n    this.xdescribe = function(description, specDefinitions) {                                                          // 717\n      var suite = this.describe(description, specDefinitions);                                                         // 718\n      suite.disable();                                                                                                 // 719\n      return suite;                                                                                                    // 720\n    };                                                                                                                 // 721\n                                                                                                                       // 722\n    var focusedRunnables = [];                                                                                         // 723\n                                                                                                                       // 724\n    this.fdescribe = function(description, specDefinitions) {                                                          // 725\n      var suite = suiteFactory(description);                                                                           // 726\n      suite.isFocused = true;                                                                                          // 727\n                                                                                                                       // 728\n      focusedRunnables.push(suite.id);                                                                                 // 729\n      unfocusAncestor();                                                                                               // 730\n      addSpecsToSuite(suite, specDefinitions);                                                                         // 731\n                                                                                                                       // 732\n      return suite;                                                                                                    // 733\n    };                                                                                                                 // 734\n                                                                                                                       // 735\n    function addSpecsToSuite(suite, specDefinitions) {                                                                 // 736\n      var parentSuite = currentDeclarationSuite;                                                                       // 737\n      parentSuite.addChild(suite);                                                                                     // 738\n      currentDeclarationSuite = suite;                                                                                 // 739\n                                                                                                                       // 740\n      var declarationError = null;                                                                                     // 741\n      try {                                                                                                            // 742\n        specDefinitions.call(suite);                                                                                   // 743\n      } catch (e) {                                                                                                    // 744\n        declarationError = e;                                                                                          // 745\n      }                                                                                                                // 746\n                                                                                                                       // 747\n      if (declarationError) {                                                                                          // 748\n        self.it('encountered a declaration exception', function() {                                                    // 749\n          throw declarationError;                                                                                      // 750\n        });                                                                                                            // 751\n      }                                                                                                                // 752\n                                                                                                                       // 753\n      currentDeclarationSuite = parentSuite;                                                                           // 754\n    }                                                                                                                  // 755\n                                                                                                                       // 756\n    function findFocusedAncestor(suite) {                                                                              // 757\n      while (suite) {                                                                                                  // 758\n        if (suite.isFocused) {                                                                                         // 759\n          return suite.id;                                                                                             // 760\n        }                                                                                                              // 761\n        suite = suite.parentSuite;                                                                                     // 762\n      }                                                                                                                // 763\n                                                                                                                       // 764\n      return null;                                                                                                     // 765\n    }                                                                                                                  // 766\n                                                                                                                       // 767\n    function unfocusAncestor() {                                                                                       // 768\n      var focusedAncestor = findFocusedAncestor(currentDeclarationSuite);                                              // 769\n      if (focusedAncestor) {                                                                                           // 770\n        for (var i = 0; i < focusedRunnables.length; i++) {                                                            // 771\n          if (focusedRunnables[i] === focusedAncestor) {                                                               // 772\n            focusedRunnables.splice(i, 1);                                                                             // 773\n            break;                                                                                                     // 774\n          }                                                                                                            // 775\n        }                                                                                                              // 776\n      }                                                                                                                // 777\n    }                                                                                                                  // 778\n                                                                                                                       // 779\n    var specFactory = function(description, fn, suite, timeout) {                                                      // 780\n      totalSpecsDefined++;                                                                                             // 781\n      var spec = new j$.Spec({                                                                                         // 782\n        id: getNextSpecId(),                                                                                           // 783\n        beforeAndAfterFns: beforeAndAfterFns(suite),                                                                   // 784\n        expectationFactory: expectationFactory,                                                                        // 785\n        resultCallback: specResultCallback,                                                                            // 786\n        getSpecName: function(spec) {                                                                                  // 787\n          return getSpecName(spec, suite);                                                                             // 788\n        },                                                                                                             // 789\n        onStart: specStarted,                                                                                          // 790\n        description: description,                                                                                      // 791\n        expectationResultFactory: expectationResultFactory,                                                            // 792\n        queueRunnerFactory: queueRunnerFactory,                                                                        // 793\n        userContext: function() { return suite.clonedSharedUserContext(); },                                           // 794\n        queueableFn: {                                                                                                 // 795\n          fn: fn,                                                                                                      // 796\n          timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }                                       // 797\n        },                                                                                                             // 798\n        throwOnExpectationFailure: throwOnExpectationFailure                                                           // 799\n      });                                                                                                              // 800\n                                                                                                                       // 801\n      runnableLookupTable[spec.id] = spec;                                                                             // 802\n                                                                                                                       // 803\n      if (!self.specFilter(spec)) {                                                                                    // 804\n        spec.disable();                                                                                                // 805\n      }                                                                                                                // 806\n                                                                                                                       // 807\n      return spec;                                                                                                     // 808\n                                                                                                                       // 809\n      function specResultCallback(result) {                                                                            // 810\n        clearResourcesForRunnable(spec.id);                                                                            // 811\n        currentSpec = null;                                                                                            // 812\n        reporter.specDone(result);                                                                                     // 813\n      }                                                                                                                // 814\n                                                                                                                       // 815\n      function specStarted(spec) {                                                                                     // 816\n        currentSpec = spec;                                                                                            // 817\n        defaultResourcesForRunnable(spec.id, suite.id);                                                                // 818\n        reporter.specStarted(spec.result);                                                                             // 819\n      }                                                                                                                // 820\n    };                                                                                                                 // 821\n                                                                                                                       // 822\n    this.it = function(description, fn, timeout) {                                                                     // 823\n      var spec = specFactory(description, fn, currentDeclarationSuite, timeout);                                       // 824\n      currentDeclarationSuite.addChild(spec);                                                                          // 825\n      return spec;                                                                                                     // 826\n    };                                                                                                                 // 827\n                                                                                                                       // 828\n    this.xit = function() {                                                                                            // 829\n      var spec = this.it.apply(this, arguments);                                                                       // 830\n      spec.pend();                                                                                                     // 831\n      return spec;                                                                                                     // 832\n    };                                                                                                                 // 833\n                                                                                                                       // 834\n    this.fit = function(){                                                                                             // 835\n      var spec = this.it.apply(this, arguments);                                                                       // 836\n                                                                                                                       // 837\n      focusedRunnables.push(spec.id);                                                                                  // 838\n      unfocusAncestor();                                                                                               // 839\n      return spec;                                                                                                     // 840\n    };                                                                                                                 // 841\n                                                                                                                       // 842\n    this.expect = function(actual) {                                                                                   // 843\n      if (!currentRunnable()) {                                                                                        // 844\n        throw new Error('\\'expect\\' was used when there was no current spec, this could be because an asynchronous test timed out');\n      }                                                                                                                // 846\n                                                                                                                       // 847\n      return currentRunnable().expect(actual);                                                                         // 848\n    };                                                                                                                 // 849\n                                                                                                                       // 850\n    this.beforeEach = function(beforeEachFunction, timeout) {                                                          // 851\n      currentDeclarationSuite.beforeEach({                                                                             // 852\n        fn: beforeEachFunction,                                                                                        // 853\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }                                         // 854\n      });                                                                                                              // 855\n    };                                                                                                                 // 856\n                                                                                                                       // 857\n    this.beforeAll = function(beforeAllFunction, timeout) {                                                            // 858\n      currentDeclarationSuite.beforeAll({                                                                              // 859\n        fn: beforeAllFunction,                                                                                         // 860\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }                                         // 861\n      });                                                                                                              // 862\n    };                                                                                                                 // 863\n                                                                                                                       // 864\n    this.afterEach = function(afterEachFunction, timeout) {                                                            // 865\n      currentDeclarationSuite.afterEach({                                                                              // 866\n        fn: afterEachFunction,                                                                                         // 867\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }                                         // 868\n      });                                                                                                              // 869\n    };                                                                                                                 // 870\n                                                                                                                       // 871\n    this.afterAll = function(afterAllFunction, timeout) {                                                              // 872\n      currentDeclarationSuite.afterAll({                                                                               // 873\n        fn: afterAllFunction,                                                                                          // 874\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }                                         // 875\n      });                                                                                                              // 876\n    };                                                                                                                 // 877\n                                                                                                                       // 878\n    this.pending = function(message) {                                                                                 // 879\n      var fullMessage = j$.Spec.pendingSpecExceptionMessage;                                                           // 880\n      if(message) {                                                                                                    // 881\n        fullMessage += message;                                                                                        // 882\n      }                                                                                                                // 883\n      throw fullMessage;                                                                                               // 884\n    };                                                                                                                 // 885\n                                                                                                                       // 886\n    this.fail = function(error) {                                                                                      // 887\n      var message = 'Failed';                                                                                          // 888\n      if (error) {                                                                                                     // 889\n        message += ': ';                                                                                               // 890\n        message += error.message || error;                                                                             // 891\n      }                                                                                                                // 892\n                                                                                                                       // 893\n      currentRunnable().addExpectationResult(false, {                                                                  // 894\n        matcherName: '',                                                                                               // 895\n        passed: false,                                                                                                 // 896\n        expected: '',                                                                                                  // 897\n        actual: '',                                                                                                    // 898\n        message: message,                                                                                              // 899\n        error: error && error.message ? error : null                                                                   // 900\n      });                                                                                                              // 901\n    };                                                                                                                 // 902\n  }                                                                                                                    // 903\n                                                                                                                       // 904\n  return Env;                                                                                                          // 905\n};                                                                                                                     // 906\n                                                                                                                       // 907\ngetJasmineRequireObj().JsApiReporter = function() {                                                                    // 908\n                                                                                                                       // 909\n  var noopTimer = {                                                                                                    // 910\n    start: function(){},                                                                                               // 911\n    elapsed: function(){ return 0; }                                                                                   // 912\n  };                                                                                                                   // 913\n                                                                                                                       // 914\n  function JsApiReporter(options) {                                                                                    // 915\n    var timer = options.timer || noopTimer,                                                                            // 916\n        status = 'loaded';                                                                                             // 917\n                                                                                                                       // 918\n    this.started = false;                                                                                              // 919\n    this.finished = false;                                                                                             // 920\n                                                                                                                       // 921\n    this.jasmineStarted = function() {                                                                                 // 922\n      this.started = true;                                                                                             // 923\n      status = 'started';                                                                                              // 924\n      timer.start();                                                                                                   // 925\n    };                                                                                                                 // 926\n                                                                                                                       // 927\n    var executionTime;                                                                                                 // 928\n                                                                                                                       // 929\n    this.jasmineDone = function() {                                                                                    // 930\n      this.finished = true;                                                                                            // 931\n      executionTime = timer.elapsed();                                                                                 // 932\n      status = 'done';                                                                                                 // 933\n    };                                                                                                                 // 934\n                                                                                                                       // 935\n    this.status = function() {                                                                                         // 936\n      return status;                                                                                                   // 937\n    };                                                                                                                 // 938\n                                                                                                                       // 939\n    var suites = [],                                                                                                   // 940\n      suites_hash = {};                                                                                                // 941\n                                                                                                                       // 942\n    this.suiteStarted = function(result) {                                                                             // 943\n      suites_hash[result.id] = result;                                                                                 // 944\n    };                                                                                                                 // 945\n                                                                                                                       // 946\n    this.suiteDone = function(result) {                                                                                // 947\n      storeSuite(result);                                                                                              // 948\n    };                                                                                                                 // 949\n                                                                                                                       // 950\n    this.suiteResults = function(index, length) {                                                                      // 951\n      return suites.slice(index, index + length);                                                                      // 952\n    };                                                                                                                 // 953\n                                                                                                                       // 954\n    function storeSuite(result) {                                                                                      // 955\n      suites.push(result);                                                                                             // 956\n      suites_hash[result.id] = result;                                                                                 // 957\n    }                                                                                                                  // 958\n                                                                                                                       // 959\n    this.suites = function() {                                                                                         // 960\n      return suites_hash;                                                                                              // 961\n    };                                                                                                                 // 962\n                                                                                                                       // 963\n    var specs = [];                                                                                                    // 964\n                                                                                                                       // 965\n    this.specDone = function(result) {                                                                                 // 966\n      specs.push(result);                                                                                              // 967\n    };                                                                                                                 // 968\n                                                                                                                       // 969\n    this.specResults = function(index, length) {                                                                       // 970\n      return specs.slice(index, index + length);                                                                       // 971\n    };                                                                                                                 // 972\n                                                                                                                       // 973\n    this.specs = function() {                                                                                          // 974\n      return specs;                                                                                                    // 975\n    };                                                                                                                 // 976\n                                                                                                                       // 977\n    this.executionTime = function() {                                                                                  // 978\n      return executionTime;                                                                                            // 979\n    };                                                                                                                 // 980\n                                                                                                                       // 981\n  }                                                                                                                    // 982\n                                                                                                                       // 983\n  return JsApiReporter;                                                                                                // 984\n};                                                                                                                     // 985\n                                                                                                                       // 986\ngetJasmineRequireObj().CallTracker = function() {                                                                      // 987\n                                                                                                                       // 988\n  function CallTracker() {                                                                                             // 989\n    var calls = [];                                                                                                    // 990\n                                                                                                                       // 991\n    this.track = function(context) {                                                                                   // 992\n      calls.push(context);                                                                                             // 993\n    };                                                                                                                 // 994\n                                                                                                                       // 995\n    this.any = function() {                                                                                            // 996\n      return !!calls.length;                                                                                           // 997\n    };                                                                                                                 // 998\n                                                                                                                       // 999\n    this.count = function() {                                                                                          // 1000\n      return calls.length;                                                                                             // 1001\n    };                                                                                                                 // 1002\n                                                                                                                       // 1003\n    this.argsFor = function(index) {                                                                                   // 1004\n      var call = calls[index];                                                                                         // 1005\n      return call ? call.args : [];                                                                                    // 1006\n    };                                                                                                                 // 1007\n                                                                                                                       // 1008\n    this.all = function() {                                                                                            // 1009\n      return calls;                                                                                                    // 1010\n    };                                                                                                                 // 1011\n                                                                                                                       // 1012\n    this.allArgs = function() {                                                                                        // 1013\n      var callArgs = [];                                                                                               // 1014\n      for(var i = 0; i < calls.length; i++){                                                                           // 1015\n        callArgs.push(calls[i].args);                                                                                  // 1016\n      }                                                                                                                // 1017\n                                                                                                                       // 1018\n      return callArgs;                                                                                                 // 1019\n    };                                                                                                                 // 1020\n                                                                                                                       // 1021\n    this.first = function() {                                                                                          // 1022\n      return calls[0];                                                                                                 // 1023\n    };                                                                                                                 // 1024\n                                                                                                                       // 1025\n    this.mostRecent = function() {                                                                                     // 1026\n      return calls[calls.length - 1];                                                                                  // 1027\n    };                                                                                                                 // 1028\n                                                                                                                       // 1029\n    this.reset = function() {                                                                                          // 1030\n      calls = [];                                                                                                      // 1031\n    };                                                                                                                 // 1032\n  }                                                                                                                    // 1033\n                                                                                                                       // 1034\n  return CallTracker;                                                                                                  // 1035\n};                                                                                                                     // 1036\n                                                                                                                       // 1037\ngetJasmineRequireObj().Clock = function() {                                                                            // 1038\n  function Clock(global, delayedFunctionSchedulerFactory, mockDate) {                                                  // 1039\n    var self = this,                                                                                                   // 1040\n      realTimingFunctions = {                                                                                          // 1041\n        setTimeout: global.setTimeout,                                                                                 // 1042\n        clearTimeout: global.clearTimeout,                                                                             // 1043\n        setInterval: global.setInterval,                                                                               // 1044\n        clearInterval: global.clearInterval                                                                            // 1045\n      },                                                                                                               // 1046\n      fakeTimingFunctions = {                                                                                          // 1047\n        setTimeout: setTimeout,                                                                                        // 1048\n        clearTimeout: clearTimeout,                                                                                    // 1049\n        setInterval: setInterval,                                                                                      // 1050\n        clearInterval: clearInterval                                                                                   // 1051\n      },                                                                                                               // 1052\n      installed = false,                                                                                               // 1053\n      delayedFunctionScheduler,                                                                                        // 1054\n      timer;                                                                                                           // 1055\n                                                                                                                       // 1056\n                                                                                                                       // 1057\n    self.install = function() {                                                                                        // 1058\n      if(!originalTimingFunctionsIntact()) {                                                                           // 1059\n        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');\n      }                                                                                                                // 1061\n      replace(global, fakeTimingFunctions);                                                                            // 1062\n      timer = fakeTimingFunctions;                                                                                     // 1063\n      delayedFunctionScheduler = delayedFunctionSchedulerFactory();                                                    // 1064\n      installed = true;                                                                                                // 1065\n                                                                                                                       // 1066\n      return self;                                                                                                     // 1067\n    };                                                                                                                 // 1068\n                                                                                                                       // 1069\n    self.uninstall = function() {                                                                                      // 1070\n      delayedFunctionScheduler = null;                                                                                 // 1071\n      mockDate.uninstall();                                                                                            // 1072\n      replace(global, realTimingFunctions);                                                                            // 1073\n                                                                                                                       // 1074\n      timer = realTimingFunctions;                                                                                     // 1075\n      installed = false;                                                                                               // 1076\n    };                                                                                                                 // 1077\n                                                                                                                       // 1078\n    self.withMock = function(closure) {                                                                                // 1079\n      this.install();                                                                                                  // 1080\n      try {                                                                                                            // 1081\n        closure();                                                                                                     // 1082\n      } finally {                                                                                                      // 1083\n        this.uninstall();                                                                                              // 1084\n      }                                                                                                                // 1085\n    };                                                                                                                 // 1086\n                                                                                                                       // 1087\n    self.mockDate = function(initialDate) {                                                                            // 1088\n      mockDate.install(initialDate);                                                                                   // 1089\n    };                                                                                                                 // 1090\n                                                                                                                       // 1091\n    self.setTimeout = function(fn, delay, params) {                                                                    // 1092\n      if (legacyIE()) {                                                                                                // 1093\n        if (arguments.length > 2) {                                                                                    // 1094\n          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');                      // 1095\n        }                                                                                                              // 1096\n        return timer.setTimeout(fn, delay);                                                                            // 1097\n      }                                                                                                                // 1098\n      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);                                    // 1099\n    };                                                                                                                 // 1100\n                                                                                                                       // 1101\n    self.setInterval = function(fn, delay, params) {                                                                   // 1102\n      if (legacyIE()) {                                                                                                // 1103\n        if (arguments.length > 2) {                                                                                    // 1104\n          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');                     // 1105\n        }                                                                                                              // 1106\n        return timer.setInterval(fn, delay);                                                                           // 1107\n      }                                                                                                                // 1108\n      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);                                   // 1109\n    };                                                                                                                 // 1110\n                                                                                                                       // 1111\n    self.clearTimeout = function(id) {                                                                                 // 1112\n      return Function.prototype.call.apply(timer.clearTimeout, [global, id]);                                          // 1113\n    };                                                                                                                 // 1114\n                                                                                                                       // 1115\n    self.clearInterval = function(id) {                                                                                // 1116\n      return Function.prototype.call.apply(timer.clearInterval, [global, id]);                                         // 1117\n    };                                                                                                                 // 1118\n                                                                                                                       // 1119\n    self.tick = function(millis) {                                                                                     // 1120\n      if (installed) {                                                                                                 // 1121\n        mockDate.tick(millis);                                                                                         // 1122\n        delayedFunctionScheduler.tick(millis);                                                                         // 1123\n      } else {                                                                                                         // 1124\n        throw new Error('Mock clock is not installed, use jasmine.clock().install()');                                 // 1125\n      }                                                                                                                // 1126\n    };                                                                                                                 // 1127\n                                                                                                                       // 1128\n    return self;                                                                                                       // 1129\n                                                                                                                       // 1130\n    function originalTimingFunctionsIntact() {                                                                         // 1131\n      return global.setTimeout === realTimingFunctions.setTimeout &&                                                   // 1132\n        global.clearTimeout === realTimingFunctions.clearTimeout &&                                                    // 1133\n        global.setInterval === realTimingFunctions.setInterval &&                                                      // 1134\n        global.clearInterval === realTimingFunctions.clearInterval;                                                    // 1135\n    }                                                                                                                  // 1136\n                                                                                                                       // 1137\n    function legacyIE() {                                                                                              // 1138\n      //if these methods are polyfilled, apply will be present                                                         // 1139\n      return !(realTimingFunctions.setTimeout || realTimingFunctions.setInterval).apply;                               // 1140\n    }                                                                                                                  // 1141\n                                                                                                                       // 1142\n    function replace(dest, source) {                                                                                   // 1143\n      for (var prop in source) {                                                                                       // 1144\n        dest[prop] = source[prop];                                                                                     // 1145\n      }                                                                                                                // 1146\n    }                                                                                                                  // 1147\n                                                                                                                       // 1148\n    function setTimeout(fn, delay) {                                                                                   // 1149\n      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));                             // 1150\n    }                                                                                                                  // 1151\n                                                                                                                       // 1152\n    function clearTimeout(id) {                                                                                        // 1153\n      return delayedFunctionScheduler.removeFunctionWithId(id);                                                        // 1154\n    }                                                                                                                  // 1155\n                                                                                                                       // 1156\n    function setInterval(fn, interval) {                                                                               // 1157\n      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);                    // 1158\n    }                                                                                                                  // 1159\n                                                                                                                       // 1160\n    function clearInterval(id) {                                                                                       // 1161\n      return delayedFunctionScheduler.removeFunctionWithId(id);                                                        // 1162\n    }                                                                                                                  // 1163\n                                                                                                                       // 1164\n    function argSlice(argsObj, n) {                                                                                    // 1165\n      return Array.prototype.slice.call(argsObj, n);                                                                   // 1166\n    }                                                                                                                  // 1167\n  }                                                                                                                    // 1168\n                                                                                                                       // 1169\n  return Clock;                                                                                                        // 1170\n};                                                                                                                     // 1171\n                                                                                                                       // 1172\ngetJasmineRequireObj().DelayedFunctionScheduler = function() {                                                         // 1173\n  function DelayedFunctionScheduler() {                                                                                // 1174\n    var self = this;                                                                                                   // 1175\n    var scheduledLookup = [];                                                                                          // 1176\n    var scheduledFunctions = {};                                                                                       // 1177\n    var currentTime = 0;                                                                                               // 1178\n    var delayedFnCount = 0;                                                                                            // 1179\n                                                                                                                       // 1180\n    self.tick = function(millis) {                                                                                     // 1181\n      millis = millis || 0;                                                                                            // 1182\n      var endTime = currentTime + millis;                                                                              // 1183\n                                                                                                                       // 1184\n      runScheduledFunctions(endTime);                                                                                  // 1185\n      currentTime = endTime;                                                                                           // 1186\n    };                                                                                                                 // 1187\n                                                                                                                       // 1188\n    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {                 // 1189\n      var f;                                                                                                           // 1190\n      if (typeof(funcToCall) === 'string') {                                                                           // 1191\n        /* jshint evil: true */                                                                                        // 1192\n        f = function() { return eval(funcToCall); };                                                                   // 1193\n        /* jshint evil: false */                                                                                       // 1194\n      } else {                                                                                                         // 1195\n        f = funcToCall;                                                                                                // 1196\n      }                                                                                                                // 1197\n                                                                                                                       // 1198\n      millis = millis || 0;                                                                                            // 1199\n      timeoutKey = timeoutKey || ++delayedFnCount;                                                                     // 1200\n      runAtMillis = runAtMillis || (currentTime + millis);                                                             // 1201\n                                                                                                                       // 1202\n      var funcToSchedule = {                                                                                           // 1203\n        runAtMillis: runAtMillis,                                                                                      // 1204\n        funcToCall: f,                                                                                                 // 1205\n        recurring: recurring,                                                                                          // 1206\n        params: params,                                                                                                // 1207\n        timeoutKey: timeoutKey,                                                                                        // 1208\n        millis: millis                                                                                                 // 1209\n      };                                                                                                               // 1210\n                                                                                                                       // 1211\n      if (runAtMillis in scheduledFunctions) {                                                                         // 1212\n        scheduledFunctions[runAtMillis].push(funcToSchedule);                                                          // 1213\n      } else {                                                                                                         // 1214\n        scheduledFunctions[runAtMillis] = [funcToSchedule];                                                            // 1215\n        scheduledLookup.push(runAtMillis);                                                                             // 1216\n        scheduledLookup.sort(function (a, b) {                                                                         // 1217\n          return a - b;                                                                                                // 1218\n        });                                                                                                            // 1219\n      }                                                                                                                // 1220\n                                                                                                                       // 1221\n      return timeoutKey;                                                                                               // 1222\n    };                                                                                                                 // 1223\n                                                                                                                       // 1224\n    self.removeFunctionWithId = function(timeoutKey) {                                                                 // 1225\n      for (var runAtMillis in scheduledFunctions) {                                                                    // 1226\n        var funcs = scheduledFunctions[runAtMillis];                                                                   // 1227\n        var i = indexOfFirstToPass(funcs, function (func) {                                                            // 1228\n          return func.timeoutKey === timeoutKey;                                                                       // 1229\n        });                                                                                                            // 1230\n                                                                                                                       // 1231\n        if (i > -1) {                                                                                                  // 1232\n          if (funcs.length === 1) {                                                                                    // 1233\n            delete scheduledFunctions[runAtMillis];                                                                    // 1234\n            deleteFromLookup(runAtMillis);                                                                             // 1235\n          } else {                                                                                                     // 1236\n            funcs.splice(i, 1);                                                                                        // 1237\n          }                                                                                                            // 1238\n                                                                                                                       // 1239\n          // intervals get rescheduled when executed, so there's never more                                            // 1240\n          // than a single scheduled function with a given timeoutKey                                                  // 1241\n          break;                                                                                                       // 1242\n        }                                                                                                              // 1243\n      }                                                                                                                // 1244\n    };                                                                                                                 // 1245\n                                                                                                                       // 1246\n    return self;                                                                                                       // 1247\n                                                                                                                       // 1248\n    function indexOfFirstToPass(array, testFn) {                                                                       // 1249\n      var index = -1;                                                                                                  // 1250\n                                                                                                                       // 1251\n      for (var i = 0; i < array.length; ++i) {                                                                         // 1252\n        if (testFn(array[i])) {                                                                                        // 1253\n          index = i;                                                                                                   // 1254\n          break;                                                                                                       // 1255\n        }                                                                                                              // 1256\n      }                                                                                                                // 1257\n                                                                                                                       // 1258\n      return index;                                                                                                    // 1259\n    }                                                                                                                  // 1260\n                                                                                                                       // 1261\n    function deleteFromLookup(key) {                                                                                   // 1262\n      var value = Number(key);                                                                                         // 1263\n      var i = indexOfFirstToPass(scheduledLookup, function (millis) {                                                  // 1264\n        return millis === value;                                                                                       // 1265\n      });                                                                                                              // 1266\n                                                                                                                       // 1267\n      if (i > -1) {                                                                                                    // 1268\n        scheduledLookup.splice(i, 1);                                                                                  // 1269\n      }                                                                                                                // 1270\n    }                                                                                                                  // 1271\n                                                                                                                       // 1272\n    function reschedule(scheduledFn) {                                                                                 // 1273\n      self.scheduleFunction(scheduledFn.funcToCall,                                                                    // 1274\n        scheduledFn.millis,                                                                                            // 1275\n        scheduledFn.params,                                                                                            // 1276\n        true,                                                                                                          // 1277\n        scheduledFn.timeoutKey,                                                                                        // 1278\n        scheduledFn.runAtMillis + scheduledFn.millis);                                                                 // 1279\n    }                                                                                                                  // 1280\n                                                                                                                       // 1281\n    function forEachFunction(funcsToRun, callback) {                                                                   // 1282\n      for (var i = 0; i < funcsToRun.length; ++i) {                                                                    // 1283\n        callback(funcsToRun[i]);                                                                                       // 1284\n      }                                                                                                                // 1285\n    }                                                                                                                  // 1286\n                                                                                                                       // 1287\n    function runScheduledFunctions(endTime) {                                                                          // 1288\n      if (scheduledLookup.length === 0 || scheduledLookup[0] > endTime) {                                              // 1289\n        return;                                                                                                        // 1290\n      }                                                                                                                // 1291\n                                                                                                                       // 1292\n      do {                                                                                                             // 1293\n        currentTime = scheduledLookup.shift();                                                                         // 1294\n                                                                                                                       // 1295\n        var funcsToRun = scheduledFunctions[currentTime];                                                              // 1296\n        delete scheduledFunctions[currentTime];                                                                        // 1297\n                                                                                                                       // 1298\n        forEachFunction(funcsToRun, function(funcToRun) {                                                              // 1299\n          if (funcToRun.recurring) {                                                                                   // 1300\n            reschedule(funcToRun);                                                                                     // 1301\n          }                                                                                                            // 1302\n        });                                                                                                            // 1303\n                                                                                                                       // 1304\n        forEachFunction(funcsToRun, function(funcToRun) {                                                              // 1305\n          funcToRun.funcToCall.apply(null, funcToRun.params || []);                                                    // 1306\n        });                                                                                                            // 1307\n      } while (scheduledLookup.length > 0 &&                                                                           // 1308\n              // checking first if we're out of time prevents setTimeout(0)                                            // 1309\n              // scheduled in a funcToRun from forcing an extra iteration                                              // 1310\n                 currentTime !== endTime  &&                                                                           // 1311\n                 scheduledLookup[0] <= endTime);                                                                       // 1312\n    }                                                                                                                  // 1313\n  }                                                                                                                    // 1314\n                                                                                                                       // 1315\n  return DelayedFunctionScheduler;                                                                                     // 1316\n};                                                                                                                     // 1317\n                                                                                                                       // 1318\ngetJasmineRequireObj().ExceptionFormatter = function() {                                                               // 1319\n  function ExceptionFormatter() {                                                                                      // 1320\n    this.message = function(error) {                                                                                   // 1321\n      var message = '';                                                                                                // 1322\n                                                                                                                       // 1323\n      if (error.name && error.message) {                                                                               // 1324\n        message += error.name + ': ' + error.message;                                                                  // 1325\n      } else {                                                                                                         // 1326\n        message += error.toString() + ' thrown';                                                                       // 1327\n      }                                                                                                                // 1328\n                                                                                                                       // 1329\n      if (error.fileName || error.sourceURL) {                                                                         // 1330\n        message += ' in ' + (error.fileName || error.sourceURL);                                                       // 1331\n      }                                                                                                                // 1332\n                                                                                                                       // 1333\n      if (error.line || error.lineNumber) {                                                                            // 1334\n        message += ' (line ' + (error.line || error.lineNumber) + ')';                                                 // 1335\n      }                                                                                                                // 1336\n                                                                                                                       // 1337\n      return message;                                                                                                  // 1338\n    };                                                                                                                 // 1339\n                                                                                                                       // 1340\n    this.stack = function(error) {                                                                                     // 1341\n      return error ? error.stack : null;                                                                               // 1342\n    };                                                                                                                 // 1343\n  }                                                                                                                    // 1344\n                                                                                                                       // 1345\n  return ExceptionFormatter;                                                                                           // 1346\n};                                                                                                                     // 1347\n                                                                                                                       // 1348\ngetJasmineRequireObj().Expectation = function() {                                                                      // 1349\n                                                                                                                       // 1350\n  function Expectation(options) {                                                                                      // 1351\n    this.util = options.util || { buildFailureMessage: function() {} };                                                // 1352\n    this.customEqualityTesters = options.customEqualityTesters || [];                                                  // 1353\n    this.actual = options.actual;                                                                                      // 1354\n    this.addExpectationResult = options.addExpectationResult || function(){};                                          // 1355\n    this.isNot = options.isNot;                                                                                        // 1356\n                                                                                                                       // 1357\n    var customMatchers = options.customMatchers || {};                                                                 // 1358\n    for (var matcherName in customMatchers) {                                                                          // 1359\n      this[matcherName] = Expectation.prototype.wrapCompare(matcherName, customMatchers[matcherName]);                 // 1360\n    }                                                                                                                  // 1361\n  }                                                                                                                    // 1362\n                                                                                                                       // 1363\n  Expectation.prototype.wrapCompare = function(name, matcherFactory) {                                                 // 1364\n    return function() {                                                                                                // 1365\n      var args = Array.prototype.slice.call(arguments, 0),                                                             // 1366\n        expected = args.slice(0),                                                                                      // 1367\n        message = '';                                                                                                  // 1368\n                                                                                                                       // 1369\n      args.unshift(this.actual);                                                                                       // 1370\n                                                                                                                       // 1371\n      var matcher = matcherFactory(this.util, this.customEqualityTesters),                                             // 1372\n          matcherCompare = matcher.compare;                                                                            // 1373\n                                                                                                                       // 1374\n      function defaultNegativeCompare() {                                                                              // 1375\n        var result = matcher.compare.apply(null, args);                                                                // 1376\n        result.pass = !result.pass;                                                                                    // 1377\n        return result;                                                                                                 // 1378\n      }                                                                                                                // 1379\n                                                                                                                       // 1380\n      if (this.isNot) {                                                                                                // 1381\n        matcherCompare = matcher.negativeCompare || defaultNegativeCompare;                                            // 1382\n      }                                                                                                                // 1383\n                                                                                                                       // 1384\n      var result = matcherCompare.apply(null, args);                                                                   // 1385\n                                                                                                                       // 1386\n      if (!result.pass) {                                                                                              // 1387\n        if (!result.message) {                                                                                         // 1388\n          args.unshift(this.isNot);                                                                                    // 1389\n          args.unshift(name);                                                                                          // 1390\n          message = this.util.buildFailureMessage.apply(null, args);                                                   // 1391\n        } else {                                                                                                       // 1392\n          if (Object.prototype.toString.apply(result.message) === '[object Function]') {                               // 1393\n            message = result.message();                                                                                // 1394\n          } else {                                                                                                     // 1395\n            message = result.message;                                                                                  // 1396\n          }                                                                                                            // 1397\n        }                                                                                                              // 1398\n      }                                                                                                                // 1399\n                                                                                                                       // 1400\n      if (expected.length == 1) {                                                                                      // 1401\n        expected = expected[0];                                                                                        // 1402\n      }                                                                                                                // 1403\n                                                                                                                       // 1404\n      // TODO: how many of these params are needed?                                                                    // 1405\n      this.addExpectationResult(                                                                                       // 1406\n        result.pass,                                                                                                   // 1407\n        {                                                                                                              // 1408\n          matcherName: name,                                                                                           // 1409\n          passed: result.pass,                                                                                         // 1410\n          message: message,                                                                                            // 1411\n          actual: this.actual,                                                                                         // 1412\n          expected: expected // TODO: this may need to be arrayified/sliced                                            // 1413\n        }                                                                                                              // 1414\n      );                                                                                                               // 1415\n    };                                                                                                                 // 1416\n  };                                                                                                                   // 1417\n                                                                                                                       // 1418\n  Expectation.addCoreMatchers = function(matchers) {                                                                   // 1419\n    var prototype = Expectation.prototype;                                                                             // 1420\n    for (var matcherName in matchers) {                                                                                // 1421\n      var matcher = matchers[matcherName];                                                                             // 1422\n      prototype[matcherName] = prototype.wrapCompare(matcherName, matcher);                                            // 1423\n    }                                                                                                                  // 1424\n  };                                                                                                                   // 1425\n                                                                                                                       // 1426\n  Expectation.Factory = function(options) {                                                                            // 1427\n    options = options || {};                                                                                           // 1428\n                                                                                                                       // 1429\n    var expect = new Expectation(options);                                                                             // 1430\n                                                                                                                       // 1431\n    // TODO: this would be nice as its own Object - NegativeExpectation                                                // 1432\n    // TODO: copy instead of mutate options                                                                            // 1433\n    options.isNot = true;                                                                                              // 1434\n    expect.not = new Expectation(options);                                                                             // 1435\n                                                                                                                       // 1436\n    return expect;                                                                                                     // 1437\n  };                                                                                                                   // 1438\n                                                                                                                       // 1439\n  return Expectation;                                                                                                  // 1440\n};                                                                                                                     // 1441\n                                                                                                                       // 1442\n//TODO: expectation result may make more sense as a presentation of an expectation.                                    // 1443\ngetJasmineRequireObj().buildExpectationResult = function() {                                                           // 1444\n  function buildExpectationResult(options) {                                                                           // 1445\n    var messageFormatter = options.messageFormatter || function() {},                                                  // 1446\n      stackFormatter = options.stackFormatter || function() {};                                                        // 1447\n                                                                                                                       // 1448\n    var result = {                                                                                                     // 1449\n      matcherName: options.matcherName,                                                                                // 1450\n      message: message(),                                                                                              // 1451\n      stack: stack(),                                                                                                  // 1452\n      passed: options.passed                                                                                           // 1453\n    };                                                                                                                 // 1454\n                                                                                                                       // 1455\n    if(!result.passed) {                                                                                               // 1456\n      result.expected = options.expected;                                                                              // 1457\n      result.actual = options.actual;                                                                                  // 1458\n    }                                                                                                                  // 1459\n                                                                                                                       // 1460\n    return result;                                                                                                     // 1461\n                                                                                                                       // 1462\n    function message() {                                                                                               // 1463\n      if (options.passed) {                                                                                            // 1464\n        return 'Passed.';                                                                                              // 1465\n      } else if (options.message) {                                                                                    // 1466\n        return options.message;                                                                                        // 1467\n      } else if (options.error) {                                                                                      // 1468\n        return messageFormatter(options.error);                                                                        // 1469\n      }                                                                                                                // 1470\n      return '';                                                                                                       // 1471\n    }                                                                                                                  // 1472\n                                                                                                                       // 1473\n    function stack() {                                                                                                 // 1474\n      if (options.passed) {                                                                                            // 1475\n        return '';                                                                                                     // 1476\n      }                                                                                                                // 1477\n                                                                                                                       // 1478\n      var error = options.error;                                                                                       // 1479\n      if (!error) {                                                                                                    // 1480\n        try {                                                                                                          // 1481\n          throw new Error(message());                                                                                  // 1482\n        } catch (e) {                                                                                                  // 1483\n          error = e;                                                                                                   // 1484\n        }                                                                                                              // 1485\n      }                                                                                                                // 1486\n      return stackFormatter(error);                                                                                    // 1487\n    }                                                                                                                  // 1488\n  }                                                                                                                    // 1489\n                                                                                                                       // 1490\n  return buildExpectationResult;                                                                                       // 1491\n};                                                                                                                     // 1492\n                                                                                                                       // 1493\ngetJasmineRequireObj().MockDate = function() {                                                                         // 1494\n  function MockDate(global) {                                                                                          // 1495\n    var self = this;                                                                                                   // 1496\n    var currentTime = 0;                                                                                               // 1497\n                                                                                                                       // 1498\n    if (!global || !global.Date) {                                                                                     // 1499\n      self.install = function() {};                                                                                    // 1500\n      self.tick = function() {};                                                                                       // 1501\n      self.uninstall = function() {};                                                                                  // 1502\n      return self;                                                                                                     // 1503\n    }                                                                                                                  // 1504\n                                                                                                                       // 1505\n    var GlobalDate = global.Date;                                                                                      // 1506\n                                                                                                                       // 1507\n    self.install = function(mockDate) {                                                                                // 1508\n      if (mockDate instanceof GlobalDate) {                                                                            // 1509\n        currentTime = mockDate.getTime();                                                                              // 1510\n      } else {                                                                                                         // 1511\n        currentTime = new GlobalDate().getTime();                                                                      // 1512\n      }                                                                                                                // 1513\n                                                                                                                       // 1514\n      global.Date = FakeDate;                                                                                          // 1515\n    };                                                                                                                 // 1516\n                                                                                                                       // 1517\n    self.tick = function(millis) {                                                                                     // 1518\n      millis = millis || 0;                                                                                            // 1519\n      currentTime = currentTime + millis;                                                                              // 1520\n    };                                                                                                                 // 1521\n                                                                                                                       // 1522\n    self.uninstall = function() {                                                                                      // 1523\n      currentTime = 0;                                                                                                 // 1524\n      global.Date = GlobalDate;                                                                                        // 1525\n    };                                                                                                                 // 1526\n                                                                                                                       // 1527\n    createDateProperties();                                                                                            // 1528\n                                                                                                                       // 1529\n    return self;                                                                                                       // 1530\n                                                                                                                       // 1531\n    function FakeDate() {                                                                                              // 1532\n      switch(arguments.length) {                                                                                       // 1533\n        case 0:                                                                                                        // 1534\n          return new GlobalDate(currentTime);                                                                          // 1535\n        case 1:                                                                                                        // 1536\n          return new GlobalDate(arguments[0]);                                                                         // 1537\n        case 2:                                                                                                        // 1538\n          return new GlobalDate(arguments[0], arguments[1]);                                                           // 1539\n        case 3:                                                                                                        // 1540\n          return new GlobalDate(arguments[0], arguments[1], arguments[2]);                                             // 1541\n        case 4:                                                                                                        // 1542\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);                               // 1543\n        case 5:                                                                                                        // 1544\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],                                // 1545\n                                arguments[4]);                                                                         // 1546\n        case 6:                                                                                                        // 1547\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],                                // 1548\n                                arguments[4], arguments[5]);                                                           // 1549\n        default:                                                                                                       // 1550\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],                                // 1551\n                                arguments[4], arguments[5], arguments[6]);                                             // 1552\n      }                                                                                                                // 1553\n    }                                                                                                                  // 1554\n                                                                                                                       // 1555\n    function createDateProperties() {                                                                                  // 1556\n      FakeDate.prototype = GlobalDate.prototype;                                                                       // 1557\n                                                                                                                       // 1558\n      FakeDate.now = function() {                                                                                      // 1559\n        if (GlobalDate.now) {                                                                                          // 1560\n          return currentTime;                                                                                          // 1561\n        } else {                                                                                                       // 1562\n          throw new Error('Browser does not support Date.now()');                                                      // 1563\n        }                                                                                                              // 1564\n      };                                                                                                               // 1565\n                                                                                                                       // 1566\n      FakeDate.toSource = GlobalDate.toSource;                                                                         // 1567\n      FakeDate.toString = GlobalDate.toString;                                                                         // 1568\n      FakeDate.parse = GlobalDate.parse;                                                                               // 1569\n      FakeDate.UTC = GlobalDate.UTC;                                                                                   // 1570\n    }                                                                                                                  // 1571\n\t}                                                                                                                     // 1572\n                                                                                                                       // 1573\n  return MockDate;                                                                                                     // 1574\n};                                                                                                                     // 1575\n                                                                                                                       // 1576\ngetJasmineRequireObj().pp = function(j$) {                                                                             // 1577\n                                                                                                                       // 1578\n  function PrettyPrinter() {                                                                                           // 1579\n    this.ppNestLevel_ = 0;                                                                                             // 1580\n    this.seen = [];                                                                                                    // 1581\n  }                                                                                                                    // 1582\n                                                                                                                       // 1583\n  PrettyPrinter.prototype.format = function(value) {                                                                   // 1584\n    this.ppNestLevel_++;                                                                                               // 1585\n    try {                                                                                                              // 1586\n      if (j$.util.isUndefined(value)) {                                                                                // 1587\n        this.emitScalar('undefined');                                                                                  // 1588\n      } else if (value === null) {                                                                                     // 1589\n        this.emitScalar('null');                                                                                       // 1590\n      } else if (value === 0 && 1/value === -Infinity) {                                                               // 1591\n        this.emitScalar('-0');                                                                                         // 1592\n      } else if (value === j$.getGlobal()) {                                                                           // 1593\n        this.emitScalar('<global>');                                                                                   // 1594\n      } else if (value.jasmineToString) {                                                                              // 1595\n        this.emitScalar(value.jasmineToString());                                                                      // 1596\n      } else if (typeof value === 'string') {                                                                          // 1597\n        this.emitString(value);                                                                                        // 1598\n      } else if (j$.isSpy(value)) {                                                                                    // 1599\n        this.emitScalar('spy on ' + value.and.identity());                                                             // 1600\n      } else if (value instanceof RegExp) {                                                                            // 1601\n        this.emitScalar(value.toString());                                                                             // 1602\n      } else if (typeof value === 'function') {                                                                        // 1603\n        this.emitScalar('Function');                                                                                   // 1604\n      } else if (typeof value.nodeType === 'number') {                                                                 // 1605\n        this.emitScalar('HTMLNode');                                                                                   // 1606\n      } else if (value instanceof Date) {                                                                              // 1607\n        this.emitScalar('Date(' + value + ')');                                                                        // 1608\n      } else if (j$.util.arrayContains(this.seen, value)) {                                                            // 1609\n        this.emitScalar('<circular reference: ' + (j$.isArray_(value) ? 'Array' : 'Object') + '>');                    // 1610\n      } else if (j$.isArray_(value) || j$.isA_('Object', value)) {                                                     // 1611\n        this.seen.push(value);                                                                                         // 1612\n        if (j$.isArray_(value)) {                                                                                      // 1613\n          this.emitArray(value);                                                                                       // 1614\n        } else {                                                                                                       // 1615\n          this.emitObject(value);                                                                                      // 1616\n        }                                                                                                              // 1617\n        this.seen.pop();                                                                                               // 1618\n      } else {                                                                                                         // 1619\n        this.emitScalar(value.toString());                                                                             // 1620\n      }                                                                                                                // 1621\n    } finally {                                                                                                        // 1622\n      this.ppNestLevel_--;                                                                                             // 1623\n    }                                                                                                                  // 1624\n  };                                                                                                                   // 1625\n                                                                                                                       // 1626\n  PrettyPrinter.prototype.iterateObject = function(obj, fn) {                                                          // 1627\n    for (var property in obj) {                                                                                        // 1628\n      if (!Object.prototype.hasOwnProperty.call(obj, property)) { continue; }                                          // 1629\n      fn(property, obj.__lookupGetter__ ? (!j$.util.isUndefined(obj.__lookupGetter__(property)) &&                     // 1630\n          obj.__lookupGetter__(property) !== null) : false);                                                           // 1631\n    }                                                                                                                  // 1632\n  };                                                                                                                   // 1633\n                                                                                                                       // 1634\n  PrettyPrinter.prototype.emitArray = j$.unimplementedMethod_;                                                         // 1635\n  PrettyPrinter.prototype.emitObject = j$.unimplementedMethod_;                                                        // 1636\n  PrettyPrinter.prototype.emitScalar = j$.unimplementedMethod_;                                                        // 1637\n  PrettyPrinter.prototype.emitString = j$.unimplementedMethod_;                                                        // 1638\n                                                                                                                       // 1639\n  function StringPrettyPrinter() {                                                                                     // 1640\n    PrettyPrinter.call(this);                                                                                          // 1641\n                                                                                                                       // 1642\n    this.string = '';                                                                                                  // 1643\n  }                                                                                                                    // 1644\n                                                                                                                       // 1645\n  j$.util.inherit(StringPrettyPrinter, PrettyPrinter);                                                                 // 1646\n                                                                                                                       // 1647\n  StringPrettyPrinter.prototype.emitScalar = function(value) {                                                         // 1648\n    this.append(value);                                                                                                // 1649\n  };                                                                                                                   // 1650\n                                                                                                                       // 1651\n  StringPrettyPrinter.prototype.emitString = function(value) {                                                         // 1652\n    this.append('\\'' + value + '\\'');                                                                                  // 1653\n  };                                                                                                                   // 1654\n                                                                                                                       // 1655\n  StringPrettyPrinter.prototype.emitArray = function(array) {                                                          // 1656\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {                                                               // 1657\n      this.append('Array');                                                                                            // 1658\n      return;                                                                                                          // 1659\n    }                                                                                                                  // 1660\n    var length = Math.min(array.length, j$.MAX_PRETTY_PRINT_ARRAY_LENGTH);                                             // 1661\n    this.append('[ ');                                                                                                 // 1662\n    for (var i = 0; i < length; i++) {                                                                                 // 1663\n      if (i > 0) {                                                                                                     // 1664\n        this.append(', ');                                                                                             // 1665\n      }                                                                                                                // 1666\n      this.format(array[i]);                                                                                           // 1667\n    }                                                                                                                  // 1668\n    if(array.length > length){                                                                                         // 1669\n      this.append(', ...');                                                                                            // 1670\n    }                                                                                                                  // 1671\n                                                                                                                       // 1672\n    var self = this;                                                                                                   // 1673\n    var first = array.length === 0;                                                                                    // 1674\n    this.iterateObject(array, function(property, isGetter) {                                                           // 1675\n      if (property.match(/^\\d+$/)) {                                                                                   // 1676\n        return;                                                                                                        // 1677\n      }                                                                                                                // 1678\n                                                                                                                       // 1679\n      if (first) {                                                                                                     // 1680\n        first = false;                                                                                                 // 1681\n      } else {                                                                                                         // 1682\n        self.append(', ');                                                                                             // 1683\n      }                                                                                                                // 1684\n                                                                                                                       // 1685\n      self.formatProperty(array, property, isGetter);                                                                  // 1686\n    });                                                                                                                // 1687\n                                                                                                                       // 1688\n    this.append(' ]');                                                                                                 // 1689\n  };                                                                                                                   // 1690\n                                                                                                                       // 1691\n  StringPrettyPrinter.prototype.emitObject = function(obj) {                                                           // 1692\n    var constructorName = obj.constructor ? j$.fnNameFor(obj.constructor) : 'null';                                    // 1693\n    this.append(constructorName);                                                                                      // 1694\n                                                                                                                       // 1695\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {                                                               // 1696\n      return;                                                                                                          // 1697\n    }                                                                                                                  // 1698\n                                                                                                                       // 1699\n    var self = this;                                                                                                   // 1700\n    this.append('({ ');                                                                                                // 1701\n    var first = true;                                                                                                  // 1702\n                                                                                                                       // 1703\n    this.iterateObject(obj, function(property, isGetter) {                                                             // 1704\n      if (first) {                                                                                                     // 1705\n        first = false;                                                                                                 // 1706\n      } else {                                                                                                         // 1707\n        self.append(', ');                                                                                             // 1708\n      }                                                                                                                // 1709\n                                                                                                                       // 1710\n      self.formatProperty(obj, property, isGetter);                                                                    // 1711\n    });                                                                                                                // 1712\n                                                                                                                       // 1713\n    this.append(' })');                                                                                                // 1714\n  };                                                                                                                   // 1715\n                                                                                                                       // 1716\n  StringPrettyPrinter.prototype.formatProperty = function(obj, property, isGetter) {                                   // 1717\n      this.append(property);                                                                                           // 1718\n      this.append(': ');                                                                                               // 1719\n      if (isGetter) {                                                                                                  // 1720\n        this.append('<getter>');                                                                                       // 1721\n      } else {                                                                                                         // 1722\n        this.format(obj[property]);                                                                                    // 1723\n      }                                                                                                                // 1724\n  };                                                                                                                   // 1725\n                                                                                                                       // 1726\n  StringPrettyPrinter.prototype.append = function(value) {                                                             // 1727\n    this.string += value;                                                                                              // 1728\n  };                                                                                                                   // 1729\n                                                                                                                       // 1730\n  return function(value) {                                                                                             // 1731\n    var stringPrettyPrinter = new StringPrettyPrinter();                                                               // 1732\n    stringPrettyPrinter.format(value);                                                                                 // 1733\n    return stringPrettyPrinter.string;                                                                                 // 1734\n  };                                                                                                                   // 1735\n};                                                                                                                     // 1736\n                                                                                                                       // 1737\ngetJasmineRequireObj().QueueRunner = function(j$) {                                                                    // 1738\n                                                                                                                       // 1739\n  function once(fn) {                                                                                                  // 1740\n    var called = false;                                                                                                // 1741\n    return function() {                                                                                                // 1742\n      if (!called) {                                                                                                   // 1743\n        called = true;                                                                                                 // 1744\n        fn();                                                                                                          // 1745\n      }                                                                                                                // 1746\n    };                                                                                                                 // 1747\n  }                                                                                                                    // 1748\n                                                                                                                       // 1749\n  function QueueRunner(attrs) {                                                                                        // 1750\n    this.queueableFns = attrs.queueableFns || [];                                                                      // 1751\n    this.onComplete = attrs.onComplete || function() {};                                                               // 1752\n    this.clearStack = attrs.clearStack || function(fn) {fn();};                                                        // 1753\n    this.onException = attrs.onException || function() {};                                                             // 1754\n    this.catchException = attrs.catchException || function() { return true; };                                         // 1755\n    this.userContext = attrs.userContext || {};                                                                        // 1756\n    this.timeout = attrs.timeout || {setTimeout: setTimeout, clearTimeout: clearTimeout};                              // 1757\n    this.fail = attrs.fail || function() {};                                                                           // 1758\n  }                                                                                                                    // 1759\n                                                                                                                       // 1760\n  QueueRunner.prototype.execute = function() {                                                                         // 1761\n    this.run(this.queueableFns, 0);                                                                                    // 1762\n  };                                                                                                                   // 1763\n                                                                                                                       // 1764\n  QueueRunner.prototype.run = function(queueableFns, recursiveIndex) {                                                 // 1765\n    var length = queueableFns.length,                                                                                  // 1766\n      self = this,                                                                                                     // 1767\n      iterativeIndex;                                                                                                  // 1768\n                                                                                                                       // 1769\n                                                                                                                       // 1770\n    for(iterativeIndex = recursiveIndex; iterativeIndex < length; iterativeIndex++) {                                  // 1771\n      var queueableFn = queueableFns[iterativeIndex];                                                                  // 1772\n      if (queueableFn.fn.length > 0) {                                                                                 // 1773\n        attemptAsync(queueableFn);                                                                                     // 1774\n        return;                                                                                                        // 1775\n      } else {                                                                                                         // 1776\n        attemptSync(queueableFn);                                                                                      // 1777\n      }                                                                                                                // 1778\n    }                                                                                                                  // 1779\n                                                                                                                       // 1780\n    var runnerDone = iterativeIndex >= length;                                                                         // 1781\n                                                                                                                       // 1782\n    if (runnerDone) {                                                                                                  // 1783\n      this.clearStack(this.onComplete);                                                                                // 1784\n    }                                                                                                                  // 1785\n                                                                                                                       // 1786\n    function attemptSync(queueableFn) {                                                                                // 1787\n      try {                                                                                                            // 1788\n        queueableFn.fn.call(self.userContext);                                                                         // 1789\n      } catch (e) {                                                                                                    // 1790\n        handleException(e, queueableFn);                                                                               // 1791\n      }                                                                                                                // 1792\n    }                                                                                                                  // 1793\n                                                                                                                       // 1794\n    function attemptAsync(queueableFn) {                                                                               // 1795\n      var clearTimeout = function () {                                                                                 // 1796\n          Function.prototype.apply.apply(self.timeout.clearTimeout, [j$.getGlobal(), [timeoutId]]);                    // 1797\n        },                                                                                                             // 1798\n        next = once(function () {                                                                                      // 1799\n          clearTimeout(timeoutId);                                                                                     // 1800\n          self.run(queueableFns, iterativeIndex + 1);                                                                  // 1801\n        }),                                                                                                            // 1802\n        timeoutId;                                                                                                     // 1803\n                                                                                                                       // 1804\n      next.fail = function() {                                                                                         // 1805\n        self.fail.apply(null, arguments);                                                                              // 1806\n        next();                                                                                                        // 1807\n      };                                                                                                               // 1808\n                                                                                                                       // 1809\n      if (queueableFn.timeout) {                                                                                       // 1810\n        timeoutId = Function.prototype.apply.apply(self.timeout.setTimeout, [j$.getGlobal(), [function() {             // 1811\n          var error = new Error('Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.');\n          onException(error, queueableFn);                                                                             // 1813\n          next();                                                                                                      // 1814\n        }, queueableFn.timeout()]]);                                                                                   // 1815\n      }                                                                                                                // 1816\n                                                                                                                       // 1817\n      try {                                                                                                            // 1818\n        queueableFn.fn.call(self.userContext, next);                                                                   // 1819\n      } catch (e) {                                                                                                    // 1820\n        handleException(e, queueableFn);                                                                               // 1821\n        next();                                                                                                        // 1822\n      }                                                                                                                // 1823\n    }                                                                                                                  // 1824\n                                                                                                                       // 1825\n    function onException(e, queueableFn) {                                                                             // 1826\n      self.onException(e);                                                                                             // 1827\n    }                                                                                                                  // 1828\n                                                                                                                       // 1829\n    function handleException(e, queueableFn) {                                                                         // 1830\n      onException(e, queueableFn);                                                                                     // 1831\n      if (!self.catchException(e)) {                                                                                   // 1832\n        //TODO: set a var when we catch an exception and                                                               // 1833\n        //use a finally block to close the loop in a nice way..                                                        // 1834\n        throw e;                                                                                                       // 1835\n      }                                                                                                                // 1836\n    }                                                                                                                  // 1837\n  };                                                                                                                   // 1838\n                                                                                                                       // 1839\n  return QueueRunner;                                                                                                  // 1840\n};                                                                                                                     // 1841\n                                                                                                                       // 1842\ngetJasmineRequireObj().ReportDispatcher = function() {                                                                 // 1843\n  function ReportDispatcher(methods) {                                                                                 // 1844\n                                                                                                                       // 1845\n    var dispatchedMethods = methods || [];                                                                             // 1846\n                                                                                                                       // 1847\n    for (var i = 0; i < dispatchedMethods.length; i++) {                                                               // 1848\n      var method = dispatchedMethods[i];                                                                               // 1849\n      this[method] = (function(m) {                                                                                    // 1850\n        return function() {                                                                                            // 1851\n          dispatch(m, arguments);                                                                                      // 1852\n        };                                                                                                             // 1853\n      }(method));                                                                                                      // 1854\n    }                                                                                                                  // 1855\n                                                                                                                       // 1856\n    var reporters = [];                                                                                                // 1857\n                                                                                                                       // 1858\n    this.addReporter = function(reporter) {                                                                            // 1859\n      reporters.push(reporter);                                                                                        // 1860\n    };                                                                                                                 // 1861\n                                                                                                                       // 1862\n    return this;                                                                                                       // 1863\n                                                                                                                       // 1864\n    function dispatch(method, args) {                                                                                  // 1865\n      for (var i = 0; i < reporters.length; i++) {                                                                     // 1866\n        var reporter = reporters[i];                                                                                   // 1867\n        if (reporter[method]) {                                                                                        // 1868\n          reporter[method].apply(reporter, args);                                                                      // 1869\n        }                                                                                                              // 1870\n      }                                                                                                                // 1871\n    }                                                                                                                  // 1872\n  }                                                                                                                    // 1873\n                                                                                                                       // 1874\n  return ReportDispatcher;                                                                                             // 1875\n};                                                                                                                     // 1876\n                                                                                                                       // 1877\n                                                                                                                       // 1878\ngetJasmineRequireObj().SpyRegistry = function(j$) {                                                                    // 1879\n                                                                                                                       // 1880\n  function SpyRegistry(options) {                                                                                      // 1881\n    options = options || {};                                                                                           // 1882\n    var currentSpies = options.currentSpies || function() { return []; };                                              // 1883\n                                                                                                                       // 1884\n    this.spyOn = function(obj, methodName) {                                                                           // 1885\n      if (j$.util.isUndefined(obj)) {                                                                                  // 1886\n        throw new Error('spyOn could not find an object to spy upon for ' + methodName + '()');                        // 1887\n      }                                                                                                                // 1888\n                                                                                                                       // 1889\n      if (j$.util.isUndefined(methodName)) {                                                                           // 1890\n        throw new Error('No method name supplied');                                                                    // 1891\n      }                                                                                                                // 1892\n                                                                                                                       // 1893\n      if (j$.util.isUndefined(obj[methodName])) {                                                                      // 1894\n        throw new Error(methodName + '() method does not exist');                                                      // 1895\n      }                                                                                                                // 1896\n                                                                                                                       // 1897\n      if (obj[methodName] && j$.isSpy(obj[methodName])) {                                                              // 1898\n        //TODO?: should this return the current spy? Downside: may cause user confusion about spy state                // 1899\n        throw new Error(methodName + ' has already been spied upon');                                                  // 1900\n      }                                                                                                                // 1901\n                                                                                                                       // 1902\n      var spy = j$.createSpy(methodName, obj[methodName]);                                                             // 1903\n                                                                                                                       // 1904\n      currentSpies().push({                                                                                            // 1905\n        spy: spy,                                                                                                      // 1906\n        baseObj: obj,                                                                                                  // 1907\n        methodName: methodName,                                                                                        // 1908\n        originalValue: obj[methodName]                                                                                 // 1909\n      });                                                                                                              // 1910\n                                                                                                                       // 1911\n      obj[methodName] = spy;                                                                                           // 1912\n                                                                                                                       // 1913\n      return spy;                                                                                                      // 1914\n    };                                                                                                                 // 1915\n                                                                                                                       // 1916\n    this.clearSpies = function() {                                                                                     // 1917\n      var spies = currentSpies();                                                                                      // 1918\n      for (var i = 0; i < spies.length; i++) {                                                                         // 1919\n        var spyEntry = spies[i];                                                                                       // 1920\n        spyEntry.baseObj[spyEntry.methodName] = spyEntry.originalValue;                                                // 1921\n      }                                                                                                                // 1922\n    };                                                                                                                 // 1923\n  }                                                                                                                    // 1924\n                                                                                                                       // 1925\n  return SpyRegistry;                                                                                                  // 1926\n};                                                                                                                     // 1927\n                                                                                                                       // 1928\ngetJasmineRequireObj().SpyStrategy = function() {                                                                      // 1929\n                                                                                                                       // 1930\n  function SpyStrategy(options) {                                                                                      // 1931\n    options = options || {};                                                                                           // 1932\n                                                                                                                       // 1933\n    var identity = options.name || 'unknown',                                                                          // 1934\n        originalFn = options.fn || function() {},                                                                      // 1935\n        getSpy = options.getSpy || function() {},                                                                      // 1936\n        plan = function() {};                                                                                          // 1937\n                                                                                                                       // 1938\n    this.identity = function() {                                                                                       // 1939\n      return identity;                                                                                                 // 1940\n    };                                                                                                                 // 1941\n                                                                                                                       // 1942\n    this.exec = function() {                                                                                           // 1943\n      return plan.apply(this, arguments);                                                                              // 1944\n    };                                                                                                                 // 1945\n                                                                                                                       // 1946\n    this.callThrough = function() {                                                                                    // 1947\n      plan = originalFn;                                                                                               // 1948\n      return getSpy();                                                                                                 // 1949\n    };                                                                                                                 // 1950\n                                                                                                                       // 1951\n    this.returnValue = function(value) {                                                                               // 1952\n      plan = function() {                                                                                              // 1953\n        return value;                                                                                                  // 1954\n      };                                                                                                               // 1955\n      return getSpy();                                                                                                 // 1956\n    };                                                                                                                 // 1957\n                                                                                                                       // 1958\n    this.returnValues = function() {                                                                                   // 1959\n      var values = Array.prototype.slice.call(arguments);                                                              // 1960\n      plan = function () {                                                                                             // 1961\n        return values.shift();                                                                                         // 1962\n      };                                                                                                               // 1963\n      return getSpy();                                                                                                 // 1964\n    };                                                                                                                 // 1965\n                                                                                                                       // 1966\n    this.throwError = function(something) {                                                                            // 1967\n      var error = (something instanceof Error) ? something : new Error(something);                                     // 1968\n      plan = function() {                                                                                              // 1969\n        throw error;                                                                                                   // 1970\n      };                                                                                                               // 1971\n      return getSpy();                                                                                                 // 1972\n    };                                                                                                                 // 1973\n                                                                                                                       // 1974\n    this.callFake = function(fn) {                                                                                     // 1975\n      plan = fn;                                                                                                       // 1976\n      return getSpy();                                                                                                 // 1977\n    };                                                                                                                 // 1978\n                                                                                                                       // 1979\n    this.stub = function(fn) {                                                                                         // 1980\n      plan = function() {};                                                                                            // 1981\n      return getSpy();                                                                                                 // 1982\n    };                                                                                                                 // 1983\n  }                                                                                                                    // 1984\n                                                                                                                       // 1985\n  return SpyStrategy;                                                                                                  // 1986\n};                                                                                                                     // 1987\n                                                                                                                       // 1988\ngetJasmineRequireObj().Suite = function(j$) {                                                                          // 1989\n  function Suite(attrs) {                                                                                              // 1990\n    this.env = attrs.env;                                                                                              // 1991\n    this.id = attrs.id;                                                                                                // 1992\n    this.parentSuite = attrs.parentSuite;                                                                              // 1993\n    this.description = attrs.description;                                                                              // 1994\n    this.expectationFactory = attrs.expectationFactory;                                                                // 1995\n    this.expectationResultFactory = attrs.expectationResultFactory;                                                    // 1996\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;                                                // 1997\n                                                                                                                       // 1998\n    this.beforeFns = [];                                                                                               // 1999\n    this.afterFns = [];                                                                                                // 2000\n    this.beforeAllFns = [];                                                                                            // 2001\n    this.afterAllFns = [];                                                                                             // 2002\n    this.disabled = false;                                                                                             // 2003\n                                                                                                                       // 2004\n    this.children = [];                                                                                                // 2005\n                                                                                                                       // 2006\n    this.result = {                                                                                                    // 2007\n      id: this.id,                                                                                                     // 2008\n      description: this.description,                                                                                   // 2009\n      fullName: this.getFullName(),                                                                                    // 2010\n      failedExpectations: []                                                                                           // 2011\n    };                                                                                                                 // 2012\n  }                                                                                                                    // 2013\n                                                                                                                       // 2014\n  Suite.prototype.expect = function(actual) {                                                                          // 2015\n    return this.expectationFactory(actual, this);                                                                      // 2016\n  };                                                                                                                   // 2017\n                                                                                                                       // 2018\n  Suite.prototype.getFullName = function() {                                                                           // 2019\n    var fullName = this.description;                                                                                   // 2020\n    for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {                     // 2021\n      if (parentSuite.parentSuite) {                                                                                   // 2022\n        fullName = parentSuite.description + ' ' + fullName;                                                           // 2023\n      }                                                                                                                // 2024\n    }                                                                                                                  // 2025\n    return fullName;                                                                                                   // 2026\n  };                                                                                                                   // 2027\n                                                                                                                       // 2028\n  Suite.prototype.disable = function() {                                                                               // 2029\n    this.disabled = true;                                                                                              // 2030\n  };                                                                                                                   // 2031\n                                                                                                                       // 2032\n  Suite.prototype.beforeEach = function(fn) {                                                                          // 2033\n    this.beforeFns.unshift(fn);                                                                                        // 2034\n  };                                                                                                                   // 2035\n                                                                                                                       // 2036\n  Suite.prototype.beforeAll = function(fn) {                                                                           // 2037\n    this.beforeAllFns.push(fn);                                                                                        // 2038\n  };                                                                                                                   // 2039\n                                                                                                                       // 2040\n  Suite.prototype.afterEach = function(fn) {                                                                           // 2041\n    this.afterFns.unshift(fn);                                                                                         // 2042\n  };                                                                                                                   // 2043\n                                                                                                                       // 2044\n  Suite.prototype.afterAll = function(fn) {                                                                            // 2045\n    this.afterAllFns.push(fn);                                                                                         // 2046\n  };                                                                                                                   // 2047\n                                                                                                                       // 2048\n  Suite.prototype.addChild = function(child) {                                                                         // 2049\n    this.children.push(child);                                                                                         // 2050\n  };                                                                                                                   // 2051\n                                                                                                                       // 2052\n  Suite.prototype.status = function() {                                                                                // 2053\n    if (this.disabled) {                                                                                               // 2054\n      return 'disabled';                                                                                               // 2055\n    }                                                                                                                  // 2056\n                                                                                                                       // 2057\n    if (this.result.failedExpectations.length > 0) {                                                                   // 2058\n      return 'failed';                                                                                                 // 2059\n    } else {                                                                                                           // 2060\n      return 'finished';                                                                                               // 2061\n    }                                                                                                                  // 2062\n  };                                                                                                                   // 2063\n                                                                                                                       // 2064\n  Suite.prototype.isExecutable = function() {                                                                          // 2065\n    return !this.disabled;                                                                                             // 2066\n  };                                                                                                                   // 2067\n                                                                                                                       // 2068\n  Suite.prototype.canBeReentered = function() {                                                                        // 2069\n    return this.beforeAllFns.length === 0 && this.afterAllFns.length === 0;                                            // 2070\n  };                                                                                                                   // 2071\n                                                                                                                       // 2072\n  Suite.prototype.getResult = function() {                                                                             // 2073\n    this.result.status = this.status();                                                                                // 2074\n    return this.result;                                                                                                // 2075\n  };                                                                                                                   // 2076\n                                                                                                                       // 2077\n  Suite.prototype.sharedUserContext = function() {                                                                     // 2078\n    if (!this.sharedContext) {                                                                                         // 2079\n      this.sharedContext = this.parentSuite ? clone(this.parentSuite.sharedUserContext()) : {};                        // 2080\n    }                                                                                                                  // 2081\n                                                                                                                       // 2082\n    return this.sharedContext;                                                                                         // 2083\n  };                                                                                                                   // 2084\n                                                                                                                       // 2085\n  Suite.prototype.clonedSharedUserContext = function() {                                                               // 2086\n    return clone(this.sharedUserContext());                                                                            // 2087\n  };                                                                                                                   // 2088\n                                                                                                                       // 2089\n  Suite.prototype.onException = function() {                                                                           // 2090\n    if (arguments[0] instanceof j$.errors.ExpectationFailed) {                                                         // 2091\n      return;                                                                                                          // 2092\n    }                                                                                                                  // 2093\n                                                                                                                       // 2094\n    if(isAfterAll(this.children)) {                                                                                    // 2095\n      var data = {                                                                                                     // 2096\n        matcherName: '',                                                                                               // 2097\n        passed: false,                                                                                                 // 2098\n        expected: '',                                                                                                  // 2099\n        actual: '',                                                                                                    // 2100\n        error: arguments[0]                                                                                            // 2101\n      };                                                                                                               // 2102\n      this.result.failedExpectations.push(this.expectationResultFactory(data));                                        // 2103\n    } else {                                                                                                           // 2104\n      for (var i = 0; i < this.children.length; i++) {                                                                 // 2105\n        var child = this.children[i];                                                                                  // 2106\n        child.onException.apply(child, arguments);                                                                     // 2107\n      }                                                                                                                // 2108\n    }                                                                                                                  // 2109\n  };                                                                                                                   // 2110\n                                                                                                                       // 2111\n  Suite.prototype.addExpectationResult = function () {                                                                 // 2112\n    if(isAfterAll(this.children) && isFailure(arguments)){                                                             // 2113\n      var data = arguments[1];                                                                                         // 2114\n      this.result.failedExpectations.push(this.expectationResultFactory(data));                                        // 2115\n      if(this.throwOnExpectationFailure) {                                                                             // 2116\n        throw new j$.errors.ExpectationFailed();                                                                       // 2117\n      }                                                                                                                // 2118\n    } else {                                                                                                           // 2119\n      for (var i = 0; i < this.children.length; i++) {                                                                 // 2120\n        var child = this.children[i];                                                                                  // 2121\n        try {                                                                                                          // 2122\n          child.addExpectationResult.apply(child, arguments);                                                          // 2123\n        } catch(e) {                                                                                                   // 2124\n          // keep going                                                                                                // 2125\n        }                                                                                                              // 2126\n      }                                                                                                                // 2127\n    }                                                                                                                  // 2128\n  };                                                                                                                   // 2129\n                                                                                                                       // 2130\n  function isAfterAll(children) {                                                                                      // 2131\n    return children && children[0].result.status;                                                                      // 2132\n  }                                                                                                                    // 2133\n                                                                                                                       // 2134\n  function isFailure(args) {                                                                                           // 2135\n    return !args[0];                                                                                                   // 2136\n  }                                                                                                                    // 2137\n                                                                                                                       // 2138\n  function clone(obj) {                                                                                                // 2139\n    var clonedObj = {};                                                                                                // 2140\n    for (var prop in obj) {                                                                                            // 2141\n      if (obj.hasOwnProperty(prop)) {                                                                                  // 2142\n        clonedObj[prop] = obj[prop];                                                                                   // 2143\n      }                                                                                                                // 2144\n    }                                                                                                                  // 2145\n                                                                                                                       // 2146\n    return clonedObj;                                                                                                  // 2147\n  }                                                                                                                    // 2148\n                                                                                                                       // 2149\n  return Suite;                                                                                                        // 2150\n};                                                                                                                     // 2151\n                                                                                                                       // 2152\nif (typeof window == void 0 && typeof exports == 'object') {                                                           // 2153\n  exports.Suite = jasmineRequire.Suite;                                                                                // 2154\n}                                                                                                                      // 2155\n                                                                                                                       // 2156\ngetJasmineRequireObj().Timer = function() {                                                                            // 2157\n  var defaultNow = (function(Date) {                                                                                   // 2158\n    return function() { return new Date().getTime(); };                                                                // 2159\n  })(Date);                                                                                                            // 2160\n                                                                                                                       // 2161\n  function Timer(options) {                                                                                            // 2162\n    options = options || {};                                                                                           // 2163\n                                                                                                                       // 2164\n    var now = options.now || defaultNow,                                                                               // 2165\n      startTime;                                                                                                       // 2166\n                                                                                                                       // 2167\n    this.start = function() {                                                                                          // 2168\n      startTime = now();                                                                                               // 2169\n    };                                                                                                                 // 2170\n                                                                                                                       // 2171\n    this.elapsed = function() {                                                                                        // 2172\n      return now() - startTime;                                                                                        // 2173\n    };                                                                                                                 // 2174\n  }                                                                                                                    // 2175\n                                                                                                                       // 2176\n  return Timer;                                                                                                        // 2177\n};                                                                                                                     // 2178\n                                                                                                                       // 2179\ngetJasmineRequireObj().TreeProcessor = function() {                                                                    // 2180\n  function TreeProcessor(attrs) {                                                                                      // 2181\n    var tree = attrs.tree,                                                                                             // 2182\n        runnableIds = attrs.runnableIds,                                                                               // 2183\n        queueRunnerFactory = attrs.queueRunnerFactory,                                                                 // 2184\n        nodeStart = attrs.nodeStart || function() {},                                                                  // 2185\n        nodeComplete = attrs.nodeComplete || function() {},                                                            // 2186\n        stats = { valid: true },                                                                                       // 2187\n        processed = false,                                                                                             // 2188\n        defaultMin = Infinity,                                                                                         // 2189\n        defaultMax = 1 - Infinity;                                                                                     // 2190\n                                                                                                                       // 2191\n    this.processTree = function() {                                                                                    // 2192\n      processNode(tree, false);                                                                                        // 2193\n      processed = true;                                                                                                // 2194\n      return stats;                                                                                                    // 2195\n    };                                                                                                                 // 2196\n                                                                                                                       // 2197\n    this.execute = function(done) {                                                                                    // 2198\n      if (!processed) {                                                                                                // 2199\n        this.processTree();                                                                                            // 2200\n      }                                                                                                                // 2201\n                                                                                                                       // 2202\n      if (!stats.valid) {                                                                                              // 2203\n        throw 'invalid order';                                                                                         // 2204\n      }                                                                                                                // 2205\n                                                                                                                       // 2206\n      var childFns = wrapChildren(tree, 0);                                                                            // 2207\n                                                                                                                       // 2208\n      queueRunnerFactory({                                                                                             // 2209\n        queueableFns: childFns,                                                                                        // 2210\n        userContext: tree.sharedUserContext(),                                                                         // 2211\n        onException: function() {                                                                                      // 2212\n          tree.onException.apply(tree, arguments);                                                                     // 2213\n        },                                                                                                             // 2214\n        onComplete: done                                                                                               // 2215\n      });                                                                                                              // 2216\n    };                                                                                                                 // 2217\n                                                                                                                       // 2218\n    function runnableIndex(id) {                                                                                       // 2219\n      for (var i = 0; i < runnableIds.length; i++) {                                                                   // 2220\n        if (runnableIds[i] === id) {                                                                                   // 2221\n          return i;                                                                                                    // 2222\n        }                                                                                                              // 2223\n      }                                                                                                                // 2224\n    }                                                                                                                  // 2225\n                                                                                                                       // 2226\n    function processNode(node, parentEnabled) {                                                                        // 2227\n      var executableIndex = runnableIndex(node.id);                                                                    // 2228\n                                                                                                                       // 2229\n      if (executableIndex !== undefined) {                                                                             // 2230\n        parentEnabled = true;                                                                                          // 2231\n      }                                                                                                                // 2232\n                                                                                                                       // 2233\n      parentEnabled = parentEnabled && node.isExecutable();                                                            // 2234\n                                                                                                                       // 2235\n      if (!node.children) {                                                                                            // 2236\n        stats[node.id] = {                                                                                             // 2237\n          executable: parentEnabled && node.isExecutable(),                                                            // 2238\n          segments: [{                                                                                                 // 2239\n            index: 0,                                                                                                  // 2240\n            owner: node,                                                                                               // 2241\n            nodes: [node],                                                                                             // 2242\n            min: startingMin(executableIndex),                                                                         // 2243\n            max: startingMax(executableIndex)                                                                          // 2244\n          }]                                                                                                           // 2245\n        };                                                                                                             // 2246\n      } else {                                                                                                         // 2247\n        var hasExecutableChild = false;                                                                                // 2248\n                                                                                                                       // 2249\n        for (var i = 0; i < node.children.length; i++) {                                                               // 2250\n          var child = node.children[i];                                                                                // 2251\n                                                                                                                       // 2252\n          processNode(child, parentEnabled);                                                                           // 2253\n                                                                                                                       // 2254\n          if (!stats.valid) {                                                                                          // 2255\n            return;                                                                                                    // 2256\n          }                                                                                                            // 2257\n                                                                                                                       // 2258\n          var childStats = stats[child.id];                                                                            // 2259\n                                                                                                                       // 2260\n          hasExecutableChild = hasExecutableChild || childStats.executable;                                            // 2261\n        }                                                                                                              // 2262\n                                                                                                                       // 2263\n        stats[node.id] = {                                                                                             // 2264\n          executable: hasExecutableChild                                                                               // 2265\n        };                                                                                                             // 2266\n                                                                                                                       // 2267\n        segmentChildren(node, stats[node.id], executableIndex);                                                        // 2268\n                                                                                                                       // 2269\n        if (!node.canBeReentered() && stats[node.id].segments.length > 1) {                                            // 2270\n          stats = { valid: false };                                                                                    // 2271\n        }                                                                                                              // 2272\n      }                                                                                                                // 2273\n    }                                                                                                                  // 2274\n                                                                                                                       // 2275\n    function startingMin(executableIndex) {                                                                            // 2276\n      return executableIndex === undefined ? defaultMin : executableIndex;                                             // 2277\n    }                                                                                                                  // 2278\n                                                                                                                       // 2279\n    function startingMax(executableIndex) {                                                                            // 2280\n      return executableIndex === undefined ? defaultMax : executableIndex;                                             // 2281\n    }                                                                                                                  // 2282\n                                                                                                                       // 2283\n    function segmentChildren(node, nodeStats, executableIndex) {                                                       // 2284\n      var currentSegment = { index: 0, owner: node, nodes: [], min: startingMin(executableIndex), max: startingMax(executableIndex) },\n          result = [currentSegment],                                                                                   // 2286\n          lastMax = defaultMax,                                                                                        // 2287\n          orderedChildSegments = orderChildSegments(node.children);                                                    // 2288\n                                                                                                                       // 2289\n      function isSegmentBoundary(minIndex) {                                                                           // 2290\n        return lastMax !== defaultMax && minIndex !== defaultMin && lastMax < minIndex - 1;                            // 2291\n      }                                                                                                                // 2292\n                                                                                                                       // 2293\n      for (var i = 0; i < orderedChildSegments.length; i++) {                                                          // 2294\n        var childSegment = orderedChildSegments[i],                                                                    // 2295\n          maxIndex = childSegment.max,                                                                                 // 2296\n          minIndex = childSegment.min;                                                                                 // 2297\n                                                                                                                       // 2298\n        if (isSegmentBoundary(minIndex)) {                                                                             // 2299\n          currentSegment = {index: result.length, owner: node, nodes: [], min: defaultMin, max: defaultMax};           // 2300\n          result.push(currentSegment);                                                                                 // 2301\n        }                                                                                                              // 2302\n                                                                                                                       // 2303\n        currentSegment.nodes.push(childSegment);                                                                       // 2304\n        currentSegment.min = Math.min(currentSegment.min, minIndex);                                                   // 2305\n        currentSegment.max = Math.max(currentSegment.max, maxIndex);                                                   // 2306\n        lastMax = maxIndex;                                                                                            // 2307\n      }                                                                                                                // 2308\n                                                                                                                       // 2309\n      nodeStats.segments = result;                                                                                     // 2310\n    }                                                                                                                  // 2311\n                                                                                                                       // 2312\n    function orderChildSegments(children) {                                                                            // 2313\n      var specifiedOrder = [],                                                                                         // 2314\n          unspecifiedOrder = [];                                                                                       // 2315\n                                                                                                                       // 2316\n      for (var i = 0; i < children.length; i++) {                                                                      // 2317\n        var child = children[i],                                                                                       // 2318\n            segments = stats[child.id].segments;                                                                       // 2319\n                                                                                                                       // 2320\n        for (var j = 0; j < segments.length; j++) {                                                                    // 2321\n          var seg = segments[j];                                                                                       // 2322\n                                                                                                                       // 2323\n          if (seg.min === defaultMin) {                                                                                // 2324\n            unspecifiedOrder.push(seg);                                                                                // 2325\n          } else {                                                                                                     // 2326\n            specifiedOrder.push(seg);                                                                                  // 2327\n          }                                                                                                            // 2328\n        }                                                                                                              // 2329\n      }                                                                                                                // 2330\n                                                                                                                       // 2331\n      specifiedOrder.sort(function(a, b) {                                                                             // 2332\n        return a.min - b.min;                                                                                          // 2333\n      });                                                                                                              // 2334\n                                                                                                                       // 2335\n      return specifiedOrder.concat(unspecifiedOrder);                                                                  // 2336\n    }                                                                                                                  // 2337\n                                                                                                                       // 2338\n    function executeNode(node, segmentNumber) {                                                                        // 2339\n      if (node.children) {                                                                                             // 2340\n        return {                                                                                                       // 2341\n          fn: function(done) {                                                                                         // 2342\n            nodeStart(node);                                                                                           // 2343\n                                                                                                                       // 2344\n            queueRunnerFactory({                                                                                       // 2345\n              onComplete: function() {                                                                                 // 2346\n                nodeComplete(node, node.getResult());                                                                  // 2347\n                done();                                                                                                // 2348\n              },                                                                                                       // 2349\n              queueableFns: wrapChildren(node, segmentNumber),                                                         // 2350\n              userContext: node.sharedUserContext(),                                                                   // 2351\n              onException: function() {                                                                                // 2352\n                node.onException.apply(node, arguments);                                                               // 2353\n              }                                                                                                        // 2354\n            });                                                                                                        // 2355\n          }                                                                                                            // 2356\n        };                                                                                                             // 2357\n      } else {                                                                                                         // 2358\n        return {                                                                                                       // 2359\n          fn: function(done) { node.execute(done, stats[node.id].executable); }                                        // 2360\n        };                                                                                                             // 2361\n      }                                                                                                                // 2362\n    }                                                                                                                  // 2363\n                                                                                                                       // 2364\n    function wrapChildren(node, segmentNumber) {                                                                       // 2365\n      var result = [],                                                                                                 // 2366\n          segmentChildren = stats[node.id].segments[segmentNumber].nodes;                                              // 2367\n                                                                                                                       // 2368\n      for (var i = 0; i < segmentChildren.length; i++) {                                                               // 2369\n        result.push(executeNode(segmentChildren[i].owner, segmentChildren[i].index));                                  // 2370\n      }                                                                                                                // 2371\n                                                                                                                       // 2372\n      if (!stats[node.id].executable) {                                                                                // 2373\n        return result;                                                                                                 // 2374\n      }                                                                                                                // 2375\n                                                                                                                       // 2376\n      return node.beforeAllFns.concat(result).concat(node.afterAllFns);                                                // 2377\n    }                                                                                                                  // 2378\n  }                                                                                                                    // 2379\n                                                                                                                       // 2380\n  return TreeProcessor;                                                                                                // 2381\n};                                                                                                                     // 2382\n                                                                                                                       // 2383\ngetJasmineRequireObj().Any = function(j$) {                                                                            // 2384\n                                                                                                                       // 2385\n  function Any(expectedObject) {                                                                                       // 2386\n    this.expectedObject = expectedObject;                                                                              // 2387\n  }                                                                                                                    // 2388\n                                                                                                                       // 2389\n  Any.prototype.asymmetricMatch = function(other) {                                                                    // 2390\n    if (this.expectedObject == String) {                                                                               // 2391\n      return typeof other == 'string' || other instanceof String;                                                      // 2392\n    }                                                                                                                  // 2393\n                                                                                                                       // 2394\n    if (this.expectedObject == Number) {                                                                               // 2395\n      return typeof other == 'number' || other instanceof Number;                                                      // 2396\n    }                                                                                                                  // 2397\n                                                                                                                       // 2398\n    if (this.expectedObject == Function) {                                                                             // 2399\n      return typeof other == 'function' || other instanceof Function;                                                  // 2400\n    }                                                                                                                  // 2401\n                                                                                                                       // 2402\n    if (this.expectedObject == Object) {                                                                               // 2403\n      return typeof other == 'object';                                                                                 // 2404\n    }                                                                                                                  // 2405\n                                                                                                                       // 2406\n    if (this.expectedObject == Boolean) {                                                                              // 2407\n      return typeof other == 'boolean';                                                                                // 2408\n    }                                                                                                                  // 2409\n                                                                                                                       // 2410\n    return other instanceof this.expectedObject;                                                                       // 2411\n  };                                                                                                                   // 2412\n                                                                                                                       // 2413\n  Any.prototype.jasmineToString = function() {                                                                         // 2414\n    return '<jasmine.any(' + j$.fnNameFor(this.expectedObject) + ')>';                                                 // 2415\n  };                                                                                                                   // 2416\n                                                                                                                       // 2417\n  return Any;                                                                                                          // 2418\n};                                                                                                                     // 2419\n                                                                                                                       // 2420\ngetJasmineRequireObj().Anything = function(j$) {                                                                       // 2421\n                                                                                                                       // 2422\n  function Anything() {}                                                                                               // 2423\n                                                                                                                       // 2424\n  Anything.prototype.asymmetricMatch = function(other) {                                                               // 2425\n    return !j$.util.isUndefined(other) && other !== null;                                                              // 2426\n  };                                                                                                                   // 2427\n                                                                                                                       // 2428\n  Anything.prototype.jasmineToString = function() {                                                                    // 2429\n    return '<jasmine.anything>';                                                                                       // 2430\n  };                                                                                                                   // 2431\n                                                                                                                       // 2432\n  return Anything;                                                                                                     // 2433\n};                                                                                                                     // 2434\n                                                                                                                       // 2435\ngetJasmineRequireObj().ArrayContaining = function(j$) {                                                                // 2436\n  function ArrayContaining(sample) {                                                                                   // 2437\n    this.sample = sample;                                                                                              // 2438\n  }                                                                                                                    // 2439\n                                                                                                                       // 2440\n  ArrayContaining.prototype.asymmetricMatch = function(other) {                                                        // 2441\n    var className = Object.prototype.toString.call(this.sample);                                                       // 2442\n    if (className !== '[object Array]') { throw new Error('You must provide an array to arrayContaining, not \\'' + this.sample + '\\'.'); }\n                                                                                                                       // 2444\n    for (var i = 0; i < this.sample.length; i++) {                                                                     // 2445\n      var item = this.sample[i];                                                                                       // 2446\n      if (!j$.matchersUtil.contains(other, item)) {                                                                    // 2447\n        return false;                                                                                                  // 2448\n      }                                                                                                                // 2449\n    }                                                                                                                  // 2450\n                                                                                                                       // 2451\n    return true;                                                                                                       // 2452\n  };                                                                                                                   // 2453\n                                                                                                                       // 2454\n  ArrayContaining.prototype.jasmineToString = function () {                                                            // 2455\n    return '<jasmine.arrayContaining(' + jasmine.pp(this.sample) +')>';                                                // 2456\n  };                                                                                                                   // 2457\n                                                                                                                       // 2458\n  return ArrayContaining;                                                                                              // 2459\n};                                                                                                                     // 2460\n                                                                                                                       // 2461\ngetJasmineRequireObj().ObjectContaining = function(j$) {                                                               // 2462\n                                                                                                                       // 2463\n  function ObjectContaining(sample) {                                                                                  // 2464\n    this.sample = sample;                                                                                              // 2465\n  }                                                                                                                    // 2466\n                                                                                                                       // 2467\n  function getPrototype(obj) {                                                                                         // 2468\n    if (Object.getPrototypeOf) {                                                                                       // 2469\n      return Object.getPrototypeOf(obj);                                                                               // 2470\n    }                                                                                                                  // 2471\n                                                                                                                       // 2472\n    if (obj.constructor.prototype == obj) {                                                                            // 2473\n      return null;                                                                                                     // 2474\n    }                                                                                                                  // 2475\n                                                                                                                       // 2476\n    return obj.constructor.prototype;                                                                                  // 2477\n  }                                                                                                                    // 2478\n                                                                                                                       // 2479\n  function hasProperty(obj, property) {                                                                                // 2480\n    if (!obj) {                                                                                                        // 2481\n      return false;                                                                                                    // 2482\n    }                                                                                                                  // 2483\n                                                                                                                       // 2484\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {                                                         // 2485\n      return true;                                                                                                     // 2486\n    }                                                                                                                  // 2487\n                                                                                                                       // 2488\n    return hasProperty(getPrototype(obj), property);                                                                   // 2489\n  }                                                                                                                    // 2490\n                                                                                                                       // 2491\n  ObjectContaining.prototype.asymmetricMatch = function(other) {                                                       // 2492\n    if (typeof(this.sample) !== 'object') { throw new Error('You must provide an object to objectContaining, not \\''+this.sample+'\\'.'); }\n                                                                                                                       // 2494\n    for (var property in this.sample) {                                                                                // 2495\n      if (!hasProperty(other, property) ||                                                                             // 2496\n          !j$.matchersUtil.equals(this.sample[property], other[property])) {                                           // 2497\n        return false;                                                                                                  // 2498\n      }                                                                                                                // 2499\n    }                                                                                                                  // 2500\n                                                                                                                       // 2501\n    return true;                                                                                                       // 2502\n  };                                                                                                                   // 2503\n                                                                                                                       // 2504\n  ObjectContaining.prototype.jasmineToString = function() {                                                            // 2505\n    return '<jasmine.objectContaining(' + j$.pp(this.sample) + ')>';                                                   // 2506\n  };                                                                                                                   // 2507\n                                                                                                                       // 2508\n  return ObjectContaining;                                                                                             // 2509\n};                                                                                                                     // 2510\n                                                                                                                       // 2511\ngetJasmineRequireObj().StringMatching = function(j$) {                                                                 // 2512\n                                                                                                                       // 2513\n  function StringMatching(expected) {                                                                                  // 2514\n    if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {                                                     // 2515\n      throw new Error('Expected is not a String or a RegExp');                                                         // 2516\n    }                                                                                                                  // 2517\n                                                                                                                       // 2518\n    this.regexp = new RegExp(expected);                                                                                // 2519\n  }                                                                                                                    // 2520\n                                                                                                                       // 2521\n  StringMatching.prototype.asymmetricMatch = function(other) {                                                         // 2522\n    return this.regexp.test(other);                                                                                    // 2523\n  };                                                                                                                   // 2524\n                                                                                                                       // 2525\n  StringMatching.prototype.jasmineToString = function() {                                                              // 2526\n    return '<jasmine.stringMatching(' + this.regexp + ')>';                                                            // 2527\n  };                                                                                                                   // 2528\n                                                                                                                       // 2529\n  return StringMatching;                                                                                               // 2530\n};                                                                                                                     // 2531\n                                                                                                                       // 2532\ngetJasmineRequireObj().errors = function() {                                                                           // 2533\n  function ExpectationFailed() {}                                                                                      // 2534\n                                                                                                                       // 2535\n  ExpectationFailed.prototype = new Error();                                                                           // 2536\n  ExpectationFailed.prototype.constructor = ExpectationFailed;                                                         // 2537\n                                                                                                                       // 2538\n  return {                                                                                                             // 2539\n    ExpectationFailed: ExpectationFailed                                                                               // 2540\n  };                                                                                                                   // 2541\n};                                                                                                                     // 2542\ngetJasmineRequireObj().matchersUtil = function(j$) {                                                                   // 2543\n  // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?                    // 2544\n                                                                                                                       // 2545\n  return {                                                                                                             // 2546\n    equals: function(a, b, customTesters) {                                                                            // 2547\n      customTesters = customTesters || [];                                                                             // 2548\n                                                                                                                       // 2549\n      return eq(a, b, [], [], customTesters);                                                                          // 2550\n    },                                                                                                                 // 2551\n                                                                                                                       // 2552\n    contains: function(haystack, needle, customTesters) {                                                              // 2553\n      customTesters = customTesters || [];                                                                             // 2554\n                                                                                                                       // 2555\n      if ((Object.prototype.toString.apply(haystack) === '[object Array]') ||                                          // 2556\n        (!!haystack && !haystack.indexOf))                                                                             // 2557\n      {                                                                                                                // 2558\n        for (var i = 0; i < haystack.length; i++) {                                                                    // 2559\n          if (eq(haystack[i], needle, [], [], customTesters)) {                                                        // 2560\n            return true;                                                                                               // 2561\n          }                                                                                                            // 2562\n        }                                                                                                              // 2563\n        return false;                                                                                                  // 2564\n      }                                                                                                                // 2565\n                                                                                                                       // 2566\n      return !!haystack && haystack.indexOf(needle) >= 0;                                                              // 2567\n    },                                                                                                                 // 2568\n                                                                                                                       // 2569\n    buildFailureMessage: function() {                                                                                  // 2570\n      var args = Array.prototype.slice.call(arguments, 0),                                                             // 2571\n        matcherName = args[0],                                                                                         // 2572\n        isNot = args[1],                                                                                               // 2573\n        actual = args[2],                                                                                              // 2574\n        expected = args.slice(3),                                                                                      // 2575\n        englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });              // 2576\n                                                                                                                       // 2577\n      var message = 'Expected ' +                                                                                      // 2578\n        j$.pp(actual) +                                                                                                // 2579\n        (isNot ? ' not ' : ' ') +                                                                                      // 2580\n        englishyPredicate;                                                                                             // 2581\n                                                                                                                       // 2582\n      if (expected.length > 0) {                                                                                       // 2583\n        for (var i = 0; i < expected.length; i++) {                                                                    // 2584\n          if (i > 0) {                                                                                                 // 2585\n            message += ',';                                                                                            // 2586\n          }                                                                                                            // 2587\n          message += ' ' + j$.pp(expected[i]);                                                                         // 2588\n        }                                                                                                              // 2589\n      }                                                                                                                // 2590\n                                                                                                                       // 2591\n      return message + '.';                                                                                            // 2592\n    }                                                                                                                  // 2593\n  };                                                                                                                   // 2594\n                                                                                                                       // 2595\n  function isAsymmetric(obj) {                                                                                         // 2596\n    return obj && j$.isA_('Function', obj.asymmetricMatch);                                                            // 2597\n  }                                                                                                                    // 2598\n                                                                                                                       // 2599\n  function asymmetricMatch(a, b) {                                                                                     // 2600\n    var asymmetricA = isAsymmetric(a),                                                                                 // 2601\n        asymmetricB = isAsymmetric(b);                                                                                 // 2602\n                                                                                                                       // 2603\n    if (asymmetricA && asymmetricB) {                                                                                  // 2604\n      return undefined;                                                                                                // 2605\n    }                                                                                                                  // 2606\n                                                                                                                       // 2607\n    if (asymmetricA) {                                                                                                 // 2608\n      return a.asymmetricMatch(b);                                                                                     // 2609\n    }                                                                                                                  // 2610\n                                                                                                                       // 2611\n    if (asymmetricB) {                                                                                                 // 2612\n      return b.asymmetricMatch(a);                                                                                     // 2613\n    }                                                                                                                  // 2614\n  }                                                                                                                    // 2615\n                                                                                                                       // 2616\n  // Equality function lovingly adapted from isEqual in                                                                // 2617\n  //   [Underscore](http://underscorejs.org)                                                                           // 2618\n  function eq(a, b, aStack, bStack, customTesters) {                                                                   // 2619\n    var result = true;                                                                                                 // 2620\n                                                                                                                       // 2621\n    var asymmetricResult = asymmetricMatch(a, b);                                                                      // 2622\n    if (!j$.util.isUndefined(asymmetricResult)) {                                                                      // 2623\n      return asymmetricResult;                                                                                         // 2624\n    }                                                                                                                  // 2625\n                                                                                                                       // 2626\n    for (var i = 0; i < customTesters.length; i++) {                                                                   // 2627\n      var customTesterResult = customTesters[i](a, b);                                                                 // 2628\n      if (!j$.util.isUndefined(customTesterResult)) {                                                                  // 2629\n        return customTesterResult;                                                                                     // 2630\n      }                                                                                                                // 2631\n    }                                                                                                                  // 2632\n                                                                                                                       // 2633\n    if (a instanceof Error && b instanceof Error) {                                                                    // 2634\n      return a.message == b.message;                                                                                   // 2635\n    }                                                                                                                  // 2636\n                                                                                                                       // 2637\n    // Identical objects are equal. `0 === -0`, but they aren't identical.                                             // 2638\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).                         // 2639\n    if (a === b) { return a !== 0 || 1 / a == 1 / b; }                                                                 // 2640\n    // A strict comparison is necessary because `null == undefined`.                                                   // 2641\n    if (a === null || b === null) { return a === b; }                                                                  // 2642\n    var className = Object.prototype.toString.call(a);                                                                 // 2643\n    if (className != Object.prototype.toString.call(b)) { return false; }                                              // 2644\n    switch (className) {                                                                                               // 2645\n      // Strings, numbers, dates, and booleans are compared by value.                                                  // 2646\n      case '[object String]':                                                                                          // 2647\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is                           // 2648\n        // equivalent to `new String(\"5\")`.                                                                            // 2649\n        return a == String(b);                                                                                         // 2650\n      case '[object Number]':                                                                                          // 2651\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for                             // 2652\n        // other numeric values.                                                                                       // 2653\n        return a != +a ? b != +b : (a === 0 ? 1 / a == 1 / b : a == +b);                                               // 2654\n      case '[object Date]':                                                                                            // 2655\n      case '[object Boolean]':                                                                                         // 2656\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their                          // 2657\n        // millisecond representations. Note that invalid dates with millisecond representations                       // 2658\n        // of `NaN` are not equivalent.                                                                                // 2659\n        return +a == +b;                                                                                               // 2660\n      // RegExps are compared by their source patterns and flags.                                                      // 2661\n      case '[object RegExp]':                                                                                          // 2662\n        return a.source == b.source &&                                                                                 // 2663\n          a.global == b.global &&                                                                                      // 2664\n          a.multiline == b.multiline &&                                                                                // 2665\n          a.ignoreCase == b.ignoreCase;                                                                                // 2666\n    }                                                                                                                  // 2667\n    if (typeof a != 'object' || typeof b != 'object') { return false; }                                                // 2668\n                                                                                                                       // 2669\n    var aIsDomNode = j$.isDomNode(a);                                                                                  // 2670\n    var bIsDomNode = j$.isDomNode(b);                                                                                  // 2671\n    if (aIsDomNode && bIsDomNode) {                                                                                    // 2672\n      // At first try to use DOM3 method isEqualNode                                                                   // 2673\n      if (a.isEqualNode) {                                                                                             // 2674\n        return a.isEqualNode(b);                                                                                       // 2675\n      }                                                                                                                // 2676\n      // IE8 doesn't support isEqualNode, try to use outerHTML && innerText                                            // 2677\n      var aIsElement = a instanceof Element;                                                                           // 2678\n      var bIsElement = b instanceof Element;                                                                           // 2679\n      if (aIsElement && bIsElement) {                                                                                  // 2680\n        return a.outerHTML == b.outerHTML;                                                                             // 2681\n      }                                                                                                                // 2682\n      if (aIsElement || bIsElement) {                                                                                  // 2683\n        return false;                                                                                                  // 2684\n      }                                                                                                                // 2685\n      return a.innerText == b.innerText && a.textContent == b.textContent;                                             // 2686\n    }                                                                                                                  // 2687\n    if (aIsDomNode || bIsDomNode) {                                                                                    // 2688\n      return false;                                                                                                    // 2689\n    }                                                                                                                  // 2690\n                                                                                                                       // 2691\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic                                       // 2692\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                                     // 2693\n    var length = aStack.length;                                                                                        // 2694\n    while (length--) {                                                                                                 // 2695\n      // Linear search. Performance is inversely proportional to the number of                                         // 2696\n      // unique nested structures.                                                                                     // 2697\n      if (aStack[length] == a) { return bStack[length] == b; }                                                         // 2698\n    }                                                                                                                  // 2699\n    // Add the first object to the stack of traversed objects.                                                         // 2700\n    aStack.push(a);                                                                                                    // 2701\n    bStack.push(b);                                                                                                    // 2702\n    var size = 0;                                                                                                      // 2703\n    // Recursively compare objects and arrays.                                                                         // 2704\n    // Compare array lengths to determine if a deep comparison is necessary.                                           // 2705\n    if (className == '[object Array]' && a.length !== b.length) {                                                      // 2706\n      result = false;                                                                                                  // 2707\n    }                                                                                                                  // 2708\n                                                                                                                       // 2709\n    if (result) {                                                                                                      // 2710\n      // Objects with different constructors are not equivalent, but `Object`s                                         // 2711\n      // or `Array`s from different frames are.                                                                        // 2712\n      if (className !== '[object Array]') {                                                                            // 2713\n        var aCtor = a.constructor, bCtor = b.constructor;                                                              // 2714\n        if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&                                        // 2715\n               isFunction(bCtor) && bCtor instanceof bCtor)) {                                                         // 2716\n          return false;                                                                                                // 2717\n        }                                                                                                              // 2718\n      }                                                                                                                // 2719\n      // Deep compare objects.                                                                                         // 2720\n      for (var key in a) {                                                                                             // 2721\n        if (has(a, key)) {                                                                                             // 2722\n          // Count the expected number of properties.                                                                  // 2723\n          size++;                                                                                                      // 2724\n          // Deep compare each member.                                                                                 // 2725\n          if (!(result = has(b, key) && eq(a[key], b[key], aStack, bStack, customTesters))) { break; }                 // 2726\n        }                                                                                                              // 2727\n      }                                                                                                                // 2728\n      // Ensure that both objects contain the same number of properties.                                               // 2729\n      if (result) {                                                                                                    // 2730\n        for (key in b) {                                                                                               // 2731\n          if (has(b, key) && !(size--)) { break; }                                                                     // 2732\n        }                                                                                                              // 2733\n        result = !size;                                                                                                // 2734\n      }                                                                                                                // 2735\n    }                                                                                                                  // 2736\n    // Remove the first object from the stack of traversed objects.                                                    // 2737\n    aStack.pop();                                                                                                      // 2738\n    bStack.pop();                                                                                                      // 2739\n                                                                                                                       // 2740\n    return result;                                                                                                     // 2741\n                                                                                                                       // 2742\n    function has(obj, key) {                                                                                           // 2743\n      return Object.prototype.hasOwnProperty.call(obj, key);                                                           // 2744\n    }                                                                                                                  // 2745\n                                                                                                                       // 2746\n    function isFunction(obj) {                                                                                         // 2747\n      return typeof obj === 'function';                                                                                // 2748\n    }                                                                                                                  // 2749\n  }                                                                                                                    // 2750\n};                                                                                                                     // 2751\n                                                                                                                       // 2752\ngetJasmineRequireObj().toBe = function() {                                                                             // 2753\n  function toBe() {                                                                                                    // 2754\n    return {                                                                                                           // 2755\n      compare: function(actual, expected) {                                                                            // 2756\n        return {                                                                                                       // 2757\n          pass: actual === expected                                                                                    // 2758\n        };                                                                                                             // 2759\n      }                                                                                                                // 2760\n    };                                                                                                                 // 2761\n  }                                                                                                                    // 2762\n                                                                                                                       // 2763\n  return toBe;                                                                                                         // 2764\n};                                                                                                                     // 2765\n                                                                                                                       // 2766\ngetJasmineRequireObj().toBeCloseTo = function() {                                                                      // 2767\n                                                                                                                       // 2768\n  function toBeCloseTo() {                                                                                             // 2769\n    return {                                                                                                           // 2770\n      compare: function(actual, expected, precision) {                                                                 // 2771\n        if (precision !== 0) {                                                                                         // 2772\n          precision = precision || 2;                                                                                  // 2773\n        }                                                                                                              // 2774\n                                                                                                                       // 2775\n        return {                                                                                                       // 2776\n          pass: Math.abs(expected - actual) < (Math.pow(10, -precision) / 2)                                           // 2777\n        };                                                                                                             // 2778\n      }                                                                                                                // 2779\n    };                                                                                                                 // 2780\n  }                                                                                                                    // 2781\n                                                                                                                       // 2782\n  return toBeCloseTo;                                                                                                  // 2783\n};                                                                                                                     // 2784\n                                                                                                                       // 2785\ngetJasmineRequireObj().toBeDefined = function() {                                                                      // 2786\n  function toBeDefined() {                                                                                             // 2787\n    return {                                                                                                           // 2788\n      compare: function(actual) {                                                                                      // 2789\n        return {                                                                                                       // 2790\n          pass: (void 0 !== actual)                                                                                    // 2791\n        };                                                                                                             // 2792\n      }                                                                                                                // 2793\n    };                                                                                                                 // 2794\n  }                                                                                                                    // 2795\n                                                                                                                       // 2796\n  return toBeDefined;                                                                                                  // 2797\n};                                                                                                                     // 2798\n                                                                                                                       // 2799\ngetJasmineRequireObj().toBeFalsy = function() {                                                                        // 2800\n  function toBeFalsy() {                                                                                               // 2801\n    return {                                                                                                           // 2802\n      compare: function(actual) {                                                                                      // 2803\n        return {                                                                                                       // 2804\n          pass: !!!actual                                                                                              // 2805\n        };                                                                                                             // 2806\n      }                                                                                                                // 2807\n    };                                                                                                                 // 2808\n  }                                                                                                                    // 2809\n                                                                                                                       // 2810\n  return toBeFalsy;                                                                                                    // 2811\n};                                                                                                                     // 2812\n                                                                                                                       // 2813\ngetJasmineRequireObj().toBeGreaterThan = function() {                                                                  // 2814\n                                                                                                                       // 2815\n  function toBeGreaterThan() {                                                                                         // 2816\n    return {                                                                                                           // 2817\n      compare: function(actual, expected) {                                                                            // 2818\n        return {                                                                                                       // 2819\n          pass: actual > expected                                                                                      // 2820\n        };                                                                                                             // 2821\n      }                                                                                                                // 2822\n    };                                                                                                                 // 2823\n  }                                                                                                                    // 2824\n                                                                                                                       // 2825\n  return toBeGreaterThan;                                                                                              // 2826\n};                                                                                                                     // 2827\n                                                                                                                       // 2828\n                                                                                                                       // 2829\ngetJasmineRequireObj().toBeLessThan = function() {                                                                     // 2830\n  function toBeLessThan() {                                                                                            // 2831\n    return {                                                                                                           // 2832\n                                                                                                                       // 2833\n      compare: function(actual, expected) {                                                                            // 2834\n        return {                                                                                                       // 2835\n          pass: actual < expected                                                                                      // 2836\n        };                                                                                                             // 2837\n      }                                                                                                                // 2838\n    };                                                                                                                 // 2839\n  }                                                                                                                    // 2840\n                                                                                                                       // 2841\n  return toBeLessThan;                                                                                                 // 2842\n};                                                                                                                     // 2843\ngetJasmineRequireObj().toBeNaN = function(j$) {                                                                        // 2844\n                                                                                                                       // 2845\n  function toBeNaN() {                                                                                                 // 2846\n    return {                                                                                                           // 2847\n      compare: function(actual) {                                                                                      // 2848\n        var result = {                                                                                                 // 2849\n          pass: (actual !== actual)                                                                                    // 2850\n        };                                                                                                             // 2851\n                                                                                                                       // 2852\n        if (result.pass) {                                                                                             // 2853\n          result.message = 'Expected actual not to be NaN.';                                                           // 2854\n        } else {                                                                                                       // 2855\n          result.message = function() { return 'Expected ' + j$.pp(actual) + ' to be NaN.'; };                         // 2856\n        }                                                                                                              // 2857\n                                                                                                                       // 2858\n        return result;                                                                                                 // 2859\n      }                                                                                                                // 2860\n    };                                                                                                                 // 2861\n  }                                                                                                                    // 2862\n                                                                                                                       // 2863\n  return toBeNaN;                                                                                                      // 2864\n};                                                                                                                     // 2865\n                                                                                                                       // 2866\ngetJasmineRequireObj().toBeNull = function() {                                                                         // 2867\n                                                                                                                       // 2868\n  function toBeNull() {                                                                                                // 2869\n    return {                                                                                                           // 2870\n      compare: function(actual) {                                                                                      // 2871\n        return {                                                                                                       // 2872\n          pass: actual === null                                                                                        // 2873\n        };                                                                                                             // 2874\n      }                                                                                                                // 2875\n    };                                                                                                                 // 2876\n  }                                                                                                                    // 2877\n                                                                                                                       // 2878\n  return toBeNull;                                                                                                     // 2879\n};                                                                                                                     // 2880\n                                                                                                                       // 2881\ngetJasmineRequireObj().toBeTruthy = function() {                                                                       // 2882\n                                                                                                                       // 2883\n  function toBeTruthy() {                                                                                              // 2884\n    return {                                                                                                           // 2885\n      compare: function(actual) {                                                                                      // 2886\n        return {                                                                                                       // 2887\n          pass: !!actual                                                                                               // 2888\n        };                                                                                                             // 2889\n      }                                                                                                                // 2890\n    };                                                                                                                 // 2891\n  }                                                                                                                    // 2892\n                                                                                                                       // 2893\n  return toBeTruthy;                                                                                                   // 2894\n};                                                                                                                     // 2895\n                                                                                                                       // 2896\ngetJasmineRequireObj().toBeUndefined = function() {                                                                    // 2897\n                                                                                                                       // 2898\n  function toBeUndefined() {                                                                                           // 2899\n    return {                                                                                                           // 2900\n      compare: function(actual) {                                                                                      // 2901\n        return {                                                                                                       // 2902\n          pass: void 0 === actual                                                                                      // 2903\n        };                                                                                                             // 2904\n      }                                                                                                                // 2905\n    };                                                                                                                 // 2906\n  }                                                                                                                    // 2907\n                                                                                                                       // 2908\n  return toBeUndefined;                                                                                                // 2909\n};                                                                                                                     // 2910\n                                                                                                                       // 2911\ngetJasmineRequireObj().toContain = function() {                                                                        // 2912\n  function toContain(util, customEqualityTesters) {                                                                    // 2913\n    customEqualityTesters = customEqualityTesters || [];                                                               // 2914\n                                                                                                                       // 2915\n    return {                                                                                                           // 2916\n      compare: function(actual, expected) {                                                                            // 2917\n                                                                                                                       // 2918\n        return {                                                                                                       // 2919\n          pass: util.contains(actual, expected, customEqualityTesters)                                                 // 2920\n        };                                                                                                             // 2921\n      }                                                                                                                // 2922\n    };                                                                                                                 // 2923\n  }                                                                                                                    // 2924\n                                                                                                                       // 2925\n  return toContain;                                                                                                    // 2926\n};                                                                                                                     // 2927\n                                                                                                                       // 2928\ngetJasmineRequireObj().toEqual = function() {                                                                          // 2929\n                                                                                                                       // 2930\n  function toEqual(util, customEqualityTesters) {                                                                      // 2931\n    customEqualityTesters = customEqualityTesters || [];                                                               // 2932\n                                                                                                                       // 2933\n    return {                                                                                                           // 2934\n      compare: function(actual, expected) {                                                                            // 2935\n        var result = {                                                                                                 // 2936\n          pass: false                                                                                                  // 2937\n        };                                                                                                             // 2938\n                                                                                                                       // 2939\n        result.pass = util.equals(actual, expected, customEqualityTesters);                                            // 2940\n                                                                                                                       // 2941\n        return result;                                                                                                 // 2942\n      }                                                                                                                // 2943\n    };                                                                                                                 // 2944\n  }                                                                                                                    // 2945\n                                                                                                                       // 2946\n  return toEqual;                                                                                                      // 2947\n};                                                                                                                     // 2948\n                                                                                                                       // 2949\ngetJasmineRequireObj().toHaveBeenCalled = function(j$) {                                                               // 2950\n                                                                                                                       // 2951\n  function toHaveBeenCalled() {                                                                                        // 2952\n    return {                                                                                                           // 2953\n      compare: function(actual) {                                                                                      // 2954\n        var result = {};                                                                                               // 2955\n                                                                                                                       // 2956\n        if (!j$.isSpy(actual)) {                                                                                       // 2957\n          throw new Error('Expected a spy, but got ' + j$.pp(actual) + '.');                                           // 2958\n        }                                                                                                              // 2959\n                                                                                                                       // 2960\n        if (arguments.length > 1) {                                                                                    // 2961\n          throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');                       // 2962\n        }                                                                                                              // 2963\n                                                                                                                       // 2964\n        result.pass = actual.calls.any();                                                                              // 2965\n                                                                                                                       // 2966\n        result.message = result.pass ?                                                                                 // 2967\n          'Expected spy ' + actual.and.identity() + ' not to have been called.' :                                      // 2968\n          'Expected spy ' + actual.and.identity() + ' to have been called.';                                           // 2969\n                                                                                                                       // 2970\n        return result;                                                                                                 // 2971\n      }                                                                                                                // 2972\n    };                                                                                                                 // 2973\n  }                                                                                                                    // 2974\n                                                                                                                       // 2975\n  return toHaveBeenCalled;                                                                                             // 2976\n};                                                                                                                     // 2977\n                                                                                                                       // 2978\ngetJasmineRequireObj().toHaveBeenCalledWith = function(j$) {                                                           // 2979\n                                                                                                                       // 2980\n  function toHaveBeenCalledWith(util, customEqualityTesters) {                                                         // 2981\n    return {                                                                                                           // 2982\n      compare: function() {                                                                                            // 2983\n        var args = Array.prototype.slice.call(arguments, 0),                                                           // 2984\n          actual = args[0],                                                                                            // 2985\n          expectedArgs = args.slice(1),                                                                                // 2986\n          result = { pass: false };                                                                                    // 2987\n                                                                                                                       // 2988\n        if (!j$.isSpy(actual)) {                                                                                       // 2989\n          throw new Error('Expected a spy, but got ' + j$.pp(actual) + '.');                                           // 2990\n        }                                                                                                              // 2991\n                                                                                                                       // 2992\n        if (!actual.calls.any()) {                                                                                     // 2993\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but it was never called.'; };\n          return result;                                                                                               // 2995\n        }                                                                                                              // 2996\n                                                                                                                       // 2997\n        if (util.contains(actual.calls.allArgs(), expectedArgs, customEqualityTesters)) {                              // 2998\n          result.pass = true;                                                                                          // 2999\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' not to have been called with ' + j$.pp(expectedArgs) + ' but it was.'; };\n        } else {                                                                                                       // 3001\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but actual calls were ' + j$.pp(actual.calls.allArgs()).replace(/^\\[ | \\]$/g, '') + '.'; };\n        }                                                                                                              // 3003\n                                                                                                                       // 3004\n        return result;                                                                                                 // 3005\n      }                                                                                                                // 3006\n    };                                                                                                                 // 3007\n  }                                                                                                                    // 3008\n                                                                                                                       // 3009\n  return toHaveBeenCalledWith;                                                                                         // 3010\n};                                                                                                                     // 3011\n                                                                                                                       // 3012\ngetJasmineRequireObj().toMatch = function(j$) {                                                                        // 3013\n                                                                                                                       // 3014\n  function toMatch() {                                                                                                 // 3015\n    return {                                                                                                           // 3016\n      compare: function(actual, expected) {                                                                            // 3017\n        if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {                                                 // 3018\n          throw new Error('Expected is not a String or a RegExp');                                                     // 3019\n        }                                                                                                              // 3020\n                                                                                                                       // 3021\n        var regexp = new RegExp(expected);                                                                             // 3022\n                                                                                                                       // 3023\n        return {                                                                                                       // 3024\n          pass: regexp.test(actual)                                                                                    // 3025\n        };                                                                                                             // 3026\n      }                                                                                                                // 3027\n    };                                                                                                                 // 3028\n  }                                                                                                                    // 3029\n                                                                                                                       // 3030\n  return toMatch;                                                                                                      // 3031\n};                                                                                                                     // 3032\n                                                                                                                       // 3033\ngetJasmineRequireObj().toThrow = function(j$) {                                                                        // 3034\n                                                                                                                       // 3035\n  function toThrow(util) {                                                                                             // 3036\n    return {                                                                                                           // 3037\n      compare: function(actual, expected) {                                                                            // 3038\n        var result = { pass: false },                                                                                  // 3039\n          threw = false,                                                                                               // 3040\n          thrown;                                                                                                      // 3041\n                                                                                                                       // 3042\n        if (typeof actual != 'function') {                                                                             // 3043\n          throw new Error('Actual is not a Function');                                                                 // 3044\n        }                                                                                                              // 3045\n                                                                                                                       // 3046\n        try {                                                                                                          // 3047\n          actual();                                                                                                    // 3048\n        } catch (e) {                                                                                                  // 3049\n          threw = true;                                                                                                // 3050\n          thrown = e;                                                                                                  // 3051\n        }                                                                                                              // 3052\n                                                                                                                       // 3053\n        if (!threw) {                                                                                                  // 3054\n          result.message = 'Expected function to throw an exception.';                                                 // 3055\n          return result;                                                                                               // 3056\n        }                                                                                                              // 3057\n                                                                                                                       // 3058\n        if (arguments.length == 1) {                                                                                   // 3059\n          result.pass = true;                                                                                          // 3060\n          result.message = function() { return 'Expected function not to throw, but it threw ' + j$.pp(thrown) + '.'; };\n                                                                                                                       // 3062\n          return result;                                                                                               // 3063\n        }                                                                                                              // 3064\n                                                                                                                       // 3065\n        if (util.equals(thrown, expected)) {                                                                           // 3066\n          result.pass = true;                                                                                          // 3067\n          result.message = function() { return 'Expected function not to throw ' + j$.pp(expected) + '.'; };           // 3068\n        } else {                                                                                                       // 3069\n          result.message = function() { return 'Expected function to throw ' + j$.pp(expected) + ', but it threw ' +  j$.pp(thrown) + '.'; };\n        }                                                                                                              // 3071\n                                                                                                                       // 3072\n        return result;                                                                                                 // 3073\n      }                                                                                                                // 3074\n    };                                                                                                                 // 3075\n  }                                                                                                                    // 3076\n                                                                                                                       // 3077\n  return toThrow;                                                                                                      // 3078\n};                                                                                                                     // 3079\n                                                                                                                       // 3080\ngetJasmineRequireObj().toThrowError = function(j$) {                                                                   // 3081\n  function toThrowError (util) {                                                                                       // 3082\n    return {                                                                                                           // 3083\n      compare: function(actual) {                                                                                      // 3084\n        var threw = false,                                                                                             // 3085\n          pass = {pass: true},                                                                                         // 3086\n          fail = {pass: false},                                                                                        // 3087\n          thrown;                                                                                                      // 3088\n                                                                                                                       // 3089\n        if (typeof actual != 'function') {                                                                             // 3090\n          throw new Error('Actual is not a Function');                                                                 // 3091\n        }                                                                                                              // 3092\n                                                                                                                       // 3093\n        var errorMatcher = getMatcher.apply(null, arguments);                                                          // 3094\n                                                                                                                       // 3095\n        try {                                                                                                          // 3096\n          actual();                                                                                                    // 3097\n        } catch (e) {                                                                                                  // 3098\n          threw = true;                                                                                                // 3099\n          thrown = e;                                                                                                  // 3100\n        }                                                                                                              // 3101\n                                                                                                                       // 3102\n        if (!threw) {                                                                                                  // 3103\n          fail.message = 'Expected function to throw an Error.';                                                       // 3104\n          return fail;                                                                                                 // 3105\n        }                                                                                                              // 3106\n                                                                                                                       // 3107\n        if (!(thrown instanceof Error)) {                                                                              // 3108\n          fail.message = function() { return 'Expected function to throw an Error, but it threw ' + j$.pp(thrown) + '.'; };\n          return fail;                                                                                                 // 3110\n        }                                                                                                              // 3111\n                                                                                                                       // 3112\n        if (errorMatcher.hasNoSpecifics()) {                                                                           // 3113\n          pass.message = 'Expected function not to throw an Error, but it threw ' + j$.fnNameFor(thrown) + '.';        // 3114\n          return pass;                                                                                                 // 3115\n        }                                                                                                              // 3116\n                                                                                                                       // 3117\n        if (errorMatcher.matches(thrown)) {                                                                            // 3118\n          pass.message = function() {                                                                                  // 3119\n            return 'Expected function not to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() + '.';\n          };                                                                                                           // 3121\n          return pass;                                                                                                 // 3122\n        } else {                                                                                                       // 3123\n          fail.message = function() {                                                                                  // 3124\n            return 'Expected function to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() +\n              ', but it threw ' + errorMatcher.thrownDescription(thrown) + '.';                                        // 3126\n          };                                                                                                           // 3127\n          return fail;                                                                                                 // 3128\n        }                                                                                                              // 3129\n      }                                                                                                                // 3130\n    };                                                                                                                 // 3131\n                                                                                                                       // 3132\n    function getMatcher() {                                                                                            // 3133\n      var expected = null,                                                                                             // 3134\n          errorType = null;                                                                                            // 3135\n                                                                                                                       // 3136\n      if (arguments.length == 2) {                                                                                     // 3137\n        expected = arguments[1];                                                                                       // 3138\n        if (isAnErrorType(expected)) {                                                                                 // 3139\n          errorType = expected;                                                                                        // 3140\n          expected = null;                                                                                             // 3141\n        }                                                                                                              // 3142\n      } else if (arguments.length > 2) {                                                                               // 3143\n        errorType = arguments[1];                                                                                      // 3144\n        expected = arguments[2];                                                                                       // 3145\n        if (!isAnErrorType(errorType)) {                                                                               // 3146\n          throw new Error('Expected error type is not an Error.');                                                     // 3147\n        }                                                                                                              // 3148\n      }                                                                                                                // 3149\n                                                                                                                       // 3150\n      if (expected && !isStringOrRegExp(expected)) {                                                                   // 3151\n        if (errorType) {                                                                                               // 3152\n          throw new Error('Expected error message is not a string or RegExp.');                                        // 3153\n        } else {                                                                                                       // 3154\n          throw new Error('Expected is not an Error, string, or RegExp.');                                             // 3155\n        }                                                                                                              // 3156\n      }                                                                                                                // 3157\n                                                                                                                       // 3158\n      function messageMatch(message) {                                                                                 // 3159\n        if (typeof expected == 'string') {                                                                             // 3160\n          return expected == message;                                                                                  // 3161\n        } else {                                                                                                       // 3162\n          return expected.test(message);                                                                               // 3163\n        }                                                                                                              // 3164\n      }                                                                                                                // 3165\n                                                                                                                       // 3166\n      return {                                                                                                         // 3167\n        errorTypeDescription: errorType ? j$.fnNameFor(errorType) : 'an exception',                                    // 3168\n        thrownDescription: function(thrown) {                                                                          // 3169\n          var thrownName = errorType ? j$.fnNameFor(thrown.constructor) : 'an exception',                              // 3170\n              thrownMessage = '';                                                                                      // 3171\n                                                                                                                       // 3172\n          if (expected) {                                                                                              // 3173\n            thrownMessage = ' with message ' + j$.pp(thrown.message);                                                  // 3174\n          }                                                                                                            // 3175\n                                                                                                                       // 3176\n          return thrownName + thrownMessage;                                                                           // 3177\n        },                                                                                                             // 3178\n        messageDescription: function() {                                                                               // 3179\n          if (expected === null) {                                                                                     // 3180\n            return '';                                                                                                 // 3181\n          } else if (expected instanceof RegExp) {                                                                     // 3182\n            return ' with a message matching ' + j$.pp(expected);                                                      // 3183\n          } else {                                                                                                     // 3184\n            return ' with message ' + j$.pp(expected);                                                                 // 3185\n          }                                                                                                            // 3186\n        },                                                                                                             // 3187\n        hasNoSpecifics: function() {                                                                                   // 3188\n          return expected === null && errorType === null;                                                              // 3189\n        },                                                                                                             // 3190\n        matches: function(error) {                                                                                     // 3191\n          return (errorType === null || error instanceof errorType) &&                                                 // 3192\n            (expected === null || messageMatch(error.message));                                                        // 3193\n        }                                                                                                              // 3194\n      };                                                                                                               // 3195\n    }                                                                                                                  // 3196\n                                                                                                                       // 3197\n    function isStringOrRegExp(potential) {                                                                             // 3198\n      return potential instanceof RegExp || (typeof potential == 'string');                                            // 3199\n    }                                                                                                                  // 3200\n                                                                                                                       // 3201\n    function isAnErrorType(type) {                                                                                     // 3202\n      if (typeof type !== 'function') {                                                                                // 3203\n        return false;                                                                                                  // 3204\n      }                                                                                                                // 3205\n                                                                                                                       // 3206\n      var Surrogate = function() {};                                                                                   // 3207\n      Surrogate.prototype = type.prototype;                                                                            // 3208\n      return (new Surrogate()) instanceof Error;                                                                       // 3209\n    }                                                                                                                  // 3210\n  }                                                                                                                    // 3211\n                                                                                                                       // 3212\n  return toThrowError;                                                                                                 // 3213\n};                                                                                                                     // 3214\n                                                                                                                       // 3215\ngetJasmineRequireObj().interface = function(jasmine, env) {                                                            // 3216\n  var jasmineInterface = {                                                                                             // 3217\n    describe: function(description, specDefinitions) {                                                                 // 3218\n      return env.describe(description, specDefinitions);                                                               // 3219\n    },                                                                                                                 // 3220\n                                                                                                                       // 3221\n    xdescribe: function(description, specDefinitions) {                                                                // 3222\n      return env.xdescribe(description, specDefinitions);                                                              // 3223\n    },                                                                                                                 // 3224\n                                                                                                                       // 3225\n    fdescribe: function(description, specDefinitions) {                                                                // 3226\n      return env.fdescribe(description, specDefinitions);                                                              // 3227\n    },                                                                                                                 // 3228\n                                                                                                                       // 3229\n    it: function() {                                                                                                   // 3230\n      return env.it.apply(env, arguments);                                                                             // 3231\n    },                                                                                                                 // 3232\n                                                                                                                       // 3233\n    xit: function() {                                                                                                  // 3234\n      return env.xit.apply(env, arguments);                                                                            // 3235\n    },                                                                                                                 // 3236\n                                                                                                                       // 3237\n    fit: function() {                                                                                                  // 3238\n      return env.fit.apply(env, arguments);                                                                            // 3239\n    },                                                                                                                 // 3240\n                                                                                                                       // 3241\n    beforeEach: function() {                                                                                           // 3242\n      return env.beforeEach.apply(env, arguments);                                                                     // 3243\n    },                                                                                                                 // 3244\n                                                                                                                       // 3245\n    afterEach: function() {                                                                                            // 3246\n      return env.afterEach.apply(env, arguments);                                                                      // 3247\n    },                                                                                                                 // 3248\n                                                                                                                       // 3249\n    beforeAll: function() {                                                                                            // 3250\n      return env.beforeAll.apply(env, arguments);                                                                      // 3251\n    },                                                                                                                 // 3252\n                                                                                                                       // 3253\n    afterAll: function() {                                                                                             // 3254\n      return env.afterAll.apply(env, arguments);                                                                       // 3255\n    },                                                                                                                 // 3256\n                                                                                                                       // 3257\n    expect: function(actual) {                                                                                         // 3258\n      return env.expect(actual);                                                                                       // 3259\n    },                                                                                                                 // 3260\n                                                                                                                       // 3261\n    pending: function() {                                                                                              // 3262\n      return env.pending.apply(env, arguments);                                                                        // 3263\n    },                                                                                                                 // 3264\n                                                                                                                       // 3265\n    fail: function() {                                                                                                 // 3266\n      return env.fail.apply(env, arguments);                                                                           // 3267\n    },                                                                                                                 // 3268\n                                                                                                                       // 3269\n    spyOn: function(obj, methodName) {                                                                                 // 3270\n      return env.spyOn(obj, methodName);                                                                               // 3271\n    },                                                                                                                 // 3272\n                                                                                                                       // 3273\n    jsApiReporter: new jasmine.JsApiReporter({                                                                         // 3274\n      timer: new jasmine.Timer()                                                                                       // 3275\n    }),                                                                                                                // 3276\n                                                                                                                       // 3277\n    jasmine: jasmine                                                                                                   // 3278\n  };                                                                                                                   // 3279\n                                                                                                                       // 3280\n  jasmine.addCustomEqualityTester = function(tester) {                                                                 // 3281\n    env.addCustomEqualityTester(tester);                                                                               // 3282\n  };                                                                                                                   // 3283\n                                                                                                                       // 3284\n  jasmine.addMatchers = function(matchers) {                                                                           // 3285\n    return env.addMatchers(matchers);                                                                                  // 3286\n  };                                                                                                                   // 3287\n                                                                                                                       // 3288\n  jasmine.clock = function() {                                                                                         // 3289\n    return env.clock;                                                                                                  // 3290\n  };                                                                                                                   // 3291\n                                                                                                                       // 3292\n  return jasmineInterface;                                                                                             // 3293\n};                                                                                                                     // 3294\n                                                                                                                       // 3295\ngetJasmineRequireObj().version = function() {                                                                          // 3296\n  return '2.3.4';                                                                                                      // 3297\n};                                                                                                                     // 3298\n                                                                                                                       // 3299\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/.npm/package/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nCopyright (c) 2008-2015 Pivotal Labs                                                                                   // 2\n                                                                                                                       // 3\nPermission is hereby granted, free of charge, to any person obtaining                                                  // 4\na copy of this software and associated documentation files (the                                                        // 5\n\"Software\"), to deal in the Software without restriction, including                                                    // 6\nwithout limitation the rights to use, copy, modify, merge, publish,                                                    // 7\ndistribute, sublicense, and/or sell copies of the Software, and to                                                     // 8\npermit persons to whom the Software is furnished to do so, subject to                                                  // 9\nthe following conditions:                                                                                              // 10\n                                                                                                                       // 11\nThe above copyright notice and this permission notice shall be                                                         // 12\nincluded in all copies or substantial portions of the Software.                                                        // 13\n                                                                                                                       // 14\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                        // 15\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                     // 16\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                                  // 17\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                                 // 18\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                                 // 19\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                                  // 20\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                        // 21\n*/                                                                                                                     // 22\njasmineRequire.html = function(j$) {                                                                                   // 23\n  j$.ResultsNode = jasmineRequire.ResultsNode();                                                                       // 24\n  j$.HtmlReporter = jasmineRequire.HtmlReporter(j$);                                                                   // 25\n  j$.QueryString = jasmineRequire.QueryString();                                                                       // 26\n  j$.HtmlSpecFilter = jasmineRequire.HtmlSpecFilter();                                                                 // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\njasmineRequire.HtmlReporter = function(j$) {                                                                           // 30\n                                                                                                                       // 31\n  var noopTimer = {                                                                                                    // 32\n    start: function() {},                                                                                              // 33\n    elapsed: function() { return 0; }                                                                                  // 34\n  };                                                                                                                   // 35\n                                                                                                                       // 36\n  function HtmlReporter(options) {                                                                                     // 37\n    var env = options.env || {},                                                                                       // 38\n      getContainer = options.getContainer,                                                                             // 39\n      createElement = options.createElement,                                                                           // 40\n      createTextNode = options.createTextNode,                                                                         // 41\n      onRaiseExceptionsClick = options.onRaiseExceptionsClick || function() {},                                        // 42\n      onThrowExpectationsClick = options.onThrowExpectationsClick || function() {},                                    // 43\n      addToExistingQueryString = options.addToExistingQueryString || defaultQueryString,                               // 44\n      timer = options.timer || noopTimer,                                                                              // 45\n      results = [],                                                                                                    // 46\n      specsExecuted = 0,                                                                                               // 47\n      failureCount = 0,                                                                                                // 48\n      pendingSpecCount = 0,                                                                                            // 49\n      htmlReporterMain,                                                                                                // 50\n      symbols,                                                                                                         // 51\n      failedSuites = [];                                                                                               // 52\n                                                                                                                       // 53\n    this.initialize = function() {                                                                                     // 54\n      clearPrior();                                                                                                    // 55\n      htmlReporterMain = createDom('div', {className: 'jasmine_html-reporter'},                                        // 56\n        createDom('div', {className: 'banner'},                                                                        // 57\n          createDom('a', {className: 'title', href: 'http://jasmine.github.io/', target: '_blank'}),                   // 58\n          createDom('span', {className: 'version'}, j$.version)                                                        // 59\n        ),                                                                                                             // 60\n        createDom('ul', {className: 'symbol-summary'}),                                                                // 61\n        createDom('div', {className: 'alert'}),                                                                        // 62\n        createDom('div', {className: 'results'},                                                                       // 63\n          createDom('div', {className: 'failures'})                                                                    // 64\n        )                                                                                                              // 65\n      );                                                                                                               // 66\n      getContainer().appendChild(htmlReporterMain);                                                                    // 67\n                                                                                                                       // 68\n      symbols = find('.symbol-summary');                                                                               // 69\n    };                                                                                                                 // 70\n                                                                                                                       // 71\n    var totalSpecsDefined;                                                                                             // 72\n    this.jasmineStarted = function(options) {                                                                          // 73\n      totalSpecsDefined = options.totalSpecsDefined || 0;                                                              // 74\n      timer.start();                                                                                                   // 75\n    };                                                                                                                 // 76\n                                                                                                                       // 77\n    var summary = createDom('div', {className: 'summary'});                                                            // 78\n                                                                                                                       // 79\n    var topResults = new j$.ResultsNode({}, '', null),                                                                 // 80\n      currentParent = topResults;                                                                                      // 81\n                                                                                                                       // 82\n    this.suiteStarted = function(result) {                                                                             // 83\n      currentParent.addChild(result, 'suite');                                                                         // 84\n      currentParent = currentParent.last();                                                                            // 85\n    };                                                                                                                 // 86\n                                                                                                                       // 87\n    this.suiteDone = function(result) {                                                                                // 88\n      if (result.status == 'failed') {                                                                                 // 89\n        failedSuites.push(result);                                                                                     // 90\n      }                                                                                                                // 91\n                                                                                                                       // 92\n      if (currentParent == topResults) {                                                                               // 93\n        return;                                                                                                        // 94\n      }                                                                                                                // 95\n                                                                                                                       // 96\n      currentParent = currentParent.parent;                                                                            // 97\n    };                                                                                                                 // 98\n                                                                                                                       // 99\n    this.specStarted = function(result) {                                                                              // 100\n      currentParent.addChild(result, 'spec');                                                                          // 101\n    };                                                                                                                 // 102\n                                                                                                                       // 103\n    var failures = [];                                                                                                 // 104\n    this.specDone = function(result) {                                                                                 // 105\n      if(noExpectations(result) && typeof console !== 'undefined' && typeof console.error !== 'undefined') {           // 106\n        console.error('Spec \\'' + result.fullName + '\\' has no expectations.');                                        // 107\n      }                                                                                                                // 108\n                                                                                                                       // 109\n      if (result.status != 'disabled') {                                                                               // 110\n        specsExecuted++;                                                                                               // 111\n      }                                                                                                                // 112\n                                                                                                                       // 113\n      symbols.appendChild(createDom('li', {                                                                            // 114\n          className: noExpectations(result) ? 'empty' : result.status,                                                 // 115\n          id: 'spec_' + result.id,                                                                                     // 116\n          title: result.fullName                                                                                       // 117\n        }                                                                                                              // 118\n      ));                                                                                                              // 119\n                                                                                                                       // 120\n      if (result.status == 'failed') {                                                                                 // 121\n        failureCount++;                                                                                                // 122\n                                                                                                                       // 123\n        var failure =                                                                                                  // 124\n          createDom('div', {className: 'spec-detail failed'},                                                          // 125\n            createDom('div', {className: 'description'},                                                               // 126\n              createDom('a', {title: result.fullName, href: specHref(result)}, result.fullName)                        // 127\n            ),                                                                                                         // 128\n            createDom('div', {className: 'messages'})                                                                  // 129\n          );                                                                                                           // 130\n        var messages = failure.childNodes[1];                                                                          // 131\n                                                                                                                       // 132\n        for (var i = 0; i < result.failedExpectations.length; i++) {                                                   // 133\n          var expectation = result.failedExpectations[i];                                                              // 134\n          messages.appendChild(createDom('div', {className: 'result-message'}, expectation.message));                  // 135\n          messages.appendChild(createDom('div', {className: 'stack-trace'}, expectation.stack));                       // 136\n        }                                                                                                              // 137\n                                                                                                                       // 138\n        failures.push(failure);                                                                                        // 139\n      }                                                                                                                // 140\n                                                                                                                       // 141\n      if (result.status == 'pending') {                                                                                // 142\n        pendingSpecCount++;                                                                                            // 143\n      }                                                                                                                // 144\n    };                                                                                                                 // 145\n                                                                                                                       // 146\n    this.jasmineDone = function() {                                                                                    // 147\n      var banner = find('.banner');                                                                                    // 148\n      var alert = find('.alert');                                                                                      // 149\n      alert.appendChild(createDom('span', {className: 'duration'}, 'finished in ' + timer.elapsed() / 1000 + 's'));    // 150\n                                                                                                                       // 151\n      banner.appendChild(                                                                                              // 152\n        createDom('div', { className: 'run-options' },                                                                 // 153\n          createDom('span', { className: 'trigger' }, 'Options'),                                                      // 154\n          createDom('div', { className: 'payload' },                                                                   // 155\n            createDom('div', { className: 'exceptions' },                                                              // 156\n              createDom('input', {                                                                                     // 157\n                className: 'raise',                                                                                    // 158\n                id: 'raise-exceptions',                                                                                // 159\n                type: 'checkbox'                                                                                       // 160\n              }),                                                                                                      // 161\n              createDom('label', { className: 'label', 'for': 'raise-exceptions' }, 'raise exceptions')),              // 162\n            createDom('div', { className: 'throw-failures' },                                                          // 163\n              createDom('input', {                                                                                     // 164\n                className: 'throw',                                                                                    // 165\n                id: 'throw-failures',                                                                                  // 166\n                type: 'checkbox'                                                                                       // 167\n              }),                                                                                                      // 168\n              createDom('label', { className: 'label', 'for': 'throw-failures' }, 'stop spec on expectation failure'))\n          )                                                                                                            // 170\n        ));                                                                                                            // 171\n                                                                                                                       // 172\n      var raiseCheckbox = find('#raise-exceptions');                                                                   // 173\n                                                                                                                       // 174\n      raiseCheckbox.checked = !env.catchingExceptions();                                                               // 175\n      raiseCheckbox.onclick = onRaiseExceptionsClick;                                                                  // 176\n                                                                                                                       // 177\n      var throwCheckbox = find('#throw-failures');                                                                     // 178\n      throwCheckbox.checked = env.throwingExpectationFailures();                                                       // 179\n      throwCheckbox.onclick = onThrowExpectationsClick;                                                                // 180\n                                                                                                                       // 181\n      var optionsMenu = find('.run-options'),                                                                          // 182\n          optionsTrigger = optionsMenu.querySelector('.trigger'),                                                      // 183\n          optionsPayload = optionsMenu.querySelector('.payload'),                                                      // 184\n          isOpen = /\\bopen\\b/;                                                                                         // 185\n                                                                                                                       // 186\n      optionsTrigger.onclick = function() {                                                                            // 187\n        if (isOpen.test(optionsPayload.className)) {                                                                   // 188\n          optionsPayload.className = optionsPayload.className.replace(isOpen, '');                                     // 189\n        } else {                                                                                                       // 190\n          optionsPayload.className += ' open';                                                                         // 191\n        }                                                                                                              // 192\n      };                                                                                                               // 193\n                                                                                                                       // 194\n      if (specsExecuted < totalSpecsDefined) {                                                                         // 195\n        var skippedMessage = 'Ran ' + specsExecuted + ' of ' + totalSpecsDefined + ' specs - run all';                 // 196\n        alert.appendChild(                                                                                             // 197\n          createDom('span', {className: 'bar skipped'},                                                                // 198\n            createDom('a', {href: '?', title: 'Run all specs'}, skippedMessage)                                        // 199\n          )                                                                                                            // 200\n        );                                                                                                             // 201\n      }                                                                                                                // 202\n      var statusBarMessage = '';                                                                                       // 203\n      var statusBarClassName = 'bar ';                                                                                 // 204\n                                                                                                                       // 205\n      if (totalSpecsDefined > 0) {                                                                                     // 206\n        statusBarMessage += pluralize('spec', specsExecuted) + ', ' + pluralize('failure', failureCount);              // 207\n        if (pendingSpecCount) { statusBarMessage += ', ' + pluralize('pending spec', pendingSpecCount); }              // 208\n        statusBarClassName += (failureCount > 0) ? 'failed' : 'passed';                                                // 209\n      } else {                                                                                                         // 210\n        statusBarClassName += 'skipped';                                                                               // 211\n        statusBarMessage += 'No specs found';                                                                          // 212\n      }                                                                                                                // 213\n                                                                                                                       // 214\n      alert.appendChild(createDom('span', {className: statusBarClassName}, statusBarMessage));                         // 215\n                                                                                                                       // 216\n      for(i = 0; i < failedSuites.length; i++) {                                                                       // 217\n        var failedSuite = failedSuites[i];                                                                             // 218\n        for(var j = 0; j < failedSuite.failedExpectations.length; j++) {                                               // 219\n          var errorBarMessage = 'AfterAll ' + failedSuite.failedExpectations[j].message;                               // 220\n          var errorBarClassName = 'bar errored';                                                                       // 221\n          alert.appendChild(createDom('span', {className: errorBarClassName}, errorBarMessage));                       // 222\n        }                                                                                                              // 223\n      }                                                                                                                // 224\n                                                                                                                       // 225\n      var results = find('.results');                                                                                  // 226\n      results.appendChild(summary);                                                                                    // 227\n                                                                                                                       // 228\n      summaryList(topResults, summary);                                                                                // 229\n                                                                                                                       // 230\n      function summaryList(resultsTree, domParent) {                                                                   // 231\n        var specListNode;                                                                                              // 232\n        for (var i = 0; i < resultsTree.children.length; i++) {                                                        // 233\n          var resultNode = resultsTree.children[i];                                                                    // 234\n          if (resultNode.type == 'suite') {                                                                            // 235\n            var suiteListNode = createDom('ul', {className: 'suite', id: 'suite-' + resultNode.result.id},             // 236\n              createDom('li', {className: 'suite-detail'},                                                             // 237\n                createDom('a', {href: specHref(resultNode.result)}, resultNode.result.description)                     // 238\n              )                                                                                                        // 239\n            );                                                                                                         // 240\n                                                                                                                       // 241\n            summaryList(resultNode, suiteListNode);                                                                    // 242\n            domParent.appendChild(suiteListNode);                                                                      // 243\n          }                                                                                                            // 244\n          if (resultNode.type == 'spec') {                                                                             // 245\n            if (domParent.getAttribute('class') != 'specs') {                                                          // 246\n              specListNode = createDom('ul', {className: 'specs'});                                                    // 247\n              domParent.appendChild(specListNode);                                                                     // 248\n            }                                                                                                          // 249\n            var specDescription = resultNode.result.description;                                                       // 250\n            if(noExpectations(resultNode.result)) {                                                                    // 251\n              specDescription = 'SPEC HAS NO EXPECTATIONS ' + specDescription;                                         // 252\n            }                                                                                                          // 253\n            if(resultNode.result.status === 'pending' && resultNode.result.pendingReason !== '') {                     // 254\n              specDescription = specDescription + ' PENDING WITH MESSAGE: ' + resultNode.result.pendingReason;         // 255\n            }                                                                                                          // 256\n            specListNode.appendChild(                                                                                  // 257\n              createDom('li', {                                                                                        // 258\n                  className: resultNode.result.status,                                                                 // 259\n                  id: 'spec-' + resultNode.result.id                                                                   // 260\n                },                                                                                                     // 261\n                createDom('a', {href: specHref(resultNode.result)}, specDescription)                                   // 262\n              )                                                                                                        // 263\n            );                                                                                                         // 264\n          }                                                                                                            // 265\n        }                                                                                                              // 266\n      }                                                                                                                // 267\n                                                                                                                       // 268\n      if (failures.length) {                                                                                           // 269\n        alert.appendChild(                                                                                             // 270\n          createDom('span', {className: 'menu bar spec-list'},                                                         // 271\n            createDom('span', {}, 'Spec List | '),                                                                     // 272\n            createDom('a', {className: 'failures-menu', href: '#'}, 'Failures')));                                     // 273\n        alert.appendChild(                                                                                             // 274\n          createDom('span', {className: 'menu bar failure-list'},                                                      // 275\n            createDom('a', {className: 'spec-list-menu', href: '#'}, 'Spec List'),                                     // 276\n            createDom('span', {}, ' | Failures ')));                                                                   // 277\n                                                                                                                       // 278\n        find('.failures-menu').onclick = function() {                                                                  // 279\n          setMenuModeTo('failure-list');                                                                               // 280\n        };                                                                                                             // 281\n        find('.spec-list-menu').onclick = function() {                                                                 // 282\n          setMenuModeTo('spec-list');                                                                                  // 283\n        };                                                                                                             // 284\n                                                                                                                       // 285\n        setMenuModeTo('failure-list');                                                                                 // 286\n                                                                                                                       // 287\n        var failureNode = find('.failures');                                                                           // 288\n        for (var i = 0; i < failures.length; i++) {                                                                    // 289\n          failureNode.appendChild(failures[i]);                                                                        // 290\n        }                                                                                                              // 291\n      }                                                                                                                // 292\n    };                                                                                                                 // 293\n                                                                                                                       // 294\n    return this;                                                                                                       // 295\n                                                                                                                       // 296\n    function find(selector) {                                                                                          // 297\n      return getContainer().querySelector('.jasmine_html-reporter ' + selector);                                       // 298\n    }                                                                                                                  // 299\n                                                                                                                       // 300\n    function clearPrior() {                                                                                            // 301\n      // return the reporter                                                                                           // 302\n      var oldReporter = find('');                                                                                      // 303\n                                                                                                                       // 304\n      if(oldReporter) {                                                                                                // 305\n        getContainer().removeChild(oldReporter);                                                                       // 306\n      }                                                                                                                // 307\n    }                                                                                                                  // 308\n                                                                                                                       // 309\n    function createDom(type, attrs, childrenVarArgs) {                                                                 // 310\n      var el = createElement(type);                                                                                    // 311\n                                                                                                                       // 312\n      for (var i = 2; i < arguments.length; i++) {                                                                     // 313\n        var child = arguments[i];                                                                                      // 314\n                                                                                                                       // 315\n        if (typeof child === 'string') {                                                                               // 316\n          el.appendChild(createTextNode(child));                                                                       // 317\n        } else {                                                                                                       // 318\n          if (child) {                                                                                                 // 319\n            el.appendChild(child);                                                                                     // 320\n          }                                                                                                            // 321\n        }                                                                                                              // 322\n      }                                                                                                                // 323\n                                                                                                                       // 324\n      for (var attr in attrs) {                                                                                        // 325\n        if (attr == 'className') {                                                                                     // 326\n          el[attr] = attrs[attr];                                                                                      // 327\n        } else {                                                                                                       // 328\n          el.setAttribute(attr, attrs[attr]);                                                                          // 329\n        }                                                                                                              // 330\n      }                                                                                                                // 331\n                                                                                                                       // 332\n      return el;                                                                                                       // 333\n    }                                                                                                                  // 334\n                                                                                                                       // 335\n    function pluralize(singular, count) {                                                                              // 336\n      var word = (count == 1 ? singular : singular + 's');                                                             // 337\n                                                                                                                       // 338\n      return '' + count + ' ' + word;                                                                                  // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    function specHref(result) {                                                                                        // 342\n      return addToExistingQueryString('spec', result.fullName);                                                        // 343\n    }                                                                                                                  // 344\n                                                                                                                       // 345\n    function defaultQueryString(key, value) {                                                                          // 346\n      return '?' + key + '=' + value;                                                                                  // 347\n    }                                                                                                                  // 348\n                                                                                                                       // 349\n    function setMenuModeTo(mode) {                                                                                     // 350\n      htmlReporterMain.setAttribute('class', 'jasmine_html-reporter ' + mode);                                         // 351\n    }                                                                                                                  // 352\n                                                                                                                       // 353\n    function noExpectations(result) {                                                                                  // 354\n      return (result.failedExpectations.length + result.passedExpectations.length) === 0 &&                            // 355\n        result.status === 'passed';                                                                                    // 356\n    }                                                                                                                  // 357\n  }                                                                                                                    // 358\n                                                                                                                       // 359\n  return HtmlReporter;                                                                                                 // 360\n};                                                                                                                     // 361\n                                                                                                                       // 362\njasmineRequire.HtmlSpecFilter = function() {                                                                           // 363\n  function HtmlSpecFilter(options) {                                                                                   // 364\n    var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    var filterPattern = new RegExp(filterString);                                                                      // 366\n                                                                                                                       // 367\n    this.matches = function(specName) {                                                                                // 368\n      return filterPattern.test(specName);                                                                             // 369\n    };                                                                                                                 // 370\n  }                                                                                                                    // 371\n                                                                                                                       // 372\n  return HtmlSpecFilter;                                                                                               // 373\n};                                                                                                                     // 374\n                                                                                                                       // 375\njasmineRequire.ResultsNode = function() {                                                                              // 376\n  function ResultsNode(result, type, parent) {                                                                         // 377\n    this.result = result;                                                                                              // 378\n    this.type = type;                                                                                                  // 379\n    this.parent = parent;                                                                                              // 380\n                                                                                                                       // 381\n    this.children = [];                                                                                                // 382\n                                                                                                                       // 383\n    this.addChild = function(result, type) {                                                                           // 384\n      this.children.push(new ResultsNode(result, type, this));                                                         // 385\n    };                                                                                                                 // 386\n                                                                                                                       // 387\n    this.last = function() {                                                                                           // 388\n      return this.children[this.children.length - 1];                                                                  // 389\n    };                                                                                                                 // 390\n  }                                                                                                                    // 391\n                                                                                                                       // 392\n  return ResultsNode;                                                                                                  // 393\n};                                                                                                                     // 394\n                                                                                                                       // 395\njasmineRequire.QueryString = function() {                                                                              // 396\n  function QueryString(options) {                                                                                      // 397\n                                                                                                                       // 398\n    this.navigateWithNewParam = function(key, value) {                                                                 // 399\n      options.getWindowLocation().search = this.fullStringWithNewParam(key, value);                                    // 400\n    };                                                                                                                 // 401\n                                                                                                                       // 402\n    this.fullStringWithNewParam = function(key, value) {                                                               // 403\n      var paramMap = queryStringToParamMap();                                                                          // 404\n      paramMap[key] = value;                                                                                           // 405\n      return toQueryString(paramMap);                                                                                  // 406\n    };                                                                                                                 // 407\n                                                                                                                       // 408\n    this.getParam = function(key) {                                                                                    // 409\n      return queryStringToParamMap()[key];                                                                             // 410\n    };                                                                                                                 // 411\n                                                                                                                       // 412\n    return this;                                                                                                       // 413\n                                                                                                                       // 414\n    function toQueryString(paramMap) {                                                                                 // 415\n      var qStrPairs = [];                                                                                              // 416\n      for (var prop in paramMap) {                                                                                     // 417\n        qStrPairs.push(encodeURIComponent(prop) + '=' + encodeURIComponent(paramMap[prop]));                           // 418\n      }                                                                                                                // 419\n      return '?' + qStrPairs.join('&');                                                                                // 420\n    }                                                                                                                  // 421\n                                                                                                                       // 422\n    function queryStringToParamMap() {                                                                                 // 423\n      var paramStr = options.getWindowLocation().search.substring(1),                                                  // 424\n        params = [],                                                                                                   // 425\n        paramMap = {};                                                                                                 // 426\n                                                                                                                       // 427\n      if (paramStr.length > 0) {                                                                                       // 428\n        params = paramStr.split('&');                                                                                  // 429\n        for (var i = 0; i < params.length; i++) {                                                                      // 430\n          var p = params[i].split('=');                                                                                // 431\n          var value = decodeURIComponent(p[1]);                                                                        // 432\n          if (value === 'true' || value === 'false') {                                                                 // 433\n            value = JSON.parse(value);                                                                                 // 434\n          }                                                                                                            // 435\n          paramMap[decodeURIComponent(p[0])] = value;                                                                  // 436\n        }                                                                                                              // 437\n      }                                                                                                                // 438\n                                                                                                                       // 439\n      return paramMap;                                                                                                 // 440\n    }                                                                                                                  // 441\n                                                                                                                       // 442\n  }                                                                                                                    // 443\n                                                                                                                       // 444\n  return QueryString;                                                                                                  // 445\n};                                                                                                                     // 446\n                                                                                                                       // 447\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/log.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals log: true */                                                                                                // 1\n                                                                                                                       // 2\nvar level = Meteor.isServer && process.env.VELOCITY_DEBUG ? 'debug' : 'info'                                           // 3\nif (Meteor.isServer && process.env.JASMINE_LOG_LEVEL) {                                                                // 4\n  level = process.env.JASMINE_LOG_LEVEL                                                                                // 5\n}                                                                                                                      // 6\nlog = loglevel.createPackageLogger('[sanjo:jasmine]', level)                                                           // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/parseStack.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals parseStack: true */                                                                                         // 1\n                                                                                                                       // 2\nparseStack = {};                                                                                                       // 3\n                                                                                                                       // 4\n// Given an Error (eg, 'new Error'), return the stack associated with                                                  // 5\n// that error as an array. More recently called functions appear first                                                 // 6\n// and each element is an object with keys:                                                                            // 7\n// - file: filename as it appears in the stack                                                                         // 8\n// - line: 1-indexed line number in file, as a Number                                                                  // 9\n// - column: 1-indexed column in line, as a Number                                                                     // 10\n// - func: name of the function in the frame (maybe null)                                                              // 11\n//                                                                                                                     // 12\n// Accomplishes this by parsing the text representation of the stack                                                   // 13\n// with regular expressions. Unlikely to work anywhere but v8.                                                         // 14\n//                                                                                                                     // 15\n// If a function on the stack has been marked with mark(), don't                                                       // 16\n// return anything past that function. We call this the \"user portion\"                                                 // 17\n// of the stack.                                                                                                       // 18\nparseStack.parse = function (err) {                                                                                    // 19\n  var frames = err.stack.split('\\n');                                                                                  // 20\n                                                                                                                       // 21\n  frames.shift(); // at least the first line is the exception                                                          // 22\n  var stop = false;                                                                                                    // 23\n  var ret = [];                                                                                                        // 24\n                                                                                                                       // 25\n  _.each(frames, function (frame) {                                                                                    // 26\n    if (stop)                                                                                                          // 27\n      return;                                                                                                          // 28\n    var m;                                                                                                             // 29\n    if (m =                                                                                                            // 30\n        frame.match(/^\\s*at\\s*((new )?.+?)\\s*(\\[as\\s*([^\\]]*)\\]\\s*)?\\((.*?)(:(\\d+))?(:(\\d+))?\\)\\s*$/)) {               // 31\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi                                                     // 32\n      // \"    at My.Function (/path/to/myfile.js:532:39)\"                                                              // 33\n      // \"    at Array.forEach (native)\"                                                                               // 34\n      // \"    at new My.Class (file.js:1:2)\"                                                                           // 35\n      // \"    at [object Object].main.registerCommand.name [as func] (meteor/tools/commands.js:1225:19)\"               // 36\n      // \"    at __top_mark__ [as matchErr] (meteor/tools/parse-stack.js:82:14)\"                                       // 37\n      //                                                                                                               // 38\n      // In that last example, it is not at all clear to me what the                                                   // 39\n      // 'as' stanza refers to, but it is in m[3] if you find a use for it.                                            // 40\n      if (m[1].match(/(?:^|\\.)__top_mark__$/)) {                                                                       // 41\n        // m[1] could be Object.__top_mark__ or something like that                                                    // 42\n        // depending on where exactly you put the function returned by                                                 // 43\n        // markTop                                                                                                     // 44\n        ret = [];                                                                                                      // 45\n        return;                                                                                                        // 46\n      }                                                                                                                // 47\n      if (m[1].match(/(?:^|\\.)__bottom_mark__$/)) {                                                                    // 48\n        stop = true;                                                                                                   // 49\n        return;                                                                                                        // 50\n      }                                                                                                                // 51\n      ret.push({                                                                                                       // 52\n        func: m[1],                                                                                                    // 53\n        file: m[5],                                                                                                    // 54\n        line: m[7] ? +m[7] : undefined,                                                                                // 55\n        column: m[9] ? +m[9] : undefined                                                                               // 56\n      });                                                                                                              // 57\n    } else if (m = frame.match(/^\\s*at\\s+(.+?)(:(\\d+))?(:(\\d+))?\\s*$/)) {                                              // 58\n      // \"    at /path/to/myfile.js:532:39\"                                                                            // 59\n      ret.push({                                                                                                       // 60\n        file: m[1],                                                                                                    // 61\n        line: m[3] ? +m[3] : undefined,                                                                                // 62\n        column: m[5] ? +m[5] : undefined                                                                               // 63\n      });                                                                                                              // 64\n    } else if (m = frame.match(/^\\s*-\\s*-\\s*-\\s*-\\s*-\\s*$/)) {                                                         // 65\n      // \"    - - - - -\"                                                                                               // 66\n      // This is something added when you throw an Error through a future. The                                         // 67\n      // stack above the dashes is the stack of the 'wait' call; the stack below                                       // 68\n      // is the stack inside the fiber where the Error is originally                                                   // 69\n      // constructed. Taking just the former seems good for now, but in the                                            // 70\n      // future we may want to sew them together (possibly in the opposite                                             // 71\n      // order?)                                                                                                       // 72\n      stop = true;                                                                                                     // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  return ret;                                                                                                          // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n// Decorator. Mark the point at which a stack trace returned by                                                        // 80\n// parse() should stop: no frames earlier than this point will be                                                      // 81\n// included in the parsed stack. Confusingly, in the argot of the                                                      // 82\n// times, you'd say that frames \"higher up\" than this or \"above\" this                                                  // 83\n// will not be returned, but you'd also say that those frames are \"at                                                  // 84\n// the bottom of the stack\". Frames below the bottom are the outer                                                     // 85\n// context of the framework running the user's code.                                                                   // 86\nparseStack.markBottom = function (f) {                                                                                 // 87\n  return function __bottom_mark__ () {                                                                                 // 88\n    return f.apply(this, arguments);                                                                                   // 89\n  };                                                                                                                   // 90\n};                                                                                                                     // 91\n                                                                                                                       // 92\n// Decorator. Mark the point at which a stack trace returned by                                                        // 93\n// parse() should begin: no frames later than this point will be                                                       // 94\n// included in the parsed stack. The opposite of markBottom().                                                         // 95\n// Frames above the top are helper functions defined by the                                                            // 96\n// framework and executed by user code whose internal behavior                                                         // 97\n// should not be exposed.                                                                                              // 98\nparseStack.markTop = function (f) {                                                                                    // 99\n  return function __top_mark__ () {                                                                                    // 100\n    return f.apply(this, arguments);                                                                                   // 101\n  };                                                                                                                   // 102\n};                                                                                                                     // 103\n                                                                                                                       // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/JasmineTestFramework.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals JasmineTestFramework: true */                                                                               // 1\n                                                                                                                       // 2\nJasmineTestFramework = function (options) {                                                                            // 3\n  if (!options || !options.name) {                                                                                     // 4\n    throw new Error('[JasmineTestFramework] Missing required field \"name\"')                                            // 5\n  }                                                                                                                    // 6\n                                                                                                                       // 7\n  if (!options.regex) {                                                                                                // 8\n    throw new Error('[JasmineTestFramework] Missing required field \"regex\"')                                           // 9\n  }                                                                                                                    // 10\n                                                                                                                       // 11\n  if (_.isUndefined(options.jasmineRequire)) {                                                                         // 12\n    throw new Error('[JasmineTestFramework] Missing required field \"jasmineRequire\"')                                  // 13\n  }                                                                                                                    // 14\n                                                                                                                       // 15\n  this.name = options.name                                                                                             // 16\n  this.regex = options.regex                                                                                           // 17\n  this.sampleTestGenerator = options.sampleTestGenerator                                                               // 18\n  this.logPrefix = options.logPrefix || '[' + this.name + '] '                                                         // 19\n  this.jasmineRequire = options.jasmineRequire                                                                         // 20\n                                                                                                                       // 21\n  // load jasmine-velocity reporter                                                                                    // 22\n  // [unit] mock packages                                                                                              // 23\n                                                                                                                       // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(JasmineTestFramework.prototype, {                                                                             // 27\n                                                                                                                       // 28\n  //////////////////////////////////////////////////////////////////////                                               // 29\n  // Public functions                                                                                                  // 30\n  //                                                                                                                   // 31\n                                                                                                                       // 32\n  runTests: function () {},                                                                                            // 33\n                                                                                                                       // 34\n  //////////////////////////////////////////////////////////////////////                                               // 35\n  // Protected functions                                                                                               // 36\n  //                                                                                                                   // 37\n                                                                                                                       // 38\n  registerWithVelocity: function () {                                                                                  // 39\n    Velocity.registerTestingFramework(this.name, {                                                                     // 40\n      regex: this.regex,                                                                                               // 41\n      sampleTestGenerator: this.sampleTestGenerator                                                                    // 42\n    })                                                                                                                 // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n})                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/JasmineInterface.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals JasmineInterface: true */                                                                                   // 1\n                                                                                                                       // 2\nvar jasmineRequire = Meteor.isServer ?                                                                                 // 3\n  Npm.require('jasmine-core') :                                                                                        // 4\n  window.jasmineRequire                                                                                                // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Object that will be directly put into the global context of the running                                             // 8\n * tests.                                                                                                              // 9\n *                                                                                                                     // 10\n * ex.                                                                                                                 // 11\n *     describe(...)   // rather than 'jasmine.describe'                                                               // 12\n *     jasmine.clock   // rather than just 'clock'                                                                     // 13\n *                                                                                                                     // 14\n * @class JasmineInterface                                                                                             // 15\n * @constructor                                                                                                        // 16\n */                                                                                                                    // 17\nJasmineInterface = function (options) {                                                                                // 18\n  if (!options || !options.jasmine) {                                                                                  // 19\n    throw new Error('[JasmineInterface] Missing required field \"jasmine\"')                                             // 20\n  }                                                                                                                    // 21\n                                                                                                                       // 22\n  var env = options.jasmine.getEnv()                                                                                   // 23\n                                                                                                                       // 24\n  _.extend(this, jasmineRequire.interface(options.jasmine, env))                                                       // 25\n                                                                                                                       // 26\n  var markBottom = function (func) {                                                                                   // 27\n    var boundFunction = parseStack.markBottom(func)                                                                    // 28\n    if (func.length > 0) {                                                                                             // 29\n      // Async test                                                                                                    // 30\n      return function (done) {                                                                                         // 31\n        return boundFunction.apply(this, arguments)                                                                    // 32\n      }                                                                                                                // 33\n    } else {                                                                                                           // 34\n      // Sync test                                                                                                     // 35\n      return function () {                                                                                             // 36\n        return boundFunction.call(this)                                                                                // 37\n      }                                                                                                                // 38\n    }                                                                                                                  // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  _.forEach(['describe', 'xdescribe', 'fdescribe', 'it', 'fit'], function (word) {                                     // 42\n    var originalFunction = this[word]                                                                                  // 43\n    this[word] = function (/* arguments */) {                                                                          // 44\n      arguments[1] = markBottom(arguments[1])                                                                          // 45\n      return originalFunction.apply(this, arguments)                                                                   // 46\n    }                                                                                                                  // 47\n  }, this)                                                                                                             // 48\n                                                                                                                       // 49\n  _.forEach(['beforeEach', 'afterEach', 'beforeAll', 'afterAll'], function (word) {                                    // 50\n    var originalFunction = this[word]                                                                                  // 51\n    this[word] = function (/* arguments */) {                                                                          // 52\n      arguments[0] = markBottom(arguments[0])                                                                          // 53\n      return originalFunction.apply(this, arguments)                                                                   // 54\n    }                                                                                                                  // 55\n  }, this)                                                                                                             // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/VelocityTestReporter.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global                                                                                                              // 1\n   VelocityTestReporter: true                                                                                          // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\n(function (Meteor) {                                                                                                   // 5\n  var noopTimer = {                                                                                                    // 6\n    start: function() {},                                                                                              // 7\n    elapsed: function() { return 0 }                                                                                   // 8\n  }                                                                                                                    // 9\n                                                                                                                       // 10\n  VelocityTestReporter = function VelocityTestReporter(options) {                                                      // 11\n    var self = this,                                                                                                   // 12\n      timer = options.timer || noopTimer,                                                                              // 13\n      ddpParentConnection = options.ddpParentConnection,                                                               // 14\n      ancestors = [],                                                                                                  // 15\n      _jasmineDone                                                                                                     // 16\n                                                                                                                       // 17\n    self.mode = options.mode                                                                                           // 18\n                                                                                                                       // 19\n    var saveTestResult = Meteor.bindEnvironment(function saveTestResult(test) {                                        // 20\n      var result = {                                                                                                   // 21\n        id: 'jasmine:' + self.mode + ' | ' + test.id,                                                                  // 22\n        //async: test.async,                                                                                           // 23\n        framework: options.framework,                                                                                  // 24\n        name: test.description,                                                                                        // 25\n        fullName: test.fullName,                                                                                       // 26\n        pending: test.status === 'pending',                                                                            // 27\n        result: test.status,                                                                                           // 28\n        duration: timer.elapsed(),                                                                                     // 29\n        //timeOut: test._timeout,                                                                                      // 30\n        //timedOut: test.timedOut,                                                                                     // 31\n        ancestors: ancestors,                                                                                          // 32\n        timestamp: new Date(),                                                                                         // 33\n        isClient: !!options.isClient,                                                                                  // 34\n        isServer: !!options.isServer                                                                                   // 35\n      }                                                                                                                // 36\n      if (test.failedExpectations[0]){                                                                                 // 37\n        var stack = removeStackTraceClutter(parseStack.parse({stack: filterStack(test.failedExpectations[0].stack)}))  // 38\n        var message = _.extend({                                                                                       // 39\n          message: test.failedExpectations[0].message,                                                                 // 40\n          stack: stack                                                                                                 // 41\n        }, stack[0])                                                                                                   // 42\n        result.failureMessage = message.message                                                                        // 43\n        result.failureStackTrace = formatMessage([message])                                                            // 44\n      }                                                                                                                // 45\n                                                                                                                       // 46\n      if (Meteor.isClient || process.env.IS_MIRROR) {                                                                  // 47\n        ddpParentConnection.call('velocity/reports/submit', result, function (error){                                  // 48\n          if (error){                                                                                                  // 49\n            console.error('ERROR WRITING TEST', error)                                                                 // 50\n          }                                                                                                            // 51\n        })                                                                                                             // 52\n      } else {                                                                                                         // 53\n        Meteor.call('velocity/reports/submit', result, function(error){                                                // 54\n          if (error){                                                                                                  // 55\n            console.error('ERROR WRITING TEST', error)                                                                 // 56\n          }                                                                                                            // 57\n        })                                                                                                             // 58\n      }                                                                                                                // 59\n    }, function (error) {                                                                                              // 60\n      console.error(error)                                                                                             // 61\n    })                                                                                                                 // 62\n                                                                                                                       // 63\n    if (Meteor.isClient) {                                                                                             // 64\n      _jasmineDone = function () {                                                                                     // 65\n        ddpParentConnection.call(                                                                                      // 66\n          'velocity/reports/completed',                                                                                // 67\n          {framework: options.framework},                                                                              // 68\n          function () {                                                                                                // 69\n            if (options.onComplete) {                                                                                  // 70\n              options.onComplete()                                                                                     // 71\n            }                                                                                                          // 72\n          }                                                                                                            // 73\n        )                                                                                                              // 74\n      }                                                                                                                // 75\n    } else if (Meteor.isServer) {                                                                                      // 76\n      _jasmineDone = Meteor.bindEnvironment(function jasmineDone() {                                                   // 77\n        if (options.onComplete) {                                                                                      // 78\n          options.onComplete()                                                                                         // 79\n        }                                                                                                              // 80\n      }, function (error) {                                                                                            // 81\n        console.error(error)                                                                                           // 82\n        if (options.onComplete) {                                                                                      // 83\n          options.onComplete()                                                                                         // 84\n        }                                                                                                              // 85\n      })                                                                                                               // 86\n    }                                                                                                                  // 87\n                                                                                                                       // 88\n    self.jasmineDone = _jasmineDone                                                                                    // 89\n                                                                                                                       // 90\n    self.suiteStarted = function(result) {                                                                             // 91\n      ancestors.unshift(result.description)                                                                            // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    self.suiteDone = function() {                                                                                      // 95\n      ancestors.shift()                                                                                                // 96\n    }                                                                                                                  // 97\n                                                                                                                       // 98\n    self.specStarted = function () {                                                                                   // 99\n      timer.start()                                                                                                    // 100\n    }                                                                                                                  // 101\n                                                                                                                       // 102\n    self.specDone = function(result) {                                                                                 // 103\n      var skipped = result.status === 'disabled' || result.status === 'pending'                                        // 104\n      if (!skipped) {                                                                                                  // 105\n        saveTestResult(result)                                                                                         // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    function filterStack(stack) {                                                                                      // 110\n      var filteredStack = stack.split('\\n').filter(function(stackLine) {                                               // 111\n        return stackLine.indexOf('/node_modules/jasmine-core/') === -1;                                                // 112\n      }).join('\\n');                                                                                                   // 113\n      return filteredStack;                                                                                            // 114\n    }                                                                                                                  // 115\n                                                                                                                       // 116\n    function removeStackTraceClutter(parsedStackTrace) {                                                               // 117\n      return _.chain(parsedStackTrace)                                                                                 // 118\n        .map(_.clone)                                                                                                  // 119\n        .map(function makeFileUrlRelative(frame) {                                                                     // 120\n          var rootUrl = Meteor.absoluteUrl();                                                                          // 121\n          if (frame.file.indexOf(rootUrl) === 0) {                                                                     // 122\n            frame.file = frame.file.substr(rootUrl.length);                                                            // 123\n          }                                                                                                            // 124\n          return frame;                                                                                                // 125\n        })                                                                                                             // 126\n        .map(function removeCacheBustingQuery(frame) {                                                                 // 127\n          frame.file = frame.file.replace(/\\?[a-z0-9]+$/, '');                                                         // 128\n          return frame;                                                                                                // 129\n        })                                                                                                             // 130\n        .map(function normalizePackageName(frame) {                                                                    // 131\n          frame.file = frame.file.replace('local-test:', '');                                                          // 132\n          return frame;                                                                                                // 133\n        })                                                                                                             // 134\n        .map(function removeUselessFunc(frame) {                                                                       // 135\n          if (frame.func === 'Object.<anonymous>') {                                                                   // 136\n            frame.func = null;                                                                                         // 137\n          }                                                                                                            // 138\n          return frame;                                                                                                // 139\n        })                                                                                                             // 140\n        .value();                                                                                                      // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    function formatMessage(messages) {                                                                                 // 144\n      var out = '';                                                                                                    // 145\n      var already = {};                                                                                                // 146\n      var indent = '';                                                                                                 // 147\n                                                                                                                       // 148\n      _.each(messages, function (message) {                                                                            // 149\n        var stack = message.stack || [];                                                                               // 150\n                                                                                                                       // 151\n        var line = indent;                                                                                             // 152\n        if (message.file) {                                                                                            // 153\n          line+= message.file;                                                                                         // 154\n          if (message.line) {                                                                                          // 155\n            line += \":\" + message.line;                                                                                // 156\n            if (message.column) {                                                                                      // 157\n              // XXX maybe exclude unless specifically requested (eg,                                                  // 158\n              // for an automated tool that's parsing our output?)                                                     // 159\n              line += \":\" + message.column;                                                                            // 160\n            }                                                                                                          // 161\n          }                                                                                                            // 162\n          line += \": \";                                                                                                // 163\n        } else {                                                                                                       // 164\n          // not sure how to display messages without a filenanme.. try this?                                          // 165\n          line += \"error: \";                                                                                           // 166\n        }                                                                                                              // 167\n        // XXX line wrapping would be nice..                                                                           // 168\n        line += message.message;                                                                                       // 169\n        if (message.func && stack.length <= 1) {                                                                       // 170\n          line += \" (at \" + message.func + \")\";                                                                        // 171\n        }                                                                                                              // 172\n        line += \"\\n\";                                                                                                  // 173\n                                                                                                                       // 174\n        if (stack.length > 1) {                                                                                        // 175\n          _.each(stack, function (frame) {                                                                             // 176\n            // If a nontrivial stack trace (more than just the file and line                                           // 177\n            // we already complained about), print it.                                                                 // 178\n            var where = \"\";                                                                                            // 179\n            if (frame.file) {                                                                                          // 180\n              where += frame.file;                                                                                     // 181\n              if (frame.line) {                                                                                        // 182\n                where += \":\" + frame.line;                                                                             // 183\n                if (frame.column) {                                                                                    // 184\n                  where += \":\" + frame.column;                                                                         // 185\n                }                                                                                                      // 186\n              }                                                                                                        // 187\n            }                                                                                                          // 188\n                                                                                                                       // 189\n            if (! frame.func && ! where)                                                                               // 190\n              return; // that's a pretty lame stack frame                                                              // 191\n                                                                                                                       // 192\n            line += \"  at \";                                                                                           // 193\n            if (frame.func)                                                                                            // 194\n              line += frame.func + \" (\" + where + \")\\n\";                                                               // 195\n            else                                                                                                       // 196\n              line += where + \"\\n\";                                                                                    // 197\n          });                                                                                                          // 198\n          line += \"\\n\";                                                                                                // 199\n        }                                                                                                              // 200\n                                                                                                                       // 201\n        // Deduplicate messages (only when exact duplicates, including stack)                                          // 202\n        if (! (line in already)) {                                                                                     // 203\n          out += line;                                                                                                 // 204\n          already[line] = true;                                                                                        // 205\n        }                                                                                                              // 206\n      });                                                                                                              // 207\n                                                                                                                       // 208\n      return out;                                                                                                      // 209\n    }                                                                                                                  // 210\n  }                                                                                                                    // 211\n                                                                                                                       // 212\n})(Meteor)                                                                                                             // 213\n                                                                                                                       // 214\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/client/integration/ClientIntegrationTestFramework.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals ClientIntegrationTestFramework: true */                                                                     // 1\n                                                                                                                       // 2\nClientIntegrationTestFramework = function (options) {                                                                  // 3\n  options = options || {}                                                                                              // 4\n                                                                                                                       // 5\n  _.defaults(options, {                                                                                                // 6\n    name: 'jasmine-client-integration',                                                                                // 7\n    regex: '^tests/jasmine/client/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',                        // 8\n    sampleTestGenerator: function () {                                                                                 // 9\n      return [                                                                                                         // 10\n        {                                                                                                              // 11\n          path: 'jasmine/client/integration/sample/spec/PlayerSpec.js',                                                // 12\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/PlayerSpec.js')                    // 13\n        },                                                                                                             // 14\n        {                                                                                                              // 15\n          path: 'jasmine/client/integration/sample/spec/SpecMatchers.js',                                              // 16\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/SpecMatchers.js')                  // 17\n        },                                                                                                             // 18\n        {                                                                                                              // 19\n          path: 'jasmine/client/integration/sample/src/Player.js',                                                     // 20\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Player.js')                         // 21\n        },                                                                                                             // 22\n        {                                                                                                              // 23\n          path: 'jasmine/client/integration/sample/src/Song.js',                                                       // 24\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Song.js')                           // 25\n        }                                                                                                              // 26\n      ]                                                                                                                // 27\n    },                                                                                                                 // 28\n    jasmineRequire: Meteor.isClient ? window.jasmineRequire : null                                                     // 29\n  })                                                                                                                   // 30\n                                                                                                                       // 31\n  JasmineTestFramework.call(this, options)                                                                             // 32\n                                                                                                                       // 33\n  if (Meteor.isClient) {                                                                                               // 34\n    this._setup()                                                                                                      // 35\n  }                                                                                                                    // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nClientIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)                               // 39\n                                                                                                                       // 40\n_.extend(ClientIntegrationTestFramework.prototype, {                                                                   // 41\n                                                                                                                       // 42\n  _setup: function () {                                                                                                // 43\n    this.jasmine = this.jasmineRequire.core(this.jasmineRequire)                                                       // 44\n    this.jasmineInterface = new JasmineInterface({jasmine: this.jasmine})                                              // 45\n    _.extend(window, this.jasmineInterface)                                                                            // 46\n  },                                                                                                                   // 47\n                                                                                                                       // 48\n  startMirror: function () {                                                                                           // 49\n    var self = this;                                                                                                   // 50\n    var mirrorStarter = new MirrorStarter(this.name)                                                                   // 51\n    var mirrorOptions = {}                                                                                             // 52\n                                                                                                                       // 53\n    if (isTestPackagesMode()) {                                                                                        // 54\n      mirrorStarter.startSelfMirror(mirrorOptions)                                                                     // 55\n                                                                                                                       // 56\n      process.on('message', Meteor.bindEnvironment(function (message) {                                                // 57\n        if (message && message.refresh === 'client') {                                                                 // 58\n          // Listen for message 'on-listening' that signals that the application has been rebuild                      // 59\n          // and is ready to serve                                                                                     // 60\n          // * This callback *must* be registered here in 'on-message-refresh-client'                                  // 61\n          // * because onListening is a short-lived registration that is removed after firing once                     // 62\n          WebApp.onListening(function () {                                                                             // 63\n            Meteor.call('velocity/reports/reset', {framework: self.name})                                              // 64\n          })                                                                                                           // 65\n        }                                                                                                              // 66\n      }))                                                                                                              // 67\n    } else {                                                                                                           // 68\n      _.extend(mirrorOptions, {                                                                                        // 69\n        port: this._getCustomPort(),                                                                                   // 70\n        testsPath: 'jasmine/client/integration'                                                                        // 71\n      })                                                                                                               // 72\n                                                                                                                       // 73\n      if (process.env.JASMINE_CLIENT_MIRROR_APP_PATH) {                                                                // 74\n        mirrorOptions.args = [                                                                                         // 75\n          '--test-app-path', process.env.JASMINE_CLIENT_MIRROR_APP_PATH                                                // 76\n        ]                                                                                                              // 77\n      }                                                                                                                // 78\n                                                                                                                       // 79\n      mirrorStarter.lazyStartMirror(mirrorOptions)                                                                     // 80\n    }                                                                                                                  // 81\n  },                                                                                                                   // 82\n                                                                                                                       // 83\n  _getCustomPort: function () {                                                                                        // 84\n    var customPort = parseInt(process.env.JASMINE_MIRROR_PORT, 10)                                                     // 85\n    if (!_.isNaN(customPort)) {                                                                                        // 86\n      return customPort                                                                                                // 87\n    }                                                                                                                  // 88\n  },                                                                                                                   // 89\n                                                                                                                       // 90\n  shouldRunTests: function (mirrorInfo) {                                                                              // 91\n    return mirrorInfo.isTestPackagesMode ||                                                                            // 92\n           (mirrorInfo.isMirror && mirrorInfo.framework === this.name)                                                 // 93\n  },                                                                                                                   // 94\n                                                                                                                       // 95\n  runTests: function () {                                                                                              // 96\n    var self = this                                                                                                    // 97\n                                                                                                                       // 98\n    Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {                                              // 99\n      if (error) {                                                                                                     // 100\n        throw error                                                                                                    // 101\n      } else if (self.shouldRunTests(mirrorInfo)) {                                                                    // 102\n        Meteor.defer(function() {                                                                                      // 103\n          log.info('Running Jasmine tests')                                                                            // 104\n                                                                                                                       // 105\n          var ddpConnection = mirrorInfo.isTestPackagesMode ?                                                          // 106\n            Meteor :                                                                                                   // 107\n            DDP.connect(mirrorInfo.parentUrl)                                                                          // 108\n          window.initJasmineJquery()                                                                                   // 109\n          self._executeClientTests(ddpConnection)                                                                      // 110\n        })                                                                                                             // 111\n      } else if (!mirrorInfo.isMirror && !self.inIframe()) {                                                           // 112\n        self.createMirrorIframe()                                                                                      // 113\n      }                                                                                                                // 114\n    })                                                                                                                 // 115\n  },                                                                                                                   // 116\n                                                                                                                       // 117\n  inIframe: function() {                                                                                               // 118\n    try {                                                                                                              // 119\n      return window.self !== window.top;                                                                               // 120\n    } catch (error) {                                                                                                  // 121\n      return true;                                                                                                     // 122\n    }                                                                                                                  // 123\n  },                                                                                                                   // 124\n                                                                                                                       // 125\n  createMirrorIframe: function () {                                                                                    // 126\n    var self = this                                                                                                    // 127\n    var iframeId = 'jasmine-mirror'                                                                                    // 128\n                                                                                                                       // 129\n    var getMirrorUrl = function (mirrorInfo) {                                                                         // 130\n      return mirrorInfo.rootUrl;                                                                                       // 131\n    }                                                                                                                  // 132\n                                                                                                                       // 133\n    var insertMirrorIframe = _.once(function (mirrorInfo) {                                                            // 134\n      var iframe = document.createElement('iframe')                                                                    // 135\n      iframe.id = iframeId                                                                                             // 136\n      iframe.src = getMirrorUrl(mirrorInfo);                                                                           // 137\n      // Make the iFrame invisible                                                                                     // 138\n      iframe.style.display = 'block'                                                                                   // 139\n      iframe.style.position = 'absolute'                                                                               // 140\n      iframe.style.width = 0                                                                                           // 141\n      iframe.style.height = 0                                                                                          // 142\n      iframe.style.border = 0                                                                                          // 143\n      document.body.appendChild(iframe)                                                                                // 144\n    })                                                                                                                 // 145\n                                                                                                                       // 146\n    var updateMirrorIframe = function (mirrorInfo) {                                                                   // 147\n      var iframe = document.getElementById(iframeId)                                                                   // 148\n      if (iframe) {                                                                                                    // 149\n        iframe.src = getMirrorUrl(mirrorInfo)                                                                          // 150\n      } else {                                                                                                         // 151\n        insertMirrorIframe(mirrorInfo)                                                                                 // 152\n      }                                                                                                                // 153\n    }                                                                                                                  // 154\n                                                                                                                       // 155\n    Tracker.autorun(function () {                                                                                      // 156\n      var mirror = VelocityMirrors.findOne(                                                                            // 157\n        {framework: self.name, state: 'ready'},                                                                        // 158\n        {fields: {state: 1, rootUrl: 1, lastModified: 1}}                                                              // 159\n      )                                                                                                                // 160\n      if (mirror) {                                                                                                    // 161\n        updateMirrorIframe(mirror)                                                                                     // 162\n      }                                                                                                                // 163\n    })                                                                                                                 // 164\n  },                                                                                                                   // 165\n                                                                                                                       // 166\n  _executeClientTests: function (ddpConnection) {                                                                      // 167\n    var self = this;                                                                                                   // 168\n                                                                                                                       // 169\n    window.ddpParentConnection = ddpConnection                                                                         // 170\n                                                                                                                       // 171\n    window.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})                                  // 172\n                                                                                                                       // 173\n    /**                                                                                                                // 174\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n     */                                                                                                                // 176\n    self.jasmineRequire.html(self.jasmine)                                                                             // 177\n                                                                                                                       // 178\n    /**                                                                                                                // 179\n     * Create the Jasmine environment. This is used to run all specs in a project.                                     // 180\n     */                                                                                                                // 181\n    var env = self.jasmine.getEnv()                                                                                    // 182\n                                                                                                                       // 183\n    /**                                                                                                                // 184\n     * ## Runner Parameters                                                                                            // 185\n     *                                                                                                                 // 186\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n     */                                                                                                                // 188\n                                                                                                                       // 189\n    var queryString = new self.jasmine.QueryString({                                                                   // 190\n      getWindowLocation: function () {                                                                                 // 191\n        return window.location                                                                                         // 192\n      }                                                                                                                // 193\n    })                                                                                                                 // 194\n                                                                                                                       // 195\n    var catchingExceptions = queryString.getParam('catch')                                                             // 196\n    env.catchExceptions(typeof catchingExceptions === 'undefined' ? true : catchingExceptions)                         // 197\n                                                                                                                       // 198\n    /**                                                                                                                // 199\n     * ## Reporters                                                                                                    // 200\n     */                                                                                                                // 201\n    var velocityReporter = new VelocityTestReporter({                                                                  // 202\n      mode: 'Client Integration',                                                                                      // 203\n      framework: self.name,                                                                                            // 204\n      env: env,                                                                                                        // 205\n      timer: new self.jasmine.Timer(),                                                                                 // 206\n      ddpParentConnection: window.ddpParentConnection,                                                                 // 207\n      isClient: true                                                                                                   // 208\n    })                                                                                                                 // 209\n                                                                                                                       // 210\n    /**                                                                                                                // 211\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n     */                                                                                                                // 213\n    env.addReporter(self.jasmineInterface.jsApiReporter)                                                               // 214\n    env.addReporter(velocityReporter)                                                                                  // 215\n                                                                                                                       // 216\n    /**                                                                                                                // 217\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.           // 218\n     */                                                                                                                // 219\n    var specFilter = new self.jasmine.HtmlSpecFilter({                                                                 // 220\n      filterString: function () {                                                                                      // 221\n        return queryString.getParam('spec')                                                                            // 222\n      }                                                                                                                // 223\n    })                                                                                                                 // 224\n                                                                                                                       // 225\n    env.specFilter = function (spec) {                                                                                 // 226\n      return specFilter.matches(spec.getFullName())                                                                    // 227\n    }                                                                                                                  // 228\n                                                                                                                       // 229\n    /**                                                                                                                // 230\n     * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n     */                                                                                                                // 232\n    window.setTimeout = window.setTimeout                                                                              // 233\n    window.setInterval = window.setInterval                                                                            // 234\n    window.clearTimeout = window.clearTimeout                                                                          // 235\n    window.clearInterval = window.clearInterval                                                                        // 236\n                                                                                                                       // 237\n    env.execute()                                                                                                      // 238\n  },                                                                                                                   // 239\n                                                                                                                       // 240\n  _reportResults: function () {                                                                                        // 241\n    Meteor.call('velocity/reports/completed', {framework: this.name})                                                  // 242\n  }                                                                                                                    // 243\n})                                                                                                                     // 244\n                                                                                                                       // 245\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/client/integration/clientsideSetup.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar testFramework = new ClientIntegrationTestFramework()                                                               // 1\n                                                                                                                       // 2\nMeteor.startup(function () {                                                                                           // 3\n  Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {                                                // 4\n    if (error) {                                                                                                       // 5\n      log.error('Could not get environment info', error);                                                              // 6\n      return;                                                                                                          // 7\n    }                                                                                                                  // 8\n                                                                                                                       // 9\n    if (mirrorInfo.isTestPackagesMode) {                                                                               // 10\n      var hasCompletedOnce = false;                                                                                    // 11\n      Tracker.autorun(function (computation) {                                                                         // 12\n        if (!computation.firstRun) {                                                                                   // 13\n          var clientAggregateReport = Velocity.Collections.AggregateReports                                            // 14\n            .findOne({name: testFramework.name});                                                                      // 15\n                                                                                                                       // 16\n          if (clientAggregateReport) {                                                                                 // 17\n            if (clientAggregateReport.result === 'completed') {                                                        // 18\n              hasCompletedOnce = true;                                                                                 // 19\n            } else if (hasCompletedOnce && clientAggregateReport.result === 'pending') {                               // 20\n              debugger;                                                                                                // 21\n              Reload._reload();                                                                                        // 22\n            }                                                                                                          // 23\n          }                                                                                                            // 24\n        }                                                                                                              // 25\n      });                                                                                                              // 26\n                                                                                                                       // 27\n      Tracker.autorun(function () {                                                                                    // 28\n        var serverAggregateReport = Velocity.Collections.AggregateReports                                              // 29\n          .findOne({name: 'jasmine-server-integration'});                                                              // 30\n                                                                                                                       // 31\n                                                                                                                       // 32\n        if (serverAggregateReport && serverAggregateReport.result === 'completed') {                                   // 33\n          testFramework.runTests();                                                                                    // 34\n        }                                                                                                              // 35\n      });                                                                                                              // 36\n    } else {                                                                                                           // 37\n      testFramework.runTests()                                                                                         // 38\n    }                                                                                                                  // 39\n  });                                                                                                                  // 40\n})                                                                                                                     // 41\n                                                                                                                       // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/client/integration/assets/jasmine-jquery.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nwindow.initJasmineJquery = _.once(function () {                                                                        // 1\n                                                                                                                       // 2\n  /*!                                                                                                                  // 3\n  Jasmine-jQuery: a set of jQuery helpers for Jasmine tests.                                                           // 4\n                                                                                                                       // 5\n  Version 2.1.0                                                                                                        // 6\n                                                                                                                       // 7\n  https://github.com/velesin/jasmine-jquery                                                                            // 8\n                                                                                                                       // 9\n  Copyright (c) 2010-2014 Wojciech Zawistowski, Travis Jeffery                                                         // 10\n                                                                                                                       // 11\n  Permission is hereby granted, free of charge, to any person obtaining                                                // 12\n  a copy of this software and associated documentation files (the                                                      // 13\n  \"Software\"), to deal in the Software without restriction, including                                                  // 14\n  without limitation the rights to use, copy, modify, merge, publish,                                                  // 15\n  distribute, sublicense, and/or sell copies of the Software, and to                                                   // 16\n  permit persons to whom the Software is furnished to do so, subject to                                                // 17\n  the following conditions:                                                                                            // 18\n                                                                                                                       // 19\n  The above copyright notice and this permission notice shall be                                                       // 20\n  included in all copies or substantial portions of the Software.                                                      // 21\n                                                                                                                       // 22\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,                                                      // 23\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                   // 24\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                                                                // 25\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE                                               // 26\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION                                               // 27\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION                                                // 28\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                      // 29\n  */                                                                                                                   // 30\n                                                                                                                       // 31\n  +function (window, jasmine, $) { \"use strict\";                                                                       // 32\n                                                                                                                       // 33\n    jasmine.spiedEventsKey = function (selector, eventName) {                                                          // 34\n      return [$(selector).selector, eventName].toString()                                                              // 35\n    }                                                                                                                  // 36\n                                                                                                                       // 37\n    jasmine.getFixtures = function () {                                                                                // 38\n      return jasmine.currentFixtures_ = jasmine.currentFixtures_ || new jasmine.Fixtures()                             // 39\n    }                                                                                                                  // 40\n                                                                                                                       // 41\n    jasmine.getStyleFixtures = function () {                                                                           // 42\n      return jasmine.currentStyleFixtures_ = jasmine.currentStyleFixtures_ || new jasmine.StyleFixtures()              // 43\n    }                                                                                                                  // 44\n                                                                                                                       // 45\n    jasmine.Fixtures = function () {                                                                                   // 46\n      this.containerId = 'jasmine-fixtures'                                                                            // 47\n      this.fixturesCache_ = {}                                                                                         // 48\n      this.fixturesPath = 'spec/javascripts/fixtures'                                                                  // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    jasmine.Fixtures.prototype.set = function (html) {                                                                 // 52\n      this.cleanUp()                                                                                                   // 53\n      return this.createContainer_(html)                                                                               // 54\n    }                                                                                                                  // 55\n                                                                                                                       // 56\n    jasmine.Fixtures.prototype.appendSet= function (html) {                                                            // 57\n      this.addToContainer_(html)                                                                                       // 58\n    }                                                                                                                  // 59\n                                                                                                                       // 60\n    jasmine.Fixtures.prototype.preload = function () {                                                                 // 61\n      this.read.apply(this, arguments)                                                                                 // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    jasmine.Fixtures.prototype.load = function () {                                                                    // 65\n      this.cleanUp()                                                                                                   // 66\n      this.createContainer_(this.read.apply(this, arguments))                                                          // 67\n    }                                                                                                                  // 68\n                                                                                                                       // 69\n    jasmine.Fixtures.prototype.appendLoad = function () {                                                              // 70\n      this.addToContainer_(this.read.apply(this, arguments))                                                           // 71\n    }                                                                                                                  // 72\n                                                                                                                       // 73\n    jasmine.Fixtures.prototype.read = function () {                                                                    // 74\n      var htmlChunks = []                                                                                              // 75\n        , fixtureUrls = arguments                                                                                      // 76\n                                                                                                                       // 77\n      for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {                          // 78\n        htmlChunks.push(this.getFixtureHtml_(fixtureUrls[urlIndex]))                                                   // 79\n      }                                                                                                                // 80\n                                                                                                                       // 81\n      return htmlChunks.join('')                                                                                       // 82\n    }                                                                                                                  // 83\n                                                                                                                       // 84\n    jasmine.Fixtures.prototype.clearCache = function () {                                                              // 85\n      this.fixturesCache_ = {}                                                                                         // 86\n    }                                                                                                                  // 87\n                                                                                                                       // 88\n    jasmine.Fixtures.prototype.cleanUp = function () {                                                                 // 89\n      $('#' + this.containerId).remove()                                                                               // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    jasmine.Fixtures.prototype.sandbox = function (attributes) {                                                       // 93\n      var attributesToSet = attributes || {}                                                                           // 94\n      return $('<div id=\"sandbox\" />').attr(attributesToSet)                                                           // 95\n    }                                                                                                                  // 96\n                                                                                                                       // 97\n    jasmine.Fixtures.prototype.createContainer_ = function (html) {                                                    // 98\n      var container = $('<div>')                                                                                       // 99\n        .attr('id', this.containerId)                                                                                  // 100\n        .html(html)                                                                                                    // 101\n                                                                                                                       // 102\n      $(document.body).append(container)                                                                               // 103\n      return container                                                                                                 // 104\n    }                                                                                                                  // 105\n                                                                                                                       // 106\n    jasmine.Fixtures.prototype.addToContainer_ = function (html){                                                      // 107\n      var container = $(document.body).find('#'+this.containerId).append(html)                                         // 108\n                                                                                                                       // 109\n      if (!container.length) {                                                                                         // 110\n        this.createContainer_(html)                                                                                    // 111\n      }                                                                                                                // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    jasmine.Fixtures.prototype.getFixtureHtml_ = function (url) {                                                      // 115\n      if (typeof this.fixturesCache_[url] === 'undefined') {                                                           // 116\n        this.loadFixtureIntoCache_(url)                                                                                // 117\n      }                                                                                                                // 118\n      return this.fixturesCache_[url]                                                                                  // 119\n    }                                                                                                                  // 120\n                                                                                                                       // 121\n    jasmine.Fixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {                                        // 122\n      var self = this                                                                                                  // 123\n        , url = this.makeFixtureUrl_(relativeUrl)                                                                      // 124\n        , htmlText = ''                                                                                                // 125\n        , request = $.ajax({                                                                                           // 126\n          async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded             // 127\n          cache: false,                                                                                                // 128\n          url: url,                                                                                                    // 129\n          dataType: 'html',                                                                                            // 130\n          success: function (data, status, $xhr) {                                                                     // 131\n            htmlText = $xhr.responseText                                                                               // 132\n          }                                                                                                            // 133\n        }).fail(function ($xhr, status, err) {                                                                         // 134\n          throw new Error('Fixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n        })                                                                                                             // 136\n                                                                                                                       // 137\n      var scripts = $($.parseHTML(htmlText, true)).find('script[src]') || [];                                          // 138\n                                                                                                                       // 139\n      scripts.each(function(){                                                                                         // 140\n        $.ajax({                                                                                                       // 141\n          async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded             // 142\n          cache: false,                                                                                                // 143\n          dataType: 'script',                                                                                          // 144\n          url: $(this).attr('src'),                                                                                    // 145\n          success: function (data, status, $xhr) {                                                                     // 146\n            htmlText += '<script>' + $xhr.responseText + '</script>'                                                   // 147\n          },                                                                                                           // 148\n          error: function ($xhr, status, err) {                                                                        // 149\n            throw new Error('Script could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n          }                                                                                                            // 151\n        });                                                                                                            // 152\n      })                                                                                                               // 153\n                                                                                                                       // 154\n      self.fixturesCache_[relativeUrl] = htmlText;                                                                     // 155\n    }                                                                                                                  // 156\n                                                                                                                       // 157\n    jasmine.Fixtures.prototype.makeFixtureUrl_ = function (relativeUrl){                                               // 158\n      return this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl   // 159\n    }                                                                                                                  // 160\n                                                                                                                       // 161\n    jasmine.Fixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {                                 // 162\n      return this[methodName].apply(this, passedArguments)                                                             // 163\n    }                                                                                                                  // 164\n                                                                                                                       // 165\n                                                                                                                       // 166\n    jasmine.StyleFixtures = function () {                                                                              // 167\n      this.fixturesCache_ = {}                                                                                         // 168\n      this.fixturesNodes_ = []                                                                                         // 169\n      this.fixturesPath = 'spec/javascripts/fixtures'                                                                  // 170\n    }                                                                                                                  // 171\n                                                                                                                       // 172\n    jasmine.StyleFixtures.prototype.set = function (css) {                                                             // 173\n      this.cleanUp()                                                                                                   // 174\n      this.createStyle_(css)                                                                                           // 175\n    }                                                                                                                  // 176\n                                                                                                                       // 177\n    jasmine.StyleFixtures.prototype.appendSet = function (css) {                                                       // 178\n      this.createStyle_(css)                                                                                           // 179\n    }                                                                                                                  // 180\n                                                                                                                       // 181\n    jasmine.StyleFixtures.prototype.preload = function () {                                                            // 182\n      this.read_.apply(this, arguments)                                                                                // 183\n    }                                                                                                                  // 184\n                                                                                                                       // 185\n    jasmine.StyleFixtures.prototype.load = function () {                                                               // 186\n      this.cleanUp()                                                                                                   // 187\n      this.createStyle_(this.read_.apply(this, arguments))                                                             // 188\n    }                                                                                                                  // 189\n                                                                                                                       // 190\n    jasmine.StyleFixtures.prototype.appendLoad = function () {                                                         // 191\n      this.createStyle_(this.read_.apply(this, arguments))                                                             // 192\n    }                                                                                                                  // 193\n                                                                                                                       // 194\n    jasmine.StyleFixtures.prototype.cleanUp = function () {                                                            // 195\n      while(this.fixturesNodes_.length) {                                                                              // 196\n        this.fixturesNodes_.pop().remove()                                                                             // 197\n      }                                                                                                                // 198\n    }                                                                                                                  // 199\n                                                                                                                       // 200\n    jasmine.StyleFixtures.prototype.createStyle_ = function (html) {                                                   // 201\n      var styleText = $('<div></div>').html(html).text()                                                               // 202\n        , style = $('<style>' + styleText + '</style>')                                                                // 203\n                                                                                                                       // 204\n      this.fixturesNodes_.push(style)                                                                                  // 205\n      $('head').append(style)                                                                                          // 206\n    }                                                                                                                  // 207\n                                                                                                                       // 208\n    jasmine.StyleFixtures.prototype.clearCache = jasmine.Fixtures.prototype.clearCache                                 // 209\n    jasmine.StyleFixtures.prototype.read_ = jasmine.Fixtures.prototype.read                                            // 210\n    jasmine.StyleFixtures.prototype.getFixtureHtml_ = jasmine.Fixtures.prototype.getFixtureHtml_                       // 211\n    jasmine.StyleFixtures.prototype.loadFixtureIntoCache_ = jasmine.Fixtures.prototype.loadFixtureIntoCache_           // 212\n    jasmine.StyleFixtures.prototype.makeFixtureUrl_ = jasmine.Fixtures.prototype.makeFixtureUrl_                       // 213\n    jasmine.StyleFixtures.prototype.proxyCallTo_ = jasmine.Fixtures.prototype.proxyCallTo_                             // 214\n                                                                                                                       // 215\n    jasmine.getJSONFixtures = function () {                                                                            // 216\n      return jasmine.currentJSONFixtures_ = jasmine.currentJSONFixtures_ || new jasmine.JSONFixtures()                 // 217\n    }                                                                                                                  // 218\n                                                                                                                       // 219\n    jasmine.JSONFixtures = function () {                                                                               // 220\n      this.fixturesCache_ = {}                                                                                         // 221\n      this.fixturesPath = 'spec/javascripts/fixtures/json'                                                             // 222\n    }                                                                                                                  // 223\n                                                                                                                       // 224\n    jasmine.JSONFixtures.prototype.load = function () {                                                                // 225\n      this.read.apply(this, arguments)                                                                                 // 226\n      return this.fixturesCache_                                                                                       // 227\n    }                                                                                                                  // 228\n                                                                                                                       // 229\n    jasmine.JSONFixtures.prototype.read = function () {                                                                // 230\n      var fixtureUrls = arguments                                                                                      // 231\n                                                                                                                       // 232\n      for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {                          // 233\n        this.getFixtureData_(fixtureUrls[urlIndex])                                                                    // 234\n      }                                                                                                                // 235\n                                                                                                                       // 236\n      return this.fixturesCache_                                                                                       // 237\n    }                                                                                                                  // 238\n                                                                                                                       // 239\n    jasmine.JSONFixtures.prototype.clearCache = function () {                                                          // 240\n      this.fixturesCache_ = {}                                                                                         // 241\n    }                                                                                                                  // 242\n                                                                                                                       // 243\n    jasmine.JSONFixtures.prototype.getFixtureData_ = function (url) {                                                  // 244\n      if (!this.fixturesCache_[url]) this.loadFixtureIntoCache_(url)                                                   // 245\n      return this.fixturesCache_[url]                                                                                  // 246\n    }                                                                                                                  // 247\n                                                                                                                       // 248\n    jasmine.JSONFixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {                                    // 249\n      var self = this                                                                                                  // 250\n        , url = this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl\n                                                                                                                       // 252\n      $.ajax({                                                                                                         // 253\n        async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded               // 254\n        cache: false,                                                                                                  // 255\n        dataType: 'json',                                                                                              // 256\n        url: url,                                                                                                      // 257\n        success: function (data) {                                                                                     // 258\n          self.fixturesCache_[relativeUrl] = data                                                                      // 259\n        },                                                                                                             // 260\n        error: function ($xhr, status, err) {                                                                          // 261\n          throw new Error('JSONFixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n        }                                                                                                              // 263\n      })                                                                                                               // 264\n    }                                                                                                                  // 265\n                                                                                                                       // 266\n    jasmine.JSONFixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {                             // 267\n      return this[methodName].apply(this, passedArguments)                                                             // 268\n    }                                                                                                                  // 269\n                                                                                                                       // 270\n    jasmine.jQuery = function () {}                                                                                    // 271\n                                                                                                                       // 272\n    jasmine.jQuery.browserTagCaseIndependentHtml = function (html) {                                                   // 273\n      return $('<div/>').append(html).html()                                                                           // 274\n    }                                                                                                                  // 275\n                                                                                                                       // 276\n    jasmine.jQuery.elementToString = function (element) {                                                              // 277\n      return $(element).map(function () { return this.outerHTML; }).toArray().join(', ')                               // 278\n    }                                                                                                                  // 279\n                                                                                                                       // 280\n    var data = {                                                                                                       // 281\n      spiedEvents: {}                                                                                                  // 282\n      , handlers:    []                                                                                                // 283\n    }                                                                                                                  // 284\n                                                                                                                       // 285\n    jasmine.jQuery.events = {                                                                                          // 286\n      spyOn: function (selector, eventName) {                                                                          // 287\n        var handler = function (e) {                                                                                   // 288\n          var calls = (typeof data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] !== 'undefined') ? data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0\n          data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] = {                                            // 290\n            args: jasmine.util.argsToArray(arguments),                                                                 // 291\n            calls: ++calls                                                                                             // 292\n          }                                                                                                            // 293\n        }                                                                                                              // 294\n                                                                                                                       // 295\n        $(selector).on(eventName, handler)                                                                             // 296\n        data.handlers.push(handler)                                                                                    // 297\n                                                                                                                       // 298\n        return {                                                                                                       // 299\n          selector: selector,                                                                                          // 300\n          eventName: eventName,                                                                                        // 301\n          handler: handler,                                                                                            // 302\n          reset: function (){                                                                                          // 303\n            delete data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]                                       // 304\n          },                                                                                                           // 305\n          calls: {                                                                                                     // 306\n            count: function () {                                                                                       // 307\n              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?                                   // 308\n                data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0;                               // 309\n            },                                                                                                         // 310\n            any: function () {                                                                                         // 311\n              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?                                   // 312\n                !!data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : false;                         // 313\n            }                                                                                                          // 314\n          }                                                                                                            // 315\n        }                                                                                                              // 316\n      },                                                                                                               // 317\n                                                                                                                       // 318\n      args: function (selector, eventName) {                                                                           // 319\n        var actualArgs = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].args                            // 320\n                                                                                                                       // 321\n        if (!actualArgs) {                                                                                             // 322\n          throw \"There is no spy for \" + eventName + \" on \" + selector.toString() + \". Make sure to create a spy using spyOnEvent.\"\n        }                                                                                                              // 324\n                                                                                                                       // 325\n        return actualArgs                                                                                              // 326\n      },                                                                                                               // 327\n                                                                                                                       // 328\n      wasTriggered: function (selector, eventName) {                                                                   // 329\n        return !!(data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)])                                       // 330\n      },                                                                                                               // 331\n                                                                                                                       // 332\n      wasTriggeredWith: function (selector, eventName, expectedArgs, util, customEqualityTesters) {                    // 333\n        var actualArgs = jasmine.jQuery.events.args(selector, eventName).slice(1)                                      // 334\n                                                                                                                       // 335\n        if (Object.prototype.toString.call(expectedArgs) !== '[object Array]')                                         // 336\n          actualArgs = actualArgs[0]                                                                                   // 337\n                                                                                                                       // 338\n        return util.equals(actualArgs, expectedArgs, customEqualityTesters)                                            // 339\n      },                                                                                                               // 340\n                                                                                                                       // 341\n      wasPrevented: function (selector, eventName) {                                                                   // 342\n        var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]                                 // 343\n          , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args                                       // 344\n          , e = args ? args[0] : undefined                                                                             // 345\n                                                                                                                       // 346\n        return e && e.isDefaultPrevented()                                                                             // 347\n      },                                                                                                               // 348\n                                                                                                                       // 349\n      wasStopped: function (selector, eventName) {                                                                     // 350\n        var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]                                 // 351\n          , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args                                       // 352\n          , e = args ? args[0] : undefined                                                                             // 353\n                                                                                                                       // 354\n        return e && e.isPropagationStopped()                                                                           // 355\n      },                                                                                                               // 356\n                                                                                                                       // 357\n      cleanUp: function () {                                                                                           // 358\n        data.spiedEvents = {}                                                                                          // 359\n        data.handlers    = []                                                                                          // 360\n      }                                                                                                                // 361\n    }                                                                                                                  // 362\n                                                                                                                       // 363\n    var hasProperty = function (actualValue, expectedValue) {                                                          // 364\n      if (expectedValue === undefined)                                                                                 // 365\n        return actualValue !== undefined                                                                               // 366\n                                                                                                                       // 367\n      return actualValue === expectedValue                                                                             // 368\n    }                                                                                                                  // 369\n                                                                                                                       // 370\n    beforeEach(function () {                                                                                           // 371\n      jasmine.addMatchers({                                                                                            // 372\n        toHaveClass: function () {                                                                                     // 373\n          return {                                                                                                     // 374\n            compare: function (actual, className) {                                                                    // 375\n              return { pass: $(actual).hasClass(className) }                                                           // 376\n            }                                                                                                          // 377\n          }                                                                                                            // 378\n        },                                                                                                             // 379\n                                                                                                                       // 380\n        toHaveCss: function () {                                                                                       // 381\n          return {                                                                                                     // 382\n            compare: function (actual, css) {                                                                          // 383\n              for (var prop in css){                                                                                   // 384\n                var value = css[prop]                                                                                  // 385\n                // see issue #147 on gh                                                                                // 386\n                  ;if (value === 'auto' && $(actual).get(0).style[prop] === 'auto') continue                           // 387\n                if ($(actual).css(prop) !== value) return { pass: false }                                              // 388\n              }                                                                                                        // 389\n              return { pass: true }                                                                                    // 390\n            }                                                                                                          // 391\n          }                                                                                                            // 392\n        },                                                                                                             // 393\n                                                                                                                       // 394\n        toBeVisible: function () {                                                                                     // 395\n          return {                                                                                                     // 396\n            compare: function (actual) {                                                                               // 397\n              return { pass: $(actual).is(':visible') }                                                                // 398\n            }                                                                                                          // 399\n          }                                                                                                            // 400\n        },                                                                                                             // 401\n                                                                                                                       // 402\n        toBeHidden: function () {                                                                                      // 403\n          return {                                                                                                     // 404\n            compare: function (actual) {                                                                               // 405\n              return { pass: $(actual).is(':hidden') }                                                                 // 406\n            }                                                                                                          // 407\n          }                                                                                                            // 408\n        },                                                                                                             // 409\n                                                                                                                       // 410\n        toBeSelected: function () {                                                                                    // 411\n          return {                                                                                                     // 412\n            compare: function (actual) {                                                                               // 413\n              return { pass: $(actual).is(':selected') }                                                               // 414\n            }                                                                                                          // 415\n          }                                                                                                            // 416\n        },                                                                                                             // 417\n                                                                                                                       // 418\n        toBeChecked: function () {                                                                                     // 419\n          return {                                                                                                     // 420\n            compare: function (actual) {                                                                               // 421\n              return { pass: $(actual).is(':checked') }                                                                // 422\n            }                                                                                                          // 423\n          }                                                                                                            // 424\n        },                                                                                                             // 425\n                                                                                                                       // 426\n        toBeEmpty: function () {                                                                                       // 427\n          return {                                                                                                     // 428\n            compare: function (actual) {                                                                               // 429\n              return { pass: $(actual).is(':empty') }                                                                  // 430\n            }                                                                                                          // 431\n          }                                                                                                            // 432\n        },                                                                                                             // 433\n                                                                                                                       // 434\n        toBeInDOM: function () {                                                                                       // 435\n          return {                                                                                                     // 436\n            compare: function (actual) {                                                                               // 437\n              return { pass: $.contains(document.documentElement, $(actual)[0]) }                                      // 438\n            }                                                                                                          // 439\n          }                                                                                                            // 440\n        },                                                                                                             // 441\n                                                                                                                       // 442\n        toExist: function () {                                                                                         // 443\n          return {                                                                                                     // 444\n            compare: function (actual) {                                                                               // 445\n              return { pass: $(actual).length }                                                                        // 446\n            }                                                                                                          // 447\n          }                                                                                                            // 448\n        },                                                                                                             // 449\n                                                                                                                       // 450\n        toHaveLength: function () {                                                                                    // 451\n          return {                                                                                                     // 452\n            compare: function (actual, length) {                                                                       // 453\n              return { pass: $(actual).length === length }                                                             // 454\n            }                                                                                                          // 455\n          }                                                                                                            // 456\n        },                                                                                                             // 457\n                                                                                                                       // 458\n        toHaveAttr: function () {                                                                                      // 459\n          return {                                                                                                     // 460\n            compare: function (actual, attributeName, expectedAttributeValue) {                                        // 461\n              return { pass: hasProperty($(actual).attr(attributeName), expectedAttributeValue) }                      // 462\n            }                                                                                                          // 463\n          }                                                                                                            // 464\n        },                                                                                                             // 465\n                                                                                                                       // 466\n        toHaveProp: function () {                                                                                      // 467\n          return {                                                                                                     // 468\n            compare: function (actual, propertyName, expectedPropertyValue) {                                          // 469\n              return { pass: hasProperty($(actual).prop(propertyName), expectedPropertyValue) }                        // 470\n            }                                                                                                          // 471\n          }                                                                                                            // 472\n        },                                                                                                             // 473\n                                                                                                                       // 474\n        toHaveId: function () {                                                                                        // 475\n          return {                                                                                                     // 476\n            compare: function (actual, id) {                                                                           // 477\n              return { pass: $(actual).attr('id') == id }                                                              // 478\n            }                                                                                                          // 479\n          }                                                                                                            // 480\n        },                                                                                                             // 481\n                                                                                                                       // 482\n        toHaveHtml: function () {                                                                                      // 483\n          return {                                                                                                     // 484\n            compare: function (actual, html) {                                                                         // 485\n              return { pass: $(actual).html() == jasmine.jQuery.browserTagCaseIndependentHtml(html) }                  // 486\n            }                                                                                                          // 487\n          }                                                                                                            // 488\n        },                                                                                                             // 489\n                                                                                                                       // 490\n        toContainHtml: function () {                                                                                   // 491\n          return {                                                                                                     // 492\n            compare: function (actual, html) {                                                                         // 493\n              var actualHtml = $(actual).html()                                                                        // 494\n                , expectedHtml = jasmine.jQuery.browserTagCaseIndependentHtml(html)                                    // 495\n                                                                                                                       // 496\n              return { pass: (actualHtml.indexOf(expectedHtml) >= 0) }                                                 // 497\n            }                                                                                                          // 498\n          }                                                                                                            // 499\n        },                                                                                                             // 500\n                                                                                                                       // 501\n        toHaveText: function () {                                                                                      // 502\n          return {                                                                                                     // 503\n            compare: function (actual, text) {                                                                         // 504\n              var actualText = $(actual).text()                                                                        // 505\n              var trimmedText = $.trim(actualText)                                                                     // 506\n                                                                                                                       // 507\n              if (text && $.isFunction(text.test)) {                                                                   // 508\n                return { pass: text.test(actualText) || text.test(trimmedText) }                                       // 509\n              } else {                                                                                                 // 510\n                return { pass: (actualText == text || trimmedText == text) }                                           // 511\n              }                                                                                                        // 512\n            }                                                                                                          // 513\n          }                                                                                                            // 514\n        },                                                                                                             // 515\n                                                                                                                       // 516\n        toContainText: function () {                                                                                   // 517\n          return {                                                                                                     // 518\n            compare: function (actual, text) {                                                                         // 519\n              var trimmedText = $.trim($(actual).text())                                                               // 520\n                                                                                                                       // 521\n              if (text && $.isFunction(text.test)) {                                                                   // 522\n                return { pass: text.test(trimmedText) }                                                                // 523\n              } else {                                                                                                 // 524\n                return { pass: trimmedText.indexOf(text) != -1 }                                                       // 525\n              }                                                                                                        // 526\n            }                                                                                                          // 527\n          }                                                                                                            // 528\n        },                                                                                                             // 529\n                                                                                                                       // 530\n        toHaveValue: function () {                                                                                     // 531\n          return {                                                                                                     // 532\n            compare: function (actual, value) {                                                                        // 533\n              return { pass: $(actual).val() === value }                                                               // 534\n            }                                                                                                          // 535\n          }                                                                                                            // 536\n        },                                                                                                             // 537\n                                                                                                                       // 538\n        toHaveData: function () {                                                                                      // 539\n          return {                                                                                                     // 540\n            compare: function (actual, key, expectedValue) {                                                           // 541\n              return { pass: hasProperty($(actual).data(key), expectedValue) }                                         // 542\n            }                                                                                                          // 543\n          }                                                                                                            // 544\n        },                                                                                                             // 545\n                                                                                                                       // 546\n        toContainElement: function () {                                                                                // 547\n          return {                                                                                                     // 548\n            compare: function (actual, selector) {                                                                     // 549\n              return { pass: $(actual).find(selector).length }                                                         // 550\n            }                                                                                                          // 551\n          }                                                                                                            // 552\n        },                                                                                                             // 553\n                                                                                                                       // 554\n        toBeMatchedBy: function () {                                                                                   // 555\n          return {                                                                                                     // 556\n            compare: function (actual, selector) {                                                                     // 557\n              return { pass: $(actual).filter(selector).length }                                                       // 558\n            }                                                                                                          // 559\n          }                                                                                                            // 560\n        },                                                                                                             // 561\n                                                                                                                       // 562\n        toBeDisabled: function () {                                                                                    // 563\n          return {                                                                                                     // 564\n            compare: function (actual, selector) {                                                                     // 565\n              return { pass: $(actual).is(':disabled') }                                                               // 566\n            }                                                                                                          // 567\n          }                                                                                                            // 568\n        },                                                                                                             // 569\n                                                                                                                       // 570\n        toBeFocused: function (selector) {                                                                             // 571\n          return {                                                                                                     // 572\n            compare: function (actual, selector) {                                                                     // 573\n              return { pass: $(actual)[0] === $(actual)[0].ownerDocument.activeElement }                               // 574\n            }                                                                                                          // 575\n          }                                                                                                            // 576\n        },                                                                                                             // 577\n                                                                                                                       // 578\n        toHandle: function () {                                                                                        // 579\n          return {                                                                                                     // 580\n            compare: function (actual, event) {                                                                        // 581\n              if ( !actual || actual.length === 0 ) return { pass: false };                                            // 582\n              var events = $._data($(actual).get(0), \"events\")                                                         // 583\n                                                                                                                       // 584\n              if (!events || !event || typeof event !== \"string\") {                                                    // 585\n                return { pass: false }                                                                                 // 586\n              }                                                                                                        // 587\n                                                                                                                       // 588\n              var namespaces = event.split(\".\")                                                                        // 589\n                , eventType = namespaces.shift()                                                                       // 590\n                , sortedNamespaces = namespaces.slice(0).sort()                                                        // 591\n                , namespaceRegExp = new RegExp(\"(^|\\\\.)\" + sortedNamespaces.join(\"\\\\.(?:.*\\\\.)?\") + \"(\\\\.|$)\")         // 592\n                                                                                                                       // 593\n              if (events[eventType] && namespaces.length) {                                                            // 594\n                for (var i = 0; i < events[eventType].length; i++) {                                                   // 595\n                  var namespace = events[eventType][i].namespace                                                       // 596\n                                                                                                                       // 597\n                  if (namespaceRegExp.test(namespace))                                                                 // 598\n                    return { pass: true }                                                                              // 599\n                }                                                                                                      // 600\n              } else {                                                                                                 // 601\n                return { pass: (events[eventType] && events[eventType].length > 0) }                                   // 602\n              }                                                                                                        // 603\n                                                                                                                       // 604\n              return { pass: false }                                                                                   // 605\n            }                                                                                                          // 606\n          }                                                                                                            // 607\n        },                                                                                                             // 608\n                                                                                                                       // 609\n        toHandleWith: function () {                                                                                    // 610\n          return {                                                                                                     // 611\n            compare: function (actual, eventName, eventHandler) {                                                      // 612\n              if ( !actual || actual.length === 0 ) return { pass: false };                                            // 613\n              var normalizedEventName = eventName.split('.')[0]                                                        // 614\n                , stack = $._data($(actual).get(0), \"events\")[normalizedEventName]                                     // 615\n                                                                                                                       // 616\n              for (var i = 0; i < stack.length; i++) {                                                                 // 617\n                if (stack[i].handler == eventHandler) return { pass: true }                                            // 618\n              }                                                                                                        // 619\n                                                                                                                       // 620\n              return { pass: false }                                                                                   // 621\n            }                                                                                                          // 622\n          }                                                                                                            // 623\n        },                                                                                                             // 624\n                                                                                                                       // 625\n        toHaveBeenTriggeredOn: function () {                                                                           // 626\n          return {                                                                                                     // 627\n            compare: function (actual, selector) {                                                                     // 628\n              var result = { pass: jasmine.jQuery.events.wasTriggered(selector, actual) }                              // 629\n                                                                                                                       // 630\n              result.message = result.pass ?                                                                           // 631\n              \"Expected event \" + $(actual) + \" not to have been triggered on \" + selector :                           // 632\n              \"Expected event \" + $(actual) + \" to have been triggered on \" + selector                                 // 633\n                                                                                                                       // 634\n              return result;                                                                                           // 635\n            }                                                                                                          // 636\n          }                                                                                                            // 637\n        },                                                                                                             // 638\n                                                                                                                       // 639\n        toHaveBeenTriggered: function (){                                                                              // 640\n          return {                                                                                                     // 641\n            compare: function (actual) {                                                                               // 642\n              var eventName = actual.eventName                                                                         // 643\n                , selector = actual.selector                                                                           // 644\n                , result = { pass: jasmine.jQuery.events.wasTriggered(selector, eventName) }                           // 645\n                                                                                                                       // 646\n              result.message = result.pass ?                                                                           // 647\n              \"Expected event \" + eventName + \" not to have been triggered on \" + selector :                           // 648\n              \"Expected event \" + eventName + \" to have been triggered on \" + selector                                 // 649\n                                                                                                                       // 650\n              return result                                                                                            // 651\n            }                                                                                                          // 652\n          }                                                                                                            // 653\n        },                                                                                                             // 654\n                                                                                                                       // 655\n        toHaveBeenTriggeredOnAndWith: function (j$, customEqualityTesters) {                                           // 656\n          return {                                                                                                     // 657\n            compare: function (actual, selector, expectedArgs) {                                                       // 658\n              var wasTriggered = jasmine.jQuery.events.wasTriggered(selector, actual)                                  // 659\n                , result = { pass: wasTriggered && jasmine.jQuery.events.wasTriggeredWith(selector, actual, expectedArgs, j$, customEqualityTesters) }\n                                                                                                                       // 661\n              if (wasTriggered) {                                                                                      // 662\n                var actualArgs = jasmine.jQuery.events.args(selector, actual, expectedArgs)[1]                         // 663\n                result.message = result.pass ?                                                                         // 664\n                \"Expected event \" + actual + \" not to have been triggered with \" + jasmine.pp(expectedArgs) + \" but it was triggered with \" + jasmine.pp(actualArgs) :\n                \"Expected event \" + actual + \" to have been triggered with \" + jasmine.pp(expectedArgs) + \"  but it was triggered with \" + jasmine.pp(actualArgs)\n                                                                                                                       // 667\n              } else {                                                                                                 // 668\n                // todo check on this                                                                                  // 669\n                result.message = result.pass ?                                                                         // 670\n                \"Expected event \" + actual + \" not to have been triggered on \" + selector :                            // 671\n                \"Expected event \" + actual + \" to have been triggered on \" + selector                                  // 672\n              }                                                                                                        // 673\n                                                                                                                       // 674\n              return result                                                                                            // 675\n            }                                                                                                          // 676\n          }                                                                                                            // 677\n        },                                                                                                             // 678\n                                                                                                                       // 679\n        toHaveBeenPreventedOn: function () {                                                                           // 680\n          return {                                                                                                     // 681\n            compare: function (actual, selector) {                                                                     // 682\n              var result = { pass: jasmine.jQuery.events.wasPrevented(selector, actual) }                              // 683\n                                                                                                                       // 684\n              result.message = result.pass ?                                                                           // 685\n              \"Expected event \" + actual + \" not to have been prevented on \" + selector :                              // 686\n              \"Expected event \" + actual + \" to have been prevented on \" + selector                                    // 687\n                                                                                                                       // 688\n              return result                                                                                            // 689\n            }                                                                                                          // 690\n          }                                                                                                            // 691\n        },                                                                                                             // 692\n                                                                                                                       // 693\n        toHaveBeenPrevented: function () {                                                                             // 694\n          return {                                                                                                     // 695\n            compare: function (actual) {                                                                               // 696\n              var eventName = actual.eventName                                                                         // 697\n                , selector = actual.selector                                                                           // 698\n                , result = { pass: jasmine.jQuery.events.wasPrevented(selector, eventName) }                           // 699\n                                                                                                                       // 700\n              result.message = result.pass ?                                                                           // 701\n              \"Expected event \" + eventName + \" not to have been prevented on \" + selector :                           // 702\n              \"Expected event \" + eventName + \" to have been prevented on \" + selector                                 // 703\n                                                                                                                       // 704\n              return result                                                                                            // 705\n            }                                                                                                          // 706\n          }                                                                                                            // 707\n        },                                                                                                             // 708\n                                                                                                                       // 709\n        toHaveBeenStoppedOn: function () {                                                                             // 710\n          return {                                                                                                     // 711\n            compare: function (actual, selector) {                                                                     // 712\n              var result = { pass: jasmine.jQuery.events.wasStopped(selector, actual) }                                // 713\n                                                                                                                       // 714\n              result.message = result.pass ?                                                                           // 715\n              \"Expected event \" + actual + \" not to have been stopped on \" + selector :                                // 716\n              \"Expected event \" + actual + \" to have been stopped on \" + selector                                      // 717\n                                                                                                                       // 718\n              return result;                                                                                           // 719\n            }                                                                                                          // 720\n          }                                                                                                            // 721\n        },                                                                                                             // 722\n                                                                                                                       // 723\n        toHaveBeenStopped: function () {                                                                               // 724\n          return {                                                                                                     // 725\n            compare: function (actual) {                                                                               // 726\n              var eventName = actual.eventName                                                                         // 727\n                , selector = actual.selector                                                                           // 728\n                , result = { pass: jasmine.jQuery.events.wasStopped(selector, eventName) }                             // 729\n                                                                                                                       // 730\n              result.message = result.pass ?                                                                           // 731\n              \"Expected event \" + eventName + \" not to have been stopped on \" + selector :                             // 732\n              \"Expected event \" + eventName + \" to have been stopped on \" + selector                                   // 733\n                                                                                                                       // 734\n              return result                                                                                            // 735\n            }                                                                                                          // 736\n          }                                                                                                            // 737\n        }                                                                                                              // 738\n      })                                                                                                               // 739\n                                                                                                                       // 740\n      jasmine.getEnv().addCustomEqualityTester(function(a, b) {                                                        // 741\n        if (a && b) {                                                                                                  // 742\n          if (a instanceof $ || jasmine.isDomNode(a)) {                                                                // 743\n            var $a = $(a)                                                                                              // 744\n                                                                                                                       // 745\n            if (b instanceof $)                                                                                        // 746\n              return $a.length == b.length && a.is(b)                                                                  // 747\n                                                                                                                       // 748\n            return $a.is(b);                                                                                           // 749\n          }                                                                                                            // 750\n                                                                                                                       // 751\n          if (b instanceof $ || jasmine.isDomNode(b)) {                                                                // 752\n            var $b = $(b)                                                                                              // 753\n                                                                                                                       // 754\n            if (a instanceof $)                                                                                        // 755\n              return a.length == $b.length && $b.is(a)                                                                 // 756\n                                                                                                                       // 757\n            return $(b).is(a);                                                                                         // 758\n          }                                                                                                            // 759\n        }                                                                                                              // 760\n      })                                                                                                               // 761\n                                                                                                                       // 762\n      jasmine.getEnv().addCustomEqualityTester(function (a, b) {                                                       // 763\n        if (a instanceof $ && b instanceof $ && a.size() == b.size())                                                  // 764\n          return a.is(b)                                                                                               // 765\n      })                                                                                                               // 766\n    })                                                                                                                 // 767\n                                                                                                                       // 768\n    afterEach(function () {                                                                                            // 769\n      jasmine.getFixtures().cleanUp()                                                                                  // 770\n      jasmine.getStyleFixtures().cleanUp()                                                                             // 771\n      jasmine.jQuery.events.cleanUp()                                                                                  // 772\n    })                                                                                                                 // 773\n                                                                                                                       // 774\n    window.readFixtures = function () {                                                                                // 775\n      return jasmine.getFixtures().proxyCallTo_('read', arguments)                                                     // 776\n    }                                                                                                                  // 777\n                                                                                                                       // 778\n    window.preloadFixtures = function () {                                                                             // 779\n      jasmine.getFixtures().proxyCallTo_('preload', arguments)                                                         // 780\n    }                                                                                                                  // 781\n                                                                                                                       // 782\n    window.loadFixtures = function () {                                                                                // 783\n      jasmine.getFixtures().proxyCallTo_('load', arguments)                                                            // 784\n    }                                                                                                                  // 785\n                                                                                                                       // 786\n    window.appendLoadFixtures = function () {                                                                          // 787\n      jasmine.getFixtures().proxyCallTo_('appendLoad', arguments)                                                      // 788\n    }                                                                                                                  // 789\n                                                                                                                       // 790\n    window.setFixtures = function (html) {                                                                             // 791\n      return jasmine.getFixtures().proxyCallTo_('set', arguments)                                                      // 792\n    }                                                                                                                  // 793\n                                                                                                                       // 794\n    window.appendSetFixtures = function () {                                                                           // 795\n      jasmine.getFixtures().proxyCallTo_('appendSet', arguments)                                                       // 796\n    }                                                                                                                  // 797\n                                                                                                                       // 798\n    window.sandbox = function (attributes) {                                                                           // 799\n      return jasmine.getFixtures().sandbox(attributes)                                                                 // 800\n    }                                                                                                                  // 801\n                                                                                                                       // 802\n    window.spyOnEvent = function (selector, eventName) {                                                               // 803\n      return jasmine.jQuery.events.spyOn(selector, eventName)                                                          // 804\n    }                                                                                                                  // 805\n                                                                                                                       // 806\n    window.preloadStyleFixtures = function () {                                                                        // 807\n      jasmine.getStyleFixtures().proxyCallTo_('preload', arguments)                                                    // 808\n    }                                                                                                                  // 809\n                                                                                                                       // 810\n    window.loadStyleFixtures = function () {                                                                           // 811\n      jasmine.getStyleFixtures().proxyCallTo_('load', arguments)                                                       // 812\n    }                                                                                                                  // 813\n                                                                                                                       // 814\n    window.appendLoadStyleFixtures = function () {                                                                     // 815\n      jasmine.getStyleFixtures().proxyCallTo_('appendLoad', arguments)                                                 // 816\n    }                                                                                                                  // 817\n                                                                                                                       // 818\n    window.setStyleFixtures = function (html) {                                                                        // 819\n      jasmine.getStyleFixtures().proxyCallTo_('set', arguments)                                                        // 820\n    }                                                                                                                  // 821\n                                                                                                                       // 822\n    window.appendSetStyleFixtures = function (html) {                                                                  // 823\n      jasmine.getStyleFixtures().proxyCallTo_('appendSet', arguments)                                                  // 824\n    }                                                                                                                  // 825\n                                                                                                                       // 826\n    window.loadJSONFixtures = function () {                                                                            // 827\n      return jasmine.getJSONFixtures().proxyCallTo_('load', arguments)                                                 // 828\n    }                                                                                                                  // 829\n                                                                                                                       // 830\n    window.getJSONFixture = function (url) {                                                                           // 831\n      return jasmine.getJSONFixtures().proxyCallTo_('read', arguments)[url]                                            // 832\n    }                                                                                                                  // 833\n  }(window, window.jasmine, window.jQuery);                                                                            // 834\n                                                                                                                       // 835\n});                                                                                                                    // 836\n                                                                                                                       // 837\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sanjo_jasmine/src/lib/mock.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* globals Package: false */                                                                                           // 1\n                                                                                                                       // 2\n(function (context, mocker, Package) {                                                                                 // 3\n  var originals = []                                                                                                   // 4\n                                                                                                                       // 5\n  var _getOriginal = function (object, propertyName) {                                                                 // 6\n    // Linear search may not be ideal but                                                                              // 7\n    // the originals list shouldn't be normally that big                                                               // 8\n    var length = originals.length                                                                                      // 9\n    for (var i = 0; i < length; i++) {                                                                                 // 10\n      var original = originals[i]                                                                                      // 11\n      if (original.object === object && original.propertyName === propertyName) {                                      // 12\n        return original                                                                                                // 13\n      }                                                                                                                // 14\n    }                                                                                                                  // 15\n                                                                                                                       // 16\n    return null                                                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  /**                                                                                                                  // 20\n   * Used in user tests, helper function to mock any object you provide.                                               // 21\n   * Automatically reverts the mocked object after each test.                                                          // 22\n   *                                                                                                                   // 23\n   * NOTE: Depends on 'afterEach' global function                                                                      // 24\n   *                                                                                                                   // 25\n   * @method mock                                                                                                      // 26\n   */                                                                                                                  // 27\n  var mock = function (object, propertyName, options) {                                                                // 28\n    if (typeof object !== 'object' && typeof object !== 'function') {                                                  // 29\n      throw new Error('object must be an object')                                                                      // 30\n    }                                                                                                                  // 31\n    if (typeof propertyName !== 'string') {                                                                            // 32\n      throw new Error('propertyName must be a string')                                                                 // 33\n    }                                                                                                                  // 34\n    if (typeof object[propertyName] === 'undefined') {                                                                 // 35\n      throw new Error('property does not exist on object')                                                             // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    var existingOriginal = _getOriginal(object, propertyName)                                                          // 39\n    if (existingOriginal) {                                                                                            // 40\n      return existingOriginal.mock                                                                                     // 41\n    } else {                                                                                                           // 42\n      options = options || {}                                                                                          // 43\n                                                                                                                       // 44\n      var originalValue = object[propertyName]                                                                         // 45\n      var metadata = mocker.getMetadata(object[propertyName])                                                          // 46\n      var mock = mocker.generateFromMetadata(metadata)                                                                 // 47\n                                                                                                                       // 48\n      originals.push({                                                                                                 // 49\n        object: object,                                                                                                // 50\n        propertyName: propertyName,                                                                                    // 51\n        value: originalValue,                                                                                          // 52\n        mock: mock,                                                                                                    // 53\n        options: options                                                                                               // 54\n      })                                                                                                               // 55\n                                                                                                                       // 56\n      object[propertyName] = mock                                                                                      // 57\n                                                                                                                       // 58\n      return mock                                                                                                      // 59\n    }                                                                                                                  // 60\n  }                                                                                                                    // 61\n                                                                                                                       // 62\n  context.mock = mock                                                                                                  // 63\n                                                                                                                       // 64\n  var mockPackage = function (packageName, options) {                                                                  // 65\n    if (typeof packageName !== 'string') {                                                                             // 66\n      throw new Error('packageName must be a string')                                                                  // 67\n    }                                                                                                                  // 68\n                                                                                                                       // 69\n    return Package[packageName] ? mock(Package, packageName, options) : null                                           // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  context.mockPackage = mockPackage                                                                                    // 73\n                                                                                                                       // 74\n  function restoreOriginal(original) {                                                                                 // 75\n    if (!original.options.permanent) {                                                                                 // 76\n      original.object[original.propertyName] = original.value                                                          // 77\n    }                                                                                                                  // 78\n  }                                                                                                                    // 79\n                                                                                                                       // 80\n  function restoreOriginals() {                                                                                        // 81\n    originals.forEach(restoreOriginal)                                                                                 // 82\n    originals = []                                                                                                     // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  afterEach(restoreOriginals)                                                                                          // 86\n})(                                                                                                                    // 87\n  (typeof window !== 'undefined') ? window : global,                                                                   // 88\n  (typeof window !== 'undefined') ? window.mocker : global.ComponentMocker,                                            // 89\n  Package                                                                                                              // 90\n);                                                                                                                     // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sanjo:jasmine'] = {};\n\n})();\n","servePath":"/packages/sanjo_jasmine.js","sourceMap":{"version":3,"sources":["/packages/sanjo_jasmine/.npm/package/node_modules/component-mocker/index.js","/packages/sanjo_jasmine/.npm/package/node_modules/jasmine-core/lib/jasmine-core/jasmine.js","/packages/sanjo_jasmine/.npm/package/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js","/packages/sanjo_jasmine/src/lib/log.js","/packages/sanjo_jasmine/src/lib/parseStack.js","/packages/sanjo_jasmine/src/lib/JasmineTestFramework.js","/packages/sanjo_jasmine/src/lib/JasmineInterface.js","/packages/sanjo_jasmine/src/lib/VelocityTestReporter.js","/packages/sanjo_jasmine/src/client/integration/ClientIntegrationTestFramework.js","/packages/sanjo_jasmine/src/client/integration/clientsideSetup.js","/packages/sanjo_jasmine/src/client/integration/assets/jasmine-jquery.js","/packages/sanjo_jasmine/src/lib/mock.js"],"names":[],"mappingstdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;;;;;;;;;;;;;;;;;;AClubA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzrpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzp0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/sanjo_jasmine.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// This module uses arguments.callee, so it can't currently run in strict mode\n/* jshint strict:false */\n\n;(function () {\n  // Reference to global object\n  var root = this;\n  var previousMocker = root.mocker;\n\n  function isA(typeName, value) {\n    return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n  }\n\n  function getType(ref) {\n    if (isA('RegExp', ref)) {\n      return 'regexp';\n    }\n\n    if (isA('Array', ref)) {\n      return 'array';\n    }\n\n    if (isA('Function', ref)) {\n      return 'function';\n    }\n\n    if (isA('Object', ref)) {\n      return 'object';\n    }\n\n    // Infinity must be special cased because JSON.stringify will convert it to null\n    if (ref === Infinity) {\n      return 'infinity';\n    }\n    // consider number and string fields to be constants that we want to\n    // pick up as they are\n    if (isA('Number', ref) || isA('String', ref)) {\n      return 'constant';\n    }\n\n    if (ref === undefined) {\n      return 'undefined';\n    }\n\n    if (ref === null) {\n      return 'null';\n    }\n\n    return null;\n  }\n\n  function makeComponent(metadata) {\n    switch (metadata.type) {\n    case 'object':\n      return {};\n\n    case 'array':\n      return [];\n\n    case 'regexp':\n      return new RegExp();\n\n    case 'constant':\n    case 'null':\n    case 'undefined':\n      return metadata.value;\n\n    case 'infinity':\n      return Infinity;\n\n    case 'function':\n      var defaultReturnValue;\n      var specificReturnValues = [];\n      var mockImpl;\n      var isReturnValueLastSet = false;\n      var calls = [];\n      var instances = [];\n      var prototype =\n        (metadata.members && metadata.members.prototype &&\n          metadata.members.prototype.members) || {};\n\n      var f = function () {\n        instances.push(this);\n        calls.push(Array.prototype.slice.call(arguments));\n        /* jshint noarg:false */\n        if (this instanceof arguments.callee) {\n          // This is probably being called as a constructor\n          for (var slot in prototype) {\n            // Copy prototype methods to the instance to make\n            // it easier to interact with mock instance call and\n            // return values\n            if (prototype[slot].type === 'function') {\n              var protoImpl = this[slot];\n              this[slot] = generateFromMetadata(prototype[slot]);\n              this[slot]._protoImpl = protoImpl;\n            }\n          }\n\n          // Run the mock constructor implementation\n          return mockImpl && mockImpl.apply(this, arguments);\n        }\n\n        var returnValue;\n        // If return value is last set, either specific or default, i.e.\n        // mockReturnValueOnce()/mockReturnValue() is called and no\n        // mockImplementation() is called after that.\n        // use the set return value.\n        if (isReturnValueLastSet) {\n          returnValue = specificReturnValues.shift();\n          if (returnValue === undefined) {\n            returnValue = defaultReturnValue;\n          }\n        }\n\n        // If mockImplementation() is last set, or specific return values\n        // are used up, use the mock implementation.\n        if (mockImpl && returnValue === undefined) {\n          return mockImpl.apply(this, arguments);\n        }\n\n        // Otherwise use prototype implementation\n        if (returnValue === undefined && arguments.callee._protoImpl) {\n          return arguments.callee._protoImpl.apply(this, arguments);\n        }\n\n        return returnValue;\n      };\n\n      f._isMockFunction = true;\n\n      f.mock = {\n        calls: calls,\n        instances: instances\n      };\n\n      f.mockClear = function () {\n        calls.length = 0;\n        instances.length = 0;\n      };\n\n      f.mockReturnValueOnce = function (value) {\n        // next function call will return this value or default return value\n        isReturnValueLastSet = true;\n        specificReturnValues.push(value);\n        return f;\n      };\n\n      f.mockReturnValue = function (value) {\n        // next function call will return specified return value or this one\n        isReturnValueLastSet = true;\n        defaultReturnValue = value;\n        return f;\n      };\n\n      f.mockImplementation = f.mockImpl = function (fn) {\n        // next function call will use mock implementation return value\n        isReturnValueLastSet = false;\n        mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = function () {\n        return f.mockImplementation(function () {\n          return this;\n        });\n      };\n\n      f._getMockImplementation = function () {\n        return mockImpl;\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    }\n\n    throw new Error('Unrecognized type ' + metadata.type);\n  }\n\n  function generateFromMetadata(_metadata) {\n    var callbacks = [];\n    var refs = {};\n\n    function generateMock(metadata) {\n      var mock = makeComponent(metadata);\n      if (metadata.refID !== null && metadata.refID !== undefined) {\n        refs[metadata.refID] = mock;\n      }\n\n      function getRefCallback(slot, ref) {\n        return function () {\n          mock[slot] = refs[ref];\n        };\n      }\n\n      if (metadata.__TCmeta) {\n        mock.__TCmeta = metadata.__TCmeta;\n      }\n\n      for (var slot in metadata.members) {\n        var slotMetadata = metadata.members[slot];\n        if (slotMetadata.ref !== null && slotMetadata.ref !== undefined) {\n          callbacks.push(getRefCallback(slot, slotMetadata.ref));\n        } else {\n          mock[slot] = generateMock(slotMetadata);\n        }\n      }\n\n      if (metadata.type !== 'undefined'\n        && metadata.type !== 'null'\n        && mock.prototype) {\n        mock.prototype.constructor = mock;\n      }\n\n      return mock;\n    }\n\n    var mock = generateMock(_metadata);\n    callbacks.forEach(function (setter) {\n      setter();\n    });\n\n    return mock;\n  }\n\n  function _getMetadata(component, _refs) {\n    var refs = _refs || [];\n\n    // This is a potential performance drain, since the whole list is scanned\n    // for every component\n    var ref = refs.indexOf(component);\n    if (ref > -1) {\n      return {ref: ref};\n    }\n\n    var type = getType(component);\n    if (!type) {\n      return null;\n    }\n\n    var metadata = {type: type};\n    if (type === 'constant'\n      || type === 'undefined'\n      || type === 'null') {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'infinity') {\n      metadata.value = 'infinity';\n      return metadata;\n    } else if (type === 'function') {\n      metadata.__TCmeta = component.__TCmeta;\n      if (component._isMockFunction) {\n        metadata.mockImpl = component._getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.length;\n    refs.push(component);\n\n    var members = null;\n\n    function addMember(slot, data) {\n      if (!data) {\n        return;\n      }\n      if (!members) {\n        members = {};\n      }\n      members[slot] = data;\n    }\n\n    // Leave arrays alone\n    if (type !== 'array') {\n      if (type !== 'undefined') {\n        for (var slot in component) {\n          if (slot.charAt(0) === '_' ||\n            (type === 'function' && component._isMockFunction &&\n              slot.match(/^mock/))) {\n            continue;\n          }\n\n          if (!component.hasOwnProperty && component[slot] !== undefined ||\n            component.hasOwnProperty(slot) ||\n            /* jshint eqeqeq:false */\n            (type === 'object' && component[slot] != Object.prototype[slot])) {\n            addMember(slot, _getMetadata(component[slot], refs));\n          }\n        }\n      }\n\n      // If component is native code function, prototype might be undefined\n      if (type === 'function' && component.prototype) {\n        var prototype = _getMetadata(component.prototype, refs);\n        if (prototype && prototype.members) {\n          addMember('prototype', prototype);\n        }\n      }\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  function removeUnusedRefs(metadata) {\n    function visit(metadata, f) {\n      f(metadata);\n      if (metadata.members) {\n        for (var slot in metadata.members) {\n          visit(metadata.members[slot], f);\n        }\n      }\n    }\n\n    var usedRefs = {};\n    visit(metadata, function (metadata) {\n      if (metadata.ref !== null && metadata.ref !== undefined) {\n        usedRefs[metadata.ref] = true;\n      }\n    });\n\n    visit(metadata, function (metadata) {\n      if (!usedRefs[metadata.refID]) {\n        delete metadata.refID;\n      }\n    });\n  }\n\n  var mocker = {\n    /**\n     * Generates a mock based on the given metadata. Mocks treat functions\n     * specially, and all mock functions have additional members, described in the\n     * documentation for getMockFunction in this module.\n     *\n     * One important note: function prototoypes are handled specially by this\n     * mocking framework. For functions with prototypes, when called as a\n     * constructor, the mock will install mocked function members on the instance.\n     * This allows different instances of the same constructor to have different\n     * values for its mocks member and its return values.\n     *\n     * @param metadata Metadata for the mock in the schema returned by the\n     * getMetadata method of this module.\n     *\n     */\n    generateFromMetadata: generateFromMetadata,\n\n    /**\n     * Inspects the argument and returns its schema in the following recursive\n     * format:\n     * {\n     *  type: ...\n     *  members : {}\n     * }\n     *\n     * Where type is one of 'array', 'object', 'function', or 'ref', and members\n     * is an optional dictionary where the keys are member names and the values\n     * are metadata objects. Function prototypes are defined simply by defining\n     * metadata for the member.prototype of the function. The type of a function\n     * prototype should always be \"object\". For instance, a simple class might be\n     * defined like this:\n     *\n     * {\n     *  type: 'function',\n     *  members: {\n     *    staticMethod: {type: 'function'},\n     *    prototype: {\n     *      type: 'object',\n     *      members: {\n     *        instanceMethod: {type: 'function'}\n     *      }\n     *    }\n     *  }\n     * }\n     *\n     * Metadata may also contain references to other objects defined within the\n     * same metadata object. The metadata for the referent must be marked with\n     * 'refID' key and an arbitrary value. The referer must be marked with a\n     * 'ref' key that has the same value as object with refID that it refers to.\n     * For instance, this metadata blob:\n     * {\n     *  type: 'object',\n     *  refID: 1,\n     *  members: {\n     *    self: {ref: 1}\n     *  }\n     * }\n     *\n     * defines an object with a slot named 'self' that refers back to the object.\n     *\n     * @param component The component for which to retrieve metadata.\n     */\n    getMetadata: function (component) {\n      var metadata = _getMetadata(component);\n      // to make it easier to work with mock metadata, only preserve references\n      // that are actually used\n      if (metadata !== null) {\n        removeUnusedRefs(metadata);\n      }\n      return metadata;\n    },\n\n    /**\n     * Generates a stand-alone function with members that help drive unit tests or\n     * confirm expectations. Specifically, functions returned by this method have\n     * the following members:\n     *\n     * .mock:\n     * An object with two members, \"calls\", and \"instances\", which are both\n     * lists. The items in the \"calls\" list are the arguments with which the\n     * function was called. The \"instances\" list stores the value of 'this' for\n     * each call to the function. This is useful for retrieving instances from a\n     * constructor.\n     *\n     * .mockReturnValueOnce(value)\n     * Pushes the given value onto a FIFO queue of return values for the\n     * function.\n     *\n     * .mockReturnValue(value)\n     * Sets the default return value for the function.\n     *\n     * .mockImplementation(function)\n     * Sets a mock implementation for the function.\n     *\n     * .mockReturnThis()\n     * Syntactic sugar for .mockImplementation(function() {return this;})\n     *\n     * In case both mockImplementation() and\n     * mockReturnValueOnce()/mockReturnValue() are called. The priority of\n     * which to use is based on what is the last call:\n     * - if the last call is mockReturnValueOnce() or mockReturnValue(),\n     *   use the specific return specific return value or default return value.\n     *   If specific return values are used up or no default return value is set,\n     *   fall back to try mockImplementation();\n     * - if the last call is mockImplementation(), run the given implementation\n     *   and return the result.\n     */\n    getMockFunction: function () {\n      return makeComponent({type: 'function'});\n    },\n\n    // Just a short-hand alias\n    getMockFn: function () {\n      return this.getMockFunction();\n    },\n\n    noConflict: function() {\n      root.mocker = previousMocker;\n      return mocker;\n    }\n  };\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = mocker;\n    }\n    exports.mocker = mocker;\n  } else {\n    root.mocker = mocker;\n  }\n}.call(this));\n","/*\nCopyright (c) 2008-2015 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar getJasmineRequireObj = (function (jasmineGlobal) {\n  var jasmineRequire;\n\n  if (typeof module !== 'undefined' && module.exports) {\n    jasmineGlobal = global;\n    jasmineRequire = exports;\n  } else {\n    if (typeof window !== 'undefined' && typeof window.toString === 'function' && window.toString() === '[object GjsGlobal]') {\n      jasmineGlobal = window;\n    }\n    jasmineRequire = jasmineGlobal.jasmineRequire = jasmineGlobal.jasmineRequire || {};\n  }\n\n  function getJasmineRequire() {\n    return jasmineRequire;\n  }\n\n  getJasmineRequire().core = function(jRequire) {\n    var j$ = {};\n\n    jRequire.base(j$, jasmineGlobal);\n    j$.util = jRequire.util();\n    j$.errors = jRequire.errors();\n    j$.Any = jRequire.Any(j$);\n    j$.Anything = jRequire.Anything(j$);\n    j$.CallTracker = jRequire.CallTracker();\n    j$.MockDate = jRequire.MockDate();\n    j$.Clock = jRequire.Clock();\n    j$.DelayedFunctionScheduler = jRequire.DelayedFunctionScheduler();\n    j$.Env = jRequire.Env(j$);\n    j$.ExceptionFormatter = jRequire.ExceptionFormatter();\n    j$.Expectation = jRequire.Expectation();\n    j$.buildExpectationResult = jRequire.buildExpectationResult();\n    j$.JsApiReporter = jRequire.JsApiReporter();\n    j$.matchersUtil = jRequire.matchersUtil(j$);\n    j$.ObjectContaining = jRequire.ObjectContaining(j$);\n    j$.ArrayContaining = jRequire.ArrayContaining(j$);\n    j$.pp = jRequire.pp(j$);\n    j$.QueueRunner = jRequire.QueueRunner(j$);\n    j$.ReportDispatcher = jRequire.ReportDispatcher();\n    j$.Spec = jRequire.Spec(j$);\n    j$.SpyRegistry = jRequire.SpyRegistry(j$);\n    j$.SpyStrategy = jRequire.SpyStrategy();\n    j$.StringMatching = jRequire.StringMatching(j$);\n    j$.Suite = jRequire.Suite(j$);\n    j$.Timer = jRequire.Timer();\n    j$.TreeProcessor = jRequire.TreeProcessor();\n    j$.version = jRequire.version();\n\n    j$.matchers = jRequire.requireMatchers(jRequire, j$);\n\n    return j$;\n  };\n\n  return getJasmineRequire;\n})(this);\n\ngetJasmineRequireObj().requireMatchers = function(jRequire, j$) {\n  var availableMatchers = [\n      'toBe',\n      'toBeCloseTo',\n      'toBeDefined',\n      'toBeFalsy',\n      'toBeGreaterThan',\n      'toBeLessThan',\n      'toBeNaN',\n      'toBeNull',\n      'toBeTruthy',\n      'toBeUndefined',\n      'toContain',\n      'toEqual',\n      'toHaveBeenCalled',\n      'toHaveBeenCalledWith',\n      'toMatch',\n      'toThrow',\n      'toThrowError'\n    ],\n    matchers = {};\n\n  for (var i = 0; i < availableMatchers.length; i++) {\n    var name = availableMatchers[i];\n    matchers[name] = jRequire[name](j$);\n  }\n\n  return matchers;\n};\n\ngetJasmineRequireObj().base = function(j$, jasmineGlobal) {\n  j$.unimplementedMethod_ = function() {\n    throw new Error('unimplemented method');\n  };\n\n  j$.MAX_PRETTY_PRINT_DEPTH = 40;\n  j$.MAX_PRETTY_PRINT_ARRAY_LENGTH = 100;\n  j$.DEFAULT_TIMEOUT_INTERVAL = 5000;\n\n  j$.getGlobal = function() {\n    return jasmineGlobal;\n  };\n\n  j$.getEnv = function(options) {\n    var env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options);\n    //jasmine. singletons in here (setTimeout blah blah).\n    return env;\n  };\n\n  j$.isArray_ = function(value) {\n    return j$.isA_('Array', value);\n  };\n\n  j$.isString_ = function(value) {\n    return j$.isA_('String', value);\n  };\n\n  j$.isNumber_ = function(value) {\n    return j$.isA_('Number', value);\n  };\n\n  j$.isA_ = function(typeName, value) {\n    return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n  };\n\n  j$.isDomNode = function(obj) {\n    return obj.nodeType > 0;\n  };\n\n  j$.fnNameFor = function(func) {\n    return func.name || func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/)[1];\n  };\n\n  j$.any = function(clazz) {\n    return new j$.Any(clazz);\n  };\n\n  j$.anything = function() {\n    return new j$.Anything();\n  };\n\n  j$.objectContaining = function(sample) {\n    return new j$.ObjectContaining(sample);\n  };\n\n  j$.stringMatching = function(expected) {\n    return new j$.StringMatching(expected);\n  };\n\n  j$.arrayContaining = function(sample) {\n    return new j$.ArrayContaining(sample);\n  };\n\n  j$.createSpy = function(name, originalFn) {\n\n    var spyStrategy = new j$.SpyStrategy({\n        name: name,\n        fn: originalFn,\n        getSpy: function() { return spy; }\n      }),\n      callTracker = new j$.CallTracker(),\n      spy = function() {\n        var callData = {\n          object: this,\n          args: Array.prototype.slice.apply(arguments)\n        };\n\n        callTracker.track(callData);\n        var returnValue = spyStrategy.exec.apply(this, arguments);\n        callData.returnValue = returnValue;\n\n        return returnValue;\n      };\n\n    for (var prop in originalFn) {\n      if (prop === 'and' || prop === 'calls') {\n        throw new Error('Jasmine spies would overwrite the \\'and\\' and \\'calls\\' properties on the object being spied upon');\n      }\n\n      spy[prop] = originalFn[prop];\n    }\n\n    spy.and = spyStrategy;\n    spy.calls = callTracker;\n\n    return spy;\n  };\n\n  j$.isSpy = function(putativeSpy) {\n    if (!putativeSpy) {\n      return false;\n    }\n    return putativeSpy.and instanceof j$.SpyStrategy &&\n      putativeSpy.calls instanceof j$.CallTracker;\n  };\n\n  j$.createSpyObj = function(baseName, methodNames) {\n    if (j$.isArray_(baseName) && j$.util.isUndefined(methodNames)) {\n      methodNames = baseName;\n      baseName = 'unknown';\n    }\n\n    if (!j$.isArray_(methodNames) || methodNames.length === 0) {\n      throw 'createSpyObj requires a non-empty array of method names to create spies for';\n    }\n    var obj = {};\n    for (var i = 0; i < methodNames.length; i++) {\n      obj[methodNames[i]] = j$.createSpy(baseName + '.' + methodNames[i]);\n    }\n    return obj;\n  };\n};\n\ngetJasmineRequireObj().util = function() {\n\n  var util = {};\n\n  util.inherit = function(childClass, parentClass) {\n    var Subclass = function() {\n    };\n    Subclass.prototype = parentClass.prototype;\n    childClass.prototype = new Subclass();\n  };\n\n  util.htmlEscape = function(str) {\n    if (!str) {\n      return str;\n    }\n    return str.replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  };\n\n  util.argsToArray = function(args) {\n    var arrayOfArgs = [];\n    for (var i = 0; i < args.length; i++) {\n      arrayOfArgs.push(args[i]);\n    }\n    return arrayOfArgs;\n  };\n\n  util.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  util.arrayContains = function(array, search) {\n    var i = array.length;\n    while (i--) {\n      if (array[i] === search) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  util.clone = function(obj) {\n    if (Object.prototype.toString.apply(obj) === '[object Array]') {\n      return obj.slice();\n    }\n\n    var cloned = {};\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        cloned[prop] = obj[prop];\n      }\n    }\n\n    return cloned;\n  };\n\n  return util;\n};\n\ngetJasmineRequireObj().Spec = function(j$) {\n  function Spec(attrs) {\n    this.expectationFactory = attrs.expectationFactory;\n    this.resultCallback = attrs.resultCallback || function() {};\n    this.id = attrs.id;\n    this.description = attrs.description || '';\n    this.queueableFn = attrs.queueableFn;\n    this.beforeAndAfterFns = attrs.beforeAndAfterFns || function() { return {befores: [], afters: []}; };\n    this.userContext = attrs.userContext || function() { return {}; };\n    this.onStart = attrs.onStart || function() {};\n    this.getSpecName = attrs.getSpecName || function() { return ''; };\n    this.expectationResultFactory = attrs.expectationResultFactory || function() { };\n    this.queueRunnerFactory = attrs.queueRunnerFactory || function() {};\n    this.catchingExceptions = attrs.catchingExceptions || function() { return true; };\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;\n\n    if (!this.queueableFn.fn) {\n      this.pend();\n    }\n\n    this.result = {\n      id: this.id,\n      description: this.description,\n      fullName: this.getFullName(),\n      failedExpectations: [],\n      passedExpectations: [],\n      pendingReason: ''\n    };\n  }\n\n  Spec.prototype.addExpectationResult = function(passed, data, isError) {\n    var expectationResult = this.expectationResultFactory(data);\n    if (passed) {\n      this.result.passedExpectations.push(expectationResult);\n    } else {\n      this.result.failedExpectations.push(expectationResult);\n\n      if (this.throwOnExpectationFailure && !isError) {\n        throw new j$.errors.ExpectationFailed();\n      }\n    }\n  };\n\n  Spec.prototype.expect = function(actual) {\n    return this.expectationFactory(actual, this);\n  };\n\n  Spec.prototype.execute = function(onComplete, enabled) {\n    var self = this;\n\n    this.onStart(this);\n\n    if (!this.isExecutable() || this.markedPending || enabled === false) {\n      complete(enabled);\n      return;\n    }\n\n    var fns = this.beforeAndAfterFns();\n    var allFns = fns.befores.concat(this.queueableFn).concat(fns.afters);\n\n    this.queueRunnerFactory({\n      queueableFns: allFns,\n      onException: function() { self.onException.apply(self, arguments); },\n      onComplete: complete,\n      userContext: this.userContext()\n    });\n\n    function complete(enabledAgain) {\n      self.result.status = self.status(enabledAgain);\n      self.resultCallback(self.result);\n\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  };\n\n  Spec.prototype.onException = function onException(e) {\n    if (Spec.isPendingSpecException(e)) {\n      this.pend(extractCustomPendingMessage(e));\n      return;\n    }\n\n    if (e instanceof j$.errors.ExpectationFailed) {\n      return;\n    }\n\n    this.addExpectationResult(false, {\n      matcherName: '',\n      passed: false,\n      expected: '',\n      actual: '',\n      error: e\n    }, true);\n  };\n\n  Spec.prototype.disable = function() {\n    this.disabled = true;\n  };\n\n  Spec.prototype.pend = function(message) {\n    this.markedPending = true;\n    if (message) {\n      this.result.pendingReason = message;\n    }\n  };\n\n  Spec.prototype.getResult = function() {\n    this.result.status = this.status();\n    return this.result;\n  };\n\n  Spec.prototype.status = function(enabled) {\n    if (this.disabled || enabled === false) {\n      return 'disabled';\n    }\n\n    if (this.markedPending) {\n      return 'pending';\n    }\n\n    if (this.result.failedExpectations.length > 0) {\n      return 'failed';\n    } else {\n      return 'passed';\n    }\n  };\n\n  Spec.prototype.isExecutable = function() {\n    return !this.disabled;\n  };\n\n  Spec.prototype.getFullName = function() {\n    return this.getSpecName(this);\n  };\n\n  var extractCustomPendingMessage = function(e) {\n    var fullMessage = e.toString(),\n        boilerplateStart = fullMessage.indexOf(Spec.pendingSpecExceptionMessage),\n        boilerplateEnd = boilerplateStart + Spec.pendingSpecExceptionMessage.length;\n\n    return fullMessage.substr(boilerplateEnd);\n  };\n\n  Spec.pendingSpecExceptionMessage = '=> marked Pending';\n\n  Spec.isPendingSpecException = function(e) {\n    return !!(e && e.toString && e.toString().indexOf(Spec.pendingSpecExceptionMessage) !== -1);\n  };\n\n  return Spec;\n};\n\nif (typeof window == void 0 && typeof exports == 'object') {\n  exports.Spec = jasmineRequire.Spec;\n}\n\ngetJasmineRequireObj().Env = function(j$) {\n  function Env(options) {\n    options = options || {};\n\n    var self = this;\n    var global = options.global || j$.getGlobal();\n\n    var totalSpecsDefined = 0;\n\n    var catchExceptions = true;\n\n    var realSetTimeout = options.setTimeout || j$.getGlobal().setTimeout;\n    var realClearTimeout = options.clearTimeout || j$.getGlobal().clearTimeout;\n    this.clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));\n\n    var runnableLookupTable = {};\n    var runnableResources = {};\n\n    var currentSpec = null;\n    var currentlyExecutingSuites = [];\n    var currentDeclarationSuite = null;\n    var throwOnExpectationFailure = false;\n\n    var currentSuite = function() {\n      return currentlyExecutingSuites[currentlyExecutingSuites.length - 1];\n    };\n\n    var currentRunnable = function() {\n      return currentSpec || currentSuite();\n    };\n\n    var reporter = new j$.ReportDispatcher([\n      'jasmineStarted',\n      'jasmineDone',\n      'suiteStarted',\n      'suiteDone',\n      'specStarted',\n      'specDone'\n    ]);\n\n    this.specFilter = function() {\n      return true;\n    };\n\n    this.addCustomEqualityTester = function(tester) {\n      if(!currentRunnable()) {\n        throw new Error('Custom Equalities must be added in a before function or a spec');\n      }\n      runnableResources[currentRunnable().id].customEqualityTesters.push(tester);\n    };\n\n    this.addMatchers = function(matchersToAdd) {\n      if(!currentRunnable()) {\n        throw new Error('Matchers must be added in a before function or a spec');\n      }\n      var customMatchers = runnableResources[currentRunnable().id].customMatchers;\n      for (var matcherName in matchersToAdd) {\n        customMatchers[matcherName] = matchersToAdd[matcherName];\n      }\n    };\n\n    j$.Expectation.addCoreMatchers(j$.matchers);\n\n    var nextSpecId = 0;\n    var getNextSpecId = function() {\n      return 'spec' + nextSpecId++;\n    };\n\n    var nextSuiteId = 0;\n    var getNextSuiteId = function() {\n      return 'suite' + nextSuiteId++;\n    };\n\n    var expectationFactory = function(actual, spec) {\n      return j$.Expectation.Factory({\n        util: j$.matchersUtil,\n        customEqualityTesters: runnableResources[spec.id].customEqualityTesters,\n        customMatchers: runnableResources[spec.id].customMatchers,\n        actual: actual,\n        addExpectationResult: addExpectationResult\n      });\n\n      function addExpectationResult(passed, result) {\n        return spec.addExpectationResult(passed, result);\n      }\n    };\n\n    var defaultResourcesForRunnable = function(id, parentRunnableId) {\n      var resources = {spies: [], customEqualityTesters: [], customMatchers: {}};\n\n      if(runnableResources[parentRunnableId]){\n        resources.customEqualityTesters = j$.util.clone(runnableResources[parentRunnableId].customEqualityTesters);\n        resources.customMatchers = j$.util.clone(runnableResources[parentRunnableId].customMatchers);\n      }\n\n      runnableResources[id] = resources;\n    };\n\n    var clearResourcesForRunnable = function(id) {\n        spyRegistry.clearSpies();\n        delete runnableResources[id];\n    };\n\n    var beforeAndAfterFns = function(suite) {\n      return function() {\n        var befores = [],\n          afters = [];\n\n        while(suite) {\n          befores = befores.concat(suite.beforeFns);\n          afters = afters.concat(suite.afterFns);\n\n          suite = suite.parentSuite;\n        }\n\n        return {\n          befores: befores.reverse(),\n          afters: afters\n        };\n      };\n    };\n\n    var getSpecName = function(spec, suite) {\n      return suite.getFullName() + ' ' + spec.description;\n    };\n\n    // TODO: we may just be able to pass in the fn instead of wrapping here\n    var buildExpectationResult = j$.buildExpectationResult,\n        exceptionFormatter = new j$.ExceptionFormatter(),\n        expectationResultFactory = function(attrs) {\n          attrs.messageFormatter = exceptionFormatter.message;\n          attrs.stackFormatter = exceptionFormatter.stack;\n\n          return buildExpectationResult(attrs);\n        };\n\n    // TODO: fix this naming, and here's where the value comes in\n    this.catchExceptions = function(value) {\n      catchExceptions = !!value;\n      return catchExceptions;\n    };\n\n    this.catchingExceptions = function() {\n      return catchExceptions;\n    };\n\n    var maximumSpecCallbackDepth = 20;\n    var currentSpecCallbackDepth = 0;\n\n    function clearStack(fn) {\n      currentSpecCallbackDepth++;\n      if (currentSpecCallbackDepth >= maximumSpecCallbackDepth) {\n        currentSpecCallbackDepth = 0;\n        realSetTimeout(fn, 0);\n      } else {\n        fn();\n      }\n    }\n\n    var catchException = function(e) {\n      return j$.Spec.isPendingSpecException(e) || catchExceptions;\n    };\n\n    this.throwOnExpectationFailure = function(value) {\n      throwOnExpectationFailure = !!value;\n    };\n\n    this.throwingExpectationFailures = function() {\n      return throwOnExpectationFailure;\n    };\n\n    var queueRunnerFactory = function(options) {\n      options.catchException = catchException;\n      options.clearStack = options.clearStack || clearStack;\n      options.timeout = {setTimeout: realSetTimeout, clearTimeout: realClearTimeout};\n      options.fail = self.fail;\n\n      new j$.QueueRunner(options).execute();\n    };\n\n    var topSuite = new j$.Suite({\n      env: this,\n      id: getNextSuiteId(),\n      description: 'Jasmine__TopLevel__Suite',\n      queueRunner: queueRunnerFactory\n    });\n    runnableLookupTable[topSuite.id] = topSuite;\n    defaultResourcesForRunnable(topSuite.id);\n    currentDeclarationSuite = topSuite;\n\n    this.topSuite = function() {\n      return topSuite;\n    };\n\n    this.execute = function(runnablesToRun) {\n      if(!runnablesToRun) {\n        if (focusedRunnables.length) {\n          runnablesToRun = focusedRunnables;\n        } else {\n          runnablesToRun = [topSuite.id];\n        }\n      }\n      var processor = new j$.TreeProcessor({\n        tree: topSuite,\n        runnableIds: runnablesToRun,\n        queueRunnerFactory: queueRunnerFactory,\n        nodeStart: function(suite) {\n          currentlyExecutingSuites.push(suite);\n          defaultResourcesForRunnable(suite.id, suite.parentSuite.id);\n          reporter.suiteStarted(suite.result);\n        },\n        nodeComplete: function(suite, result) {\n          if (!suite.disabled) {\n            clearResourcesForRunnable(suite.id);\n          }\n          currentlyExecutingSuites.pop();\n          reporter.suiteDone(result);\n        }\n      });\n\n      if(!processor.processTree().valid) {\n        throw new Error('Invalid order: would cause a beforeAll or afterAll to be run multiple times');\n      }\n\n      reporter.jasmineStarted({\n        totalSpecsDefined: totalSpecsDefined\n      });\n\n      processor.execute(reporter.jasmineDone);\n    };\n\n    this.addReporter = function(reporterToAdd) {\n      reporter.addReporter(reporterToAdd);\n    };\n\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {\n      if(!currentRunnable()) {\n        throw new Error('Spies must be created in a before function or a spec');\n      }\n      return runnableResources[currentRunnable().id].spies;\n    }});\n\n    this.spyOn = function() {\n      return spyRegistry.spyOn.apply(spyRegistry, arguments);\n    };\n\n    var suiteFactory = function(description) {\n      var suite = new j$.Suite({\n        env: self,\n        id: getNextSuiteId(),\n        description: description,\n        parentSuite: currentDeclarationSuite,\n        expectationFactory: expectationFactory,\n        expectationResultFactory: expectationResultFactory,\n        throwOnExpectationFailure: throwOnExpectationFailure\n      });\n\n      runnableLookupTable[suite.id] = suite;\n      return suite;\n    };\n\n    this.describe = function(description, specDefinitions) {\n      var suite = suiteFactory(description);\n      addSpecsToSuite(suite, specDefinitions);\n      return suite;\n    };\n\n    this.xdescribe = function(description, specDefinitions) {\n      var suite = this.describe(description, specDefinitions);\n      suite.disable();\n      return suite;\n    };\n\n    var focusedRunnables = [];\n\n    this.fdescribe = function(description, specDefinitions) {\n      var suite = suiteFactory(description);\n      suite.isFocused = true;\n\n      focusedRunnables.push(suite.id);\n      unfocusAncestor();\n      addSpecsToSuite(suite, specDefinitions);\n\n      return suite;\n    };\n\n    function addSpecsToSuite(suite, specDefinitions) {\n      var parentSuite = currentDeclarationSuite;\n      parentSuite.addChild(suite);\n      currentDeclarationSuite = suite;\n\n      var declarationError = null;\n      try {\n        specDefinitions.call(suite);\n      } catch (e) {\n        declarationError = e;\n      }\n\n      if (declarationError) {\n        self.it('encountered a declaration exception', function() {\n          throw declarationError;\n        });\n      }\n\n      currentDeclarationSuite = parentSuite;\n    }\n\n    function findFocusedAncestor(suite) {\n      while (suite) {\n        if (suite.isFocused) {\n          return suite.id;\n        }\n        suite = suite.parentSuite;\n      }\n\n      return null;\n    }\n\n    function unfocusAncestor() {\n      var focusedAncestor = findFocusedAncestor(currentDeclarationSuite);\n      if (focusedAncestor) {\n        for (var i = 0; i < focusedRunnables.length; i++) {\n          if (focusedRunnables[i] === focusedAncestor) {\n            focusedRunnables.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    var specFactory = function(description, fn, suite, timeout) {\n      totalSpecsDefined++;\n      var spec = new j$.Spec({\n        id: getNextSpecId(),\n        beforeAndAfterFns: beforeAndAfterFns(suite),\n        expectationFactory: expectationFactory,\n        resultCallback: specResultCallback,\n        getSpecName: function(spec) {\n          return getSpecName(spec, suite);\n        },\n        onStart: specStarted,\n        description: description,\n        expectationResultFactory: expectationResultFactory,\n        queueRunnerFactory: queueRunnerFactory,\n        userContext: function() { return suite.clonedSharedUserContext(); },\n        queueableFn: {\n          fn: fn,\n          timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n        },\n        throwOnExpectationFailure: throwOnExpectationFailure\n      });\n\n      runnableLookupTable[spec.id] = spec;\n\n      if (!self.specFilter(spec)) {\n        spec.disable();\n      }\n\n      return spec;\n\n      function specResultCallback(result) {\n        clearResourcesForRunnable(spec.id);\n        currentSpec = null;\n        reporter.specDone(result);\n      }\n\n      function specStarted(spec) {\n        currentSpec = spec;\n        defaultResourcesForRunnable(spec.id, suite.id);\n        reporter.specStarted(spec.result);\n      }\n    };\n\n    this.it = function(description, fn, timeout) {\n      var spec = specFactory(description, fn, currentDeclarationSuite, timeout);\n      currentDeclarationSuite.addChild(spec);\n      return spec;\n    };\n\n    this.xit = function() {\n      var spec = this.it.apply(this, arguments);\n      spec.pend();\n      return spec;\n    };\n\n    this.fit = function(){\n      var spec = this.it.apply(this, arguments);\n\n      focusedRunnables.push(spec.id);\n      unfocusAncestor();\n      return spec;\n    };\n\n    this.expect = function(actual) {\n      if (!currentRunnable()) {\n        throw new Error('\\'expect\\' was used when there was no current spec, this could be because an asynchronous test timed out');\n      }\n\n      return currentRunnable().expect(actual);\n    };\n\n    this.beforeEach = function(beforeEachFunction, timeout) {\n      currentDeclarationSuite.beforeEach({\n        fn: beforeEachFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.beforeAll = function(beforeAllFunction, timeout) {\n      currentDeclarationSuite.beforeAll({\n        fn: beforeAllFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.afterEach = function(afterEachFunction, timeout) {\n      currentDeclarationSuite.afterEach({\n        fn: afterEachFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.afterAll = function(afterAllFunction, timeout) {\n      currentDeclarationSuite.afterAll({\n        fn: afterAllFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.pending = function(message) {\n      var fullMessage = j$.Spec.pendingSpecExceptionMessage;\n      if(message) {\n        fullMessage += message;\n      }\n      throw fullMessage;\n    };\n\n    this.fail = function(error) {\n      var message = 'Failed';\n      if (error) {\n        message += ': ';\n        message += error.message || error;\n      }\n\n      currentRunnable().addExpectationResult(false, {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        message: message,\n        error: error && error.message ? error : null\n      });\n    };\n  }\n\n  return Env;\n};\n\ngetJasmineRequireObj().JsApiReporter = function() {\n\n  var noopTimer = {\n    start: function(){},\n    elapsed: function(){ return 0; }\n  };\n\n  function JsApiReporter(options) {\n    var timer = options.timer || noopTimer,\n        status = 'loaded';\n\n    this.started = false;\n    this.finished = false;\n\n    this.jasmineStarted = function() {\n      this.started = true;\n      status = 'started';\n      timer.start();\n    };\n\n    var executionTime;\n\n    this.jasmineDone = function() {\n      this.finished = true;\n      executionTime = timer.elapsed();\n      status = 'done';\n    };\n\n    this.status = function() {\n      return status;\n    };\n\n    var suites = [],\n      suites_hash = {};\n\n    this.suiteStarted = function(result) {\n      suites_hash[result.id] = result;\n    };\n\n    this.suiteDone = function(result) {\n      storeSuite(result);\n    };\n\n    this.suiteResults = function(index, length) {\n      return suites.slice(index, index + length);\n    };\n\n    function storeSuite(result) {\n      suites.push(result);\n      suites_hash[result.id] = result;\n    }\n\n    this.suites = function() {\n      return suites_hash;\n    };\n\n    var specs = [];\n\n    this.specDone = function(result) {\n      specs.push(result);\n    };\n\n    this.specResults = function(index, length) {\n      return specs.slice(index, index + length);\n    };\n\n    this.specs = function() {\n      return specs;\n    };\n\n    this.executionTime = function() {\n      return executionTime;\n    };\n\n  }\n\n  return JsApiReporter;\n};\n\ngetJasmineRequireObj().CallTracker = function() {\n\n  function CallTracker() {\n    var calls = [];\n\n    this.track = function(context) {\n      calls.push(context);\n    };\n\n    this.any = function() {\n      return !!calls.length;\n    };\n\n    this.count = function() {\n      return calls.length;\n    };\n\n    this.argsFor = function(index) {\n      var call = calls[index];\n      return call ? call.args : [];\n    };\n\n    this.all = function() {\n      return calls;\n    };\n\n    this.allArgs = function() {\n      var callArgs = [];\n      for(var i = 0; i < calls.length; i++){\n        callArgs.push(calls[i].args);\n      }\n\n      return callArgs;\n    };\n\n    this.first = function() {\n      return calls[0];\n    };\n\n    this.mostRecent = function() {\n      return calls[calls.length - 1];\n    };\n\n    this.reset = function() {\n      calls = [];\n    };\n  }\n\n  return CallTracker;\n};\n\ngetJasmineRequireObj().Clock = function() {\n  function Clock(global, delayedFunctionSchedulerFactory, mockDate) {\n    var self = this,\n      realTimingFunctions = {\n        setTimeout: global.setTimeout,\n        clearTimeout: global.clearTimeout,\n        setInterval: global.setInterval,\n        clearInterval: global.clearInterval\n      },\n      fakeTimingFunctions = {\n        setTimeout: setTimeout,\n        clearTimeout: clearTimeout,\n        setInterval: setInterval,\n        clearInterval: clearInterval\n      },\n      installed = false,\n      delayedFunctionScheduler,\n      timer;\n\n\n    self.install = function() {\n      if(!originalTimingFunctionsIntact()) {\n        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');\n      }\n      replace(global, fakeTimingFunctions);\n      timer = fakeTimingFunctions;\n      delayedFunctionScheduler = delayedFunctionSchedulerFactory();\n      installed = true;\n\n      return self;\n    };\n\n    self.uninstall = function() {\n      delayedFunctionScheduler = null;\n      mockDate.uninstall();\n      replace(global, realTimingFunctions);\n\n      timer = realTimingFunctions;\n      installed = false;\n    };\n\n    self.withMock = function(closure) {\n      this.install();\n      try {\n        closure();\n      } finally {\n        this.uninstall();\n      }\n    };\n\n    self.mockDate = function(initialDate) {\n      mockDate.install(initialDate);\n    };\n\n    self.setTimeout = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');\n        }\n        return timer.setTimeout(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);\n    };\n\n    self.setInterval = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');\n        }\n        return timer.setInterval(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);\n    };\n\n    self.clearTimeout = function(id) {\n      return Function.prototype.call.apply(timer.clearTimeout, [global, id]);\n    };\n\n    self.clearInterval = function(id) {\n      return Function.prototype.call.apply(timer.clearInterval, [global, id]);\n    };\n\n    self.tick = function(millis) {\n      if (installed) {\n        mockDate.tick(millis);\n        delayedFunctionScheduler.tick(millis);\n      } else {\n        throw new Error('Mock clock is not installed, use jasmine.clock().install()');\n      }\n    };\n\n    return self;\n\n    function originalTimingFunctionsIntact() {\n      return global.setTimeout === realTimingFunctions.setTimeout &&\n        global.clearTimeout === realTimingFunctions.clearTimeout &&\n        global.setInterval === realTimingFunctions.setInterval &&\n        global.clearInterval === realTimingFunctions.clearInterval;\n    }\n\n    function legacyIE() {\n      //if these methods are polyfilled, apply will be present\n      return !(realTimingFunctions.setTimeout || realTimingFunctions.setInterval).apply;\n    }\n\n    function replace(dest, source) {\n      for (var prop in source) {\n        dest[prop] = source[prop];\n      }\n    }\n\n    function setTimeout(fn, delay) {\n      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));\n    }\n\n    function clearTimeout(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function setInterval(fn, interval) {\n      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);\n    }\n\n    function clearInterval(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function argSlice(argsObj, n) {\n      return Array.prototype.slice.call(argsObj, n);\n    }\n  }\n\n  return Clock;\n};\n\ngetJasmineRequireObj().DelayedFunctionScheduler = function() {\n  function DelayedFunctionScheduler() {\n    var self = this;\n    var scheduledLookup = [];\n    var scheduledFunctions = {};\n    var currentTime = 0;\n    var delayedFnCount = 0;\n\n    self.tick = function(millis) {\n      millis = millis || 0;\n      var endTime = currentTime + millis;\n\n      runScheduledFunctions(endTime);\n      currentTime = endTime;\n    };\n\n    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {\n      var f;\n      if (typeof(funcToCall) === 'string') {\n        /* jshint evil: true */\n        f = function() { return eval(funcToCall); };\n        /* jshint evil: false */\n      } else {\n        f = funcToCall;\n      }\n\n      millis = millis || 0;\n      timeoutKey = timeoutKey || ++delayedFnCount;\n      runAtMillis = runAtMillis || (currentTime + millis);\n\n      var funcToSchedule = {\n        runAtMillis: runAtMillis,\n        funcToCall: f,\n        recurring: recurring,\n        params: params,\n        timeoutKey: timeoutKey,\n        millis: millis\n      };\n\n      if (runAtMillis in scheduledFunctions) {\n        scheduledFunctions[runAtMillis].push(funcToSchedule);\n      } else {\n        scheduledFunctions[runAtMillis] = [funcToSchedule];\n        scheduledLookup.push(runAtMillis);\n        scheduledLookup.sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return timeoutKey;\n    };\n\n    self.removeFunctionWithId = function(timeoutKey) {\n      for (var runAtMillis in scheduledFunctions) {\n        var funcs = scheduledFunctions[runAtMillis];\n        var i = indexOfFirstToPass(funcs, function (func) {\n          return func.timeoutKey === timeoutKey;\n        });\n\n        if (i > -1) {\n          if (funcs.length === 1) {\n            delete scheduledFunctions[runAtMillis];\n            deleteFromLookup(runAtMillis);\n          } else {\n            funcs.splice(i, 1);\n          }\n\n          // intervals get rescheduled when executed, so there's never more\n          // than a single scheduled function with a given timeoutKey\n          break;\n        }\n      }\n    };\n\n    return self;\n\n    function indexOfFirstToPass(array, testFn) {\n      var index = -1;\n\n      for (var i = 0; i < array.length; ++i) {\n        if (testFn(array[i])) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n\n    function deleteFromLookup(key) {\n      var value = Number(key);\n      var i = indexOfFirstToPass(scheduledLookup, function (millis) {\n        return millis === value;\n      });\n\n      if (i > -1) {\n        scheduledLookup.splice(i, 1);\n      }\n    }\n\n    function reschedule(scheduledFn) {\n      self.scheduleFunction(scheduledFn.funcToCall,\n        scheduledFn.millis,\n        scheduledFn.params,\n        true,\n        scheduledFn.timeoutKey,\n        scheduledFn.runAtMillis + scheduledFn.millis);\n    }\n\n    function forEachFunction(funcsToRun, callback) {\n      for (var i = 0; i < funcsToRun.length; ++i) {\n        callback(funcsToRun[i]);\n      }\n    }\n\n    function runScheduledFunctions(endTime) {\n      if (scheduledLookup.length === 0 || scheduledLookup[0] > endTime) {\n        return;\n      }\n\n      do {\n        currentTime = scheduledLookup.shift();\n\n        var funcsToRun = scheduledFunctions[currentTime];\n        delete scheduledFunctions[currentTime];\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          if (funcToRun.recurring) {\n            reschedule(funcToRun);\n          }\n        });\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          funcToRun.funcToCall.apply(null, funcToRun.params || []);\n        });\n      } while (scheduledLookup.length > 0 &&\n              // checking first if we're out of time prevents setTimeout(0)\n              // scheduled in a funcToRun from forcing an extra iteration\n                 currentTime !== endTime  &&\n                 scheduledLookup[0] <= endTime);\n    }\n  }\n\n  return DelayedFunctionScheduler;\n};\n\ngetJasmineRequireObj().ExceptionFormatter = function() {\n  function ExceptionFormatter() {\n    this.message = function(error) {\n      var message = '';\n\n      if (error.name && error.message) {\n        message += error.name + ': ' + error.message;\n      } else {\n        message += error.toString() + ' thrown';\n      }\n\n      if (error.fileName || error.sourceURL) {\n        message += ' in ' + (error.fileName || error.sourceURL);\n      }\n\n      if (error.line || error.lineNumber) {\n        message += ' (line ' + (error.line || error.lineNumber) + ')';\n      }\n\n      return message;\n    };\n\n    this.stack = function(error) {\n      return error ? error.stack : null;\n    };\n  }\n\n  return ExceptionFormatter;\n};\n\ngetJasmineRequireObj().Expectation = function() {\n\n  function Expectation(options) {\n    this.util = options.util || { buildFailureMessage: function() {} };\n    this.customEqualityTesters = options.customEqualityTesters || [];\n    this.actual = options.actual;\n    this.addExpectationResult = options.addExpectationResult || function(){};\n    this.isNot = options.isNot;\n\n    var customMatchers = options.customMatchers || {};\n    for (var matcherName in customMatchers) {\n      this[matcherName] = Expectation.prototype.wrapCompare(matcherName, customMatchers[matcherName]);\n    }\n  }\n\n  Expectation.prototype.wrapCompare = function(name, matcherFactory) {\n    return function() {\n      var args = Array.prototype.slice.call(arguments, 0),\n        expected = args.slice(0),\n        message = '';\n\n      args.unshift(this.actual);\n\n      var matcher = matcherFactory(this.util, this.customEqualityTesters),\n          matcherCompare = matcher.compare;\n\n      function defaultNegativeCompare() {\n        var result = matcher.compare.apply(null, args);\n        result.pass = !result.pass;\n        return result;\n      }\n\n      if (this.isNot) {\n        matcherCompare = matcher.negativeCompare || defaultNegativeCompare;\n      }\n\n      var result = matcherCompare.apply(null, args);\n\n      if (!result.pass) {\n        if (!result.message) {\n          args.unshift(this.isNot);\n          args.unshift(name);\n          message = this.util.buildFailureMessage.apply(null, args);\n        } else {\n          if (Object.prototype.toString.apply(result.message) === '[object Function]') {\n            message = result.message();\n          } else {\n            message = result.message;\n          }\n        }\n      }\n\n      if (expected.length == 1) {\n        expected = expected[0];\n      }\n\n      // TODO: how many of these params are needed?\n      this.addExpectationResult(\n        result.pass,\n        {\n          matcherName: name,\n          passed: result.pass,\n          message: message,\n          actual: this.actual,\n          expected: expected // TODO: this may need to be arrayified/sliced\n        }\n      );\n    };\n  };\n\n  Expectation.addCoreMatchers = function(matchers) {\n    var prototype = Expectation.prototype;\n    for (var matcherName in matchers) {\n      var matcher = matchers[matcherName];\n      prototype[matcherName] = prototype.wrapCompare(matcherName, matcher);\n    }\n  };\n\n  Expectation.Factory = function(options) {\n    options = options || {};\n\n    var expect = new Expectation(options);\n\n    // TODO: this would be nice as its own Object - NegativeExpectation\n    // TODO: copy instead of mutate options\n    options.isNot = true;\n    expect.not = new Expectation(options);\n\n    return expect;\n  };\n\n  return Expectation;\n};\n\n//TODO: expectation result may make more sense as a presentation of an expectation.\ngetJasmineRequireObj().buildExpectationResult = function() {\n  function buildExpectationResult(options) {\n    var messageFormatter = options.messageFormatter || function() {},\n      stackFormatter = options.stackFormatter || function() {};\n\n    var result = {\n      matcherName: options.matcherName,\n      message: message(),\n      stack: stack(),\n      passed: options.passed\n    };\n\n    if(!result.passed) {\n      result.expected = options.expected;\n      result.actual = options.actual;\n    }\n\n    return result;\n\n    function message() {\n      if (options.passed) {\n        return 'Passed.';\n      } else if (options.message) {\n        return options.message;\n      } else if (options.error) {\n        return messageFormatter(options.error);\n      }\n      return '';\n    }\n\n    function stack() {\n      if (options.passed) {\n        return '';\n      }\n\n      var error = options.error;\n      if (!error) {\n        try {\n          throw new Error(message());\n        } catch (e) {\n          error = e;\n        }\n      }\n      return stackFormatter(error);\n    }\n  }\n\n  return buildExpectationResult;\n};\n\ngetJasmineRequireObj().MockDate = function() {\n  function MockDate(global) {\n    var self = this;\n    var currentTime = 0;\n\n    if (!global || !global.Date) {\n      self.install = function() {};\n      self.tick = function() {};\n      self.uninstall = function() {};\n      return self;\n    }\n\n    var GlobalDate = global.Date;\n\n    self.install = function(mockDate) {\n      if (mockDate instanceof GlobalDate) {\n        currentTime = mockDate.getTime();\n      } else {\n        currentTime = new GlobalDate().getTime();\n      }\n\n      global.Date = FakeDate;\n    };\n\n    self.tick = function(millis) {\n      millis = millis || 0;\n      currentTime = currentTime + millis;\n    };\n\n    self.uninstall = function() {\n      currentTime = 0;\n      global.Date = GlobalDate;\n    };\n\n    createDateProperties();\n\n    return self;\n\n    function FakeDate() {\n      switch(arguments.length) {\n        case 0:\n          return new GlobalDate(currentTime);\n        case 1:\n          return new GlobalDate(arguments[0]);\n        case 2:\n          return new GlobalDate(arguments[0], arguments[1]);\n        case 3:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2]);\n        case 4:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);\n        case 5:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4]);\n        case 6:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5]);\n        default:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5], arguments[6]);\n      }\n    }\n\n    function createDateProperties() {\n      FakeDate.prototype = GlobalDate.prototype;\n\n      FakeDate.now = function() {\n        if (GlobalDate.now) {\n          return currentTime;\n        } else {\n          throw new Error('Browser does not support Date.now()');\n        }\n      };\n\n      FakeDate.toSource = GlobalDate.toSource;\n      FakeDate.toString = GlobalDate.toString;\n      FakeDate.parse = GlobalDate.parse;\n      FakeDate.UTC = GlobalDate.UTC;\n    }\n\t}\n\n  return MockDate;\n};\n\ngetJasmineRequireObj().pp = function(j$) {\n\n  function PrettyPrinter() {\n    this.ppNestLevel_ = 0;\n    this.seen = [];\n  }\n\n  PrettyPrinter.prototype.format = function(value) {\n    this.ppNestLevel_++;\n    try {\n      if (j$.util.isUndefined(value)) {\n        this.emitScalar('undefined');\n      } else if (value === null) {\n        this.emitScalar('null');\n      } else if (value === 0 && 1/value === -Infinity) {\n        this.emitScalar('-0');\n      } else if (value === j$.getGlobal()) {\n        this.emitScalar('<global>');\n      } else if (value.jasmineToString) {\n        this.emitScalar(value.jasmineToString());\n      } else if (typeof value === 'string') {\n        this.emitString(value);\n      } else if (j$.isSpy(value)) {\n        this.emitScalar('spy on ' + value.and.identity());\n      } else if (value instanceof RegExp) {\n        this.emitScalar(value.toString());\n      } else if (typeof value === 'function') {\n        this.emitScalar('Function');\n      } else if (typeof value.nodeType === 'number') {\n        this.emitScalar('HTMLNode');\n      } else if (value instanceof Date) {\n        this.emitScalar('Date(' + value + ')');\n      } else if (j$.util.arrayContains(this.seen, value)) {\n        this.emitScalar('<circular reference: ' + (j$.isArray_(value) ? 'Array' : 'Object') + '>');\n      } else if (j$.isArray_(value) || j$.isA_('Object', value)) {\n        this.seen.push(value);\n        if (j$.isArray_(value)) {\n          this.emitArray(value);\n        } else {\n          this.emitObject(value);\n        }\n        this.seen.pop();\n      } else {\n        this.emitScalar(value.toString());\n      }\n    } finally {\n      this.ppNestLevel_--;\n    }\n  };\n\n  PrettyPrinter.prototype.iterateObject = function(obj, fn) {\n    for (var property in obj) {\n      if (!Object.prototype.hasOwnProperty.call(obj, property)) { continue; }\n      fn(property, obj.__lookupGetter__ ? (!j$.util.isUndefined(obj.__lookupGetter__(property)) &&\n          obj.__lookupGetter__(property) !== null) : false);\n    }\n  };\n\n  PrettyPrinter.prototype.emitArray = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitObject = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitScalar = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitString = j$.unimplementedMethod_;\n\n  function StringPrettyPrinter() {\n    PrettyPrinter.call(this);\n\n    this.string = '';\n  }\n\n  j$.util.inherit(StringPrettyPrinter, PrettyPrinter);\n\n  StringPrettyPrinter.prototype.emitScalar = function(value) {\n    this.append(value);\n  };\n\n  StringPrettyPrinter.prototype.emitString = function(value) {\n    this.append('\\'' + value + '\\'');\n  };\n\n  StringPrettyPrinter.prototype.emitArray = function(array) {\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {\n      this.append('Array');\n      return;\n    }\n    var length = Math.min(array.length, j$.MAX_PRETTY_PRINT_ARRAY_LENGTH);\n    this.append('[ ');\n    for (var i = 0; i < length; i++) {\n      if (i > 0) {\n        this.append(', ');\n      }\n      this.format(array[i]);\n    }\n    if(array.length > length){\n      this.append(', ...');\n    }\n\n    var self = this;\n    var first = array.length === 0;\n    this.iterateObject(array, function(property, isGetter) {\n      if (property.match(/^\\d+$/)) {\n        return;\n      }\n\n      if (first) {\n        first = false;\n      } else {\n        self.append(', ');\n      }\n\n      self.formatProperty(array, property, isGetter);\n    });\n\n    this.append(' ]');\n  };\n\n  StringPrettyPrinter.prototype.emitObject = function(obj) {\n    var constructorName = obj.constructor ? j$.fnNameFor(obj.constructor) : 'null';\n    this.append(constructorName);\n\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {\n      return;\n    }\n\n    var self = this;\n    this.append('({ ');\n    var first = true;\n\n    this.iterateObject(obj, function(property, isGetter) {\n      if (first) {\n        first = false;\n      } else {\n        self.append(', ');\n      }\n\n      self.formatProperty(obj, property, isGetter);\n    });\n\n    this.append(' })');\n  };\n\n  StringPrettyPrinter.prototype.formatProperty = function(obj, property, isGetter) {\n      this.append(property);\n      this.append(': ');\n      if (isGetter) {\n        this.append('<getter>');\n      } else {\n        this.format(obj[property]);\n      }\n  };\n\n  StringPrettyPrinter.prototype.append = function(value) {\n    this.string += value;\n  };\n\n  return function(value) {\n    var stringPrettyPrinter = new StringPrettyPrinter();\n    stringPrettyPrinter.format(value);\n    return stringPrettyPrinter.string;\n  };\n};\n\ngetJasmineRequireObj().QueueRunner = function(j$) {\n\n  function once(fn) {\n    var called = false;\n    return function() {\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n  }\n\n  function QueueRunner(attrs) {\n    this.queueableFns = attrs.queueableFns || [];\n    this.onComplete = attrs.onComplete || function() {};\n    this.clearStack = attrs.clearStack || function(fn) {fn();};\n    this.onException = attrs.onException || function() {};\n    this.catchException = attrs.catchException || function() { return true; };\n    this.userContext = attrs.userContext || {};\n    this.timeout = attrs.timeout || {setTimeout: setTimeout, clearTimeout: clearTimeout};\n    this.fail = attrs.fail || function() {};\n  }\n\n  QueueRunner.prototype.execute = function() {\n    this.run(this.queueableFns, 0);\n  };\n\n  QueueRunner.prototype.run = function(queueableFns, recursiveIndex) {\n    var length = queueableFns.length,\n      self = this,\n      iterativeIndex;\n\n\n    for(iterativeIndex = recursiveIndex; iterativeIndex < length; iterativeIndex++) {\n      var queueableFn = queueableFns[iterativeIndex];\n      if (queueableFn.fn.length > 0) {\n        attemptAsync(queueableFn);\n        return;\n      } else {\n        attemptSync(queueableFn);\n      }\n    }\n\n    var runnerDone = iterativeIndex >= length;\n\n    if (runnerDone) {\n      this.clearStack(this.onComplete);\n    }\n\n    function attemptSync(queueableFn) {\n      try {\n        queueableFn.fn.call(self.userContext);\n      } catch (e) {\n        handleException(e, queueableFn);\n      }\n    }\n\n    function attemptAsync(queueableFn) {\n      var clearTimeout = function () {\n          Function.prototype.apply.apply(self.timeout.clearTimeout, [j$.getGlobal(), [timeoutId]]);\n        },\n        next = once(function () {\n          clearTimeout(timeoutId);\n          self.run(queueableFns, iterativeIndex + 1);\n        }),\n        timeoutId;\n\n      next.fail = function() {\n        self.fail.apply(null, arguments);\n        next();\n      };\n\n      if (queueableFn.timeout) {\n        timeoutId = Function.prototype.apply.apply(self.timeout.setTimeout, [j$.getGlobal(), [function() {\n          var error = new Error('Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.');\n          onException(error, queueableFn);\n          next();\n        }, queueableFn.timeout()]]);\n      }\n\n      try {\n        queueableFn.fn.call(self.userContext, next);\n      } catch (e) {\n        handleException(e, queueableFn);\n        next();\n      }\n    }\n\n    function onException(e, queueableFn) {\n      self.onException(e);\n    }\n\n    function handleException(e, queueableFn) {\n      onException(e, queueableFn);\n      if (!self.catchException(e)) {\n        //TODO: set a var when we catch an exception and\n        //use a finally block to close the loop in a nice way..\n        throw e;\n      }\n    }\n  };\n\n  return QueueRunner;\n};\n\ngetJasmineRequireObj().ReportDispatcher = function() {\n  function ReportDispatcher(methods) {\n\n    var dispatchedMethods = methods || [];\n\n    for (var i = 0; i < dispatchedMethods.length; i++) {\n      var method = dispatchedMethods[i];\n      this[method] = (function(m) {\n        return function() {\n          dispatch(m, arguments);\n        };\n      }(method));\n    }\n\n    var reporters = [];\n\n    this.addReporter = function(reporter) {\n      reporters.push(reporter);\n    };\n\n    return this;\n\n    function dispatch(method, args) {\n      for (var i = 0; i < reporters.length; i++) {\n        var reporter = reporters[i];\n        if (reporter[method]) {\n          reporter[method].apply(reporter, args);\n        }\n      }\n    }\n  }\n\n  return ReportDispatcher;\n};\n\n\ngetJasmineRequireObj().SpyRegistry = function(j$) {\n\n  function SpyRegistry(options) {\n    options = options || {};\n    var currentSpies = options.currentSpies || function() { return []; };\n\n    this.spyOn = function(obj, methodName) {\n      if (j$.util.isUndefined(obj)) {\n        throw new Error('spyOn could not find an object to spy upon for ' + methodName + '()');\n      }\n\n      if (j$.util.isUndefined(methodName)) {\n        throw new Error('No method name supplied');\n      }\n\n      if (j$.util.isUndefined(obj[methodName])) {\n        throw new Error(methodName + '() method does not exist');\n      }\n\n      if (obj[methodName] && j$.isSpy(obj[methodName])) {\n        //TODO?: should this return the current spy? Downside: may cause user confusion about spy state\n        throw new Error(methodName + ' has already been spied upon');\n      }\n\n      var spy = j$.createSpy(methodName, obj[methodName]);\n\n      currentSpies().push({\n        spy: spy,\n        baseObj: obj,\n        methodName: methodName,\n        originalValue: obj[methodName]\n      });\n\n      obj[methodName] = spy;\n\n      return spy;\n    };\n\n    this.clearSpies = function() {\n      var spies = currentSpies();\n      for (var i = 0; i < spies.length; i++) {\n        var spyEntry = spies[i];\n        spyEntry.baseObj[spyEntry.methodName] = spyEntry.originalValue;\n      }\n    };\n  }\n\n  return SpyRegistry;\n};\n\ngetJasmineRequireObj().SpyStrategy = function() {\n\n  function SpyStrategy(options) {\n    options = options || {};\n\n    var identity = options.name || 'unknown',\n        originalFn = options.fn || function() {},\n        getSpy = options.getSpy || function() {},\n        plan = function() {};\n\n    this.identity = function() {\n      return identity;\n    };\n\n    this.exec = function() {\n      return plan.apply(this, arguments);\n    };\n\n    this.callThrough = function() {\n      plan = originalFn;\n      return getSpy();\n    };\n\n    this.returnValue = function(value) {\n      plan = function() {\n        return value;\n      };\n      return getSpy();\n    };\n\n    this.returnValues = function() {\n      var values = Array.prototype.slice.call(arguments);\n      plan = function () {\n        return values.shift();\n      };\n      return getSpy();\n    };\n\n    this.throwError = function(something) {\n      var error = (something instanceof Error) ? something : new Error(something);\n      plan = function() {\n        throw error;\n      };\n      return getSpy();\n    };\n\n    this.callFake = function(fn) {\n      plan = fn;\n      return getSpy();\n    };\n\n    this.stub = function(fn) {\n      plan = function() {};\n      return getSpy();\n    };\n  }\n\n  return SpyStrategy;\n};\n\ngetJasmineRequireObj().Suite = function(j$) {\n  function Suite(attrs) {\n    this.env = attrs.env;\n    this.id = attrs.id;\n    this.parentSuite = attrs.parentSuite;\n    this.description = attrs.description;\n    this.expectationFactory = attrs.expectationFactory;\n    this.expectationResultFactory = attrs.expectationResultFactory;\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;\n\n    this.beforeFns = [];\n    this.afterFns = [];\n    this.beforeAllFns = [];\n    this.afterAllFns = [];\n    this.disabled = false;\n\n    this.children = [];\n\n    this.result = {\n      id: this.id,\n      description: this.description,\n      fullName: this.getFullName(),\n      failedExpectations: []\n    };\n  }\n\n  Suite.prototype.expect = function(actual) {\n    return this.expectationFactory(actual, this);\n  };\n\n  Suite.prototype.getFullName = function() {\n    var fullName = this.description;\n    for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n      if (parentSuite.parentSuite) {\n        fullName = parentSuite.description + ' ' + fullName;\n      }\n    }\n    return fullName;\n  };\n\n  Suite.prototype.disable = function() {\n    this.disabled = true;\n  };\n\n  Suite.prototype.beforeEach = function(fn) {\n    this.beforeFns.unshift(fn);\n  };\n\n  Suite.prototype.beforeAll = function(fn) {\n    this.beforeAllFns.push(fn);\n  };\n\n  Suite.prototype.afterEach = function(fn) {\n    this.afterFns.unshift(fn);\n  };\n\n  Suite.prototype.afterAll = function(fn) {\n    this.afterAllFns.push(fn);\n  };\n\n  Suite.prototype.addChild = function(child) {\n    this.children.push(child);\n  };\n\n  Suite.prototype.status = function() {\n    if (this.disabled) {\n      return 'disabled';\n    }\n\n    if (this.result.failedExpectations.length > 0) {\n      return 'failed';\n    } else {\n      return 'finished';\n    }\n  };\n\n  Suite.prototype.isExecutable = function() {\n    return !this.disabled;\n  };\n\n  Suite.prototype.canBeReentered = function() {\n    return this.beforeAllFns.length === 0 && this.afterAllFns.length === 0;\n  };\n\n  Suite.prototype.getResult = function() {\n    this.result.status = this.status();\n    return this.result;\n  };\n\n  Suite.prototype.sharedUserContext = function() {\n    if (!this.sharedContext) {\n      this.sharedContext = this.parentSuite ? clone(this.parentSuite.sharedUserContext()) : {};\n    }\n\n    return this.sharedContext;\n  };\n\n  Suite.prototype.clonedSharedUserContext = function() {\n    return clone(this.sharedUserContext());\n  };\n\n  Suite.prototype.onException = function() {\n    if (arguments[0] instanceof j$.errors.ExpectationFailed) {\n      return;\n    }\n\n    if(isAfterAll(this.children)) {\n      var data = {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        error: arguments[0]\n      };\n      this.result.failedExpectations.push(this.expectationResultFactory(data));\n    } else {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.onException.apply(child, arguments);\n      }\n    }\n  };\n\n  Suite.prototype.addExpectationResult = function () {\n    if(isAfterAll(this.children) && isFailure(arguments)){\n      var data = arguments[1];\n      this.result.failedExpectations.push(this.expectationResultFactory(data));\n      if(this.throwOnExpectationFailure) {\n        throw new j$.errors.ExpectationFailed();\n      }\n    } else {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        try {\n          child.addExpectationResult.apply(child, arguments);\n        } catch(e) {\n          // keep going\n        }\n      }\n    }\n  };\n\n  function isAfterAll(children) {\n    return children && children[0].result.status;\n  }\n\n  function isFailure(args) {\n    return !args[0];\n  }\n\n  function clone(obj) {\n    var clonedObj = {};\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        clonedObj[prop] = obj[prop];\n      }\n    }\n\n    return clonedObj;\n  }\n\n  return Suite;\n};\n\nif (typeof window == void 0 && typeof exports == 'object') {\n  exports.Suite = jasmineRequire.Suite;\n}\n\ngetJasmineRequireObj().Timer = function() {\n  var defaultNow = (function(Date) {\n    return function() { return new Date().getTime(); };\n  })(Date);\n\n  function Timer(options) {\n    options = options || {};\n\n    var now = options.now || defaultNow,\n      startTime;\n\n    this.start = function() {\n      startTime = now();\n    };\n\n    this.elapsed = function() {\n      return now() - startTime;\n    };\n  }\n\n  return Timer;\n};\n\ngetJasmineRequireObj().TreeProcessor = function() {\n  function TreeProcessor(attrs) {\n    var tree = attrs.tree,\n        runnableIds = attrs.runnableIds,\n        queueRunnerFactory = attrs.queueRunnerFactory,\n        nodeStart = attrs.nodeStart || function() {},\n        nodeComplete = attrs.nodeComplete || function() {},\n        stats = { valid: true },\n        processed = false,\n        defaultMin = Infinity,\n        defaultMax = 1 - Infinity;\n\n    this.processTree = function() {\n      processNode(tree, false);\n      processed = true;\n      return stats;\n    };\n\n    this.execute = function(done) {\n      if (!processed) {\n        this.processTree();\n      }\n\n      if (!stats.valid) {\n        throw 'invalid order';\n      }\n\n      var childFns = wrapChildren(tree, 0);\n\n      queueRunnerFactory({\n        queueableFns: childFns,\n        userContext: tree.sharedUserContext(),\n        onException: function() {\n          tree.onException.apply(tree, arguments);\n        },\n        onComplete: done\n      });\n    };\n\n    function runnableIndex(id) {\n      for (var i = 0; i < runnableIds.length; i++) {\n        if (runnableIds[i] === id) {\n          return i;\n        }\n      }\n    }\n\n    function processNode(node, parentEnabled) {\n      var executableIndex = runnableIndex(node.id);\n\n      if (executableIndex !== undefined) {\n        parentEnabled = true;\n      }\n\n      parentEnabled = parentEnabled && node.isExecutable();\n\n      if (!node.children) {\n        stats[node.id] = {\n          executable: parentEnabled && node.isExecutable(),\n          segments: [{\n            index: 0,\n            owner: node,\n            nodes: [node],\n            min: startingMin(executableIndex),\n            max: startingMax(executableIndex)\n          }]\n        };\n      } else {\n        var hasExecutableChild = false;\n\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n\n          processNode(child, parentEnabled);\n\n          if (!stats.valid) {\n            return;\n          }\n\n          var childStats = stats[child.id];\n\n          hasExecutableChild = hasExecutableChild || childStats.executable;\n        }\n\n        stats[node.id] = {\n          executable: hasExecutableChild\n        };\n\n        segmentChildren(node, stats[node.id], executableIndex);\n\n        if (!node.canBeReentered() && stats[node.id].segments.length > 1) {\n          stats = { valid: false };\n        }\n      }\n    }\n\n    function startingMin(executableIndex) {\n      return executableIndex === undefined ? defaultMin : executableIndex;\n    }\n\n    function startingMax(executableIndex) {\n      return executableIndex === undefined ? defaultMax : executableIndex;\n    }\n\n    function segmentChildren(node, nodeStats, executableIndex) {\n      var currentSegment = { index: 0, owner: node, nodes: [], min: startingMin(executableIndex), max: startingMax(executableIndex) },\n          result = [currentSegment],\n          lastMax = defaultMax,\n          orderedChildSegments = orderChildSegments(node.children);\n\n      function isSegmentBoundary(minIndex) {\n        return lastMax !== defaultMax && minIndex !== defaultMin && lastMax < minIndex - 1;\n      }\n\n      for (var i = 0; i < orderedChildSegments.length; i++) {\n        var childSegment = orderedChildSegments[i],\n          maxIndex = childSegment.max,\n          minIndex = childSegment.min;\n\n        if (isSegmentBoundary(minIndex)) {\n          currentSegment = {index: result.length, owner: node, nodes: [], min: defaultMin, max: defaultMax};\n          result.push(currentSegment);\n        }\n\n        currentSegment.nodes.push(childSegment);\n        currentSegment.min = Math.min(currentSegment.min, minIndex);\n        currentSegment.max = Math.max(currentSegment.max, maxIndex);\n        lastMax = maxIndex;\n      }\n\n      nodeStats.segments = result;\n    }\n\n    function orderChildSegments(children) {\n      var specifiedOrder = [],\n          unspecifiedOrder = [];\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i],\n            segments = stats[child.id].segments;\n\n        for (var j = 0; j < segments.length; j++) {\n          var seg = segments[j];\n\n          if (seg.min === defaultMin) {\n            unspecifiedOrder.push(seg);\n          } else {\n            specifiedOrder.push(seg);\n          }\n        }\n      }\n\n      specifiedOrder.sort(function(a, b) {\n        return a.min - b.min;\n      });\n\n      return specifiedOrder.concat(unspecifiedOrder);\n    }\n\n    function executeNode(node, segmentNumber) {\n      if (node.children) {\n        return {\n          fn: function(done) {\n            nodeStart(node);\n\n            queueRunnerFactory({\n              onComplete: function() {\n                nodeComplete(node, node.getResult());\n                done();\n              },\n              queueableFns: wrapChildren(node, segmentNumber),\n              userContext: node.sharedUserContext(),\n              onException: function() {\n                node.onException.apply(node, arguments);\n              }\n            });\n          }\n        };\n      } else {\n        return {\n          fn: function(done) { node.execute(done, stats[node.id].executable); }\n        };\n      }\n    }\n\n    function wrapChildren(node, segmentNumber) {\n      var result = [],\n          segmentChildren = stats[node.id].segments[segmentNumber].nodes;\n\n      for (var i = 0; i < segmentChildren.length; i++) {\n        result.push(executeNode(segmentChildren[i].owner, segmentChildren[i].index));\n      }\n\n      if (!stats[node.id].executable) {\n        return result;\n      }\n\n      return node.beforeAllFns.concat(result).concat(node.afterAllFns);\n    }\n  }\n\n  return TreeProcessor;\n};\n\ngetJasmineRequireObj().Any = function(j$) {\n\n  function Any(expectedObject) {\n    this.expectedObject = expectedObject;\n  }\n\n  Any.prototype.asymmetricMatch = function(other) {\n    if (this.expectedObject == String) {\n      return typeof other == 'string' || other instanceof String;\n    }\n\n    if (this.expectedObject == Number) {\n      return typeof other == 'number' || other instanceof Number;\n    }\n\n    if (this.expectedObject == Function) {\n      return typeof other == 'function' || other instanceof Function;\n    }\n\n    if (this.expectedObject == Object) {\n      return typeof other == 'object';\n    }\n\n    if (this.expectedObject == Boolean) {\n      return typeof other == 'boolean';\n    }\n\n    return other instanceof this.expectedObject;\n  };\n\n  Any.prototype.jasmineToString = function() {\n    return '<jasmine.any(' + j$.fnNameFor(this.expectedObject) + ')>';\n  };\n\n  return Any;\n};\n\ngetJasmineRequireObj().Anything = function(j$) {\n\n  function Anything() {}\n\n  Anything.prototype.asymmetricMatch = function(other) {\n    return !j$.util.isUndefined(other) && other !== null;\n  };\n\n  Anything.prototype.jasmineToString = function() {\n    return '<jasmine.anything>';\n  };\n\n  return Anything;\n};\n\ngetJasmineRequireObj().ArrayContaining = function(j$) {\n  function ArrayContaining(sample) {\n    this.sample = sample;\n  }\n\n  ArrayContaining.prototype.asymmetricMatch = function(other) {\n    var className = Object.prototype.toString.call(this.sample);\n    if (className !== '[object Array]') { throw new Error('You must provide an array to arrayContaining, not \\'' + this.sample + '\\'.'); }\n\n    for (var i = 0; i < this.sample.length; i++) {\n      var item = this.sample[i];\n      if (!j$.matchersUtil.contains(other, item)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ArrayContaining.prototype.jasmineToString = function () {\n    return '<jasmine.arrayContaining(' + jasmine.pp(this.sample) +')>';\n  };\n\n  return ArrayContaining;\n};\n\ngetJasmineRequireObj().ObjectContaining = function(j$) {\n\n  function ObjectContaining(sample) {\n    this.sample = sample;\n  }\n\n  function getPrototype(obj) {\n    if (Object.getPrototypeOf) {\n      return Object.getPrototypeOf(obj);\n    }\n\n    if (obj.constructor.prototype == obj) {\n      return null;\n    }\n\n    return obj.constructor.prototype;\n  }\n\n  function hasProperty(obj, property) {\n    if (!obj) {\n      return false;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      return true;\n    }\n\n    return hasProperty(getPrototype(obj), property);\n  }\n\n  ObjectContaining.prototype.asymmetricMatch = function(other) {\n    if (typeof(this.sample) !== 'object') { throw new Error('You must provide an object to objectContaining, not \\''+this.sample+'\\'.'); }\n\n    for (var property in this.sample) {\n      if (!hasProperty(other, property) ||\n          !j$.matchersUtil.equals(this.sample[property], other[property])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ObjectContaining.prototype.jasmineToString = function() {\n    return '<jasmine.objectContaining(' + j$.pp(this.sample) + ')>';\n  };\n\n  return ObjectContaining;\n};\n\ngetJasmineRequireObj().StringMatching = function(j$) {\n\n  function StringMatching(expected) {\n    if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {\n      throw new Error('Expected is not a String or a RegExp');\n    }\n\n    this.regexp = new RegExp(expected);\n  }\n\n  StringMatching.prototype.asymmetricMatch = function(other) {\n    return this.regexp.test(other);\n  };\n\n  StringMatching.prototype.jasmineToString = function() {\n    return '<jasmine.stringMatching(' + this.regexp + ')>';\n  };\n\n  return StringMatching;\n};\n\ngetJasmineRequireObj().errors = function() {\n  function ExpectationFailed() {}\n\n  ExpectationFailed.prototype = new Error();\n  ExpectationFailed.prototype.constructor = ExpectationFailed;\n\n  return {\n    ExpectationFailed: ExpectationFailed\n  };\n};\ngetJasmineRequireObj().matchersUtil = function(j$) {\n  // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?\n\n  return {\n    equals: function(a, b, customTesters) {\n      customTesters = customTesters || [];\n\n      return eq(a, b, [], [], customTesters);\n    },\n\n    contains: function(haystack, needle, customTesters) {\n      customTesters = customTesters || [];\n\n      if ((Object.prototype.toString.apply(haystack) === '[object Array]') ||\n        (!!haystack && !haystack.indexOf))\n      {\n        for (var i = 0; i < haystack.length; i++) {\n          if (eq(haystack[i], needle, [], [], customTesters)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      return !!haystack && haystack.indexOf(needle) >= 0;\n    },\n\n    buildFailureMessage: function() {\n      var args = Array.prototype.slice.call(arguments, 0),\n        matcherName = args[0],\n        isNot = args[1],\n        actual = args[2],\n        expected = args.slice(3),\n        englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n\n      var message = 'Expected ' +\n        j$.pp(actual) +\n        (isNot ? ' not ' : ' ') +\n        englishyPredicate;\n\n      if (expected.length > 0) {\n        for (var i = 0; i < expected.length; i++) {\n          if (i > 0) {\n            message += ',';\n          }\n          message += ' ' + j$.pp(expected[i]);\n        }\n      }\n\n      return message + '.';\n    }\n  };\n\n  function isAsymmetric(obj) {\n    return obj && j$.isA_('Function', obj.asymmetricMatch);\n  }\n\n  function asymmetricMatch(a, b) {\n    var asymmetricA = isAsymmetric(a),\n        asymmetricB = isAsymmetric(b);\n\n    if (asymmetricA && asymmetricB) {\n      return undefined;\n    }\n\n    if (asymmetricA) {\n      return a.asymmetricMatch(b);\n    }\n\n    if (asymmetricB) {\n      return b.asymmetricMatch(a);\n    }\n  }\n\n  // Equality function lovingly adapted from isEqual in\n  //   [Underscore](http://underscorejs.org)\n  function eq(a, b, aStack, bStack, customTesters) {\n    var result = true;\n\n    var asymmetricResult = asymmetricMatch(a, b);\n    if (!j$.util.isUndefined(asymmetricResult)) {\n      return asymmetricResult;\n    }\n\n    for (var i = 0; i < customTesters.length; i++) {\n      var customTesterResult = customTesters[i](a, b);\n      if (!j$.util.isUndefined(customTesterResult)) {\n        return customTesterResult;\n      }\n    }\n\n    if (a instanceof Error && b instanceof Error) {\n      return a.message == b.message;\n    }\n\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) { return a !== 0 || 1 / a == 1 / b; }\n    // A strict comparison is necessary because `null == undefined`.\n    if (a === null || b === null) { return a === b; }\n    var className = Object.prototype.toString.call(a);\n    if (className != Object.prototype.toString.call(b)) { return false; }\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a === 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n          a.global == b.global &&\n          a.multiline == b.multiline &&\n          a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') { return false; }\n\n    var aIsDomNode = j$.isDomNode(a);\n    var bIsDomNode = j$.isDomNode(b);\n    if (aIsDomNode && bIsDomNode) {\n      // At first try to use DOM3 method isEqualNode\n      if (a.isEqualNode) {\n        return a.isEqualNode(b);\n      }\n      // IE8 doesn't support isEqualNode, try to use outerHTML && innerText\n      var aIsElement = a instanceof Element;\n      var bIsElement = b instanceof Element;\n      if (aIsElement && bIsElement) {\n        return a.outerHTML == b.outerHTML;\n      }\n      if (aIsElement || bIsElement) {\n        return false;\n      }\n      return a.innerText == b.innerText && a.textContent == b.textContent;\n    }\n    if (aIsDomNode || bIsDomNode) {\n      return false;\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) { return bStack[length] == b; }\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0;\n    // Recursively compare objects and arrays.\n    // Compare array lengths to determine if a deep comparison is necessary.\n    if (className == '[object Array]' && a.length !== b.length) {\n      result = false;\n    }\n\n    if (result) {\n      // Objects with different constructors are not equivalent, but `Object`s\n      // or `Array`s from different frames are.\n      if (className !== '[object Array]') {\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\n               isFunction(bCtor) && bCtor instanceof bCtor)) {\n          return false;\n        }\n      }\n      // Deep compare objects.\n      for (var key in a) {\n        if (has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = has(b, key) && eq(a[key], b[key], aStack, bStack, customTesters))) { break; }\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (has(b, key) && !(size--)) { break; }\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n\n    return result;\n\n    function has(obj, key) {\n      return Object.prototype.hasOwnProperty.call(obj, key);\n    }\n\n    function isFunction(obj) {\n      return typeof obj === 'function';\n    }\n  }\n};\n\ngetJasmineRequireObj().toBe = function() {\n  function toBe() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual === expected\n        };\n      }\n    };\n  }\n\n  return toBe;\n};\n\ngetJasmineRequireObj().toBeCloseTo = function() {\n\n  function toBeCloseTo() {\n    return {\n      compare: function(actual, expected, precision) {\n        if (precision !== 0) {\n          precision = precision || 2;\n        }\n\n        return {\n          pass: Math.abs(expected - actual) < (Math.pow(10, -precision) / 2)\n        };\n      }\n    };\n  }\n\n  return toBeCloseTo;\n};\n\ngetJasmineRequireObj().toBeDefined = function() {\n  function toBeDefined() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: (void 0 !== actual)\n        };\n      }\n    };\n  }\n\n  return toBeDefined;\n};\n\ngetJasmineRequireObj().toBeFalsy = function() {\n  function toBeFalsy() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: !!!actual\n        };\n      }\n    };\n  }\n\n  return toBeFalsy;\n};\n\ngetJasmineRequireObj().toBeGreaterThan = function() {\n\n  function toBeGreaterThan() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual > expected\n        };\n      }\n    };\n  }\n\n  return toBeGreaterThan;\n};\n\n\ngetJasmineRequireObj().toBeLessThan = function() {\n  function toBeLessThan() {\n    return {\n\n      compare: function(actual, expected) {\n        return {\n          pass: actual < expected\n        };\n      }\n    };\n  }\n\n  return toBeLessThan;\n};\ngetJasmineRequireObj().toBeNaN = function(j$) {\n\n  function toBeNaN() {\n    return {\n      compare: function(actual) {\n        var result = {\n          pass: (actual !== actual)\n        };\n\n        if (result.pass) {\n          result.message = 'Expected actual not to be NaN.';\n        } else {\n          result.message = function() { return 'Expected ' + j$.pp(actual) + ' to be NaN.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toBeNaN;\n};\n\ngetJasmineRequireObj().toBeNull = function() {\n\n  function toBeNull() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: actual === null\n        };\n      }\n    };\n  }\n\n  return toBeNull;\n};\n\ngetJasmineRequireObj().toBeTruthy = function() {\n\n  function toBeTruthy() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: !!actual\n        };\n      }\n    };\n  }\n\n  return toBeTruthy;\n};\n\ngetJasmineRequireObj().toBeUndefined = function() {\n\n  function toBeUndefined() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: void 0 === actual\n        };\n      }\n    };\n  }\n\n  return toBeUndefined;\n};\n\ngetJasmineRequireObj().toContain = function() {\n  function toContain(util, customEqualityTesters) {\n    customEqualityTesters = customEqualityTesters || [];\n\n    return {\n      compare: function(actual, expected) {\n\n        return {\n          pass: util.contains(actual, expected, customEqualityTesters)\n        };\n      }\n    };\n  }\n\n  return toContain;\n};\n\ngetJasmineRequireObj().toEqual = function() {\n\n  function toEqual(util, customEqualityTesters) {\n    customEqualityTesters = customEqualityTesters || [];\n\n    return {\n      compare: function(actual, expected) {\n        var result = {\n          pass: false\n        };\n\n        result.pass = util.equals(actual, expected, customEqualityTesters);\n\n        return result;\n      }\n    };\n  }\n\n  return toEqual;\n};\n\ngetJasmineRequireObj().toHaveBeenCalled = function(j$) {\n\n  function toHaveBeenCalled() {\n    return {\n      compare: function(actual) {\n        var result = {};\n\n        if (!j$.isSpy(actual)) {\n          throw new Error('Expected a spy, but got ' + j$.pp(actual) + '.');\n        }\n\n        if (arguments.length > 1) {\n          throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');\n        }\n\n        result.pass = actual.calls.any();\n\n        result.message = result.pass ?\n          'Expected spy ' + actual.and.identity() + ' not to have been called.' :\n          'Expected spy ' + actual.and.identity() + ' to have been called.';\n\n        return result;\n      }\n    };\n  }\n\n  return toHaveBeenCalled;\n};\n\ngetJasmineRequireObj().toHaveBeenCalledWith = function(j$) {\n\n  function toHaveBeenCalledWith(util, customEqualityTesters) {\n    return {\n      compare: function() {\n        var args = Array.prototype.slice.call(arguments, 0),\n          actual = args[0],\n          expectedArgs = args.slice(1),\n          result = { pass: false };\n\n        if (!j$.isSpy(actual)) {\n          throw new Error('Expected a spy, but got ' + j$.pp(actual) + '.');\n        }\n\n        if (!actual.calls.any()) {\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but it was never called.'; };\n          return result;\n        }\n\n        if (util.contains(actual.calls.allArgs(), expectedArgs, customEqualityTesters)) {\n          result.pass = true;\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' not to have been called with ' + j$.pp(expectedArgs) + ' but it was.'; };\n        } else {\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but actual calls were ' + j$.pp(actual.calls.allArgs()).replace(/^\\[ | \\]$/g, '') + '.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toHaveBeenCalledWith;\n};\n\ngetJasmineRequireObj().toMatch = function(j$) {\n\n  function toMatch() {\n    return {\n      compare: function(actual, expected) {\n        if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {\n          throw new Error('Expected is not a String or a RegExp');\n        }\n\n        var regexp = new RegExp(expected);\n\n        return {\n          pass: regexp.test(actual)\n        };\n      }\n    };\n  }\n\n  return toMatch;\n};\n\ngetJasmineRequireObj().toThrow = function(j$) {\n\n  function toThrow(util) {\n    return {\n      compare: function(actual, expected) {\n        var result = { pass: false },\n          threw = false,\n          thrown;\n\n        if (typeof actual != 'function') {\n          throw new Error('Actual is not a Function');\n        }\n\n        try {\n          actual();\n        } catch (e) {\n          threw = true;\n          thrown = e;\n        }\n\n        if (!threw) {\n          result.message = 'Expected function to throw an exception.';\n          return result;\n        }\n\n        if (arguments.length == 1) {\n          result.pass = true;\n          result.message = function() { return 'Expected function not to throw, but it threw ' + j$.pp(thrown) + '.'; };\n\n          return result;\n        }\n\n        if (util.equals(thrown, expected)) {\n          result.pass = true;\n          result.message = function() { return 'Expected function not to throw ' + j$.pp(expected) + '.'; };\n        } else {\n          result.message = function() { return 'Expected function to throw ' + j$.pp(expected) + ', but it threw ' +  j$.pp(thrown) + '.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toThrow;\n};\n\ngetJasmineRequireObj().toThrowError = function(j$) {\n  function toThrowError (util) {\n    return {\n      compare: function(actual) {\n        var threw = false,\n          pass = {pass: true},\n          fail = {pass: false},\n          thrown;\n\n        if (typeof actual != 'function') {\n          throw new Error('Actual is not a Function');\n        }\n\n        var errorMatcher = getMatcher.apply(null, arguments);\n\n        try {\n          actual();\n        } catch (e) {\n          threw = true;\n          thrown = e;\n        }\n\n        if (!threw) {\n          fail.message = 'Expected function to throw an Error.';\n          return fail;\n        }\n\n        if (!(thrown instanceof Error)) {\n          fail.message = function() { return 'Expected function to throw an Error, but it threw ' + j$.pp(thrown) + '.'; };\n          return fail;\n        }\n\n        if (errorMatcher.hasNoSpecifics()) {\n          pass.message = 'Expected function not to throw an Error, but it threw ' + j$.fnNameFor(thrown) + '.';\n          return pass;\n        }\n\n        if (errorMatcher.matches(thrown)) {\n          pass.message = function() {\n            return 'Expected function not to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() + '.';\n          };\n          return pass;\n        } else {\n          fail.message = function() {\n            return 'Expected function to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() +\n              ', but it threw ' + errorMatcher.thrownDescription(thrown) + '.';\n          };\n          return fail;\n        }\n      }\n    };\n\n    function getMatcher() {\n      var expected = null,\n          errorType = null;\n\n      if (arguments.length == 2) {\n        expected = arguments[1];\n        if (isAnErrorType(expected)) {\n          errorType = expected;\n          expected = null;\n        }\n      } else if (arguments.length > 2) {\n        errorType = arguments[1];\n        expected = arguments[2];\n        if (!isAnErrorType(errorType)) {\n          throw new Error('Expected error type is not an Error.');\n        }\n      }\n\n      if (expected && !isStringOrRegExp(expected)) {\n        if (errorType) {\n          throw new Error('Expected error message is not a string or RegExp.');\n        } else {\n          throw new Error('Expected is not an Error, string, or RegExp.');\n        }\n      }\n\n      function messageMatch(message) {\n        if (typeof expected == 'string') {\n          return expected == message;\n        } else {\n          return expected.test(message);\n        }\n      }\n\n      return {\n        errorTypeDescription: errorType ? j$.fnNameFor(errorType) : 'an exception',\n        thrownDescription: function(thrown) {\n          var thrownName = errorType ? j$.fnNameFor(thrown.constructor) : 'an exception',\n              thrownMessage = '';\n\n          if (expected) {\n            thrownMessage = ' with message ' + j$.pp(thrown.message);\n          }\n\n          return thrownName + thrownMessage;\n        },\n        messageDescription: function() {\n          if (expected === null) {\n            return '';\n          } else if (expected instanceof RegExp) {\n            return ' with a message matching ' + j$.pp(expected);\n          } else {\n            return ' with message ' + j$.pp(expected);\n          }\n        },\n        hasNoSpecifics: function() {\n          return expected === null && errorType === null;\n        },\n        matches: function(error) {\n          return (errorType === null || error instanceof errorType) &&\n            (expected === null || messageMatch(error.message));\n        }\n      };\n    }\n\n    function isStringOrRegExp(potential) {\n      return potential instanceof RegExp || (typeof potential == 'string');\n    }\n\n    function isAnErrorType(type) {\n      if (typeof type !== 'function') {\n        return false;\n      }\n\n      var Surrogate = function() {};\n      Surrogate.prototype = type.prototype;\n      return (new Surrogate()) instanceof Error;\n    }\n  }\n\n  return toThrowError;\n};\n\ngetJasmineRequireObj().interface = function(jasmine, env) {\n  var jasmineInterface = {\n    describe: function(description, specDefinitions) {\n      return env.describe(description, specDefinitions);\n    },\n\n    xdescribe: function(description, specDefinitions) {\n      return env.xdescribe(description, specDefinitions);\n    },\n\n    fdescribe: function(description, specDefinitions) {\n      return env.fdescribe(description, specDefinitions);\n    },\n\n    it: function() {\n      return env.it.apply(env, arguments);\n    },\n\n    xit: function() {\n      return env.xit.apply(env, arguments);\n    },\n\n    fit: function() {\n      return env.fit.apply(env, arguments);\n    },\n\n    beforeEach: function() {\n      return env.beforeEach.apply(env, arguments);\n    },\n\n    afterEach: function() {\n      return env.afterEach.apply(env, arguments);\n    },\n\n    beforeAll: function() {\n      return env.beforeAll.apply(env, arguments);\n    },\n\n    afterAll: function() {\n      return env.afterAll.apply(env, arguments);\n    },\n\n    expect: function(actual) {\n      return env.expect(actual);\n    },\n\n    pending: function() {\n      return env.pending.apply(env, arguments);\n    },\n\n    fail: function() {\n      return env.fail.apply(env, arguments);\n    },\n\n    spyOn: function(obj, methodName) {\n      return env.spyOn(obj, methodName);\n    },\n\n    jsApiReporter: new jasmine.JsApiReporter({\n      timer: new jasmine.Timer()\n    }),\n\n    jasmine: jasmine\n  };\n\n  jasmine.addCustomEqualityTester = function(tester) {\n    env.addCustomEqualityTester(tester);\n  };\n\n  jasmine.addMatchers = function(matchers) {\n    return env.addMatchers(matchers);\n  };\n\n  jasmine.clock = function() {\n    return env.clock;\n  };\n\n  return jasmineInterface;\n};\n\ngetJasmineRequireObj().version = function() {\n  return '2.3.4';\n};\n","/*\nCopyright (c) 2008-2015 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\njasmineRequire.html = function(j$) {\n  j$.ResultsNode = jasmineRequire.ResultsNode();\n  j$.HtmlReporter = jasmineRequire.HtmlReporter(j$);\n  j$.QueryString = jasmineRequire.QueryString();\n  j$.HtmlSpecFilter = jasmineRequire.HtmlSpecFilter();\n};\n\njasmineRequire.HtmlReporter = function(j$) {\n\n  var noopTimer = {\n    start: function() {},\n    elapsed: function() { return 0; }\n  };\n\n  function HtmlReporter(options) {\n    var env = options.env || {},\n      getContainer = options.getContainer,\n      createElement = options.createElement,\n      createTextNode = options.createTextNode,\n      onRaiseExceptionsClick = options.onRaiseExceptionsClick || function() {},\n      onThrowExpectationsClick = options.onThrowExpectationsClick || function() {},\n      addToExistingQueryString = options.addToExistingQueryString || defaultQueryString,\n      timer = options.timer || noopTimer,\n      results = [],\n      specsExecuted = 0,\n      failureCount = 0,\n      pendingSpecCount = 0,\n      htmlReporterMain,\n      symbols,\n      failedSuites = [];\n\n    this.initialize = function() {\n      clearPrior();\n      htmlReporterMain = createDom('div', {className: 'jasmine_html-reporter'},\n        createDom('div', {className: 'banner'},\n          createDom('a', {className: 'title', href: 'http://jasmine.github.io/', target: '_blank'}),\n          createDom('span', {className: 'version'}, j$.version)\n        ),\n        createDom('ul', {className: 'symbol-summary'}),\n        createDom('div', {className: 'alert'}),\n        createDom('div', {className: 'results'},\n          createDom('div', {className: 'failures'})\n        )\n      );\n      getContainer().appendChild(htmlReporterMain);\n\n      symbols = find('.symbol-summary');\n    };\n\n    var totalSpecsDefined;\n    this.jasmineStarted = function(options) {\n      totalSpecsDefined = options.totalSpecsDefined || 0;\n      timer.start();\n    };\n\n    var summary = createDom('div', {className: 'summary'});\n\n    var topResults = new j$.ResultsNode({}, '', null),\n      currentParent = topResults;\n\n    this.suiteStarted = function(result) {\n      currentParent.addChild(result, 'suite');\n      currentParent = currentParent.last();\n    };\n\n    this.suiteDone = function(result) {\n      if (result.status == 'failed') {\n        failedSuites.push(result);\n      }\n\n      if (currentParent == topResults) {\n        return;\n      }\n\n      currentParent = currentParent.parent;\n    };\n\n    this.specStarted = function(result) {\n      currentParent.addChild(result, 'spec');\n    };\n\n    var failures = [];\n    this.specDone = function(result) {\n      if(noExpectations(result) && typeof console !== 'undefined' && typeof console.error !== 'undefined') {\n        console.error('Spec \\'' + result.fullName + '\\' has no expectations.');\n      }\n\n      if (result.status != 'disabled') {\n        specsExecuted++;\n      }\n\n      symbols.appendChild(createDom('li', {\n          className: noExpectations(result) ? 'empty' : result.status,\n          id: 'spec_' + result.id,\n          title: result.fullName\n        }\n      ));\n\n      if (result.status == 'failed') {\n        failureCount++;\n\n        var failure =\n          createDom('div', {className: 'spec-detail failed'},\n            createDom('div', {className: 'description'},\n              createDom('a', {title: result.fullName, href: specHref(result)}, result.fullName)\n            ),\n            createDom('div', {className: 'messages'})\n          );\n        var messages = failure.childNodes[1];\n\n        for (var i = 0; i < result.failedExpectations.length; i++) {\n          var expectation = result.failedExpectations[i];\n          messages.appendChild(createDom('div', {className: 'result-message'}, expectation.message));\n          messages.appendChild(createDom('div', {className: 'stack-trace'}, expectation.stack));\n        }\n\n        failures.push(failure);\n      }\n\n      if (result.status == 'pending') {\n        pendingSpecCount++;\n      }\n    };\n\n    this.jasmineDone = function() {\n      var banner = find('.banner');\n      var alert = find('.alert');\n      alert.appendChild(createDom('span', {className: 'duration'}, 'finished in ' + timer.elapsed() / 1000 + 's'));\n\n      banner.appendChild(\n        createDom('div', { className: 'run-options' },\n          createDom('span', { className: 'trigger' }, 'Options'),\n          createDom('div', { className: 'payload' },\n            createDom('div', { className: 'exceptions' },\n              createDom('input', {\n                className: 'raise',\n                id: 'raise-exceptions',\n                type: 'checkbox'\n              }),\n              createDom('label', { className: 'label', 'for': 'raise-exceptions' }, 'raise exceptions')),\n            createDom('div', { className: 'throw-failures' },\n              createDom('input', {\n                className: 'throw',\n                id: 'throw-failures',\n                type: 'checkbox'\n              }),\n              createDom('label', { className: 'label', 'for': 'throw-failures' }, 'stop spec on expectation failure'))\n          )\n        ));\n\n      var raiseCheckbox = find('#raise-exceptions');\n\n      raiseCheckbox.checked = !env.catchingExceptions();\n      raiseCheckbox.onclick = onRaiseExceptionsClick;\n\n      var throwCheckbox = find('#throw-failures');\n      throwCheckbox.checked = env.throwingExpectationFailures();\n      throwCheckbox.onclick = onThrowExpectationsClick;\n\n      var optionsMenu = find('.run-options'),\n          optionsTrigger = optionsMenu.querySelector('.trigger'),\n          optionsPayload = optionsMenu.querySelector('.payload'),\n          isOpen = /\\bopen\\b/;\n\n      optionsTrigger.onclick = function() {\n        if (isOpen.test(optionsPayload.className)) {\n          optionsPayload.className = optionsPayload.className.replace(isOpen, '');\n        } else {\n          optionsPayload.className += ' open';\n        }\n      };\n\n      if (specsExecuted < totalSpecsDefined) {\n        var skippedMessage = 'Ran ' + specsExecuted + ' of ' + totalSpecsDefined + ' specs - run all';\n        alert.appendChild(\n          createDom('span', {className: 'bar skipped'},\n            createDom('a', {href: '?', title: 'Run all specs'}, skippedMessage)\n          )\n        );\n      }\n      var statusBarMessage = '';\n      var statusBarClassName = 'bar ';\n\n      if (totalSpecsDefined > 0) {\n        statusBarMessage += pluralize('spec', specsExecuted) + ', ' + pluralize('failure', failureCount);\n        if (pendingSpecCount) { statusBarMessage += ', ' + pluralize('pending spec', pendingSpecCount); }\n        statusBarClassName += (failureCount > 0) ? 'failed' : 'passed';\n      } else {\n        statusBarClassName += 'skipped';\n        statusBarMessage += 'No specs found';\n      }\n\n      alert.appendChild(createDom('span', {className: statusBarClassName}, statusBarMessage));\n\n      for(i = 0; i < failedSuites.length; i++) {\n        var failedSuite = failedSuites[i];\n        for(var j = 0; j < failedSuite.failedExpectations.length; j++) {\n          var errorBarMessage = 'AfterAll ' + failedSuite.failedExpectations[j].message;\n          var errorBarClassName = 'bar errored';\n          alert.appendChild(createDom('span', {className: errorBarClassName}, errorBarMessage));\n        }\n      }\n\n      var results = find('.results');\n      results.appendChild(summary);\n\n      summaryList(topResults, summary);\n\n      function summaryList(resultsTree, domParent) {\n        var specListNode;\n        for (var i = 0; i < resultsTree.children.length; i++) {\n          var resultNode = resultsTree.children[i];\n          if (resultNode.type == 'suite') {\n            var suiteListNode = createDom('ul', {className: 'suite', id: 'suite-' + resultNode.result.id},\n              createDom('li', {className: 'suite-detail'},\n                createDom('a', {href: specHref(resultNode.result)}, resultNode.result.description)\n              )\n            );\n\n            summaryList(resultNode, suiteListNode);\n            domParent.appendChild(suiteListNode);\n          }\n          if (resultNode.type == 'spec') {\n            if (domParent.getAttribute('class') != 'specs') {\n              specListNode = createDom('ul', {className: 'specs'});\n              domParent.appendChild(specListNode);\n            }\n            var specDescription = resultNode.result.description;\n            if(noExpectations(resultNode.result)) {\n              specDescription = 'SPEC HAS NO EXPECTATIONS ' + specDescription;\n            }\n            if(resultNode.result.status === 'pending' && resultNode.result.pendingReason !== '') {\n              specDescription = specDescription + ' PENDING WITH MESSAGE: ' + resultNode.result.pendingReason;\n            }\n            specListNode.appendChild(\n              createDom('li', {\n                  className: resultNode.result.status,\n                  id: 'spec-' + resultNode.result.id\n                },\n                createDom('a', {href: specHref(resultNode.result)}, specDescription)\n              )\n            );\n          }\n        }\n      }\n\n      if (failures.length) {\n        alert.appendChild(\n          createDom('span', {className: 'menu bar spec-list'},\n            createDom('span', {}, 'Spec List | '),\n            createDom('a', {className: 'failures-menu', href: '#'}, 'Failures')));\n        alert.appendChild(\n          createDom('span', {className: 'menu bar failure-list'},\n            createDom('a', {className: 'spec-list-menu', href: '#'}, 'Spec List'),\n            createDom('span', {}, ' | Failures ')));\n\n        find('.failures-menu').onclick = function() {\n          setMenuModeTo('failure-list');\n        };\n        find('.spec-list-menu').onclick = function() {\n          setMenuModeTo('spec-list');\n        };\n\n        setMenuModeTo('failure-list');\n\n        var failureNode = find('.failures');\n        for (var i = 0; i < failures.length; i++) {\n          failureNode.appendChild(failures[i]);\n        }\n      }\n    };\n\n    return this;\n\n    function find(selector) {\n      return getContainer().querySelector('.jasmine_html-reporter ' + selector);\n    }\n\n    function clearPrior() {\n      // return the reporter\n      var oldReporter = find('');\n\n      if(oldReporter) {\n        getContainer().removeChild(oldReporter);\n      }\n    }\n\n    function createDom(type, attrs, childrenVarArgs) {\n      var el = createElement(type);\n\n      for (var i = 2; i < arguments.length; i++) {\n        var child = arguments[i];\n\n        if (typeof child === 'string') {\n          el.appendChild(createTextNode(child));\n        } else {\n          if (child) {\n            el.appendChild(child);\n          }\n        }\n      }\n\n      for (var attr in attrs) {\n        if (attr == 'className') {\n          el[attr] = attrs[attr];\n        } else {\n          el.setAttribute(attr, attrs[attr]);\n        }\n      }\n\n      return el;\n    }\n\n    function pluralize(singular, count) {\n      var word = (count == 1 ? singular : singular + 's');\n\n      return '' + count + ' ' + word;\n    }\n\n    function specHref(result) {\n      return addToExistingQueryString('spec', result.fullName);\n    }\n\n    function defaultQueryString(key, value) {\n      return '?' + key + '=' + value;\n    }\n\n    function setMenuModeTo(mode) {\n      htmlReporterMain.setAttribute('class', 'jasmine_html-reporter ' + mode);\n    }\n\n    function noExpectations(result) {\n      return (result.failedExpectations.length + result.passedExpectations.length) === 0 &&\n        result.status === 'passed';\n    }\n  }\n\n  return HtmlReporter;\n};\n\njasmineRequire.HtmlSpecFilter = function() {\n  function HtmlSpecFilter(options) {\n    var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    var filterPattern = new RegExp(filterString);\n\n    this.matches = function(specName) {\n      return filterPattern.test(specName);\n    };\n  }\n\n  return HtmlSpecFilter;\n};\n\njasmineRequire.ResultsNode = function() {\n  function ResultsNode(result, type, parent) {\n    this.result = result;\n    this.type = type;\n    this.parent = parent;\n\n    this.children = [];\n\n    this.addChild = function(result, type) {\n      this.children.push(new ResultsNode(result, type, this));\n    };\n\n    this.last = function() {\n      return this.children[this.children.length - 1];\n    };\n  }\n\n  return ResultsNode;\n};\n\njasmineRequire.QueryString = function() {\n  function QueryString(options) {\n\n    this.navigateWithNewParam = function(key, value) {\n      options.getWindowLocation().search = this.fullStringWithNewParam(key, value);\n    };\n\n    this.fullStringWithNewParam = function(key, value) {\n      var paramMap = queryStringToParamMap();\n      paramMap[key] = value;\n      return toQueryString(paramMap);\n    };\n\n    this.getParam = function(key) {\n      return queryStringToParamMap()[key];\n    };\n\n    return this;\n\n    function toQueryString(paramMap) {\n      var qStrPairs = [];\n      for (var prop in paramMap) {\n        qStrPairs.push(encodeURIComponent(prop) + '=' + encodeURIComponent(paramMap[prop]));\n      }\n      return '?' + qStrPairs.join('&');\n    }\n\n    function queryStringToParamMap() {\n      var paramStr = options.getWindowLocation().search.substring(1),\n        params = [],\n        paramMap = {};\n\n      if (paramStr.length > 0) {\n        params = paramStr.split('&');\n        for (var i = 0; i < params.length; i++) {\n          var p = params[i].split('=');\n          var value = decodeURIComponent(p[1]);\n          if (value === 'true' || value === 'false') {\n            value = JSON.parse(value);\n          }\n          paramMap[decodeURIComponent(p[0])] = value;\n        }\n      }\n\n      return paramMap;\n    }\n\n  }\n\n  return QueryString;\n};\n","/* globals log: true */\n\nvar level = Meteor.isServer && process.env.VELOCITY_DEBUG ? 'debug' : 'info'\nif (Meteor.isServer && process.env.JASMINE_LOG_LEVEL) {\n  level = process.env.JASMINE_LOG_LEVEL\n}\nlog = loglevel.createPackageLogger('[sanjo:jasmine]', level)\n","/* globals parseStack: true */\n\nparseStack = {};\n\n// Given an Error (eg, 'new Error'), return the stack associated with\n// that error as an array. More recently called functions appear first\n// and each element is an object with keys:\n// - file: filename as it appears in the stack\n// - line: 1-indexed line number in file, as a Number\n// - column: 1-indexed column in line, as a Number\n// - func: name of the function in the frame (maybe null)\n//\n// Accomplishes this by parsing the text representation of the stack\n// with regular expressions. Unlikely to work anywhere but v8.\n//\n// If a function on the stack has been marked with mark(), don't\n// return anything past that function. We call this the \"user portion\"\n// of the stack.\nparseStack.parse = function (err) {\n  var frames = err.stack.split('\\n');\n\n  frames.shift(); // at least the first line is the exception\n  var stop = false;\n  var ret = [];\n\n  _.each(frames, function (frame) {\n    if (stop)\n      return;\n    var m;\n    if (m =\n        frame.match(/^\\s*at\\s*((new )?.+?)\\s*(\\[as\\s*([^\\]]*)\\]\\s*)?\\((.*?)(:(\\d+))?(:(\\d+))?\\)\\s*$/)) {\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n      // \"    at My.Function (/path/to/myfile.js:532:39)\"\n      // \"    at Array.forEach (native)\"\n      // \"    at new My.Class (file.js:1:2)\"\n      // \"    at [object Object].main.registerCommand.name [as func] (meteor/tools/commands.js:1225:19)\"\n      // \"    at __top_mark__ [as matchErr] (meteor/tools/parse-stack.js:82:14)\"\n      //\n      // In that last example, it is not at all clear to me what the\n      // 'as' stanza refers to, but it is in m[3] if you find a use for it.\n      if (m[1].match(/(?:^|\\.)__top_mark__$/)) {\n        // m[1] could be Object.__top_mark__ or something like that\n        // depending on where exactly you put the function returned by\n        // markTop\n        ret = [];\n        return;\n      }\n      if (m[1].match(/(?:^|\\.)__bottom_mark__$/)) {\n        stop = true;\n        return;\n      }\n      ret.push({\n        func: m[1],\n        file: m[5],\n        line: m[7] ? +m[7] : undefined,\n        column: m[9] ? +m[9] : undefined\n      });\n    } else if (m = frame.match(/^\\s*at\\s+(.+?)(:(\\d+))?(:(\\d+))?\\s*$/)) {\n      // \"    at /path/to/myfile.js:532:39\"\n      ret.push({\n        file: m[1],\n        line: m[3] ? +m[3] : undefined,\n        column: m[5] ? +m[5] : undefined\n      });\n    } else if (m = frame.match(/^\\s*-\\s*-\\s*-\\s*-\\s*-\\s*$/)) {\n      // \"    - - - - -\"\n      // This is something added when you throw an Error through a future. The\n      // stack above the dashes is the stack of the 'wait' call; the stack below\n      // is the stack inside the fiber where the Error is originally\n      // constructed. Taking just the former seems good for now, but in the\n      // future we may want to sew them together (possibly in the opposite\n      // order?)\n      stop = true;\n    }\n  });\n\n  return ret;\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should stop: no frames earlier than this point will be\n// included in the parsed stack. Confusingly, in the argot of the\n// times, you'd say that frames \"higher up\" than this or \"above\" this\n// will not be returned, but you'd also say that those frames are \"at\n// the bottom of the stack\". Frames below the bottom are the outer\n// context of the framework running the user's code.\nparseStack.markBottom = function (f) {\n  return function __bottom_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should begin: no frames later than this point will be\n// included in the parsed stack. The opposite of markBottom().\n// Frames above the top are helper functions defined by the\n// framework and executed by user code whose internal behavior\n// should not be exposed.\nparseStack.markTop = function (f) {\n  return function __top_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n","/* globals JasmineTestFramework: true */\n\nJasmineTestFramework = function (options) {\n  if (!options || !options.name) {\n    throw new Error('[JasmineTestFramework] Missing required field \"name\"')\n  }\n\n  if (!options.regex) {\n    throw new Error('[JasmineTestFramework] Missing required field \"regex\"')\n  }\n\n  if (_.isUndefined(options.jasmineRequire)) {\n    throw new Error('[JasmineTestFramework] Missing required field \"jasmineRequire\"')\n  }\n\n  this.name = options.name\n  this.regex = options.regex\n  this.sampleTestGenerator = options.sampleTestGenerator\n  this.logPrefix = options.logPrefix || '[' + this.name + '] '\n  this.jasmineRequire = options.jasmineRequire\n\n  // load jasmine-velocity reporter\n  // [unit] mock packages\n\n}\n\n_.extend(JasmineTestFramework.prototype, {\n\n  //////////////////////////////////////////////////////////////////////\n  // Public functions\n  //\n\n  runTests: function () {},\n\n  //////////////////////////////////////////////////////////////////////\n  // Protected functions\n  //\n\n  registerWithVelocity: function () {\n    Velocity.registerTestingFramework(this.name, {\n      regex: this.regex,\n      sampleTestGenerator: this.sampleTestGenerator\n    })\n  }\n\n})\n","/* globals JasmineInterface: true */\n\nvar jasmineRequire = Meteor.isServer ?\n  Npm.require('jasmine-core') :\n  window.jasmineRequire\n\n/**\n * Object that will be directly put into the global context of the running\n * tests.\n *\n * ex.\n *     describe(...)   // rather than 'jasmine.describe'\n *     jasmine.clock   // rather than just 'clock'\n *\n * @class JasmineInterface\n * @constructor\n */\nJasmineInterface = function (options) {\n  if (!options || !options.jasmine) {\n    throw new Error('[JasmineInterface] Missing required field \"jasmine\"')\n  }\n\n  var env = options.jasmine.getEnv()\n\n  _.extend(this, jasmineRequire.interface(options.jasmine, env))\n\n  var markBottom = function (func) {\n    var boundFunction = parseStack.markBottom(func)\n    if (func.length > 0) {\n      // Async test\n      return function (done) {\n        return boundFunction.apply(this, arguments)\n      }\n    } else {\n      // Sync test\n      return function () {\n        return boundFunction.call(this)\n      }\n    }\n  }\n\n  _.forEach(['describe', 'xdescribe', 'fdescribe', 'it', 'fit'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[1] = markBottom(arguments[1])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n\n  _.forEach(['beforeEach', 'afterEach', 'beforeAll', 'afterAll'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[0] = markBottom(arguments[0])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n}\n","/* global\n   VelocityTestReporter: true\n */\n\n(function (Meteor) {\n  var noopTimer = {\n    start: function() {},\n    elapsed: function() { return 0 }\n  }\n\n  VelocityTestReporter = function VelocityTestReporter(options) {\n    var self = this,\n      timer = options.timer || noopTimer,\n      ddpParentConnection = options.ddpParentConnection,\n      ancestors = [],\n      _jasmineDone\n\n    self.mode = options.mode\n\n    var saveTestResult = Meteor.bindEnvironment(function saveTestResult(test) {\n      var result = {\n        id: 'jasmine:' + self.mode + ' | ' + test.id,\n        //async: test.async,\n        framework: options.framework,\n        name: test.description,\n        fullName: test.fullName,\n        pending: test.status === 'pending',\n        result: test.status,\n        duration: timer.elapsed(),\n        //timeOut: test._timeout,\n        //timedOut: test.timedOut,\n        ancestors: ancestors,\n        timestamp: new Date(),\n        isClient: !!options.isClient,\n        isServer: !!options.isServer\n      }\n      if (test.failedExpectations[0]){\n        var stack = removeStackTraceClutter(parseStack.parse({stack: filterStack(test.failedExpectations[0].stack)}))\n        var message = _.extend({\n          message: test.failedExpectations[0].message,\n          stack: stack\n        }, stack[0])\n        result.failureMessage = message.message\n        result.failureStackTrace = formatMessage([message])\n      }\n\n      if (Meteor.isClient || process.env.IS_MIRROR) {\n        ddpParentConnection.call('velocity/reports/submit', result, function (error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      } else {\n        Meteor.call('velocity/reports/submit', result, function(error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      }\n    }, function (error) {\n      console.error(error)\n    })\n\n    if (Meteor.isClient) {\n      _jasmineDone = function () {\n        ddpParentConnection.call(\n          'velocity/reports/completed',\n          {framework: options.framework},\n          function () {\n            if (options.onComplete) {\n              options.onComplete()\n            }\n          }\n        )\n      }\n    } else if (Meteor.isServer) {\n      _jasmineDone = Meteor.bindEnvironment(function jasmineDone() {\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      }, function (error) {\n        console.error(error)\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      })\n    }\n\n    self.jasmineDone = _jasmineDone\n\n    self.suiteStarted = function(result) {\n      ancestors.unshift(result.description)\n    }\n\n    self.suiteDone = function() {\n      ancestors.shift()\n    }\n\n    self.specStarted = function () {\n      timer.start()\n    }\n\n    self.specDone = function(result) {\n      var skipped = result.status === 'disabled' || result.status === 'pending'\n      if (!skipped) {\n        saveTestResult(result)\n      }\n    }\n\n    function filterStack(stack) {\n      var filteredStack = stack.split('\\n').filter(function(stackLine) {\n        return stackLine.indexOf('/node_modules/jasmine-core/') === -1;\n      }).join('\\n');\n      return filteredStack;\n    }\n\n    function removeStackTraceClutter(parsedStackTrace) {\n      return _.chain(parsedStackTrace)\n        .map(_.clone)\n        .map(function makeFileUrlRelative(frame) {\n          var rootUrl = Meteor.absoluteUrl();\n          if (frame.file.indexOf(rootUrl) === 0) {\n            frame.file = frame.file.substr(rootUrl.length);\n          }\n          return frame;\n        })\n        .map(function removeCacheBustingQuery(frame) {\n          frame.file = frame.file.replace(/\\?[a-z0-9]+$/, '');\n          return frame;\n        })\n        .map(function normalizePackageName(frame) {\n          frame.file = frame.file.replace('local-test:', '');\n          return frame;\n        })\n        .map(function removeUselessFunc(frame) {\n          if (frame.func === 'Object.<anonymous>') {\n            frame.func = null;\n          }\n          return frame;\n        })\n        .value();\n    }\n\n    function formatMessage(messages) {\n      var out = '';\n      var already = {};\n      var indent = '';\n\n      _.each(messages, function (message) {\n        var stack = message.stack || [];\n\n        var line = indent;\n        if (message.file) {\n          line+= message.file;\n          if (message.line) {\n            line += \":\" + message.line;\n            if (message.column) {\n              // XXX maybe exclude unless specifically requested (eg,\n              // for an automated tool that's parsing our output?)\n              line += \":\" + message.column;\n            }\n          }\n          line += \": \";\n        } else {\n          // not sure how to display messages without a filenanme.. try this?\n          line += \"error: \";\n        }\n        // XXX line wrapping would be nice..\n        line += message.message;\n        if (message.func && stack.length <= 1) {\n          line += \" (at \" + message.func + \")\";\n        }\n        line += \"\\n\";\n\n        if (stack.length > 1) {\n          _.each(stack, function (frame) {\n            // If a nontrivial stack trace (more than just the file and line\n            // we already complained about), print it.\n            var where = \"\";\n            if (frame.file) {\n              where += frame.file;\n              if (frame.line) {\n                where += \":\" + frame.line;\n                if (frame.column) {\n                  where += \":\" + frame.column;\n                }\n              }\n            }\n\n            if (! frame.func && ! where)\n              return; // that's a pretty lame stack frame\n\n            line += \"  at \";\n            if (frame.func)\n              line += frame.func + \" (\" + where + \")\\n\";\n            else\n              line += where + \"\\n\";\n          });\n          line += \"\\n\";\n        }\n\n        // Deduplicate messages (only when exact duplicates, including stack)\n        if (! (line in already)) {\n          out += line;\n          already[line] = true;\n        }\n      });\n\n      return out;\n    }\n  }\n\n})(Meteor)\n","/* globals ClientIntegrationTestFramework: true */\n\nClientIntegrationTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-client-integration',\n    regex: '^tests/jasmine/client/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/client/integration/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Player.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Song.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: Meteor.isClient ? window.jasmineRequire : null\n  })\n\n  JasmineTestFramework.call(this, options)\n\n  if (Meteor.isClient) {\n    this._setup()\n  }\n}\n\nClientIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ClientIntegrationTestFramework.prototype, {\n\n  _setup: function () {\n    this.jasmine = this.jasmineRequire.core(this.jasmineRequire)\n    this.jasmineInterface = new JasmineInterface({jasmine: this.jasmine})\n    _.extend(window, this.jasmineInterface)\n  },\n\n  startMirror: function () {\n    var self = this;\n    var mirrorStarter = new MirrorStarter(this.name)\n    var mirrorOptions = {}\n\n    if (isTestPackagesMode()) {\n      mirrorStarter.startSelfMirror(mirrorOptions)\n\n      process.on('message', Meteor.bindEnvironment(function (message) {\n        if (message && message.refresh === 'client') {\n          // Listen for message 'on-listening' that signals that the application has been rebuild\n          // and is ready to serve\n          // * This callback *must* be registered here in 'on-message-refresh-client'\n          // * because onListening is a short-lived registration that is removed after firing once\n          WebApp.onListening(function () {\n            Meteor.call('velocity/reports/reset', {framework: self.name})\n          })\n        }\n      }))\n    } else {\n      _.extend(mirrorOptions, {\n        port: this._getCustomPort(),\n        testsPath: 'jasmine/client/integration'\n      })\n\n      if (process.env.JASMINE_CLIENT_MIRROR_APP_PATH) {\n        mirrorOptions.args = [\n          '--test-app-path', process.env.JASMINE_CLIENT_MIRROR_APP_PATH\n        ]\n      }\n\n      mirrorStarter.lazyStartMirror(mirrorOptions)\n    }\n  },\n\n  _getCustomPort: function () {\n    var customPort = parseInt(process.env.JASMINE_MIRROR_PORT, 10)\n    if (!_.isNaN(customPort)) {\n      return customPort\n    }\n  },\n\n  shouldRunTests: function (mirrorInfo) {\n    return mirrorInfo.isTestPackagesMode ||\n           (mirrorInfo.isMirror && mirrorInfo.framework === this.name)\n  },\n\n  runTests: function () {\n    var self = this\n\n    Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {\n      if (error) {\n        throw error\n      } else if (self.shouldRunTests(mirrorInfo)) {\n        Meteor.defer(function() {\n          log.info('Running Jasmine tests')\n\n          var ddpConnection = mirrorInfo.isTestPackagesMode ?\n            Meteor :\n            DDP.connect(mirrorInfo.parentUrl)\n          window.initJasmineJquery()\n          self._executeClientTests(ddpConnection)\n        })\n      } else if (!mirrorInfo.isMirror && !self.inIframe()) {\n        self.createMirrorIframe()\n      }\n    })\n  },\n\n  inIframe: function() {\n    try {\n      return window.self !== window.top;\n    } catch (error) {\n      return true;\n    }\n  },\n\n  createMirrorIframe: function () {\n    var self = this\n    var iframeId = 'jasmine-mirror'\n\n    var getMirrorUrl = function (mirrorInfo) {\n      return mirrorInfo.rootUrl;\n    }\n\n    var insertMirrorIframe = _.once(function (mirrorInfo) {\n      var iframe = document.createElement('iframe')\n      iframe.id = iframeId\n      iframe.src = getMirrorUrl(mirrorInfo);\n      // Make the iFrame invisible\n      iframe.style.display = 'block'\n      iframe.style.position = 'absolute'\n      iframe.style.width = 0\n      iframe.style.height = 0\n      iframe.style.border = 0\n      document.body.appendChild(iframe)\n    })\n\n    var updateMirrorIframe = function (mirrorInfo) {\n      var iframe = document.getElementById(iframeId)\n      if (iframe) {\n        iframe.src = getMirrorUrl(mirrorInfo)\n      } else {\n        insertMirrorIframe(mirrorInfo)\n      }\n    }\n\n    Tracker.autorun(function () {\n      var mirror = VelocityMirrors.findOne(\n        {framework: self.name, state: 'ready'},\n        {fields: {state: 1, rootUrl: 1, lastModified: 1}}\n      )\n      if (mirror) {\n        updateMirrorIframe(mirror)\n      }\n    })\n  },\n\n  _executeClientTests: function (ddpConnection) {\n    var self = this;\n\n    window.ddpParentConnection = ddpConnection\n\n    window.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})\n\n    /**\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n     */\n    self.jasmineRequire.html(self.jasmine)\n\n    /**\n     * Create the Jasmine environment. This is used to run all specs in a project.\n     */\n    var env = self.jasmine.getEnv()\n\n    /**\n     * ## Runner Parameters\n     *\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n     */\n\n    var queryString = new self.jasmine.QueryString({\n      getWindowLocation: function () {\n        return window.location\n      }\n    })\n\n    var catchingExceptions = queryString.getParam('catch')\n    env.catchExceptions(typeof catchingExceptions === 'undefined' ? true : catchingExceptions)\n\n    /**\n     * ## Reporters\n     */\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Client Integration',\n      framework: self.name,\n      env: env,\n      timer: new self.jasmine.Timer(),\n      ddpParentConnection: window.ddpParentConnection,\n      isClient: true\n    })\n\n    /**\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n     */\n    env.addReporter(self.jasmineInterface.jsApiReporter)\n    env.addReporter(velocityReporter)\n\n    /**\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.\n     */\n    var specFilter = new self.jasmine.HtmlSpecFilter({\n      filterString: function () {\n        return queryString.getParam('spec')\n      }\n    })\n\n    env.specFilter = function (spec) {\n      return specFilter.matches(spec.getFullName())\n    }\n\n    /**\n     * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n     */\n    window.setTimeout = window.setTimeout\n    window.setInterval = window.setInterval\n    window.clearTimeout = window.clearTimeout\n    window.clearInterval = window.clearInterval\n\n    env.execute()\n  },\n\n  _reportResults: function () {\n    Meteor.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","var testFramework = new ClientIntegrationTestFramework()\n\nMeteor.startup(function () {\n  Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {\n    if (error) {\n      log.error('Could not get environment info', error);\n      return;\n    }\n\n    if (mirrorInfo.isTestPackagesMode) {\n      var hasCompletedOnce = false;\n      Tracker.autorun(function (computation) {\n        if (!computation.firstRun) {\n          var clientAggregateReport = Velocity.Collections.AggregateReports\n            .findOne({name: testFramework.name});\n\n          if (clientAggregateReport) {\n            if (clientAggregateReport.result === 'completed') {\n              hasCompletedOnce = true;\n            } else if (hasCompletedOnce && clientAggregateReport.result === 'pending') {\n              debugger;\n              Reload._reload();\n            }\n          }\n        }\n      });\n\n      Tracker.autorun(function () {\n        var serverAggregateReport = Velocity.Collections.AggregateReports\n          .findOne({name: 'jasmine-server-integration'});\n\n\n        if (serverAggregateReport && serverAggregateReport.result === 'completed') {\n          testFramework.runTests();\n        }\n      });\n    } else {\n      testFramework.runTests()\n    }\n  });\n})\n","window.initJasmineJquery = _.once(function () {\n\n  /*!\n  Jasmine-jQuery: a set of jQuery helpers for Jasmine tests.\n\n  Version 2.1.0\n\n  https://github.com/velesin/jasmine-jquery\n\n  Copyright (c) 2010-2014 Wojciech Zawistowski, Travis Jeffery\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  */\n\n  +function (window, jasmine, $) { \"use strict\";\n\n    jasmine.spiedEventsKey = function (selector, eventName) {\n      return [$(selector).selector, eventName].toString()\n    }\n\n    jasmine.getFixtures = function () {\n      return jasmine.currentFixtures_ = jasmine.currentFixtures_ || new jasmine.Fixtures()\n    }\n\n    jasmine.getStyleFixtures = function () {\n      return jasmine.currentStyleFixtures_ = jasmine.currentStyleFixtures_ || new jasmine.StyleFixtures()\n    }\n\n    jasmine.Fixtures = function () {\n      this.containerId = 'jasmine-fixtures'\n      this.fixturesCache_ = {}\n      this.fixturesPath = 'spec/javascripts/fixtures'\n    }\n\n    jasmine.Fixtures.prototype.set = function (html) {\n      this.cleanUp()\n      return this.createContainer_(html)\n    }\n\n    jasmine.Fixtures.prototype.appendSet= function (html) {\n      this.addToContainer_(html)\n    }\n\n    jasmine.Fixtures.prototype.preload = function () {\n      this.read.apply(this, arguments)\n    }\n\n    jasmine.Fixtures.prototype.load = function () {\n      this.cleanUp()\n      this.createContainer_(this.read.apply(this, arguments))\n    }\n\n    jasmine.Fixtures.prototype.appendLoad = function () {\n      this.addToContainer_(this.read.apply(this, arguments))\n    }\n\n    jasmine.Fixtures.prototype.read = function () {\n      var htmlChunks = []\n        , fixtureUrls = arguments\n\n      for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {\n        htmlChunks.push(this.getFixtureHtml_(fixtureUrls[urlIndex]))\n      }\n\n      return htmlChunks.join('')\n    }\n\n    jasmine.Fixtures.prototype.clearCache = function () {\n      this.fixturesCache_ = {}\n    }\n\n    jasmine.Fixtures.prototype.cleanUp = function () {\n      $('#' + this.containerId).remove()\n    }\n\n    jasmine.Fixtures.prototype.sandbox = function (attributes) {\n      var attributesToSet = attributes || {}\n      return $('<div id=\"sandbox\" />').attr(attributesToSet)\n    }\n\n    jasmine.Fixtures.prototype.createContainer_ = function (html) {\n      var container = $('<div>')\n        .attr('id', this.containerId)\n        .html(html)\n\n      $(document.body).append(container)\n      return container\n    }\n\n    jasmine.Fixtures.prototype.addToContainer_ = function (html){\n      var container = $(document.body).find('#'+this.containerId).append(html)\n\n      if (!container.length) {\n        this.createContainer_(html)\n      }\n    }\n\n    jasmine.Fixtures.prototype.getFixtureHtml_ = function (url) {\n      if (typeof this.fixturesCache_[url] === 'undefined') {\n        this.loadFixtureIntoCache_(url)\n      }\n      return this.fixturesCache_[url]\n    }\n\n    jasmine.Fixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {\n      var self = this\n        , url = this.makeFixtureUrl_(relativeUrl)\n        , htmlText = ''\n        , request = $.ajax({\n          async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded\n          cache: false,\n          url: url,\n          dataType: 'html',\n          success: function (data, status, $xhr) {\n            htmlText = $xhr.responseText\n          }\n        }).fail(function ($xhr, status, err) {\n          throw new Error('Fixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n        })\n\n      var scripts = $($.parseHTML(htmlText, true)).find('script[src]') || [];\n\n      scripts.each(function(){\n        $.ajax({\n          async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded\n          cache: false,\n          dataType: 'script',\n          url: $(this).attr('src'),\n          success: function (data, status, $xhr) {\n            htmlText += '<script>' + $xhr.responseText + '</script>'\n          },\n          error: function ($xhr, status, err) {\n            throw new Error('Script could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n          }\n        });\n      })\n\n      self.fixturesCache_[relativeUrl] = htmlText;\n    }\n\n    jasmine.Fixtures.prototype.makeFixtureUrl_ = function (relativeUrl){\n      return this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl\n    }\n\n    jasmine.Fixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {\n      return this[methodName].apply(this, passedArguments)\n    }\n\n\n    jasmine.StyleFixtures = function () {\n      this.fixturesCache_ = {}\n      this.fixturesNodes_ = []\n      this.fixturesPath = 'spec/javascripts/fixtures'\n    }\n\n    jasmine.StyleFixtures.prototype.set = function (css) {\n      this.cleanUp()\n      this.createStyle_(css)\n    }\n\n    jasmine.StyleFixtures.prototype.appendSet = function (css) {\n      this.createStyle_(css)\n    }\n\n    jasmine.StyleFixtures.prototype.preload = function () {\n      this.read_.apply(this, arguments)\n    }\n\n    jasmine.StyleFixtures.prototype.load = function () {\n      this.cleanUp()\n      this.createStyle_(this.read_.apply(this, arguments))\n    }\n\n    jasmine.StyleFixtures.prototype.appendLoad = function () {\n      this.createStyle_(this.read_.apply(this, arguments))\n    }\n\n    jasmine.StyleFixtures.prototype.cleanUp = function () {\n      while(this.fixturesNodes_.length) {\n        this.fixturesNodes_.pop().remove()\n      }\n    }\n\n    jasmine.StyleFixtures.prototype.createStyle_ = function (html) {\n      var styleText = $('<div></div>').html(html).text()\n        , style = $('<style>' + styleText + '</style>')\n\n      this.fixturesNodes_.push(style)\n      $('head').append(style)\n    }\n\n    jasmine.StyleFixtures.prototype.clearCache = jasmine.Fixtures.prototype.clearCache\n    jasmine.StyleFixtures.prototype.read_ = jasmine.Fixtures.prototype.read\n    jasmine.StyleFixtures.prototype.getFixtureHtml_ = jasmine.Fixtures.prototype.getFixtureHtml_\n    jasmine.StyleFixtures.prototype.loadFixtureIntoCache_ = jasmine.Fixtures.prototype.loadFixtureIntoCache_\n    jasmine.StyleFixtures.prototype.makeFixtureUrl_ = jasmine.Fixtures.prototype.makeFixtureUrl_\n    jasmine.StyleFixtures.prototype.proxyCallTo_ = jasmine.Fixtures.prototype.proxyCallTo_\n\n    jasmine.getJSONFixtures = function () {\n      return jasmine.currentJSONFixtures_ = jasmine.currentJSONFixtures_ || new jasmine.JSONFixtures()\n    }\n\n    jasmine.JSONFixtures = function () {\n      this.fixturesCache_ = {}\n      this.fixturesPath = 'spec/javascripts/fixtures/json'\n    }\n\n    jasmine.JSONFixtures.prototype.load = function () {\n      this.read.apply(this, arguments)\n      return this.fixturesCache_\n    }\n\n    jasmine.JSONFixtures.prototype.read = function () {\n      var fixtureUrls = arguments\n\n      for(var urlCount = fixtureUrls.length, urlIndex = 0; urlIndex < urlCount; urlIndex++) {\n        this.getFixtureData_(fixtureUrls[urlIndex])\n      }\n\n      return this.fixturesCache_\n    }\n\n    jasmine.JSONFixtures.prototype.clearCache = function () {\n      this.fixturesCache_ = {}\n    }\n\n    jasmine.JSONFixtures.prototype.getFixtureData_ = function (url) {\n      if (!this.fixturesCache_[url]) this.loadFixtureIntoCache_(url)\n      return this.fixturesCache_[url]\n    }\n\n    jasmine.JSONFixtures.prototype.loadFixtureIntoCache_ = function (relativeUrl) {\n      var self = this\n        , url = this.fixturesPath.match('/$') ? this.fixturesPath + relativeUrl : this.fixturesPath + '/' + relativeUrl\n\n      $.ajax({\n        async: false, // must be synchronous to guarantee that no tests are run before fixture is loaded\n        cache: false,\n        dataType: 'json',\n        url: url,\n        success: function (data) {\n          self.fixturesCache_[relativeUrl] = data\n        },\n        error: function ($xhr, status, err) {\n          throw new Error('JSONFixture could not be loaded: ' + url + ' (status: ' + status + ', message: ' + err.message + ')')\n        }\n      })\n    }\n\n    jasmine.JSONFixtures.prototype.proxyCallTo_ = function (methodName, passedArguments) {\n      return this[methodName].apply(this, passedArguments)\n    }\n\n    jasmine.jQuery = function () {}\n\n    jasmine.jQuery.browserTagCaseIndependentHtml = function (html) {\n      return $('<div/>').append(html).html()\n    }\n\n    jasmine.jQuery.elementToString = function (element) {\n      return $(element).map(function () { return this.outerHTML; }).toArray().join(', ')\n    }\n\n    var data = {\n      spiedEvents: {}\n      , handlers:    []\n    }\n\n    jasmine.jQuery.events = {\n      spyOn: function (selector, eventName) {\n        var handler = function (e) {\n          var calls = (typeof data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] !== 'undefined') ? data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0\n          data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] = {\n            args: jasmine.util.argsToArray(arguments),\n            calls: ++calls\n          }\n        }\n\n        $(selector).on(eventName, handler)\n        data.handlers.push(handler)\n\n        return {\n          selector: selector,\n          eventName: eventName,\n          handler: handler,\n          reset: function (){\n            delete data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]\n          },\n          calls: {\n            count: function () {\n              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?\n                data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : 0;\n            },\n            any: function () {\n              return data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)] ?\n                !!data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].calls : false;\n            }\n          }\n        }\n      },\n\n      args: function (selector, eventName) {\n        var actualArgs = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)].args\n\n        if (!actualArgs) {\n          throw \"There is no spy for \" + eventName + \" on \" + selector.toString() + \". Make sure to create a spy using spyOnEvent.\"\n        }\n\n        return actualArgs\n      },\n\n      wasTriggered: function (selector, eventName) {\n        return !!(data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)])\n      },\n\n      wasTriggeredWith: function (selector, eventName, expectedArgs, util, customEqualityTesters) {\n        var actualArgs = jasmine.jQuery.events.args(selector, eventName).slice(1)\n\n        if (Object.prototype.toString.call(expectedArgs) !== '[object Array]')\n          actualArgs = actualArgs[0]\n\n        return util.equals(actualArgs, expectedArgs, customEqualityTesters)\n      },\n\n      wasPrevented: function (selector, eventName) {\n        var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]\n          , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args\n          , e = args ? args[0] : undefined\n\n        return e && e.isDefaultPrevented()\n      },\n\n      wasStopped: function (selector, eventName) {\n        var spiedEvent = data.spiedEvents[jasmine.spiedEventsKey(selector, eventName)]\n          , args = (jasmine.util.isUndefined(spiedEvent)) ? {} : spiedEvent.args\n          , e = args ? args[0] : undefined\n\n        return e && e.isPropagationStopped()\n      },\n\n      cleanUp: function () {\n        data.spiedEvents = {}\n        data.handlers    = []\n      }\n    }\n\n    var hasProperty = function (actualValue, expectedValue) {\n      if (expectedValue === undefined)\n        return actualValue !== undefined\n\n      return actualValue === expectedValue\n    }\n\n    beforeEach(function () {\n      jasmine.addMatchers({\n        toHaveClass: function () {\n          return {\n            compare: function (actual, className) {\n              return { pass: $(actual).hasClass(className) }\n            }\n          }\n        },\n\n        toHaveCss: function () {\n          return {\n            compare: function (actual, css) {\n              for (var prop in css){\n                var value = css[prop]\n                // see issue #147 on gh\n                  ;if (value === 'auto' && $(actual).get(0).style[prop] === 'auto') continue\n                if ($(actual).css(prop) !== value) return { pass: false }\n              }\n              return { pass: true }\n            }\n          }\n        },\n\n        toBeVisible: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).is(':visible') }\n            }\n          }\n        },\n\n        toBeHidden: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).is(':hidden') }\n            }\n          }\n        },\n\n        toBeSelected: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).is(':selected') }\n            }\n          }\n        },\n\n        toBeChecked: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).is(':checked') }\n            }\n          }\n        },\n\n        toBeEmpty: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).is(':empty') }\n            }\n          }\n        },\n\n        toBeInDOM: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $.contains(document.documentElement, $(actual)[0]) }\n            }\n          }\n        },\n\n        toExist: function () {\n          return {\n            compare: function (actual) {\n              return { pass: $(actual).length }\n            }\n          }\n        },\n\n        toHaveLength: function () {\n          return {\n            compare: function (actual, length) {\n              return { pass: $(actual).length === length }\n            }\n          }\n        },\n\n        toHaveAttr: function () {\n          return {\n            compare: function (actual, attributeName, expectedAttributeValue) {\n              return { pass: hasProperty($(actual).attr(attributeName), expectedAttributeValue) }\n            }\n          }\n        },\n\n        toHaveProp: function () {\n          return {\n            compare: function (actual, propertyName, expectedPropertyValue) {\n              return { pass: hasProperty($(actual).prop(propertyName), expectedPropertyValue) }\n            }\n          }\n        },\n\n        toHaveId: function () {\n          return {\n            compare: function (actual, id) {\n              return { pass: $(actual).attr('id') == id }\n            }\n          }\n        },\n\n        toHaveHtml: function () {\n          return {\n            compare: function (actual, html) {\n              return { pass: $(actual).html() == jasmine.jQuery.browserTagCaseIndependentHtml(html) }\n            }\n          }\n        },\n\n        toContainHtml: function () {\n          return {\n            compare: function (actual, html) {\n              var actualHtml = $(actual).html()\n                , expectedHtml = jasmine.jQuery.browserTagCaseIndependentHtml(html)\n\n              return { pass: (actualHtml.indexOf(expectedHtml) >= 0) }\n            }\n          }\n        },\n\n        toHaveText: function () {\n          return {\n            compare: function (actual, text) {\n              var actualText = $(actual).text()\n              var trimmedText = $.trim(actualText)\n\n              if (text && $.isFunction(text.test)) {\n                return { pass: text.test(actualText) || text.test(trimmedText) }\n              } else {\n                return { pass: (actualText == text || trimmedText == text) }\n              }\n            }\n          }\n        },\n\n        toContainText: function () {\n          return {\n            compare: function (actual, text) {\n              var trimmedText = $.trim($(actual).text())\n\n              if (text && $.isFunction(text.test)) {\n                return { pass: text.test(trimmedText) }\n              } else {\n                return { pass: trimmedText.indexOf(text) != -1 }\n              }\n            }\n          }\n        },\n\n        toHaveValue: function () {\n          return {\n            compare: function (actual, value) {\n              return { pass: $(actual).val() === value }\n            }\n          }\n        },\n\n        toHaveData: function () {\n          return {\n            compare: function (actual, key, expectedValue) {\n              return { pass: hasProperty($(actual).data(key), expectedValue) }\n            }\n          }\n        },\n\n        toContainElement: function () {\n          return {\n            compare: function (actual, selector) {\n              return { pass: $(actual).find(selector).length }\n            }\n          }\n        },\n\n        toBeMatchedBy: function () {\n          return {\n            compare: function (actual, selector) {\n              return { pass: $(actual).filter(selector).length }\n            }\n          }\n        },\n\n        toBeDisabled: function () {\n          return {\n            compare: function (actual, selector) {\n              return { pass: $(actual).is(':disabled') }\n            }\n          }\n        },\n\n        toBeFocused: function (selector) {\n          return {\n            compare: function (actual, selector) {\n              return { pass: $(actual)[0] === $(actual)[0].ownerDocument.activeElement }\n            }\n          }\n        },\n\n        toHandle: function () {\n          return {\n            compare: function (actual, event) {\n              if ( !actual || actual.length === 0 ) return { pass: false };\n              var events = $._data($(actual).get(0), \"events\")\n\n              if (!events || !event || typeof event !== \"string\") {\n                return { pass: false }\n              }\n\n              var namespaces = event.split(\".\")\n                , eventType = namespaces.shift()\n                , sortedNamespaces = namespaces.slice(0).sort()\n                , namespaceRegExp = new RegExp(\"(^|\\\\.)\" + sortedNamespaces.join(\"\\\\.(?:.*\\\\.)?\") + \"(\\\\.|$)\")\n\n              if (events[eventType] && namespaces.length) {\n                for (var i = 0; i < events[eventType].length; i++) {\n                  var namespace = events[eventType][i].namespace\n\n                  if (namespaceRegExp.test(namespace))\n                    return { pass: true }\n                }\n              } else {\n                return { pass: (events[eventType] && events[eventType].length > 0) }\n              }\n\n              return { pass: false }\n            }\n          }\n        },\n\n        toHandleWith: function () {\n          return {\n            compare: function (actual, eventName, eventHandler) {\n              if ( !actual || actual.length === 0 ) return { pass: false };\n              var normalizedEventName = eventName.split('.')[0]\n                , stack = $._data($(actual).get(0), \"events\")[normalizedEventName]\n\n              for (var i = 0; i < stack.length; i++) {\n                if (stack[i].handler == eventHandler) return { pass: true }\n              }\n\n              return { pass: false }\n            }\n          }\n        },\n\n        toHaveBeenTriggeredOn: function () {\n          return {\n            compare: function (actual, selector) {\n              var result = { pass: jasmine.jQuery.events.wasTriggered(selector, actual) }\n\n              result.message = result.pass ?\n              \"Expected event \" + $(actual) + \" not to have been triggered on \" + selector :\n              \"Expected event \" + $(actual) + \" to have been triggered on \" + selector\n\n              return result;\n            }\n          }\n        },\n\n        toHaveBeenTriggered: function (){\n          return {\n            compare: function (actual) {\n              var eventName = actual.eventName\n                , selector = actual.selector\n                , result = { pass: jasmine.jQuery.events.wasTriggered(selector, eventName) }\n\n              result.message = result.pass ?\n              \"Expected event \" + eventName + \" not to have been triggered on \" + selector :\n              \"Expected event \" + eventName + \" to have been triggered on \" + selector\n\n              return result\n            }\n          }\n        },\n\n        toHaveBeenTriggeredOnAndWith: function (j$, customEqualityTesters) {\n          return {\n            compare: function (actual, selector, expectedArgs) {\n              var wasTriggered = jasmine.jQuery.events.wasTriggered(selector, actual)\n                , result = { pass: wasTriggered && jasmine.jQuery.events.wasTriggeredWith(selector, actual, expectedArgs, j$, customEqualityTesters) }\n\n              if (wasTriggered) {\n                var actualArgs = jasmine.jQuery.events.args(selector, actual, expectedArgs)[1]\n                result.message = result.pass ?\n                \"Expected event \" + actual + \" not to have been triggered with \" + jasmine.pp(expectedArgs) + \" but it was triggered with \" + jasmine.pp(actualArgs) :\n                \"Expected event \" + actual + \" to have been triggered with \" + jasmine.pp(expectedArgs) + \"  but it was triggered with \" + jasmine.pp(actualArgs)\n\n              } else {\n                // todo check on this\n                result.message = result.pass ?\n                \"Expected event \" + actual + \" not to have been triggered on \" + selector :\n                \"Expected event \" + actual + \" to have been triggered on \" + selector\n              }\n\n              return result\n            }\n          }\n        },\n\n        toHaveBeenPreventedOn: function () {\n          return {\n            compare: function (actual, selector) {\n              var result = { pass: jasmine.jQuery.events.wasPrevented(selector, actual) }\n\n              result.message = result.pass ?\n              \"Expected event \" + actual + \" not to have been prevented on \" + selector :\n              \"Expected event \" + actual + \" to have been prevented on \" + selector\n\n              return result\n            }\n          }\n        },\n\n        toHaveBeenPrevented: function () {\n          return {\n            compare: function (actual) {\n              var eventName = actual.eventName\n                , selector = actual.selector\n                , result = { pass: jasmine.jQuery.events.wasPrevented(selector, eventName) }\n\n              result.message = result.pass ?\n              \"Expected event \" + eventName + \" not to have been prevented on \" + selector :\n              \"Expected event \" + eventName + \" to have been prevented on \" + selector\n\n              return result\n            }\n          }\n        },\n\n        toHaveBeenStoppedOn: function () {\n          return {\n            compare: function (actual, selector) {\n              var result = { pass: jasmine.jQuery.events.wasStopped(selector, actual) }\n\n              result.message = result.pass ?\n              \"Expected event \" + actual + \" not to have been stopped on \" + selector :\n              \"Expected event \" + actual + \" to have been stopped on \" + selector\n\n              return result;\n            }\n          }\n        },\n\n        toHaveBeenStopped: function () {\n          return {\n            compare: function (actual) {\n              var eventName = actual.eventName\n                , selector = actual.selector\n                , result = { pass: jasmine.jQuery.events.wasStopped(selector, eventName) }\n\n              result.message = result.pass ?\n              \"Expected event \" + eventName + \" not to have been stopped on \" + selector :\n              \"Expected event \" + eventName + \" to have been stopped on \" + selector\n\n              return result\n            }\n          }\n        }\n      })\n\n      jasmine.getEnv().addCustomEqualityTester(function(a, b) {\n        if (a && b) {\n          if (a instanceof $ || jasmine.isDomNode(a)) {\n            var $a = $(a)\n\n            if (b instanceof $)\n              return $a.length == b.length && a.is(b)\n\n            return $a.is(b);\n          }\n\n          if (b instanceof $ || jasmine.isDomNode(b)) {\n            var $b = $(b)\n\n            if (a instanceof $)\n              return a.length == $b.length && $b.is(a)\n\n            return $(b).is(a);\n          }\n        }\n      })\n\n      jasmine.getEnv().addCustomEqualityTester(function (a, b) {\n        if (a instanceof $ && b instanceof $ && a.size() == b.size())\n          return a.is(b)\n      })\n    })\n\n    afterEach(function () {\n      jasmine.getFixtures().cleanUp()\n      jasmine.getStyleFixtures().cleanUp()\n      jasmine.jQuery.events.cleanUp()\n    })\n\n    window.readFixtures = function () {\n      return jasmine.getFixtures().proxyCallTo_('read', arguments)\n    }\n\n    window.preloadFixtures = function () {\n      jasmine.getFixtures().proxyCallTo_('preload', arguments)\n    }\n\n    window.loadFixtures = function () {\n      jasmine.getFixtures().proxyCallTo_('load', arguments)\n    }\n\n    window.appendLoadFixtures = function () {\n      jasmine.getFixtures().proxyCallTo_('appendLoad', arguments)\n    }\n\n    window.setFixtures = function (html) {\n      return jasmine.getFixtures().proxyCallTo_('set', arguments)\n    }\n\n    window.appendSetFixtures = function () {\n      jasmine.getFixtures().proxyCallTo_('appendSet', arguments)\n    }\n\n    window.sandbox = function (attributes) {\n      return jasmine.getFixtures().sandbox(attributes)\n    }\n\n    window.spyOnEvent = function (selector, eventName) {\n      return jasmine.jQuery.events.spyOn(selector, eventName)\n    }\n\n    window.preloadStyleFixtures = function () {\n      jasmine.getStyleFixtures().proxyCallTo_('preload', arguments)\n    }\n\n    window.loadStyleFixtures = function () {\n      jasmine.getStyleFixtures().proxyCallTo_('load', arguments)\n    }\n\n    window.appendLoadStyleFixtures = function () {\n      jasmine.getStyleFixtures().proxyCallTo_('appendLoad', arguments)\n    }\n\n    window.setStyleFixtures = function (html) {\n      jasmine.getStyleFixtures().proxyCallTo_('set', arguments)\n    }\n\n    window.appendSetStyleFixtures = function (html) {\n      jasmine.getStyleFixtures().proxyCallTo_('appendSet', arguments)\n    }\n\n    window.loadJSONFixtures = function () {\n      return jasmine.getJSONFixtures().proxyCallTo_('load', arguments)\n    }\n\n    window.getJSONFixture = function (url) {\n      return jasmine.getJSONFixtures().proxyCallTo_('read', arguments)[url]\n    }\n  }(window, window.jasmine, window.jQuery);\n\n});\n","/* globals Package: false */\n\n(function (context, mocker, Package) {\n  var originals = []\n\n  var _getOriginal = function (object, propertyName) {\n    // Linear search may not be ideal but\n    // the originals list shouldn't be normally that big\n    var length = originals.length\n    for (var i = 0; i < length; i++) {\n      var original = originals[i]\n      if (original.object === object && original.propertyName === propertyName) {\n        return original\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Used in user tests, helper function to mock any object you provide.\n   * Automatically reverts the mocked object after each test.\n   *\n   * NOTE: Depends on 'afterEach' global function\n   *\n   * @method mock\n   */\n  var mock = function (object, propertyName, options) {\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error('object must be an object')\n    }\n    if (typeof propertyName !== 'string') {\n      throw new Error('propertyName must be a string')\n    }\n    if (typeof object[propertyName] === 'undefined') {\n      throw new Error('property does not exist on object')\n    }\n\n    var existingOriginal = _getOriginal(object, propertyName)\n    if (existingOriginal) {\n      return existingOriginal.mock\n    } else {\n      options = options || {}\n\n      var originalValue = object[propertyName]\n      var metadata = mocker.getMetadata(object[propertyName])\n      var mock = mocker.generateFromMetadata(metadata)\n\n      originals.push({\n        object: object,\n        propertyName: propertyName,\n        value: originalValue,\n        mock: mock,\n        options: options\n      })\n\n      object[propertyName] = mock\n\n      return mock\n    }\n  }\n\n  context.mock = mock\n\n  var mockPackage = function (packageName, options) {\n    if (typeof packageName !== 'string') {\n      throw new Error('packageName must be a string')\n    }\n\n    return Package[packageName] ? mock(Package, packageName, options) : null\n  }\n\n  context.mockPackage = mockPackage\n\n  function restoreOriginal(original) {\n    if (!original.options.permanent) {\n      original.object[original.propertyName] = original.value\n    }\n  }\n\n  function restoreOriginals() {\n    originals.forEach(restoreOriginal)\n    originals = []\n  }\n\n  afterEach(restoreOriginals)\n})(\n  (typeof window !== 'undefined') ? window : global,\n  (typeof window !== 'undefined') ? window.mocker : global.ComponentMocker,\n  Package\n);\n"]}}]