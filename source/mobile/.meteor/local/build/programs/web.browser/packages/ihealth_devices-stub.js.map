{"version":3,"sources":["meteor://ðŸ’»app/packages/ihealth_devices-stub/callback-simulator.js","meteor://ðŸ’»app/packages/ihealth_devices-stub/bg-stub.js","meteor://ðŸ’»app/packages/ihealth_devices-stub/bp-stub.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4G;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6G;;;;;;;;;;;;;;;;;;ACzfile":"/packages/ihealth_devices-stub.js","sourcesContent":["DevicesStub = {};\n\nvar levelFilter = 2\nvar debugL = _.partial(DevTools.consoleWithLevels, levelFilter);\n\nDevicesStub.sendMessages = function(cb, messageSets) {\n  if(messageSets) {\n    debugL(4)(\"messageSets.length: \", messageSets.length)\n    debugL(5)(\"messageSets: \", messageSets)\n    for(i=0; i < messageSets.length; i++) {(function(i) {\n      var messageSet = messageSets[i]\n      var messageDelay = messageSet.messageDelay\n      var message = messageSet.message\n      var messageRepeat = messageSet.messageRepeat || 1\n      for(j=0; j < messageRepeat; j++) {\n        (function(j) {\n          Meteor.setTimeout(function() {\n            debugL(4)(\"sending message \" + j + \": \" + message)\n            cb(JSON.stringify(message))\n          } , (j+1) * messageDelay )\n        })(j)\n      }\n    })(i)\n    }\n  }\n};\n","var debugLevel = 5\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);\nvar sendMessages = DevicesStub.sendMessages;\n\nvar fakeBatteryLevel = 77;\n\nDevicesStub.BG5 = {\n  startDiscovery : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'startDiscovery');\n\n    var messages = [\n      { messageDelay: 1000,\n        message: {\n          \"msg\" : \"discovery doing\",\n          \"address\" : \"8CDE52425C58\",\n          \"name\" : \"BG5\"\n        }},\n      { messageDelay: 1500,\n        message: {\n          \"HardwareVersion\" : \"1.0.0\",\n          \"ProtocolString\" : \"com.jiuan.BPV20\",\n          \"name\" : \"BP5\",\n          \"ModelNumber\" : \"BP5 11070\",\n          \"address\" : \"8CDE521448F0\",\n          \"msg\" : \"discovery doing\",\n          \"FirmwareVersion\" : \"2.1.0\"\n        }}\n    ]\n    sendMessages(successCallback, messages)\n  },\n\n  stopDiscovery : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'stopDiscovery')\n\n    var messages = [{ messageDelay: 100,\n        message: {\n      \"msg\" : \"discovery done\",\n      \"address\" : \"\"\n    }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  startMeasure : function(mac, successCallback, errorCallback) {\n      debugL(3)('fake ' + 'startMeasure')\n\n      var messageNormal = [\n        { messageDelay: 2000,\n            message: {\n              \"msg\" : \"strip in\",\n              \"address\" : \"8CDE52425C58\"\n            }\n        },\n        { messageDelay: 5000,\n          message: {\n            \"msg\" : \"get blood\",\n            \"address\" : \"8CDE52425C58\"\n          }\n        },\n        { messageDelay: 10000,\n          message: {\n            \"msg\" : \"value\",\n            \"address\" : \"8CDE52425C58\",\n            \"value\" : 102\n          }\n        }\n      ]\n\n      var messageForUsedStrip = [\n        { messageDelay: 2000,\n            message: {\n              \"msg\" : \"strip in\",\n              \"address\" : \"8CDE52425C58\"\n            }\n        },\n        { messageDelay: 5000,\n          message:       {\n                  \"msg\" : \"error\",\n                  \"errorID\" : 3\n                }\n        }\n      ]\n\n      var messageForStripRemoved = [\n        { messageDelay: 2000,\n            message: {\n              \"msg\" : \"strip in\",\n              \"address\" : \"8CDE52425C58\"\n            }\n        },\n        { messageDelay: 5000,\n          message:{\n            \"msg\" : \"error\",\n            \"errorID\" : 9\n          }\n        }\n      ]\n\n      var scenario = Session.get(\"scenario\")\n      switch (scenario) {\n        case \"used strip\":\n          messages = messageForUsedStrip;\n          break;\n        case \"strip removed\":\n          messages = messageForStripRemoved;\n          break;\n        default:\n          messages = messageNormal;\n      }\n      sendMessages(successCallback, messages)\n  },\n\n  connectDevice : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'connectDevice');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n        \"address\" : \"8CDE52425C58\",\n        \"msg\" : \"device connnected\",\n      }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  // setUnit = function(mac, successCallback, errorCallback, type) {\n  //     cordova.exec(successCallback, errorCallback, \"BgManagerCordovaFake\", \"setUnit\", [mac, type]);\n  // },\n\n  getBattery : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'getBattery')\n\n    successCallback(\n      JSON.stringify (\n        {\n          msg: 'getBattery',\n          battery: fakeBatteryLevel\n        }\n      )\n    );\n  },\n  // save the bottle number of the test strips to the device for offline mode\n  setBottleId : function(mac, successCallback, errorCallback, bottleId) {\n    debugL(3)('fake ' + 'setBottleId');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n        \"msg\" : \"setbottleid\",\n        \"address\" : \"8CDE52425C58\",\n        \"bottleid\" : 123456\n      }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n\n  // retrieve the bottle number of the test strips to the device for offline mode\n  getBottleId : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'getBottleId');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n      \"msg\" : \"getbottleid\",\n      \"address\" : \"8CDE52425C58\",\n      \"bottleid\" : 123456\n      }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  // save the bottle details of the test strips to the device for offline mode\n  setBottleMessage : function(mac, successCallback, errorCallback, qr, leftNum, time) {\n    debugL(3)('fake ' + 'setBottleMessage');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n      \"msg\" : \"setBottleMessage\",\n      \"address\" : \"8CDE52425C58\",\n      \"bottleid\" : 123456,\n      \"qr\": \"02323C50435714322D1200A0404B6AACFE144D7A97E619011E250003158D\",\n      \"leftNum\": 25,\n      \"timeTs\": \"2015-09-03 00:00:00\"\n    }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  // retrieve the bottle details of the test strips to the device for offline mode\n  getBottleMessage : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'getBottleMessage ');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n      \"msg\" : \"getBottleMessage \",\n      \"address\" : \"8CDE52425C58\",\n      \"bottleid\" : 123456,\n      \"qr\": \"02323C50435714322D1200A0404B6AACFE144D7A97E619011E250003158D\",\n      \"leftNum\": 25,\n      \"timeTs\": \"2015-09-03 00:00:00\"\n    }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  getOfflineData : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'getOfflineData');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n      \"msg\" : \"getOfflineData\",\n      \"address\" : \"8CDE52425C58\",\n      \"history\" : {\n        \"ResultList\" : [\n          {\n            \"Result\" : 190,\n            \"Date\" : \"2015-08-03 15:06:11\"\n          }\n        ]\n      }\n    }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  deleteOfflineData : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'getBottleId');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n        \"msg\" : \"deleteOfflineData\",\n        \"address\" : \"8CDE52425C58\"\n      }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  disConnectDevice : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'disConnectDevice');\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n      \"msg\" : \"disConnectDevice\",\n      \"address\" : \"8CDE52425C58\",\n      \"bottleid\" : 123456\n    }\n    }]\n    sendMessages(successCallback, messages)\n  },\n\n  setDisconnectCallback : function(mac, successCallback, errorCallback) {\n    debugL(3)('fake ' + 'setDisconnectCallback')\n\n    var messages = [{\n      messageDelay: 1000,\n      message: {\n        \"msg\" : \"disconnect\",\n        \"mac\" : \"8CDE52425C58\",\n        \"address\" : \"8CDE52425C58\"\n      }\n    }]\n\n    var disconnectTimer = Meteor.setInterval(function(){\n      if (Session.get(\"disconnect\")) {\n        sendMessages(successCallback, messages)\n        Session.set(\"disconnect\", false)\n        Meteor.clearInterval(disconnectTimer)\n      }\n    }, 2000)\n  },\n  //\n  // holdLink : function(mac, successCallback, errorCallback) {\n  //     cordova.exec(successCallback, errorCallback, \"BgManagerCordovaFake\", \"holdLink\", [mac]);\n  // }\n}\n","var debugLevel = 5\nvar debugL = _.partial(DevTools.consoleWithLevels, debugLevel);\nvar sendMessages = DevicesStub.sendMessages;\n\nvar fakeBatteryLevel = 77;\n\nDevicesStub.BP = {\n  startDiscovery: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'startDiscovery');\n\n    var messages = [\n      { messageDelay: 1000,\n        message: {\n          \"HardwareVersion\" : \"1.0.0\",\n          \"ProtocolString\" : \"com.jiuan.BPV20\",\n          \"name\" : \"BP5\",\n          \"ModelNumber\" : \"BP5 11070\",\n          \"address\" : \"8CDE521448F0\",\n          \"msg\" : \"discovery doing\",\n          \"FirmwareVersion\" : \"2.1.0\"\n        }\n      },\n      { messageDelay: 3000,\n        message: {\n          \"HardwareVersion\" : \"1.0.0\",\n          \"ProtocolString\" : \"com.jiuan.BPV20\",\n          \"name\" : \"BP5\",\n          \"ModelNumber\" : \"BP5 11070\",\n          \"address\" : \"8CDE521448F0\",\n          \"msg\" : \"discovery doing\",\n          \"FirmwareVersion\" : \"2.1.0\"\n        }\n      }\n    ]\n    sendMessages(cbSuccess, messages)\n  },\n  stopDiscovery: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'stopDiscovery')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n  },\n  startMeasure: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'startMeasure')\n    var messageZero = [\n      { messageDelay: 500,\n        message: {\n          \"msg\" : \"zero doing\",\n          \"address\" : \"8CDE521448F0\"\n        },\n        messageRepeat: 5\n      },\n      { messageDelay: 500,\n        message: {\n          \"msg\" : \"zero done\",\n          \"address\" : \"8CDE521448F0\"\n        }\n      },\n      { messageDelay: 500,\n        message: {\n          \"msg\" : \"measure doing\",\n          \"address\" : \"8CDE521448F0\",\n          \"pressure\" : 0\n        },\n        messageRepeat: 5\n      }\n    ];\n\n    var messageMeasuring = _.range(150).map(function(i) {\n      return { messageDelay: 50*i,\n        message: {\n          \"pressure\" : i,\n          \"msg\" : \"measure doing\",\n          \"address\" : \"8CDE521448F0\",\n          \"wave\" : [\n            (100*Math.sin((i+0)/150)),\n            (100*Math.sin((i+20)/150)),\n            (100*Math.sin((i+40)/150)),\n            (100*Math.sin((i+60)/150)),\n            (100*Math.sin((i+80)/150)),\n            (100*Math.sin((i+100)/150)),\n            (100*Math.sin((i+120)/150)),\n            (100*Math.sin((i+150)/150))\n          ]\n        }\n      }\n    });\n\n    var messageResult = [\n      { messageDelay: 8000,\n        message: {\n          \"lowpressure\" : 85,\n          \"address\" : \"8CDE521448F0\",\n          \"name\" : \"BP5\",\n          \"heartrate\" : 63,\n          \"pressure\" : 136,\n          \"msg\" : \"measure done\",\n          \"wave\" : [\n            19,\n            19,\n            19,\n            19,\n            18,\n            18,\n            18,\n            18\n          ],\n          \"highpressure\" : 115\n        }\n      }\n    ]\n\n    var messages = _.reduce([messageZero, messageMeasuring, messageResult], function(memo, nextVal) { return memo.concat(nextVal)}, []);\n\n    sendMessages(cbSuccess, messages)\n  },\n  stopMeasure: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'stopMeasure')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  },\n  connectDevice: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'connectDevice');\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n  },\n  enableOffline: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'enableOffline')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  },\n  disenableOffline: function(address, cbSuccess, cbFail) {\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n    debugL(3)('fake ' + 'disenableOffline')\n  },\n  getOfflineNum: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'getOfflineNum')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  },\n  getOfflineData: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'getOfflineData')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  },\n  getBattery: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'getBattery')\n\n    cbSuccess(\n      JSON.stringify (\n        {\n          msg: 'fake battery level for debug purposes',\n          batterLevel: fakeBatteryLevel\n        }\n      )\n    );\n\n  },\n  isEnableOffline: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'isEnableOffline')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  },\n  disConnectDevice: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'disConnectDevice')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n  },\n  setDisconnectCallback: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'setDisconnectCallback')\n      var messages = [\n        { messageDelay: 2 * 60000,\n          message: {\n            \"name\" : \"BP5\",\n            \"address\" : \"8CDE521448F0\",\n            \"msg\" : \"disconnected\",\n            \"details\" : \"fake disconnect after 2 minutes\"\n          }\n        }\n      ]\n      sendMessages(cbSuccess, messages)\n  },\n  confirmAngle: function(address, cbSuccess, cbFail) {\n    debugL(3)('fake ' + 'confirmAngle')\n\n    cbSuccess(\n      JSON.stringify(\n        {msg: 'fake return'}\n      )\n    );\n\n  }\n}\n"]}