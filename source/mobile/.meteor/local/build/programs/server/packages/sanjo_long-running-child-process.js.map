{"version":3,"sources":["meteor://ðŸ’»app/packages/sanjo_long-running-child-process/packages/sanjo_long-running-child-process.js"],"names":[],"mappingsyH","file":"/packages/sanjo_long-running-child-process.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/log.js                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlog = loglevel.createPackageLogger(                                                                          // 1\n  '[sanjo:long-running-child-process]',                                                                      // 2\n  process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL || 'info'                                                 // 3\n)                                                                                                            // 4\n                                                                                                             // 5\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/meteor/files.js                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/**                                                                                                          // 1\n * Copied from Meteor tools/files.js.                                                                        // 2\n *                                                                                                           // 3\n * Includes:                                                                                                 // 4\n * - Helper to find the app root path                                                                        // 5\n */                                                                                                          // 6\n                                                                                                             // 7\nvar path = Npm.require('path');                                                                              // 8\nvar fs = Npm.require('fs');                                                                                  // 9\n                                                                                                             // 10\n// given a predicate function and a starting path, traverse upwards                                          // 11\n// from the path until we find a path that satisfies the predicate.                                          // 12\n//                                                                                                           // 13\n// returns either the path to the lowest level directory that passed                                         // 14\n// the test or null for none found. if starting path isn't given, use                                        // 15\n// cwd.                                                                                                      // 16\nvar findUpwards = function (predicate, startPath) {                                                          // 17\n  var testDir = startPath || process.cwd();                                                                  // 18\n  while (testDir) {                                                                                          // 19\n    if (predicate(testDir)) {                                                                                // 20\n      break;                                                                                                 // 21\n    }                                                                                                        // 22\n    var newDir = path.dirname(testDir);                                                                      // 23\n    if (newDir === testDir) {                                                                                // 24\n      testDir = null;                                                                                        // 25\n    } else {                                                                                                 // 26\n      testDir = newDir;                                                                                      // 27\n    }                                                                                                        // 28\n  }                                                                                                          // 29\n  if (!testDir)                                                                                              // 30\n    return null;                                                                                             // 31\n                                                                                                             // 32\n  return testDir;                                                                                            // 33\n};                                                                                                           // 34\n                                                                                                             // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                        // 36\n// directory. If so, return the top-level app directory.                                                     // 37\nfindAppDir = function (filepath) {                                                                           // 38\n  var isAppDir = function (filepath) {                                                                       // 39\n    // XXX once we are done with the transition to engine, this should                                       // 40\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                       // 41\n    // 'release'))`                                                                                          // 42\n                                                                                                             // 43\n    // .meteor/packages can be a directory, if .meteor is a warehouse                                        // 44\n    // directory.  since installing meteor initializes a warehouse at                                        // 45\n    // $HOME/.meteor, we want to make sure your home directory (and all                                      // 46\n    // subdirectories therein) don't count as being within a meteor app.                                     // 47\n    try { // use try/catch to avoid the additional syscall to fs.existsSync                                  // 48\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                               // 49\n    } catch (e) {                                                                                            // 50\n      return false;                                                                                          // 51\n    }                                                                                                        // 52\n  };                                                                                                         // 53\n                                                                                                             // 54\n  return findUpwards(isAppDir, filepath);                                                                    // 55\n};                                                                                                           // 56\n                                                                                                             // 57\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/lib/LongRunningChildProcess.coffee.js                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar assert, child_process, fs, path;\n\nfs = Npm.require('fs-extra');\n\npath = Npm.require('path');\n\nassert = Npm.require('assert');\n\nchild_process = Npm.require('child_process');\n\nif (this.sanjo == null) {\n  this.sanjo = {};\n}\n\nsanjo.LongRunningChildProcess = (function() {\n  LongRunningChildProcess.prototype.taskName = null;\n\n  LongRunningChildProcess.prototype.child = null;\n\n  LongRunningChildProcess.prototype.pid = null;\n\n  LongRunningChildProcess.prototype.dead = false;\n\n  function LongRunningChildProcess(taskName) {\n    log.debug(\"LongRunningChildProcess.constructor(taskName=\" + taskName + \")\");\n    this.taskName = taskName;\n    this.pid = this.readPid();\n  }\n\n  LongRunningChildProcess.prototype.getTaskName = function() {\n    return this.taskName;\n  };\n\n  LongRunningChildProcess.prototype.getChild = function() {\n    return this.child;\n  };\n\n  LongRunningChildProcess.prototype.getPid = function() {\n    return this.pid;\n  };\n\n  LongRunningChildProcess.prototype._setPid = function(pid) {\n    log.debug(\"LongRunningChildProcess._setPid(pid=\" + pid + \")\");\n    this.pid = pid;\n    log.debug(\"Saving \" + this.taskName + \" pid \" + pid + \" to \" + (this._getPidFilePath()));\n    return fs.outputFile(this._getPidFilePath(), \"\" + pid);\n  };\n\n  LongRunningChildProcess.prototype.isDead = function() {\n    return this.dead;\n  };\n\n  LongRunningChildProcess.prototype.isRunning = function() {\n    var err, pid;\n    log.debug('LongRunningChildProcess.isRunning()');\n    pid = this.getPid();\n    if (!pid) {\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");\n      return false;\n    }\n    try {\n      process.kill(pid, 0);\n      log.debug(\"LongRunningChildProcess.isRunning returns true\");\n      return true;\n    } catch (_error) {\n      err = _error;\n      log.trace(err);\n      log.debug(\"LongRunningChildProcess.isRunning returns false\");\n      return false;\n    }\n  };\n\n  LongRunningChildProcess.prototype._getMeteorPid = function() {\n    var parentPid, parentPidIndex;\n    parentPid = null;\n    parentPidIndex = _.indexOf(process.argv, '--parent-pid');\n    if (parentPidIndex !== -1) {\n      parentPid = process.argv[parentPidIndex + 1];\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);\n    } else if (process.env.METEOR_PARENT_PID) {\n      parentPid = process.env.METEOR_PARENT_PID;\n      log.debug(\"The pid of the main Meteor app process is \" + parentPid);\n    } else {\n      log.error('Could not find the pid of the main Meteor app process');\n    }\n    return parentPid;\n  };\n\n  LongRunningChildProcess.prototype._getMeteorAppPath = function() {\n    if (!this.appPath) {\n      this.appPath = path.resolve(findAppDir());\n    }\n    return this.appPath;\n  };\n\n  LongRunningChildProcess.prototype._getMeteorLocalPath = function() {\n    return path.join(this._getMeteorAppPath(), '.meteor/local');\n  };\n\n  LongRunningChildProcess.prototype._getPidFilePath = function() {\n    return path.join(this._getMeteorLocalPath(), \"run/\" + this.taskName + \".pid\");\n  };\n\n  LongRunningChildProcess.prototype._getLogFilePath = function() {\n    return path.join(this._getMeteorLocalPath(), \"log/\" + this.taskName + \".log\");\n  };\n\n  LongRunningChildProcess.prototype._getSpawnScriptPath = function() {\n    return path.join(this._getMeteorLocalPath(), 'build/programs/server/assets/packages/' + 'sanjo_long-running-child-process/lib/spawnScript.js');\n  };\n\n  LongRunningChildProcess.prototype.readPid = function() {\n    var err, pid;\n    log.debug('LongRunningChildProcess.readPid()');\n    try {\n      pid = parseInt(fs.readFileSync(this._getPidFilePath(), {\n        encoding: 'utf8'\n      }, 10));\n      log.debug(\"LongRunningChildProcess.readPid returns \" + pid);\n      return pid;\n    } catch (_error) {\n      err = _error;\n      log.debug('LongRunningChildProcess.readPid returns null');\n      return null;\n    }\n  };\n\n  LongRunningChildProcess.prototype.spawn = function(options) {\n    var command, commandArgs, env, logFile, nodeDir, nodePath, spawnOptions, spawnScript, stdio;\n    log.debug(\"LongRunningChildProcess.spawn()\", options);\n    check(options, Match.ObjectIncluding({\n      command: String,\n      args: [Match.Any],\n      options: Match.Optional(Match.ObjectIncluding({\n        cwd: Match.Optional(Match.OneOf(String, void 0)),\n        env: Match.Optional(Object),\n        stdio: Match.Optional(Match.OneOf(String, [Match.Any]))\n      }))\n    }));\n    if (!options.options) {\n      options.options = {};\n    }\n    if (this.isRunning()) {\n      return false;\n    }\n    logFile = this._getLogFilePath();\n    fs.ensureDirSync(path.dirname(logFile));\n    if (options.options.stdio) {\n      stdio = options.options.stdio;\n    } else {\n      this.fout = fs.openSync(logFile, 'w');\n      stdio = ['ignore', this.fout, this.fout];\n    }\n    nodePath = process.execPath;\n    nodeDir = path.dirname(nodePath);\n    env = _.clone(options.options.env || process.env);\n    env.PATH = nodeDir + ':' + (env.PATH || process.env.PATH);\n    if (process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL && !env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL) {\n      env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL = process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL;\n    }\n    spawnOptions = {\n      cwd: options.options.cwd || this._getMeteorAppPath(),\n      env: env,\n      detached: true,\n      stdio: stdio\n    };\n    command = path.basename(options.command);\n    spawnScript = this._getSpawnScriptPath();\n    commandArgs = [spawnScript, this._getMeteorPid(), this.taskName, options.command].concat(options.args);\n    fs.chmodSync(spawnScript, 0x164);\n    log.debug(\"LongRunningChildProcess.spawn is spawning '\" + command + \"'\");\n    this.child = child_process.spawn(nodePath, commandArgs, spawnOptions);\n    this.dead = false;\n    this._setPid(this.child.pid);\n    this.child.on(\"exit\", (function(_this) {\n      return function(code) {\n        log.debug(\"LongRunningChildProcess: child_process.on 'exit': command=\" + command + \" code=\" + code);\n        if (_this.fout) {\n          return fs.closeSync(_this.fout);\n        }\n      };\n    })(this));\n    return true;\n  };\n\n  LongRunningChildProcess.prototype.kill = function(signal) {\n    var err, pid;\n    if (signal == null) {\n      signal = \"SIGINT\";\n    }\n    log.debug(\"LongRunningChildProcess.kill(signal=\" + signal + \")\");\n    if (!this.dead) {\n      try {\n        if (this.child != null) {\n          this.child.kill(signal);\n        } else {\n          pid = this.getPid();\n          process.kill(pid, signal);\n        }\n        this.dead = true;\n        this.pid = null;\n        return fs.removeSync(this._getPidFilePath());\n      } catch (_error) {\n        err = _error;\n        return log.warn(\"Error: While killing process:\\n\", err);\n      }\n    }\n  };\n\n  return LongRunningChildProcess;\n\n})();\n\nif (process.env.IS_MIRROR === 'true') {\n  sanjo.LongRunningChildProcess.fs = fs;\n  sanjo.LongRunningChildProcess.path = path;\n  sanjo.LongRunningChildProcess.assert = assert;\n  sanjo.LongRunningChildProcess.child_process = child_process;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/sanjo:long-running-child-process/main.js                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/* globals LongRunningChildProcess: true */                                                                  // 1\n                                                                                                             // 2\nLongRunningChildProcess = sanjo.LongRunningChildProcess                                                      // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}