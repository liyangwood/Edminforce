{"version":3,"sources":["meteor://ðŸ’»app/packages/package-version-parser/packages/package-version-parser.js"],"names":[],"mappingsoH","file":"/packages/package-version-parser.js","sourcesContent":["(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/package-version-parser/semver410.js                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// <METEOR>                                                                                          // 1\n// Fool the module system detection code below so that it doesn't                                    // 2\n// do anything special.                                                                              // 3\nvar exports = SemVer, module = {}, define = {};                                                      // 4\n// Create a package-private variable.  Can't use SemVer because                                      // 5\n// of the code that says `function SemVer(...)` below (implicitly                                    // 6\n// declaring a var).  Can't use \"semver\" because that's a var in                                     // 7\n// package-version-parser.js.                                                                        // 8\nSemVer410 = SemVer;                                                                                  // 9\n// </METEOR>                                                                                         // 10\n                                                                                                     // 11\n// export the class if we are in a Node-like system.                                                 // 12\nif (typeof module === 'object' && module.exports === exports)                                        // 13\n  exports = module.exports = SemVer;                                                                 // 14\n                                                                                                     // 15\n// The debug function is excluded entirely from the minified version.                                // 16\n/* nomin */ var debug;                                                                               // 17\n/* nomin */ if (typeof process === 'object' &&                                                       // 18\n    /* nomin */ process.env &&                                                                       // 19\n    /* nomin */ process.env.NODE_DEBUG &&                                                            // 20\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))                                          // 21\n  /* nomin */ debug = function() {                                                                   // 22\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);                                 // 23\n    /* nomin */ args.unshift('SEMVER');                                                              // 24\n    /* nomin */ console.log.apply(console, args);                                                    // 25\n    /* nomin */ };                                                                                   // 26\n/* nomin */ else                                                                                     // 27\n  /* nomin */ debug = function() {};                                                                 // 28\n                                                                                                     // 29\n// Note: this is the semver.org version of the spec that it implements                               // 30\n// Not necessarily the package version of this code.                                                 // 31\nexports.SEMVER_SPEC_VERSION = '2.0.0';                                                               // 32\n                                                                                                     // 33\n// The actual regexps go on exports.re                                                               // 34\nvar re = exports.re = [];                                                                            // 35\nvar src = exports.src = [];                                                                          // 36\nvar R = 0;                                                                                           // 37\n                                                                                                     // 38\n// The following Regular Expressions can be used for tokenizing,                                     // 39\n// validating, and parsing SemVer version strings.                                                   // 40\n                                                                                                     // 41\n// ## Numeric Identifier                                                                             // 42\n// A single `0`, or a non-zero digit followed by zero or more digits.                                // 43\n                                                                                                     // 44\nvar NUMERICIDENTIFIER = R++;                                                                         // 45\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';                                                              // 46\nvar NUMERICIDENTIFIERLOOSE = R++;                                                                    // 47\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';                                                              // 48\n                                                                                                     // 49\n                                                                                                     // 50\n// ## Non-numeric Identifier                                                                         // 51\n// Zero or more digits, followed by a letter or hyphen, and then zero or                             // 52\n// more letters, digits, or hyphens.                                                                 // 53\n                                                                                                     // 54\nvar NONNUMERICIDENTIFIER = R++;                                                                      // 55\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';                                            // 56\n                                                                                                     // 57\n                                                                                                     // 58\n// ## Main Version                                                                                   // 59\n// Three dot-separated numeric identifiers.                                                          // 60\n                                                                                                     // 61\nvar MAINVERSION = R++;                                                                               // 62\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 63\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 64\n                   '(' + src[NUMERICIDENTIFIER] + ')';                                               // 65\n                                                                                                     // 66\nvar MAINVERSIONLOOSE = R++;                                                                          // 67\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 68\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 69\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';                                     // 70\n                                                                                                     // 71\n// ## Pre-release Version Identifier                                                                 // 72\n// A numeric identifier, or a non-numeric identifier.                                                // 73\n                                                                                                     // 74\nvar PRERELEASEIDENTIFIER = R++;                                                                      // 75\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +                                         // 76\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';                                   // 77\n                                                                                                     // 78\nvar PRERELEASEIDENTIFIERLOOSE = R++;                                                                 // 79\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +                               // 80\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';                              // 81\n                                                                                                     // 82\n                                                                                                     // 83\n// ## Pre-release Version                                                                            // 84\n// Hyphen, followed by one or more dot-separated pre-release version                                 // 85\n// identifiers.                                                                                      // 86\n                                                                                                     // 87\nvar PRERELEASE = R++;                                                                                // 88\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +                                              // 89\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';                                     // 90\n                                                                                                     // 91\nvar PRERELEASELOOSE = R++;                                                                           // 92\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +                                   // 93\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';                           // 94\n                                                                                                     // 95\n// ## Build Metadata Identifier                                                                      // 96\n// Any combination of digits, letters, or hyphens.                                                   // 97\n                                                                                                     // 98\nvar BUILDIDENTIFIER = R++;                                                                           // 99\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';                                                              // 100\n                                                                                                     // 101\n// ## Build Metadata                                                                                 // 102\n// Plus sign, followed by one or more period-separated build metadata                                // 103\n// identifiers.                                                                                      // 104\n                                                                                                     // 105\nvar BUILD = R++;                                                                                     // 106\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +                                                      // 107\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';                                               // 108\n                                                                                                     // 109\n                                                                                                     // 110\n// ## Full Version String                                                                            // 111\n// A main version, followed optionally by a pre-release version and                                  // 112\n// build metadata.                                                                                   // 113\n                                                                                                     // 114\n// Note that the only major, minor, patch, and pre-release sections of                               // 115\n// the version string are capturing groups.  The build metadata is not a                             // 116\n// capturing group, because it should not ever be used in version                                    // 117\n// comparison.                                                                                       // 118\n                                                                                                     // 119\nvar FULL = R++;                                                                                      // 120\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +                                                            // 121\n                src[PRERELEASE] + '?' +                                                              // 122\n                src[BUILD] + '?';                                                                    // 123\n                                                                                                     // 124\nsrc[FULL] = '^' + FULLPLAIN + '$';                                                                   // 125\n                                                                                                     // 126\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.                               // 127\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty                                 // 128\n// common in the npm registry.                                                                       // 129\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +                                                // 130\n                 src[PRERELEASELOOSE] + '?' +                                                        // 131\n                 src[BUILD] + '?';                                                                   // 132\n                                                                                                     // 133\nvar LOOSE = R++;                                                                                     // 134\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';                                                                 // 135\n                                                                                                     // 136\nvar GTLT = R++;                                                                                      // 137\nsrc[GTLT] = '((?:<|>)?=?)';                                                                          // 138\n                                                                                                     // 139\n// Something like \"2.*\" or \"1.2.x\".                                                                  // 140\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"                                // 141\n// Only the first item is strictly required.                                                         // 142\nvar XRANGEIDENTIFIERLOOSE = R++;                                                                     // 143\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';                               // 144\nvar XRANGEIDENTIFIER = R++;                                                                          // 145\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';                                         // 146\n                                                                                                     // 147\nvar XRANGEPLAIN = R++;                                                                               // 148\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +                                       // 149\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 150\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 151\n                   '(?:' + src[PRERELEASE] + ')?' +                                                  // 152\n                   src[BUILD] + '?' +                                                                // 153\n                   ')?)?';                                                                           // 154\n                                                                                                     // 155\nvar XRANGEPLAINLOOSE = R++;                                                                          // 156\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                             // 157\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 158\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 159\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +                                        // 160\n                        src[BUILD] + '?' +                                                           // 161\n                        ')?)?';                                                                      // 162\n                                                                                                     // 163\nvar XRANGE = R++;                                                                                    // 164\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';                                     // 165\nvar XRANGELOOSE = R++;                                                                               // 166\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';                           // 167\n                                                                                                     // 168\n// Tilde ranges.                                                                                     // 169\n// Meaning is \"reasonably at or greater than\"                                                        // 170\nvar LONETILDE = R++;                                                                                 // 171\nsrc[LONETILDE] = '(?:~>?)';                                                                          // 172\n                                                                                                     // 173\nvar TILDETRIM = R++;                                                                                 // 174\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';                                                 // 175\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');                                                     // 176\nvar tildeTrimReplace = '$1~';                                                                        // 177\n                                                                                                     // 178\nvar TILDE = R++;                                                                                     // 179\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';                                          // 180\nvar TILDELOOSE = R++;                                                                                // 181\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';                                // 182\n                                                                                                     // 183\n// Caret ranges.                                                                                     // 184\n// Meaning is \"at least and backwards compatible with\"                                               // 185\nvar LONECARET = R++;                                                                                 // 186\nsrc[LONECARET] = '(?:\\\\^)';                                                                          // 187\n                                                                                                     // 188\nvar CARETTRIM = R++;                                                                                 // 189\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';                                                 // 190\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');                                                     // 191\nvar caretTrimReplace = '$1^';                                                                        // 192\n                                                                                                     // 193\nvar CARET = R++;                                                                                     // 194\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';                                          // 195\nvar CARETLOOSE = R++;                                                                                // 196\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';                                // 197\n                                                                                                     // 198\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"                                     // 199\nvar COMPARATORLOOSE = R++;                                                                           // 200\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';                             // 201\nvar COMPARATOR = R++;                                                                                // 202\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';                                   // 203\n                                                                                                     // 204\n                                                                                                     // 205\n// An expression to strip any whitespace between the gtlt and the thing                              // 206\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`                                                       // 207\nvar COMPARATORTRIM = R++;                                                                            // 208\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +                                                         // 209\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';                           // 210\n                                                                                                     // 211\n// this one has to use the /g flag                                                                   // 212\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');                                           // 213\nvar comparatorTrimReplace = '$1$2$3';                                                                // 214\n                                                                                                     // 215\n                                                                                                     // 216\n// Something like `1.2.3 - 1.2.4`                                                                    // 217\n// Note that these all use the loose form, because they'll be                                        // 218\n// checked against either the strict or loose comparator form                                        // 219\n// later.                                                                                            // 220\nvar HYPHENRANGE = R++;                                                                               // 221\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +                                               // 222\n                   '\\\\s+-\\\\s+' +                                                                     // 223\n                   '(' + src[XRANGEPLAIN] + ')' +                                                    // 224\n                   '\\\\s*$';                                                                          // 225\n                                                                                                     // 226\nvar HYPHENRANGELOOSE = R++;                                                                          // 227\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +                                     // 228\n                        '\\\\s+-\\\\s+' +                                                                // 229\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +                                          // 230\n                        '\\\\s*$';                                                                     // 231\n                                                                                                     // 232\n// Star ranges basically just allow anything at all.                                                 // 233\nvar STAR = R++;                                                                                      // 234\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';                                                                       // 235\n                                                                                                     // 236\n// Compile to actual regexp objects.                                                                 // 237\n// All are flag-free, unless they were created above with a flag.                                    // 238\nfor (var i = 0; i < R; i++) {                                                                        // 239\n  debug(i, src[i]);                                                                                  // 240\n  if (!re[i])                                                                                        // 241\n    re[i] = new RegExp(src[i]);                                                                      // 242\n}                                                                                                    // 243\n                                                                                                     // 244\nexports.parse = parse;                                                                               // 245\nfunction parse(version, loose) {                                                                     // 246\n  var r = loose ? re[LOOSE] : re[FULL];                                                              // 247\n  return (r.test(version)) ? new SemVer(version, loose) : null;                                      // 248\n}                                                                                                    // 249\n                                                                                                     // 250\nexports.valid = valid;                                                                               // 251\nfunction valid(version, loose) {                                                                     // 252\n  var v = parse(version, loose);                                                                     // 253\n  return v ? v.version : null;                                                                       // 254\n}                                                                                                    // 255\n                                                                                                     // 256\n                                                                                                     // 257\nexports.clean = clean;                                                                               // 258\nfunction clean(version, loose) {                                                                     // 259\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);                                        // 260\n  return s ? s.version : null;                                                                       // 261\n}                                                                                                    // 262\n                                                                                                     // 263\nexports.SemVer = SemVer;                                                                             // 264\n                                                                                                     // 265\nfunction SemVer(version, loose) {                                                                    // 266\n  if (version instanceof SemVer) {                                                                   // 267\n    if (version.loose === loose)                                                                     // 268\n      return version;                                                                                // 269\n    else                                                                                             // 270\n      version = version.version;                                                                     // 271\n  } else if (typeof version !== 'string') {                                                          // 272\n    throw new TypeError('Invalid Version: ' + version);                                              // 273\n  }                                                                                                  // 274\n                                                                                                     // 275\n  if (!(this instanceof SemVer))                                                                     // 276\n    return new SemVer(version, loose);                                                               // 277\n                                                                                                     // 278\n  debug('SemVer', version, loose);                                                                   // 279\n  this.loose = loose;                                                                                // 280\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);                                        // 281\n                                                                                                     // 282\n  if (!m)                                                                                            // 283\n    throw new TypeError('Invalid Version: ' + version);                                              // 284\n                                                                                                     // 285\n  this.raw = version;                                                                                // 286\n                                                                                                     // 287\n  // these are actually numbers                                                                      // 288\n  this.major = +m[1];                                                                                // 289\n  this.minor = +m[2];                                                                                // 290\n  this.patch = +m[3];                                                                                // 291\n                                                                                                     // 292\n  // numberify any prerelease numeric ids                                                            // 293\n  if (!m[4])                                                                                         // 294\n    this.prerelease = [];                                                                            // 295\n  else                                                                                               // 296\n    this.prerelease = m[4].split('.').map(function(id) {                                             // 297\n      return (/^[0-9]+$/.test(id)) ? +id : id;                                                       // 298\n    });                                                                                              // 299\n                                                                                                     // 300\n  this.build = m[5] ? m[5].split('.') : [];                                                          // 301\n  this.format();                                                                                     // 302\n}                                                                                                    // 303\n                                                                                                     // 304\nSemVer.prototype.format = function() {                                                               // 305\n  this.version = this.major + '.' + this.minor + '.' + this.patch;                                   // 306\n  if (this.prerelease.length)                                                                        // 307\n    this.version += '-' + this.prerelease.join('.');                                                 // 308\n  return this.version;                                                                               // 309\n};                                                                                                   // 310\n                                                                                                     // 311\nSemVer.prototype.inspect = function() {                                                              // 312\n  return '<SemVer \"' + this + '\">';                                                                  // 313\n};                                                                                                   // 314\n                                                                                                     // 315\nSemVer.prototype.toString = function() {                                                             // 316\n  return this.version;                                                                               // 317\n};                                                                                                   // 318\n                                                                                                     // 319\nSemVer.prototype.compare = function(other) {                                                         // 320\n  debug('SemVer.compare', this.version, this.loose, other);                                          // 321\n  if (!(other instanceof SemVer))                                                                    // 322\n    other = new SemVer(other, this.loose);                                                           // 323\n                                                                                                     // 324\n  return this.compareMain(other) || this.comparePre(other);                                          // 325\n};                                                                                                   // 326\n                                                                                                     // 327\nSemVer.prototype.compareMain = function(other) {                                                     // 328\n  if (!(other instanceof SemVer))                                                                    // 329\n    other = new SemVer(other, this.loose);                                                           // 330\n                                                                                                     // 331\n  return compareIdentifiers(this.major, other.major) ||                                              // 332\n         compareIdentifiers(this.minor, other.minor) ||                                              // 333\n         compareIdentifiers(this.patch, other.patch);                                                // 334\n};                                                                                                   // 335\n                                                                                                     // 336\nSemVer.prototype.comparePre = function(other) {                                                      // 337\n  if (!(other instanceof SemVer))                                                                    // 338\n    other = new SemVer(other, this.loose);                                                           // 339\n                                                                                                     // 340\n  // NOT having a prerelease is > having one                                                         // 341\n  if (this.prerelease.length && !other.prerelease.length)                                            // 342\n    return -1;                                                                                       // 343\n  else if (!this.prerelease.length && other.prerelease.length)                                       // 344\n    return 1;                                                                                        // 345\n  else if (!this.prerelease.length && !other.prerelease.length)                                      // 346\n    return 0;                                                                                        // 347\n                                                                                                     // 348\n  var i = 0;                                                                                         // 349\n  do {                                                                                               // 350\n    var a = this.prerelease[i];                                                                      // 351\n    var b = other.prerelease[i];                                                                     // 352\n    debug('prerelease compare', i, a, b);                                                            // 353\n    if (a === undefined && b === undefined)                                                          // 354\n      return 0;                                                                                      // 355\n    else if (b === undefined)                                                                        // 356\n      return 1;                                                                                      // 357\n    else if (a === undefined)                                                                        // 358\n      return -1;                                                                                     // 359\n    else if (a === b)                                                                                // 360\n      continue;                                                                                      // 361\n    else                                                                                             // 362\n      return compareIdentifiers(a, b);                                                               // 363\n  } while (++i);                                                                                     // 364\n};                                                                                                   // 365\n                                                                                                     // 366\n// preminor will bump the version up to the next minor release, and immediately                      // 367\n// down to pre-release. premajor and prepatch work the same way.                                     // 368\nSemVer.prototype.inc = function(release, identifier) {                                               // 369\n  switch (release) {                                                                                 // 370\n    case 'premajor':                                                                                 // 371\n      this.prerelease.length = 0;                                                                    // 372\n      this.patch = 0;                                                                                // 373\n      this.minor = 0;                                                                                // 374\n      this.major++;                                                                                  // 375\n      this.inc('pre', identifier);                                                                   // 376\n      break;                                                                                         // 377\n    case 'preminor':                                                                                 // 378\n      this.prerelease.length = 0;                                                                    // 379\n      this.patch = 0;                                                                                // 380\n      this.minor++;                                                                                  // 381\n      this.inc('pre', identifier);                                                                   // 382\n      break;                                                                                         // 383\n    case 'prepatch':                                                                                 // 384\n      // If this is already a prerelease, it will bump to the next version                           // 385\n      // drop any prereleases that might already exist, since they are not                           // 386\n      // relevant at this point.                                                                     // 387\n      this.prerelease.length = 0;                                                                    // 388\n      this.inc('patch', identifier);                                                                 // 389\n      this.inc('pre', identifier);                                                                   // 390\n      break;                                                                                         // 391\n    // If the input is a non-prerelease version, this acts the same as                               // 392\n    // prepatch.                                                                                     // 393\n    case 'prerelease':                                                                               // 394\n      if (this.prerelease.length === 0)                                                              // 395\n        this.inc('patch', identifier);                                                               // 396\n      this.inc('pre', identifier);                                                                   // 397\n      break;                                                                                         // 398\n                                                                                                     // 399\n    case 'major':                                                                                    // 400\n      // If this is a pre-major version, bump up to the same major version.                          // 401\n      // Otherwise increment major.                                                                  // 402\n      // 1.0.0-5 bumps to 1.0.0                                                                      // 403\n      // 1.1.0 bumps to 2.0.0                                                                        // 404\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)                      // 405\n        this.major++;                                                                                // 406\n      this.minor = 0;                                                                                // 407\n      this.patch = 0;                                                                                // 408\n      this.prerelease = [];                                                                          // 409\n      break;                                                                                         // 410\n    case 'minor':                                                                                    // 411\n      // If this is a pre-minor version, bump up to the same minor version.                          // 412\n      // Otherwise increment minor.                                                                  // 413\n      // 1.2.0-5 bumps to 1.2.0                                                                      // 414\n      // 1.2.1 bumps to 1.3.0                                                                        // 415\n      if (this.patch !== 0 || this.prerelease.length === 0)                                          // 416\n        this.minor++;                                                                                // 417\n      this.patch = 0;                                                                                // 418\n      this.prerelease = [];                                                                          // 419\n      break;                                                                                         // 420\n    case 'patch':                                                                                    // 421\n      // If this is not a pre-release version, it will increment the patch.                          // 422\n      // If it is a pre-release it will bump up to the same patch version.                           // 423\n      // 1.2.0-5 patches to 1.2.0                                                                    // 424\n      // 1.2.0 patches to 1.2.1                                                                      // 425\n      if (this.prerelease.length === 0)                                                              // 426\n        this.patch++;                                                                                // 427\n      this.prerelease = [];                                                                          // 428\n      break;                                                                                         // 429\n    // This probably shouldn't be used publicly.                                                     // 430\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.                                // 431\n    case 'pre':                                                                                      // 432\n      if (this.prerelease.length === 0)                                                              // 433\n        this.prerelease = [0];                                                                       // 434\n      else {                                                                                         // 435\n        var i = this.prerelease.length;                                                              // 436\n        while (--i >= 0) {                                                                           // 437\n          if (typeof this.prerelease[i] === 'number') {                                              // 438\n            this.prerelease[i]++;                                                                    // 439\n            i = -2;                                                                                  // 440\n          }                                                                                          // 441\n        }                                                                                            // 442\n        if (i === -1) // didn't increment anything                                                   // 443\n          this.prerelease.push(0);                                                                   // 444\n      }                                                                                              // 445\n      if (identifier) {                                                                              // 446\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,                                                       // 447\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0                                     // 448\n        if (this.prerelease[0] === identifier) {                                                     // 449\n          if (isNaN(this.prerelease[1]))                                                             // 450\n            this.prerelease = [identifier, 0];                                                       // 451\n        } else                                                                                       // 452\n          this.prerelease = [identifier, 0];                                                         // 453\n      }                                                                                              // 454\n      break;                                                                                         // 455\n                                                                                                     // 456\n    default:                                                                                         // 457\n      throw new Error('invalid increment argument: ' + release);                                     // 458\n  }                                                                                                  // 459\n  this.format();                                                                                     // 460\n  return this;                                                                                       // 461\n};                                                                                                   // 462\n                                                                                                     // 463\nexports.inc = inc;                                                                                   // 464\nfunction inc(version, release, loose, identifier) {                                                  // 465\n  if (typeof(loose) === 'string') {                                                                  // 466\n    identifier = loose;                                                                              // 467\n    loose = undefined;                                                                               // 468\n  }                                                                                                  // 469\n                                                                                                     // 470\n  try {                                                                                              // 471\n    return new SemVer(version, loose).inc(release, identifier).version;                              // 472\n  } catch (er) {                                                                                     // 473\n    return null;                                                                                     // 474\n  }                                                                                                  // 475\n}                                                                                                    // 476\n                                                                                                     // 477\nexports.compareIdentifiers = compareIdentifiers;                                                     // 478\n                                                                                                     // 479\nvar numeric = /^[0-9]+$/;                                                                            // 480\nfunction compareIdentifiers(a, b) {                                                                  // 481\n  var anum = numeric.test(a);                                                                        // 482\n  var bnum = numeric.test(b);                                                                        // 483\n                                                                                                     // 484\n  if (anum && bnum) {                                                                                // 485\n    a = +a;                                                                                          // 486\n    b = +b;                                                                                          // 487\n  }                                                                                                  // 488\n                                                                                                     // 489\n  return (anum && !bnum) ? -1 :                                                                      // 490\n         (bnum && !anum) ? 1 :                                                                       // 491\n         a < b ? -1 :                                                                                // 492\n         a > b ? 1 :                                                                                 // 493\n         0;                                                                                          // 494\n}                                                                                                    // 495\n                                                                                                     // 496\nexports.rcompareIdentifiers = rcompareIdentifiers;                                                   // 497\nfunction rcompareIdentifiers(a, b) {                                                                 // 498\n  return compareIdentifiers(b, a);                                                                   // 499\n}                                                                                                    // 500\n                                                                                                     // 501\nexports.compare = compare;                                                                           // 502\nfunction compare(a, b, loose) {                                                                      // 503\n  return new SemVer(a, loose).compare(b);                                                            // 504\n}                                                                                                    // 505\n                                                                                                     // 506\nexports.compareLoose = compareLoose;                                                                 // 507\nfunction compareLoose(a, b) {                                                                        // 508\n  return compare(a, b, true);                                                                        // 509\n}                                                                                                    // 510\n                                                                                                     // 511\nexports.rcompare = rcompare;                                                                         // 512\nfunction rcompare(a, b, loose) {                                                                     // 513\n  return compare(b, a, loose);                                                                       // 514\n}                                                                                                    // 515\n                                                                                                     // 516\nexports.sort = sort;                                                                                 // 517\nfunction sort(list, loose) {                                                                         // 518\n  return list.sort(function(a, b) {                                                                  // 519\n    return exports.compare(a, b, loose);                                                             // 520\n  });                                                                                                // 521\n}                                                                                                    // 522\n                                                                                                     // 523\nexports.rsort = rsort;                                                                               // 524\nfunction rsort(list, loose) {                                                                        // 525\n  return list.sort(function(a, b) {                                                                  // 526\n    return exports.rcompare(a, b, loose);                                                            // 527\n  });                                                                                                // 528\n}                                                                                                    // 529\n                                                                                                     // 530\nexports.gt = gt;                                                                                     // 531\nfunction gt(a, b, loose) {                                                                           // 532\n  return compare(a, b, loose) > 0;                                                                   // 533\n}                                                                                                    // 534\n                                                                                                     // 535\nexports.lt = lt;                                                                                     // 536\nfunction lt(a, b, loose) {                                                                           // 537\n  return compare(a, b, loose) < 0;                                                                   // 538\n}                                                                                                    // 539\n                                                                                                     // 540\nexports.eq = eq;                                                                                     // 541\nfunction eq(a, b, loose) {                                                                           // 542\n  return compare(a, b, loose) === 0;                                                                 // 543\n}                                                                                                    // 544\n                                                                                                     // 545\nexports.neq = neq;                                                                                   // 546\nfunction neq(a, b, loose) {                                                                          // 547\n  return compare(a, b, loose) !== 0;                                                                 // 548\n}                                                                                                    // 549\n                                                                                                     // 550\nexports.gte = gte;                                                                                   // 551\nfunction gte(a, b, loose) {                                                                          // 552\n  return compare(a, b, loose) >= 0;                                                                  // 553\n}                                                                                                    // 554\n                                                                                                     // 555\nexports.lte = lte;                                                                                   // 556\nfunction lte(a, b, loose) {                                                                          // 557\n  return compare(a, b, loose) <= 0;                                                                  // 558\n}                                                                                                    // 559\n                                                                                                     // 560\nexports.cmp = cmp;                                                                                   // 561\nfunction cmp(a, op, b, loose) {                                                                      // 562\n  var ret;                                                                                           // 563\n  switch (op) {                                                                                      // 564\n    case '===':                                                                                      // 565\n      if (typeof a === 'object') a = a.version;                                                      // 566\n      if (typeof b === 'object') b = b.version;                                                      // 567\n      ret = a === b;                                                                                 // 568\n      break;                                                                                         // 569\n    case '!==':                                                                                      // 570\n      if (typeof a === 'object') a = a.version;                                                      // 571\n      if (typeof b === 'object') b = b.version;                                                      // 572\n      ret = a !== b;                                                                                 // 573\n      break;                                                                                         // 574\n    case '': case '=': case '==': ret = eq(a, b, loose); break;                                      // 575\n    case '!=': ret = neq(a, b, loose); break;                                                        // 576\n    case '>': ret = gt(a, b, loose); break;                                                          // 577\n    case '>=': ret = gte(a, b, loose); break;                                                        // 578\n    case '<': ret = lt(a, b, loose); break;                                                          // 579\n    case '<=': ret = lte(a, b, loose); break;                                                        // 580\n    default: throw new TypeError('Invalid operator: ' + op);                                         // 581\n  }                                                                                                  // 582\n  return ret;                                                                                        // 583\n}                                                                                                    // 584\n                                                                                                     // 585\nexports.Comparator = Comparator;                                                                     // 586\nfunction Comparator(comp, loose) {                                                                   // 587\n  if (comp instanceof Comparator) {                                                                  // 588\n    if (comp.loose === loose)                                                                        // 589\n      return comp;                                                                                   // 590\n    else                                                                                             // 591\n      comp = comp.value;                                                                             // 592\n  }                                                                                                  // 593\n                                                                                                     // 594\n  if (!(this instanceof Comparator))                                                                 // 595\n    return new Comparator(comp, loose);                                                              // 596\n                                                                                                     // 597\n  debug('comparator', comp, loose);                                                                  // 598\n  this.loose = loose;                                                                                // 599\n  this.parse(comp);                                                                                  // 600\n                                                                                                     // 601\n  if (this.semver === ANY)                                                                           // 602\n    this.value = '';                                                                                 // 603\n  else                                                                                               // 604\n    this.value = this.operator + this.semver.version;                                                // 605\n                                                                                                     // 606\n  debug('comp', this);                                                                               // 607\n}                                                                                                    // 608\n                                                                                                     // 609\nvar ANY = {};                                                                                        // 610\nComparator.prototype.parse = function(comp) {                                                        // 611\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 612\n  var m = comp.match(r);                                                                             // 613\n                                                                                                     // 614\n  if (!m)                                                                                            // 615\n    throw new TypeError('Invalid comparator: ' + comp);                                              // 616\n                                                                                                     // 617\n  this.operator = m[1];                                                                              // 618\n  if (this.operator === '=')                                                                         // 619\n    this.operator = '';                                                                              // 620\n                                                                                                     // 621\n  // if it literally is just '>' or '' then allow anything.                                          // 622\n  if (!m[2])                                                                                         // 623\n    this.semver = ANY;                                                                               // 624\n  else                                                                                               // 625\n    this.semver = new SemVer(m[2], this.loose);                                                      // 626\n};                                                                                                   // 627\n                                                                                                     // 628\nComparator.prototype.inspect = function() {                                                          // 629\n  return '<SemVer Comparator \"' + this + '\">';                                                       // 630\n};                                                                                                   // 631\n                                                                                                     // 632\nComparator.prototype.toString = function() {                                                         // 633\n  return this.value;                                                                                 // 634\n};                                                                                                   // 635\n                                                                                                     // 636\nComparator.prototype.test = function(version) {                                                      // 637\n  debug('Comparator.test', version, this.loose);                                                     // 638\n                                                                                                     // 639\n  if (this.semver === ANY)                                                                           // 640\n    return true;                                                                                     // 641\n                                                                                                     // 642\n  if (typeof version === 'string')                                                                   // 643\n    version = new SemVer(version, this.loose);                                                       // 644\n                                                                                                     // 645\n  return cmp(version, this.operator, this.semver, this.loose);                                       // 646\n};                                                                                                   // 647\n                                                                                                     // 648\n                                                                                                     // 649\nexports.Range = Range;                                                                               // 650\nfunction Range(range, loose) {                                                                       // 651\n  if ((range instanceof Range) && range.loose === loose)                                             // 652\n    return range;                                                                                    // 653\n                                                                                                     // 654\n  if (!(this instanceof Range))                                                                      // 655\n    return new Range(range, loose);                                                                  // 656\n                                                                                                     // 657\n  this.loose = loose;                                                                                // 658\n                                                                                                     // 659\n  // First, split based on boolean or ||                                                             // 660\n  this.raw = range;                                                                                  // 661\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {                                         // 662\n    return this.parseRange(range.trim());                                                            // 663\n  }, this).filter(function(c) {                                                                      // 664\n    // throw out any that are not relevant for whatever reason                                       // 665\n    return c.length;                                                                                 // 666\n  });                                                                                                // 667\n                                                                                                     // 668\n  if (!this.set.length) {                                                                            // 669\n    throw new TypeError('Invalid SemVer Range: ' + range);                                           // 670\n  }                                                                                                  // 671\n                                                                                                     // 672\n  this.format();                                                                                     // 673\n}                                                                                                    // 674\n                                                                                                     // 675\nRange.prototype.inspect = function() {                                                               // 676\n  return '<SemVer Range \"' + this.range + '\">';                                                      // 677\n};                                                                                                   // 678\n                                                                                                     // 679\nRange.prototype.format = function() {                                                                // 680\n  this.range = this.set.map(function(comps) {                                                        // 681\n    return comps.join(' ').trim();                                                                   // 682\n  }).join('||').trim();                                                                              // 683\n  return this.range;                                                                                 // 684\n};                                                                                                   // 685\n                                                                                                     // 686\nRange.prototype.toString = function() {                                                              // 687\n  return this.range;                                                                                 // 688\n};                                                                                                   // 689\n                                                                                                     // 690\nRange.prototype.parseRange = function(range) {                                                       // 691\n  var loose = this.loose;                                                                            // 692\n  range = range.trim();                                                                              // 693\n  debug('range', range, loose);                                                                      // 694\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`                                                            // 695\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];                                           // 696\n  range = range.replace(hr, hyphenReplace);                                                          // 697\n  debug('hyphen replace', range);                                                                    // 698\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`                                                            // 699\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);                                  // 700\n  debug('comparator trim', range, re[COMPARATORTRIM]);                                               // 701\n                                                                                                     // 702\n  // `~ 1.2.3` => `~1.2.3`                                                                           // 703\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);                                            // 704\n                                                                                                     // 705\n  // `^ 1.2.3` => `^1.2.3`                                                                           // 706\n  range = range.replace(re[CARETTRIM], caretTrimReplace);                                            // 707\n                                                                                                     // 708\n  // normalize spaces                                                                                // 709\n  range = range.split(/\\s+/).join(' ');                                                              // 710\n                                                                                                     // 711\n  // At this point, the range is completely trimmed and                                              // 712\n  // ready to be split into comparators.                                                             // 713\n                                                                                                     // 714\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 715\n  var set = range.split(' ').map(function(comp) {                                                    // 716\n    return parseComparator(comp, loose);                                                             // 717\n  }).join(' ').split(/\\s+/);                                                                         // 718\n  if (this.loose) {                                                                                  // 719\n    // in loose mode, throw out any that are not valid comparators                                   // 720\n    set = set.filter(function(comp) {                                                                // 721\n      return !!comp.match(compRe);                                                                   // 722\n    });                                                                                              // 723\n  }                                                                                                  // 724\n  set = set.map(function(comp) {                                                                     // 725\n    return new Comparator(comp, loose);                                                              // 726\n  });                                                                                                // 727\n                                                                                                     // 728\n  return set;                                                                                        // 729\n};                                                                                                   // 730\n                                                                                                     // 731\n// Mostly just for testing and legacy API reasons                                                    // 732\nexports.toComparators = toComparators;                                                               // 733\nfunction toComparators(range, loose) {                                                               // 734\n  return new Range(range, loose).set.map(function(comp) {                                            // 735\n    return comp.map(function(c) {                                                                    // 736\n      return c.value;                                                                                // 737\n    }).join(' ').trim().split(' ');                                                                  // 738\n  });                                                                                                // 739\n}                                                                                                    // 740\n                                                                                                     // 741\n// comprised of xranges, tildes, stars, and gtlt's at this point.                                    // 742\n// already replaced the hyphen ranges                                                                // 743\n// turn into a set of JUST comparators.                                                              // 744\nfunction parseComparator(comp, loose) {                                                              // 745\n  debug('comp', comp);                                                                               // 746\n  comp = replaceCarets(comp, loose);                                                                 // 747\n  debug('caret', comp);                                                                              // 748\n  comp = replaceTildes(comp, loose);                                                                 // 749\n  debug('tildes', comp);                                                                             // 750\n  comp = replaceXRanges(comp, loose);                                                                // 751\n  debug('xrange', comp);                                                                             // 752\n  comp = replaceStars(comp, loose);                                                                  // 753\n  debug('stars', comp);                                                                              // 754\n  return comp;                                                                                       // 755\n}                                                                                                    // 756\n                                                                                                     // 757\nfunction isX(id) {                                                                                   // 758\n  return !id || id.toLowerCase() === 'x' || id === '*';                                              // 759\n}                                                                                                    // 760\n                                                                                                     // 761\n// ~, ~> --> * (any, kinda silly)                                                                    // 762\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0                                           // 763\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0                                                   // 764\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0                                                   // 765\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0                                                                // 766\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0                                                                // 767\nfunction replaceTildes(comp, loose) {                                                                // 768\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 769\n    return replaceTilde(comp, loose);                                                                // 770\n  }).join(' ');                                                                                      // 771\n}                                                                                                    // 772\n                                                                                                     // 773\nfunction replaceTilde(comp, loose) {                                                                 // 774\n  var r = loose ? re[TILDELOOSE] : re[TILDE];                                                        // 775\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 776\n    debug('tilde', comp, _, M, m, p, pr);                                                            // 777\n    var ret;                                                                                         // 778\n                                                                                                     // 779\n    if (isX(M))                                                                                      // 780\n      ret = '';                                                                                      // 781\n    else if (isX(m))                                                                                 // 782\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 783\n    else if (isX(p))                                                                                 // 784\n      // ~1.2 == >=1.2.0- <1.3.0-                                                                    // 785\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 786\n    else if (pr) {                                                                                   // 787\n      debug('replaceTilde pr', pr);                                                                  // 788\n      if (pr.charAt(0) !== '-')                                                                      // 789\n        pr = '-' + pr;                                                                               // 790\n      ret = '>=' + M + '.' + m + '.' + p + pr +                                                      // 791\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 792\n    } else                                                                                           // 793\n      // ~1.2.3 == >=1.2.3 <1.3.0                                                                    // 794\n      ret = '>=' + M + '.' + m + '.' + p +                                                           // 795\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 796\n                                                                                                     // 797\n    debug('tilde return', ret);                                                                      // 798\n    return ret;                                                                                      // 799\n  });                                                                                                // 800\n}                                                                                                    // 801\n                                                                                                     // 802\n// ^ --> * (any, kinda silly)                                                                        // 803\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0                                                               // 804\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0                                                                   // 805\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0                                                                   // 806\n// ^1.2.3 --> >=1.2.3 <2.0.0                                                                         // 807\n// ^1.2.0 --> >=1.2.0 <2.0.0                                                                         // 808\nfunction replaceCarets(comp, loose) {                                                                // 809\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 810\n    return replaceCaret(comp, loose);                                                                // 811\n  }).join(' ');                                                                                      // 812\n}                                                                                                    // 813\n                                                                                                     // 814\nfunction replaceCaret(comp, loose) {                                                                 // 815\n  debug('caret', comp, loose);                                                                       // 816\n  var r = loose ? re[CARETLOOSE] : re[CARET];                                                        // 817\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 818\n    debug('caret', comp, _, M, m, p, pr);                                                            // 819\n    var ret;                                                                                         // 820\n                                                                                                     // 821\n    if (isX(M))                                                                                      // 822\n      ret = '';                                                                                      // 823\n    else if (isX(m))                                                                                 // 824\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 825\n    else if (isX(p)) {                                                                               // 826\n      if (M === '0')                                                                                 // 827\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                               // 828\n      else                                                                                           // 829\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';                                       // 830\n    } else if (pr) {                                                                                 // 831\n      debug('replaceCaret pr', pr);                                                                  // 832\n      if (pr.charAt(0) !== '-')                                                                      // 833\n        pr = '-' + pr;                                                                               // 834\n      if (M === '0') {                                                                               // 835\n        if (m === '0')                                                                               // 836\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 837\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 838\n        else                                                                                         // 839\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 840\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 841\n      } else                                                                                         // 842\n        ret = '>=' + M + '.' + m + '.' + p + pr +                                                    // 843\n              ' <' + (+M + 1) + '.0.0';                                                              // 844\n    } else {                                                                                         // 845\n      debug('no pr');                                                                                // 846\n      if (M === '0') {                                                                               // 847\n        if (m === '0')                                                                               // 848\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 849\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 850\n        else                                                                                         // 851\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 852\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 853\n      } else                                                                                         // 854\n        ret = '>=' + M + '.' + m + '.' + p +                                                         // 855\n              ' <' + (+M + 1) + '.0.0';                                                              // 856\n    }                                                                                                // 857\n                                                                                                     // 858\n    debug('caret return', ret);                                                                      // 859\n    return ret;                                                                                      // 860\n  });                                                                                                // 861\n}                                                                                                    // 862\n                                                                                                     // 863\nfunction replaceXRanges(comp, loose) {                                                               // 864\n  debug('replaceXRanges', comp, loose);                                                              // 865\n  return comp.split(/\\s+/).map(function(comp) {                                                      // 866\n    return replaceXRange(comp, loose);                                                               // 867\n  }).join(' ');                                                                                      // 868\n}                                                                                                    // 869\n                                                                                                     // 870\nfunction replaceXRange(comp, loose) {                                                                // 871\n  comp = comp.trim();                                                                                // 872\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];                                                      // 873\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {                                          // 874\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);                                                   // 875\n    var xM = isX(M);                                                                                 // 876\n    var xm = xM || isX(m);                                                                           // 877\n    var xp = xm || isX(p);                                                                           // 878\n    var anyX = xp;                                                                                   // 879\n                                                                                                     // 880\n    if (gtlt === '=' && anyX)                                                                        // 881\n      gtlt = '';                                                                                     // 882\n                                                                                                     // 883\n    if (xM) {                                                                                        // 884\n      if (gtlt === '>' || gtlt === '<') {                                                            // 885\n        // nothing is allowed                                                                        // 886\n        ret = '<0.0.0';                                                                              // 887\n      } else {                                                                                       // 888\n        // nothing is forbidden                                                                      // 889\n        ret = '*';                                                                                   // 890\n      }                                                                                              // 891\n    } else if (gtlt && anyX) {                                                                       // 892\n      // replace X with 0                                                                            // 893\n      if (xm)                                                                                        // 894\n        m = 0;                                                                                       // 895\n      if (xp)                                                                                        // 896\n        p = 0;                                                                                       // 897\n                                                                                                     // 898\n      if (gtlt === '>') {                                                                            // 899\n        // >1 => >=2.0.0                                                                             // 900\n        // >1.2 => >=1.3.0                                                                           // 901\n        // >1.2.3 => >= 1.2.4                                                                        // 902\n        gtlt = '>=';                                                                                 // 903\n        if (xm) {                                                                                    // 904\n          M = +M + 1;                                                                                // 905\n          m = 0;                                                                                     // 906\n          p = 0;                                                                                     // 907\n        } else if (xp) {                                                                             // 908\n          m = +m + 1;                                                                                // 909\n          p = 0;                                                                                     // 910\n        }                                                                                            // 911\n      } else if (gtlt === '<=') {                                                                    // 912\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should                                        // 913\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.                                          // 914\n        gtlt = '<'                                                                                   // 915\n        if (xm)                                                                                      // 916\n          M = +M + 1                                                                                 // 917\n        else                                                                                         // 918\n          m = +m + 1                                                                                 // 919\n      }                                                                                              // 920\n                                                                                                     // 921\n      ret = gtlt + M + '.' + m + '.' + p;                                                            // 922\n    } else if (xm) {                                                                                 // 923\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 924\n    } else if (xp) {                                                                                 // 925\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 926\n    }                                                                                                // 927\n                                                                                                     // 928\n    debug('xRange return', ret);                                                                     // 929\n                                                                                                     // 930\n    return ret;                                                                                      // 931\n  });                                                                                                // 932\n}                                                                                                    // 933\n                                                                                                     // 934\n// Because * is AND-ed with everything else in the comparator,                                       // 935\n// and '' means \"any version\", just remove the *s entirely.                                          // 936\nfunction replaceStars(comp, loose) {                                                                 // 937\n  debug('replaceStars', comp, loose);                                                                // 938\n  // Looseness is ignored here.  star is always as loose as it gets!                                 // 939\n  return comp.trim().replace(re[STAR], '');                                                          // 940\n}                                                                                                    // 941\n                                                                                                     // 942\n// This function is passed to string.replace(re[HYPHENRANGE])                                        // 943\n// M, m, patch, prerelease, build                                                                    // 944\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5                                                                    // 945\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do                                                   // 946\n// 1.2 - 3.4 => >=1.2.0 <3.5.0                                                                       // 947\nfunction hyphenReplace($0,                                                                           // 948\n                       from, fM, fm, fp, fpr, fb,                                                    // 949\n                       to, tM, tm, tp, tpr, tb) {                                                    // 950\n                                                                                                     // 951\n  if (isX(fM))                                                                                       // 952\n    from = '';                                                                                       // 953\n  else if (isX(fm))                                                                                  // 954\n    from = '>=' + fM + '.0.0';                                                                       // 955\n  else if (isX(fp))                                                                                  // 956\n    from = '>=' + fM + '.' + fm + '.0';                                                              // 957\n  else                                                                                               // 958\n    from = '>=' + from;                                                                              // 959\n                                                                                                     // 960\n  if (isX(tM))                                                                                       // 961\n    to = '';                                                                                         // 962\n  else if (isX(tm))                                                                                  // 963\n    to = '<' + (+tM + 1) + '.0.0';                                                                   // 964\n  else if (isX(tp))                                                                                  // 965\n    to = '<' + tM + '.' + (+tm + 1) + '.0';                                                          // 966\n  else if (tpr)                                                                                      // 967\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;                                                // 968\n  else                                                                                               // 969\n    to = '<=' + to;                                                                                  // 970\n                                                                                                     // 971\n  return (from + ' ' + to).trim();                                                                   // 972\n}                                                                                                    // 973\n                                                                                                     // 974\n                                                                                                     // 975\n// if ANY of the sets match ALL of its comparators, then pass                                        // 976\nRange.prototype.test = function(version) {                                                           // 977\n  if (!version)                                                                                      // 978\n    return false;                                                                                    // 979\n                                                                                                     // 980\n  if (typeof version === 'string')                                                                   // 981\n    version = new SemVer(version, this.loose);                                                       // 982\n                                                                                                     // 983\n  for (var i = 0; i < this.set.length; i++) {                                                        // 984\n    if (testSet(this.set[i], version))                                                               // 985\n      return true;                                                                                   // 986\n  }                                                                                                  // 987\n  return false;                                                                                      // 988\n};                                                                                                   // 989\n                                                                                                     // 990\nfunction testSet(set, version) {                                                                     // 991\n  for (var i = 0; i < set.length; i++) {                                                             // 992\n    if (!set[i].test(version))                                                                       // 993\n      return false;                                                                                  // 994\n  }                                                                                                  // 995\n                                                                                                     // 996\n  if (version.prerelease.length) {                                                                   // 997\n    // Find the set of versions that are allowed to have prereleases                                 // 998\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0                                      // 999\n    // That should allow `1.2.3-pr.2` to pass.                                                       // 1000\n    // However, `1.2.4-alpha.notready` should NOT be allowed,                                        // 1001\n    // even though it's within the range set by the comparators.                                     // 1002\n    for (var i = 0; i < set.length; i++) {                                                           // 1003\n      debug(set[i].semver);                                                                          // 1004\n      if (set[i].semver === ANY)                                                                     // 1005\n        return true;                                                                                 // 1006\n                                                                                                     // 1007\n      if (set[i].semver.prerelease.length > 0) {                                                     // 1008\n        var allowed = set[i].semver;                                                                 // 1009\n        if (allowed.major === version.major &&                                                       // 1010\n            allowed.minor === version.minor &&                                                       // 1011\n            allowed.patch === version.patch)                                                         // 1012\n          return true;                                                                               // 1013\n      }                                                                                              // 1014\n    }                                                                                                // 1015\n                                                                                                     // 1016\n    // Version has a -pre, but it's not one of the ones we like.                                     // 1017\n    return false;                                                                                    // 1018\n  }                                                                                                  // 1019\n                                                                                                     // 1020\n  return true;                                                                                       // 1021\n}                                                                                                    // 1022\n                                                                                                     // 1023\nexports.satisfies = satisfies;                                                                       // 1024\nfunction satisfies(version, range, loose) {                                                          // 1025\n  try {                                                                                              // 1026\n    range = new Range(range, loose);                                                                 // 1027\n  } catch (er) {                                                                                     // 1028\n    return false;                                                                                    // 1029\n  }                                                                                                  // 1030\n  return range.test(version);                                                                        // 1031\n}                                                                                                    // 1032\n                                                                                                     // 1033\nexports.maxSatisfying = maxSatisfying;                                                               // 1034\nfunction maxSatisfying(versions, range, loose) {                                                     // 1035\n  return versions.filter(function(version) {                                                         // 1036\n    return satisfies(version, range, loose);                                                         // 1037\n  }).sort(function(a, b) {                                                                           // 1038\n    return rcompare(a, b, loose);                                                                    // 1039\n  })[0] || null;                                                                                     // 1040\n}                                                                                                    // 1041\n                                                                                                     // 1042\nexports.validRange = validRange;                                                                     // 1043\nfunction validRange(range, loose) {                                                                  // 1044\n  try {                                                                                              // 1045\n    // Return '*' instead of '' so that truthiness works.                                            // 1046\n    // This will throw if it's invalid anyway                                                        // 1047\n    return new Range(range, loose).range || '*';                                                     // 1048\n  } catch (er) {                                                                                     // 1049\n    return null;                                                                                     // 1050\n  }                                                                                                  // 1051\n}                                                                                                    // 1052\n                                                                                                     // 1053\n// Determine if version is less than all the versions possible in the range                          // 1054\nexports.ltr = ltr;                                                                                   // 1055\nfunction ltr(version, range, loose) {                                                                // 1056\n  return outside(version, range, '<', loose);                                                        // 1057\n}                                                                                                    // 1058\n                                                                                                     // 1059\n// Determine if version is greater than all the versions possible in the range.                      // 1060\nexports.gtr = gtr;                                                                                   // 1061\nfunction gtr(version, range, loose) {                                                                // 1062\n  return outside(version, range, '>', loose);                                                        // 1063\n}                                                                                                    // 1064\n                                                                                                     // 1065\nexports.outside = outside;                                                                           // 1066\nfunction outside(version, range, hilo, loose) {                                                      // 1067\n  version = new SemVer(version, loose);                                                              // 1068\n  range = new Range(range, loose);                                                                   // 1069\n                                                                                                     // 1070\n  var gtfn, ltefn, ltfn, comp, ecomp;                                                                // 1071\n  switch (hilo) {                                                                                    // 1072\n    case '>':                                                                                        // 1073\n      gtfn = gt;                                                                                     // 1074\n      ltefn = lte;                                                                                   // 1075\n      ltfn = lt;                                                                                     // 1076\n      comp = '>';                                                                                    // 1077\n      ecomp = '>=';                                                                                  // 1078\n      break;                                                                                         // 1079\n    case '<':                                                                                        // 1080\n      gtfn = lt;                                                                                     // 1081\n      ltefn = gte;                                                                                   // 1082\n      ltfn = gt;                                                                                     // 1083\n      comp = '<';                                                                                    // 1084\n      ecomp = '<=';                                                                                  // 1085\n      break;                                                                                         // 1086\n    default:                                                                                         // 1087\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');                                  // 1088\n  }                                                                                                  // 1089\n                                                                                                     // 1090\n  // If it satisifes the range it is not outside                                                     // 1091\n  if (satisfies(version, range, loose)) {                                                            // 1092\n    return false;                                                                                    // 1093\n  }                                                                                                  // 1094\n                                                                                                     // 1095\n  // From now on, variable terms are as if we're in \"gtr\" mode.                                      // 1096\n  // but note that everything is flipped for the \"ltr\" function.                                     // 1097\n                                                                                                     // 1098\n  for (var i = 0; i < range.set.length; ++i) {                                                       // 1099\n    var comparators = range.set[i];                                                                  // 1100\n                                                                                                     // 1101\n    var high = null;                                                                                 // 1102\n    var low = null;                                                                                  // 1103\n                                                                                                     // 1104\n    comparators.forEach(function(comparator) {                                                       // 1105\n      high = high || comparator;                                                                     // 1106\n      low = low || comparator;                                                                       // 1107\n      if (gtfn(comparator.semver, high.semver, loose)) {                                             // 1108\n        high = comparator;                                                                           // 1109\n      } else if (ltfn(comparator.semver, low.semver, loose)) {                                       // 1110\n        low = comparator;                                                                            // 1111\n      }                                                                                              // 1112\n    });                                                                                              // 1113\n                                                                                                     // 1114\n    // If the edge version comparator has a operator then our version                                // 1115\n    // isn't outside it                                                                              // 1116\n    if (high.operator === comp || high.operator === ecomp) {                                         // 1117\n      return false;                                                                                  // 1118\n    }                                                                                                // 1119\n                                                                                                     // 1120\n    // If the lowest version comparator has an operator and our version                              // 1121\n    // is less than it then it isn't higher than the range                                           // 1122\n    if ((!low.operator || low.operator === comp) &&                                                  // 1123\n        ltefn(version, low.semver)) {                                                                // 1124\n      return false;                                                                                  // 1125\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {                                // 1126\n      return false;                                                                                  // 1127\n    }                                                                                                // 1128\n  }                                                                                                  // 1129\n  return true;                                                                                       // 1130\n}                                                                                                    // 1131\n                                                                                                     // 1132\n// Use the define() function if we're in AMD land                                                    // 1133\nif (typeof define === 'function' && define.amd)                                                      // 1134\n  define(exports);                                                                                   // 1135\n                                                                                                     // 1136\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/package-version-parser/package-version-parser.js                                         //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// This file is in tools/package-version-parser.js and is symlinked into                             // 1\n// packages/package-version-parser/package-version-parser.js. It's part of both                      // 2\n// the tool and the package!  We don't use an isopacket for it because it used                       // 3\n// to be required as part of building isopackets (though that may no longer be                       // 4\n// true).                                                                                            // 5\nvar inTool = typeof Package === 'undefined';                                                         // 6\n                                                                                                     // 7\n                                                                                                     // 8\nvar semver = inTool ?                                                                                // 9\n  require ('../../dev_bundle/lib/node_modules/semver') : SemVer410;                                  // 10\nvar __ = inTool ? require('../../dev_bundle/lib/node_modules/underscore') : _;                       // 11\n                                                                                                     // 12\n// Takes in a meteor version string, for example 1.2.3-rc.5_1+12345.                                 // 13\n//                                                                                                   // 14\n// Returns an object composed of the following:                                                      // 15\n//  * major (integer >= 0)                                                                           // 16\n//  * minor (integer >= 0)                                                                           // 17\n//  * patch (integer >= 0)                                                                           // 18\n//  * prerelease (Array of Number-or-String, possibly empty)                                         // 19\n//  * wrapNum (integer >= 0)                                                                         // 20\n//  * build (Array of String, possibly empty)                                                        // 21\n//  * raw (String), the raw meteor version string                                                    // 22\n//  * version (String), canonical meteor version without build ID                                    // 23\n//  * semver (String), canonical semver version with build ID but no wrap num                        // 24\n//                                                                                                   // 25\n// The input string \"1.2.3-rc.5_1+12345\" has a (major, minor, patch) of                              // 26\n// (1, 2, 3), a prerelease of [\"rc\", 5], a wrapNum of 1, a build of                                  // 27\n// [\"12345\"], a raw of \"1.2.3-rc.5_1+12345\", a version of                                            // 28\n// \"1.2.3-rc.5_1\", and a semver of \"1.2.3-rc.5+12345\".                                               // 29\n//                                                                                                   // 30\n// Throws if the version string is invalid in any way.                                               // 31\n//                                                                                                   // 32\n// You can write `PV.parse(\"1.2.3\")` as an alternative to `new PV(\"1.2.3\")`                          // 33\nvar PV = function (versionString) {                                                                  // 34\n  if (! (typeof versionString === 'string')) {                                                       // 35\n    throw new Error(\"Invalid PackageVersion argument: \" + versionString);                            // 36\n  }                                                                                                  // 37\n  if (! versionString) {                                                                             // 38\n    throwVersionParserError(\"Empty string is not a valid version\");                                  // 39\n  }                                                                                                  // 40\n                                                                                                     // 41\n  // The buildID (\"+foo\" suffix) is part of semver, but split it off                                 // 42\n  // because it comes after the wrapNum.  The wrapNum (\"_123\" suffix)                                // 43\n  // is a Meteor extension to semver.                                                                // 44\n  var plusSplit = versionString.split('+');                                                          // 45\n  var wrapSplit = plusSplit[0].split('_');                                                           // 46\n  var wrapNum = 0;                                                                                   // 47\n                                                                                                     // 48\n  if (plusSplit.length > 2) {                                                                        // 49\n    throwVersionParserError(\"Can't have two + in version: \" + versionString);                        // 50\n  }                                                                                                  // 51\n  if (wrapSplit.length > 2) {                                                                        // 52\n    throwVersionParserError(\"Can't have two _ in version: \" + versionString);                        // 53\n  }                                                                                                  // 54\n  if (wrapSplit.length > 1) {                                                                        // 55\n    wrapNum = wrapSplit[1];                                                                          // 56\n    if (! wrapNum) {                                                                                 // 57\n      throwVersionParserError(\"A wrap number must follow _\");                                        // 58\n    } else if (!/^\\d+$/.test(wrapNum)) {                                                             // 59\n      throwVersionParserError(                                                                       // 60\n        \"The wrap number (after _) must contain only digits, so \" +                                  // 61\n          versionString + \" is invalid.\");                                                           // 62\n    } else if (wrapNum[0] === \"0\") {                                                                 // 63\n      throwVersionParserError(                                                                       // 64\n        \"The wrap number (after _) must not have a leading zero, so \" +                              // 65\n          versionString + \" is invalid.\");                                                           // 66\n    }                                                                                                // 67\n    wrapNum = parseInt(wrapNum, 10);                                                                 // 68\n  }                                                                                                  // 69\n                                                                                                     // 70\n  // semverPart is everything but the wrapNum, so for \"1.0.0_2+xyz\",                                 // 71\n  // it is \"1.0.0+xyz\".                                                                              // 72\n  var semverPart = wrapSplit[0];                                                                     // 73\n  if (plusSplit.length > 1) {                                                                        // 74\n    semverPart += \"+\" + plusSplit[1];                                                                // 75\n  }                                                                                                  // 76\n                                                                                                     // 77\n  // NPM's semver spec supports things like 'v1.0.0' and considers them valid,                       // 78\n  // but we don't. Everything before the + or - should be of the x.x.x form.                         // 79\n  if (! /^\\d+\\.\\d+\\.\\d+(\\+|-|$)/.test(semverPart)) {                                                 // 80\n    throwVersionParserError(                                                                         // 81\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 82\n        + versionString + \"'.\");                                                                     // 83\n  };                                                                                                 // 84\n                                                                                                     // 85\n  var semverParse = semver.parse(semverPart);                                                        // 86\n  if (! semverParse) {                                                                               // 87\n    throwVersionParserError(                                                                         // 88\n      \"Version string must look like semver (eg '1.2.3'), not '\"                                     // 89\n        + semverPart + \"'.\");                                                                        // 90\n  }                                                                                                  // 91\n                                                                                                     // 92\n  this.major = semverParse.major; // Number                                                          // 93\n  this.minor = semverParse.minor; // Number                                                          // 94\n  this.patch = semverParse.patch; // Number                                                          // 95\n  this.prerelease = semverParse.prerelease; // [OneOf(Number, String)]                               // 96\n  this.wrapNum = wrapNum; // Number                                                                  // 97\n  this.build = semverParse.build; // [String]                                                        // 98\n  this.raw = versionString; // the entire version string                                             // 99\n  // `.version` is everything but the build ID (\"+foo\"), and it                                      // 100\n  // has been run through semver's canonicalization, ie \"cleaned\"                                    // 101\n  // (for whatever that's worth)                                                                     // 102\n  this.version = semverParse.version + (wrapNum ? '_' + wrapNum : '');                               // 103\n  // everything but the wrapnum (\"_123\")                                                             // 104\n  this.semver = semverParse.version + (                                                              // 105\n    semverParse.build.length ? '+' + semverParse.build.join('.') : '');                              // 106\n};                                                                                                   // 107\n                                                                                                     // 108\nPV.parse = function (versionString) {                                                                // 109\n  return new PV(versionString);                                                                      // 110\n};                                                                                                   // 111\n                                                                                                     // 112\nif (inTool) {                                                                                        // 113\n  module.exports = PV;                                                                               // 114\n} else {                                                                                             // 115\n  PackageVersion = PV;                                                                               // 116\n}                                                                                                    // 117\n                                                                                                     // 118\n// Converts a meteor version into a large floating point number, which                               // 119\n// is (more or less [*]) unique to that version. Satisfies the                                       // 120\n// following guarantee: If PV.lessThan(v1, v2) then                                                  // 121\n// PV.versionMagnitude(v1) < PV.versionMagnitude(v2) [*]                                             // 122\n//                                                                                                   // 123\n// [* XXX!] We don't quite satisfy the uniqueness and comparison properties in                       // 124\n// these cases:                                                                                      // 125\n// 1. If any of the version parts are greater than 100 (pretty unlikely?)                            // 126\n// 2. If we're dealing with a prerelease version, we only look at the                                // 127\n//    first two characters of each prerelease part. So, \"1.0.0-beta\" and                             // 128\n//    \"1.0.0-bear\" will have the same magnitude.                                                     // 129\n// 3. If we're dealing with a prerelease version with more than two parts, eg                        // 130\n//    \"1.0.0-rc.0.1\". In this comparison may fail since we'd get to the limit                        // 131\n//    of JavaScript floating point precision.                                                        // 132\n//                                                                                                   // 133\n// If we wanted to fix this, we'd make this function return a BigFloat                               // 134\n// instead of a vanilla JavaScript number. That will make the                                        // 135\n// constraint solver slower (by how much?), and would require some                                   // 136\n// careful thought.                                                                                  // 137\n// (Or it could just return some sort of tuple, and ensure that                                      // 138\n// the cost functions that consume this can deal with tuples...)                                     // 139\nPV.versionMagnitude = function (versionString) {                                                     // 140\n  var v = PV.parse(versionString);                                                                   // 141\n                                                                                                     // 142\n  return v.major * 100 * 100 +                                                                       // 143\n    v.minor * 100 +                                                                                  // 144\n    v.patch +                                                                                        // 145\n    v.wrapNum / 100 +                                                                                // 146\n    prereleaseIdentifierToFraction(v.prerelease) / 100 / 100;                                        // 147\n};                                                                                                   // 148\n                                                                                                     // 149\n// Accepts an array, eg [\"rc\", 2, 3]. Returns a number in the range                                  // 150\n// (-1, 0].  An empty array returns 0. A non-empty string returns a                                  // 151\n// number that is \"as large\" as the its precedence.                                                  // 152\nvar prereleaseIdentifierToFraction = function (prerelease) {                                         // 153\n  if (prerelease.length === 0)                                                                       // 154\n    return 0;                                                                                        // 155\n                                                                                                     // 156\n  return __.reduce(prerelease, function (memo, part, index) {                                        // 157\n    var digit;                                                                                       // 158\n    if (typeof part === 'number') {                                                                  // 159\n      digit = part+1;                                                                                // 160\n    } else if (typeof part === 'string') {                                                           // 161\n      var VALID_CHARACTERS =                                                                         // 162\n            \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";                       // 163\n                                                                                                     // 164\n      var validCharToNumber = function (ch) {                                                        // 165\n        var result = VALID_CHARACTERS.indexOf(ch);                                                   // 166\n        if (result === -1)                                                                           // 167\n          throw new Error(\"Unexpected character in prerelease identifier: \" + ch);                   // 168\n        else                                                                                         // 169\n          return result;                                                                             // 170\n      };                                                                                             // 171\n                                                                                                     // 172\n      digit = 101 + // Numeric parts always have lower precedence than non-numeric parts.            // 173\n        validCharToNumber(part[0]) * VALID_CHARACTERS.length +                                       // 174\n        (part[1] ? validCharToNumber(part[1]) : 0);                                                  // 175\n    } else {                                                                                         // 176\n      throw new Error(\"Unexpected prerelease identifier part: \" + part + \" of type \" + typeof part);\n    }                                                                                                // 178\n                                                                                                     // 179\n    // 4100 > 101 + VALID_CHARACTERS.length *                                                        // 180\n    // VALID_CHARACTERS.length. And there's a test to verify this                                    // 181\n    // (\"test the edges of `versionMagnitude`\")                                                      // 182\n    return memo + digit / Math.pow(4100, index+1);                                                   // 183\n  }, -1);                                                                                            // 184\n};                                                                                                   // 185\n                                                                                                     // 186\n// Takes in two meteor versions. Returns true if the first one is less than the second.              // 187\n// Versions are strings or PackageVersion objects.                                                   // 188\nPV.lessThan = function (versionOne, versionTwo) {                                                    // 189\n  return PV.compare(versionOne, versionTwo) < 0;                                                     // 190\n};                                                                                                   // 191\n                                                                                                     // 192\n// Given a string version, returns its major version (the first section of the                       // 193\n// semver), as an integer. Two versions are compatible if they have the same                         // 194\n// version number.                                                                                   // 195\n//                                                                                                   // 196\n// versionString: valid meteor version string.                                                       // 197\nPV.majorVersion = function (versionString) {                                                         // 198\n  return PV.parse(versionString).major;                                                              // 199\n};                                                                                                   // 200\n                                                                                                     // 201\n// Takes in two meteor versions. Returns 0 if equal, a positive number if v1                         // 202\n// is greater, a negative number if v2 is greater.                                                   // 203\n// Versions are strings or PackageVersion objects.                                                   // 204\nPV.compare = function (versionOne, versionTwo) {                                                     // 205\n  var v1 = versionOne;                                                                               // 206\n  if (typeof v1 === 'string') {                                                                      // 207\n    v1 = PV.parse(v1);                                                                               // 208\n  }                                                                                                  // 209\n  var v2 = versionTwo;                                                                               // 210\n  if (typeof v2 === 'string') {                                                                      // 211\n    v2 = PV.parse(v2);                                                                               // 212\n  }                                                                                                  // 213\n                                                                                                     // 214\n  // If the semver parts are different, use the semver library to compare,                           // 215\n  // ignoring wrap numbers.  (The semver library will ignore the build ID                            // 216\n  // per the semver spec.)                                                                           // 217\n  if (v1.semver !== v2.semver) {                                                                     // 218\n    return semver.compare(v1.semver, v2.semver);                                                     // 219\n  } else {                                                                                           // 220\n    // If the semver components are equal, then the one with the smaller wrap                        // 221\n    // numbers is smaller.                                                                           // 222\n    return v1.wrapNum - v2.wrapNum;                                                                  // 223\n  }                                                                                                  // 224\n};                                                                                                   // 225\n                                                                                                     // 226\n// Conceptually we have three types of constraints:                                                  // 227\n// 1. \"compatible-with\" - A@x.y.z - constraints package A to version x.y.z or                        // 228\n//    higher, as long as the version is backwards compatible with x.y.z.                             // 229\n//    \"pick A compatible with x.y.z\"                                                                 // 230\n//    It is the default type.                                                                        // 231\n// 2. \"exactly\" - A@=x.y.z - constraints package A only to version x.y.z and                         // 232\n//    nothing else.                                                                                  // 233\n//    \"pick A exactly at x.y.z\"                                                                      // 234\n// 3. \"any-reasonable\" - \"A\"                                                                         // 235\n//    Basically, this means any version of A ... other than ones that have                           // 236\n//    dashes in the version (ie, are prerelease) ... unless the prerelease                           // 237\n//    version has been explicitly selected (which at this stage in the game                          // 238\n//    means they are mentioned in a top-level constraint in the top-level                            // 239\n//    call to the resolver).                                                                         // 240\nvar parseSimpleConstraint = function (constraintString) {                                            // 241\n  if (! constraintString) {                                                                          // 242\n    throw new Error(\"Non-empty string required\");                                                    // 243\n  }                                                                                                  // 244\n                                                                                                     // 245\n  var type, versionString;                                                                           // 246\n                                                                                                     // 247\n  if (constraintString.charAt(0) === '=') {                                                          // 248\n    type = \"exactly\";                                                                                // 249\n    versionString = constraintString.substr(1);                                                      // 250\n  } else {                                                                                           // 251\n    type = \"compatible-with\";                                                                        // 252\n    versionString = constraintString;                                                                // 253\n  }                                                                                                  // 254\n                                                                                                     // 255\n  // This will throw if the version string is invalid.                                               // 256\n  PV.getValidServerVersion(versionString);                                                           // 257\n                                                                                                     // 258\n  return { type: type, versionString: versionString };                                               // 259\n};                                                                                                   // 260\n                                                                                                     // 261\n                                                                                                     // 262\n// Check to see if the versionString that we pass in is a valid meteor version.                      // 263\n//                                                                                                   // 264\n// Returns a valid meteor version string that can be included in the                                 // 265\n// server. That means that it has everything EXCEPT the build id. Throws if the                      // 266\n// entered string was invalid.                                                                       // 267\nPV.getValidServerVersion = function (meteorVersionString) {                                          // 268\n  return PV.parse(meteorVersionString).version;                                                      // 269\n};                                                                                                   // 270\n                                                                                                     // 271\nPV.VersionConstraint = function (vConstraintString) {                                                // 272\n  var alternatives;                                                                                  // 273\n  // If there is no version string (\"\" or null), then our only                                       // 274\n  // constraint is any-reasonable.                                                                   // 275\n  if (! vConstraintString) {                                                                         // 276\n    // .versionString === null is relied on in the tool                                              // 277\n    alternatives =                                                                                   // 278\n      [ { type: \"any-reasonable\", versionString: null } ];                                           // 279\n    vConstraintString = \"\";                                                                          // 280\n  } else {                                                                                           // 281\n    // Parse out the versionString.                                                                  // 282\n    var parts = vConstraintString.split(/ *\\|\\| */);                                                 // 283\n    alternatives = __.map(parts, function (alt) {                                                    // 284\n      if (! alt) {                                                                                   // 285\n        throwVersionParserError(\"Invalid constraint string: \" +                                      // 286\n                                vConstraintString);                                                  // 287\n      }                                                                                              // 288\n      return parseSimpleConstraint(alt);                                                             // 289\n    });                                                                                              // 290\n  }                                                                                                  // 291\n                                                                                                     // 292\n  this.raw = vConstraintString;                                                                      // 293\n  this.alternatives = alternatives;                                                                  // 294\n};                                                                                                   // 295\n                                                                                                     // 296\nPV.parseVersionConstraint = function (constraintString) {                                            // 297\n  return new PV.VersionConstraint(constraintString);                                                 // 298\n};                                                                                                   // 299\n                                                                                                     // 300\n// A PackageConstraint consists of a package name and a version constraint.                          // 301\n// Call either with args (package, versionConstraintString) or                                       // 302\n// (packageConstraintString), or (package, versionConstraint).                                       // 303\n// That is, (\"foo\", \"1.2.3\") or (\"foo@1.2.3\"), or (\"foo\", vc) where vc                               // 304\n// is instanceof PV.VersionConstraint.                                                               // 305\nPV.PackageConstraint = function (part1, part2) {                                                     // 306\n  if ((typeof part1 !== \"string\") ||                                                                 // 307\n      (part2 && (typeof part2 !== \"string\") &&                                                       // 308\n       ! (part2 instanceof PV.VersionConstraint))) {                                                 // 309\n    throw new Error(\"constraintString must be a string\");                                            // 310\n  }                                                                                                  // 311\n                                                                                                     // 312\n  var packageName, versionConstraint, vConstraintString;                                             // 313\n  if (part2) {                                                                                       // 314\n    packageName = part1;                                                                             // 315\n    if (part2 instanceof PV.VersionConstraint) {                                                     // 316\n      versionConstraint = part2;                                                                     // 317\n    } else {                                                                                         // 318\n      vConstraintString = part2;                                                                     // 319\n    }                                                                                                // 320\n  } else if (part1.indexOf(\"@\") >= 0) {                                                              // 321\n    // Shave off last part after @, with \"a@b@c\" becoming [\"a@b\", \"c\"].                              // 322\n    // Validating the package name will catch extra @.                                               // 323\n    var parts = part1.match(/^(.*)@([^@]*)$/).slice(1);                                              // 324\n    packageName = parts[0];                                                                          // 325\n    vConstraintString = parts[1];                                                                    // 326\n    if (! vConstraintString) {                                                                       // 327\n      throwVersionParserError(                                                                       // 328\n        \"Version constraint for package '\" + packageName +                                           // 329\n          \"' cannot be empty; leave off the @ if you don't want to constrain \" +                     // 330\n          \"the version.\");                                                                           // 331\n    }                                                                                                // 332\n  } else {                                                                                           // 333\n    packageName = part1;                                                                             // 334\n    vConstraintString = \"\";                                                                          // 335\n  }                                                                                                  // 336\n                                                                                                     // 337\n  PV.validatePackageName(packageName);                                                               // 338\n  if (versionConstraint) {                                                                           // 339\n    vConstraintString = versionConstraint.raw;                                                       // 340\n  } else {                                                                                           // 341\n    versionConstraint = PV.parseVersionConstraint(vConstraintString);                                // 342\n  }                                                                                                  // 343\n                                                                                                     // 344\n  this.package = packageName;                                                                        // 345\n  this.constraintString = vConstraintString;                                                         // 346\n  this.versionConstraint = versionConstraint;                                                        // 347\n};                                                                                                   // 348\n                                                                                                     // 349\nPV.PackageConstraint.prototype.toString = function () {                                              // 350\n  var ret = this.package;                                                                            // 351\n  if (this.constraintString) {                                                                       // 352\n    ret += \"@\" + this.constraintString;                                                              // 353\n  }                                                                                                  // 354\n  return ret;                                                                                        // 355\n};                                                                                                   // 356\n                                                                                                     // 357\n// Structure of a parsed constraint:                                                                 // 358\n//                                                                                                   // 359\n// /*PV.PackageConstraint*/                                                                          // 360\n// { package: String,                                                                                // 361\n//   constraintString: String,                                                                       // 362\n//   versionConstraint: /*PV.VersionConstraint*/ {                                                   // 363\n//     raw: String,                                                                                  // 364\n//     alternatives: [{versionString: String|null,                                                   // 365\n//                     type: String}]}}                                                              // 366\nPV.parsePackageConstraint = function (part1, part2) {                                                // 367\n  return new PV.PackageConstraint(part1, part2);                                                     // 368\n};                                                                                                   // 369\n                                                                                                     // 370\nPV.validatePackageName = function (packageName, options) {                                           // 371\n  options = options || {};                                                                           // 372\n                                                                                                     // 373\n  var badChar = packageName.match(/[^a-z0-9:.\\-]/);                                                  // 374\n  if (badChar) {                                                                                     // 375\n    if (options.detailedColonExplanation) {                                                          // 376\n      throwVersionParserError(                                                                       // 377\n        \"Bad character in package name: \" + JSON.stringify(badChar[0]) +                             // 378\n          \".\\n\\nPackage names can only contain lowercase ASCII alphanumerics, \" +                    // 379\n          \"dash, or dot.\\nIf you plan to publish a package, it must be \" +                           // 380\n          \"prefixed with your\\nMeteor Developer Account username and a colon.\");                     // 381\n    }                                                                                                // 382\n    throwVersionParserError(                                                                         // 383\n      \"Package names can only contain lowercase ASCII alphanumerics, dash, \" +                       // 384\n        \"dot, or colon, not \" + JSON.stringify(badChar[0]) + \".\");                                   // 385\n  }                                                                                                  // 386\n  if (!/[a-z]/.test(packageName)) {                                                                  // 387\n    throwVersionParserError(\"Package name must contain a lowercase ASCII letter: \"                   // 388\n                            + JSON.stringify(packageName));                                          // 389\n  }                                                                                                  // 390\n  if (packageName[0] === '.') {                                                                      // 391\n    throwVersionParserError(\"Package name may not begin with a dot: \"                                // 392\n                            + JSON.stringify(packageName));                                          // 393\n  }                                                                                                  // 394\n  if (packageName.slice(-1) === '.') {                                                               // 395\n    throwVersionParserError(\"Package name may not end with a dot: \"                                  // 396\n                            + JSON.stringify(packageName));                                          // 397\n  }                                                                                                  // 398\n                                                                                                     // 399\n  if (packageName.slice(-1) === '.') {                                                               // 400\n    throwVersionParserError(\"Package names may not end with a dot: \" +                               // 401\n                            JSON.stringify(packageName));                                            // 402\n  }                                                                                                  // 403\n  if (packageName.indexOf('..') >= 0) {                                                              // 404\n    throwVersionParserError(\"Package names may not contain two consecutive dots: \" +                 // 405\n                            JSON.stringify(packageName));                                            // 406\n  }                                                                                                  // 407\n  if (packageName[0] === '-') {                                                                      // 408\n    throwVersionParserError(\"Package names may not begin with a hyphen: \" +                          // 409\n                            JSON.stringify(packageName));                                            // 410\n  }                                                                                                  // 411\n  // (There is already a package ending with a `-` and one with two consecutive `-`                  // 412\n  // in troposphere, though they both look like typos.)                                              // 413\n                                                                                                     // 414\n  if (packageName[0] === \":\" || __.last(packageName) === \":\") {                                      // 415\n    throwVersionParserError(\"Package names may not start or end with a colon: \" +                    // 416\n                            JSON.stringify(packageName));                                            // 417\n  }                                                                                                  // 418\n};                                                                                                   // 419\n                                                                                                     // 420\nvar throwVersionParserError = function (message) {                                                   // 421\n  var e = new Error(message);                                                                        // 422\n  e.versionParserError = true;                                                                       // 423\n  throw e;                                                                                           // 424\n};                                                                                                   // 425\n                                                                                                     // 426\n// Return true if the version constraint was invalid prior to 0.9.3                                  // 427\n// (adding _ and || support)                                                                         // 428\n//                                                                                                   // 429\n// NOTE: this is not used on the client yet. This package is used by the                             // 430\n// package server to determine what is valid.                                                        // 431\nPV.invalidFirstFormatConstraint = function (validConstraint) {                                       // 432\n  if (!validConstraint) return false;                                                                // 433\n  // We can check this easily right now, because we introduced some new                              // 434\n  // characters. Anything with those characters is invalid prior to                                  // 435\n  // 0.9.3. XXX: If we ever have to go through these, we should write a more                         // 436\n  // complicated regex.                                                                              // 437\n  return (/_/.test(validConstraint) ||                                                               // 438\n          /\\|/.test(validConstraint));                                                               // 439\n};                                                                                                   // 440\n                                                                                                     // 441\n// Remove a suffix like \"+foo\" if present.                                                           // 442\nPV.removeBuildID = function (versionString) {                                                        // 443\n  return versionString.replace(/\\+.*$/, '');                                                         // 444\n};                                                                                                   // 445\n                                                                                                     // 446\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}