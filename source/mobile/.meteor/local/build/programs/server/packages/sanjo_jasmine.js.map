{"version":3,"sources":["meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/log.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/freeport.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/lazyStart.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/MirrorStarter.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/parseStack.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/JasmineTestFramework.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/JasmineInterface.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/lib/VelocityTestReporter.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/integration/ServerIntegrationTestFramework.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/mirror-info.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/runFileInContext.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/coffee-require.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/file-loader.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/load-order-sort.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/mock-loader.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/unit/included-packages.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/unit/mock-generator.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/unit/ServerUnitTestFramework.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/client/unit/ClientUnitTestFramework.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/client/integration/ClientIntegrationTestFramework.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/server/lib/get-files.js","meteor://ðŸ’»app/packages/sanjo_jasmine/src/registerFrameworks.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACxvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACzrjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACtzlTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/sanjo_jasmine.js","sourcesContent":["/* globals log: true */\n\nvar level = Meteor.isServer && process.env.VELOCITY_DEBUG ? 'debug' : 'info'\nif (Meteor.isServer && process.env.JASMINE_LOG_LEVEL) {\n  level = process.env.JASMINE_LOG_LEVEL\n}\nlog = loglevel.createPackageLogger('[sanjo:jasmine]', level)\n","/* globals freeport: true */\n\nfreeport = Meteor.wrapAsync(Npm.require('freeport'))\n","/* globals lazyStart: true */\n\n// Run the func when tests for the framework are available.\nlazyStart = function (frameworkName, func) {\n  var testsCursor = VelocityTestFiles.find(\n    {targetFramework: frameworkName}\n  )\n\n  if (testsCursor.count() > 0) {\n    func()\n  } else {\n    // Needed for `meteor --test`\n    log.debug('No tests for ' + frameworkName + ' found. Reporting completed.')\n    Meteor.call('velocity/reports/completed', {framework: frameworkName})\n    var testsObserver = testsCursor.observe({\n      added: _.once(function () {\n        // Delay the stop because added can be called before observe returns\n        Meteor.setTimeout(function () {\n          testsObserver.stop()\n        }, 5000)\n        func()\n      })\n    })\n  }\n}\n","/* globals MirrorStarter: true */\n\nMirrorStarter = function (testingFrameworkName) {\n  this.name = testingFrameworkName\n}\n\n_.extend(MirrorStarter.prototype, {\n\n  lazyStartMirror: function (mirrorOptions) {\n    var requestMirror = this.startMirror.bind(this, mirrorOptions)\n    lazyStart(this.name, requestMirror)\n  },\n\n  startMirror: function (mirrorOptions) {\n    var options = {\n      framework: this.name\n    }\n    _.extend(options, mirrorOptions)\n\n    if (!options.port) {\n      options.port = freeport()\n    }\n\n    log.debug('Starting mirror for ' + this.name)\n\n    // HACK: need to make sure after the proxy package adds the test files\n    Meteor.setTimeout(function() {\n      Meteor.call(\n        'velocity/mirrors/request',\n        options,\n        function (error) {\n          if (error) {\n            log.error(error)\n          }\n        }\n      )\n    }, 100)\n  },\n\n  startSelfMirror: function (mirrorOptions) {\n    mirrorOptions = mirrorOptions || {}\n    VelocityMirrors.upsert(\n      {framework: this.name},\n      {\n        framework: this.name,\n        mongoUrl: process.env.MONGO_URL,\n        host: process.env.ROOT_URL,\n        rootUrl: process.env.ROOT_URL,\n        rootUrlPath: mirrorOptions.rootUrlPath,\n        state: 'ready',\n        lastModified: Date.now()\n      }\n    )\n  }\n\n})\n","/* globals parseStack: true */\n\nparseStack = {};\n\n// Given an Error (eg, 'new Error'), return the stack associated with\n// that error as an array. More recently called functions appear first\n// and each element is an object with keys:\n// - file: filename as it appears in the stack\n// - line: 1-indexed line number in file, as a Number\n// - column: 1-indexed column in line, as a Number\n// - func: name of the function in the frame (maybe null)\n//\n// Accomplishes this by parsing the text representation of the stack\n// with regular expressions. Unlikely to work anywhere but v8.\n//\n// If a function on the stack has been marked with mark(), don't\n// return anything past that function. We call this the \"user portion\"\n// of the stack.\nparseStack.parse = function (err) {\n  var frames = err.stack.split('\\n');\n\n  frames.shift(); // at least the first line is the exception\n  var stop = false;\n  var ret = [];\n\n  _.each(frames, function (frame) {\n    if (stop)\n      return;\n    var m;\n    if (m =\n        frame.match(/^\\s*at\\s*((new )?.+?)\\s*(\\[as\\s*([^\\]]*)\\]\\s*)?\\((.*?)(:(\\d+))?(:(\\d+))?\\)\\s*$/)) {\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n      // \"    at My.Function (/path/to/myfile.js:532:39)\"\n      // \"    at Array.forEach (native)\"\n      // \"    at new My.Class (file.js:1:2)\"\n      // \"    at [object Object].main.registerCommand.name [as func] (meteor/tools/commands.js:1225:19)\"\n      // \"    at __top_mark__ [as matchErr] (meteor/tools/parse-stack.js:82:14)\"\n      //\n      // In that last example, it is not at all clear to me what the\n      // 'as' stanza refers to, but it is in m[3] if you find a use for it.\n      if (m[1].match(/(?:^|\\.)__top_mark__$/)) {\n        // m[1] could be Object.__top_mark__ or something like that\n        // depending on where exactly you put the function returned by\n        // markTop\n        ret = [];\n        return;\n      }\n      if (m[1].match(/(?:^|\\.)__bottom_mark__$/)) {\n        stop = true;\n        return;\n      }\n      ret.push({\n        func: m[1],\n        file: m[5],\n        line: m[7] ? +m[7] : undefined,\n        column: m[9] ? +m[9] : undefined\n      });\n    } else if (m = frame.match(/^\\s*at\\s+(.+?)(:(\\d+))?(:(\\d+))?\\s*$/)) {\n      // \"    at /path/to/myfile.js:532:39\"\n      ret.push({\n        file: m[1],\n        line: m[3] ? +m[3] : undefined,\n        column: m[5] ? +m[5] : undefined\n      });\n    } else if (m = frame.match(/^\\s*-\\s*-\\s*-\\s*-\\s*-\\s*$/)) {\n      // \"    - - - - -\"\n      // This is something added when you throw an Error through a future. The\n      // stack above the dashes is the stack of the 'wait' call; the stack below\n      // is the stack inside the fiber where the Error is originally\n      // constructed. Taking just the former seems good for now, but in the\n      // future we may want to sew them together (possibly in the opposite\n      // order?)\n      stop = true;\n    }\n  });\n\n  return ret;\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should stop: no frames earlier than this point will be\n// included in the parsed stack. Confusingly, in the argot of the\n// times, you'd say that frames \"higher up\" than this or \"above\" this\n// will not be returned, but you'd also say that those frames are \"at\n// the bottom of the stack\". Frames below the bottom are the outer\n// context of the framework running the user's code.\nparseStack.markBottom = function (f) {\n  return function __bottom_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n\n// Decorator. Mark the point at which a stack trace returned by\n// parse() should begin: no frames later than this point will be\n// included in the parsed stack. The opposite of markBottom().\n// Frames above the top are helper functions defined by the\n// framework and executed by user code whose internal behavior\n// should not be exposed.\nparseStack.markTop = function (f) {\n  return function __top_mark__ () {\n    return f.apply(this, arguments);\n  };\n};\n","/* globals JasmineTestFramework: true */\n\nJasmineTestFramework = function (options) {\n  if (!options || !options.name) {\n    throw new Error('[JasmineTestFramework] Missing required field \"name\"')\n  }\n\n  if (!options.regex) {\n    throw new Error('[JasmineTestFramework] Missing required field \"regex\"')\n  }\n\n  if (_.isUndefined(options.jasmineRequire)) {\n    throw new Error('[JasmineTestFramework] Missing required field \"jasmineRequire\"')\n  }\n\n  this.name = options.name\n  this.regex = options.regex\n  this.sampleTestGenerator = options.sampleTestGenerator\n  this.logPrefix = options.logPrefix || '[' + this.name + '] '\n  this.jasmineRequire = options.jasmineRequire\n\n  // load jasmine-velocity reporter\n  // [unit] mock packages\n\n}\n\n_.extend(JasmineTestFramework.prototype, {\n\n  //////////////////////////////////////////////////////////////////////\n  // Public functions\n  //\n\n  runTests: function () {},\n\n  //////////////////////////////////////////////////////////////////////\n  // Protected functions\n  //\n\n  registerWithVelocity: function () {\n    Velocity.registerTestingFramework(this.name, {\n      regex: this.regex,\n      sampleTestGenerator: this.sampleTestGenerator\n    })\n  }\n\n})\n","/* globals JasmineInterface: true */\n\nvar jasmineRequire = Meteor.isServer ?\n  Npm.require('jasmine-core') :\n  window.jasmineRequire\n\n/**\n * Object that will be directly put into the global context of the running\n * tests.\n *\n * ex.\n *     describe(...)   // rather than 'jasmine.describe'\n *     jasmine.clock   // rather than just 'clock'\n *\n * @class JasmineInterface\n * @constructor\n */\nJasmineInterface = function (options) {\n  if (!options || !options.jasmine) {\n    throw new Error('[JasmineInterface] Missing required field \"jasmine\"')\n  }\n\n  var env = options.jasmine.getEnv()\n\n  _.extend(this, jasmineRequire.interface(options.jasmine, env))\n\n  var markBottom = function (func) {\n    var boundFunction = parseStack.markBottom(func)\n    if (func.length > 0) {\n      // Async test\n      return function (done) {\n        return boundFunction.apply(this, arguments)\n      }\n    } else {\n      // Sync test\n      return function () {\n        return boundFunction.call(this)\n      }\n    }\n  }\n\n  _.forEach(['describe', 'xdescribe', 'fdescribe', 'it', 'fit'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[1] = markBottom(arguments[1])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n\n  _.forEach(['beforeEach', 'afterEach', 'beforeAll', 'afterAll'], function (word) {\n    var originalFunction = this[word]\n    this[word] = function (/* arguments */) {\n      arguments[0] = markBottom(arguments[0])\n      return originalFunction.apply(this, arguments)\n    }\n  }, this)\n}\n","/* global\n   VelocityTestReporter: true\n */\n\n(function (Meteor) {\n  var noopTimer = {\n    start: function() {},\n    elapsed: function() { return 0 }\n  }\n\n  VelocityTestReporter = function VelocityTestReporter(options) {\n    var self = this,\n      timer = options.timer || noopTimer,\n      ddpParentConnection = options.ddpParentConnection,\n      ancestors = [],\n      _jasmineDone\n\n    self.mode = options.mode\n\n    var saveTestResult = Meteor.bindEnvironment(function saveTestResult(test) {\n      var result = {\n        id: 'jasmine:' + self.mode + ' | ' + test.id,\n        //async: test.async,\n        framework: options.framework,\n        name: test.description,\n        fullName: test.fullName,\n        pending: test.status === 'pending',\n        result: test.status,\n        duration: timer.elapsed(),\n        //timeOut: test._timeout,\n        //timedOut: test.timedOut,\n        ancestors: ancestors,\n        timestamp: new Date(),\n        isClient: !!options.isClient,\n        isServer: !!options.isServer\n      }\n      if (test.failedExpectations[0]){\n        var stack = removeStackTraceClutter(parseStack.parse({stack: filterStack(test.failedExpectations[0].stack)}))\n        var message = _.extend({\n          message: test.failedExpectations[0].message,\n          stack: stack\n        }, stack[0])\n        result.failureMessage = message.message\n        result.failureStackTrace = formatMessage([message])\n      }\n\n      if (Meteor.isClient || process.env.IS_MIRROR) {\n        ddpParentConnection.call('velocity/reports/submit', result, function (error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      } else {\n        Meteor.call('velocity/reports/submit', result, function(error){\n          if (error){\n            console.error('ERROR WRITING TEST', error)\n          }\n        })\n      }\n    }, function (error) {\n      console.error(error)\n    })\n\n    if (Meteor.isClient) {\n      _jasmineDone = function () {\n        ddpParentConnection.call(\n          'velocity/reports/completed',\n          {framework: options.framework},\n          function () {\n            if (options.onComplete) {\n              options.onComplete()\n            }\n          }\n        )\n      }\n    } else if (Meteor.isServer) {\n      _jasmineDone = Meteor.bindEnvironment(function jasmineDone() {\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      }, function (error) {\n        console.error(error)\n        if (options.onComplete) {\n          options.onComplete()\n        }\n      })\n    }\n\n    self.jasmineDone = _jasmineDone\n\n    self.suiteStarted = function(result) {\n      ancestors.unshift(result.description)\n    }\n\n    self.suiteDone = function() {\n      ancestors.shift()\n    }\n\n    self.specStarted = function () {\n      timer.start()\n    }\n\n    self.specDone = function(result) {\n      var skipped = result.status === 'disabled' || result.status === 'pending'\n      if (!skipped) {\n        saveTestResult(result)\n      }\n    }\n\n    function filterStack(stack) {\n      var filteredStack = stack.split('\\n').filter(function(stackLine) {\n        return stackLine.indexOf('/node_modules/jasmine-core/') === -1;\n      }).join('\\n');\n      return filteredStack;\n    }\n\n    function removeStackTraceClutter(parsedStackTrace) {\n      return _.chain(parsedStackTrace)\n        .map(_.clone)\n        .map(function makeFileUrlRelative(frame) {\n          var rootUrl = Meteor.absoluteUrl();\n          if (frame.file.indexOf(rootUrl) === 0) {\n            frame.file = frame.file.substr(rootUrl.length);\n          }\n          return frame;\n        })\n        .map(function removeCacheBustingQuery(frame) {\n          frame.file = frame.file.replace(/\\?[a-z0-9]+$/, '');\n          return frame;\n        })\n        .map(function normalizePackageName(frame) {\n          frame.file = frame.file.replace('local-test:', '');\n          return frame;\n        })\n        .map(function removeUselessFunc(frame) {\n          if (frame.func === 'Object.<anonymous>') {\n            frame.func = null;\n          }\n          return frame;\n        })\n        .value();\n    }\n\n    function formatMessage(messages) {\n      var out = '';\n      var already = {};\n      var indent = '';\n\n      _.each(messages, function (message) {\n        var stack = message.stack || [];\n\n        var line = indent;\n        if (message.file) {\n          line+= message.file;\n          if (message.line) {\n            line += \":\" + message.line;\n            if (message.column) {\n              // XXX maybe exclude unless specifically requested (eg,\n              // for an automated tool that's parsing our output?)\n              line += \":\" + message.column;\n            }\n          }\n          line += \": \";\n        } else {\n          // not sure how to display messages without a filenanme.. try this?\n          line += \"error: \";\n        }\n        // XXX line wrapping would be nice..\n        line += message.message;\n        if (message.func && stack.length <= 1) {\n          line += \" (at \" + message.func + \")\";\n        }\n        line += \"\\n\";\n\n        if (stack.length > 1) {\n          _.each(stack, function (frame) {\n            // If a nontrivial stack trace (more than just the file and line\n            // we already complained about), print it.\n            var where = \"\";\n            if (frame.file) {\n              where += frame.file;\n              if (frame.line) {\n                where += \":\" + frame.line;\n                if (frame.column) {\n                  where += \":\" + frame.column;\n                }\n              }\n            }\n\n            if (! frame.func && ! where)\n              return; // that's a pretty lame stack frame\n\n            line += \"  at \";\n            if (frame.func)\n              line += frame.func + \" (\" + where + \")\\n\";\n            else\n              line += where + \"\\n\";\n          });\n          line += \"\\n\";\n        }\n\n        // Deduplicate messages (only when exact duplicates, including stack)\n        if (! (line in already)) {\n          out += line;\n          already[line] = true;\n        }\n      });\n\n      return out;\n    }\n  }\n\n})(Meteor)\n","/* globals Jasmine: true, ServerIntegrationTestFramework: true */\n\n/**\n * Design:\n * - Let Meteor load the tests\n * - Let Meteor restart the mirror when a file changed.\n *   This implicates only one test run per mirror run.\n */\n\nvar ComponentMocker = Npm.require('component-mocker');\nvar jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js');\n\nvar showOnTestDeprecationInfo = _.once(function () {\n  log.info('You no longer need to wrap your server integration tests in Jasmine.onTest ;-)')\n});\n\nMeteor.methods({\n  'jasmine/showOnTestDeprecationInfo': function () {\n    showOnTestDeprecationInfo()\n  }\n})\n\nvar registeredOnTestCallbacks = [];\n\nvar onTest = function (func) {\n  registeredOnTestCallbacks.push(func)\n}\n\n// Flag for deprecation message\nvar wasJasmineOnTestCalled = false;\n\nJasmine = Jasmine || {}\n// Need to bring it on the global scope manually\n// because this package has `debugOnly: true`\nglobal.Jasmine = Jasmine\n_.extend(Jasmine, {\n  // Deprecated\n  // You no longer need to wrap your tests in Jasmine.onTest.\n  onTest: function (func) {\n    onTest(func);\n    wasJasmineOnTestCalled = true;\n  }\n})\n\n\n// Postpone the execution of the test blocks until we run the tests.\n// This makes sure that the whole app is loaded before.\nvar jasmineGlobals = [\n  'describe',\n  'xdescribe',\n  'fdescribe',\n  'beforeEach',\n  'afterEach',\n  'beforeAll',\n  'afterAll'\n]\n\njasmineGlobals.forEach(function (jasmineGlobal) {\n  global[jasmineGlobal] = executeOnTestFactory(jasmineGlobal)\n})\n\nfunction executeOnTestFactory(funcName) {\n  return function (/* arguments */) {\n    var args = arguments\n    onTest(function () {\n      global[funcName].apply(global, args)\n    })\n  }\n}\n\n\nServerIntegrationTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-server-integration',\n    regex: '^tests/jasmine/server/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/server/integration/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/src/Player.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/server/integration/sample/src/Song.js',\n          contents: Assets.getText('src/server/integration/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: jasmineRequire\n  })\n\n  JasmineTestFramework.call(this, options)\n}\n\nServerIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ServerIntegrationTestFramework.prototype, {\n\n  startMirror: function () {\n    var mirrorOptions = {\n      port: this._getCustomPort(),\n      testsPath: 'jasmine/server/integration'\n    }\n\n    if (process.env.JASMINE_SERVER_MIRROR_APP_PATH) {\n      mirrorOptions.args = [\n        '--test-app-path', process.env.JASMINE_SERVER_MIRROR_APP_PATH\n      ]\n    }\n\n    var mirrorStarter = new MirrorStarter(this.name)\n    mirrorStarter.lazyStartMirror(mirrorOptions)\n  },\n\n  _getCustomPort: function () {\n    var customPort = parseInt(process.env.JASMINE_SERVER_MIRROR_PORT, 10)\n    if (!_.isNaN(customPort)) {\n      return customPort\n    }\n  },\n\n  setupEnvironment: function () {\n    var self = this\n\n    self.jasmine = self.jasmineRequire.core(self.jasmineRequire)\n    self.env = self.jasmine.getEnv({\n      setTimeout: Meteor.setTimeout.bind(Meteor),\n      clearTimeout: Meteor.clearTimeout.bind(Meteor)\n    })\n    var jasmineInterface = new JasmineInterface({jasmine: self.jasmine})\n\n    _.extend(global, {\n      MeteorStubs: MeteorStubs,\n      ComponentMocker: ComponentMocker\n    })\n\n    _.extend(global, jasmineInterface)\n\n    // Load mock helper\n    runCodeInContext(Assets.getText('src/lib/mock.js'), null)\n  },\n\n  start: function () {\n    var self = this;\n\n    log.debug('Starting Server Integration mode')\n\n    this._connectToMainApp()\n\n    if (isTestPackagesMode()) {\n      self.runTests();\n    } else {\n      var runServerIntegrationTests = _.once(function () {\n        serverIntegrationMirrorObserver.stop();\n        self.runTests();\n      });\n\n      var VelocityMirrors = new Meteor.Collection(\n        'velocityMirrors',\n        {connection: this.ddpParentConnection}\n      );\n      this.ddpParentConnection.subscribe('VelocityMirrors');\n\n      var serverIntegrationMirrorObserver = VelocityMirrors.find({\n        framework: self.name,\n        state: 'ready'\n      }).observe({\n        added: runServerIntegrationTests,\n        changed: runServerIntegrationTests\n      });\n    }\n  },\n\n  runTests: function () {\n    var self = this\n\n    log.debug('Running Server Integration test mode')\n\n    this.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})\n\n    frameworks.serverIntegration.setupEnvironment()\n\n    // Load specs that were wrapped with Jasmine.onTest\n    self._runOnTestCallbacks()\n\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Server Integration',\n      framework: self.name,\n      env: self.env,\n      onComplete: self._reportCompleted.bind(self),\n      timer: new self.jasmine.Timer(),\n      ddpParentConnection: self.ddpParentConnection,\n      isServer: true\n    })\n\n    self.env.addReporter(velocityReporter)\n    self.env.execute()\n  },\n\n  _runOnTestCallbacks: function () {\n    var self = this\n\n    if (wasJasmineOnTestCalled) {\n      self.ddpParentConnection.call('jasmine/showOnTestDeprecationInfo')\n    }\n\n    _.forEach(registeredOnTestCallbacks, function (callback) {\n      callback()\n    })\n  },\n\n  _connectToMainApp: function () {\n    if (!this.ddpParentConnection) {\n      if (isTestPackagesMode()) {\n        this.ddpParentConnection = Meteor\n      } else {\n        log.debug('Connect to parent app \"' + process.env.PARENT_URL + '\" via DDP')\n        this.ddpParentConnection = DDP.connect(process.env.PARENT_URL)\n      }\n    }\n  },\n\n  _reportCompleted: function () {\n    this.ddpParentConnection.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","Meteor.methods({\n  'jasmine/environmentInfo': function () {\n    var mirrorInfo = {\n      isMirror: isMirror(),\n      isTestPackagesMode: isTestPackagesMode(),\n      framework: process.env.FRAMEWORK\n    };\n\n    if (isTestPackagesMode()) {\n      mirrorInfo.parentUrl = process.env.ROOT_URL\n    } else {\n      mirrorInfo.parentUrl = process.env.PARENT_URL\n    }\n\n    return mirrorInfo\n  }\n})\n","/* globals runCodeInContext: true, runFileInContext: true */\n\nvar vm = Npm.require('vm'),\n    fs = Npm.require('fs'),\n    readFile = Meteor.wrapAsync(fs.readFile)\n\nrunCodeInContext = function (code, context, filename) {\n  try {\n    if (context) {\n      vm.runInContext(code, context, filename)\n    } else {\n      vm.runInThisContext(code, filename)\n    }\n  } catch(error) {\n    log.error('The code has syntax errors.', error)\n  }\n}\n\nrunFileInContext = function (filename, context) {\n  var code = readFile(filename, {encoding: 'utf8'})\n  try {\n    if (context) {\n      vm.runInContext(code, context, filename)\n    } else {\n      vm.runInThisContext(code, filename)\n    }\n  } catch(error) {\n    log.error('The file \"' + filename + '\" has syntax errors.', error)\n  }\n}\n","/* globals coffeeRequire: true */\n\n// coffeeRequire\nvar fs = Npm.require('fs'),\n    readFile = Meteor.wrapAsync(fs.readFile),\n    path = Npm.require('path')\n\n// The coffee-script compiler overrides Error.prepareStackTrace, mostly for the\n// use of coffee.run which we don't use.  This conflicts with the tool's use of\n// Error.prepareStackTrace to properly show error messages in linked code.  Save\n// the tool's one and restore it after coffee-script clobbers it.\nvar prepareStackTrace = Error.prepareStackTrace;\nvar coffee = Npm.require('coffee-script');\nError.prepareStackTrace = prepareStackTrace;\n\n/**\n * A coffee processor that can add source maps to compiled files\n *\n * This is a modified version of https://github.com/karma-runner/karma-coffee-preprocessor\n *\n * @method coffeePreprocessor\n * @param {Object} options to pass directly to the coffee-script compiler. See here\n */\nvar coffeePreprocessor = function (options, content, file, done) {\n  var result = null\n  var map\n  var dataUri\n\n  // Clone the options because coffee.compile mutates them\n  var opts = _.clone(options)\n\n  if (coffee.helpers.isLiterate(file.originalPath)) {\n    opts.literate = true;\n  }\n\n  try {\n    result = coffee.compile(content, opts)\n  } catch (e) {\n    /* jshint camelcase: false */\n    console.log('%s\\n  at %s:%d', e.message, file.originalPath, e.location.first_line)\n    /* jshint camelcase: true */\n    return done(e, null)\n  }\n\n  if (result.v3SourceMap) {\n    map = JSON.parse(result.v3SourceMap)\n    map.sources[0] = path.basename(file.originalPath)\n    map.sourcesContent = [content]\n    map.file = path.basename(file.originalPath.replace(/\\.(coffee|litcoffee|coffee\\.md)$/, '.js'))\n    file.sourceMap = map\n    dataUri = 'data:application/json;charset=utf-8;base64,' + new Buffer(JSON.stringify(map)).toString('base64')\n    done(null, result.js + '\\n//@ sourceMappingURL=' + dataUri + '\\n')\n  } else {\n    done(null, result.js || result)\n  }\n}\n\n/**\n * Load and execute a coffeescript file.\n *\n * @method coffeeRequire\n * @param {String} target Path to coffeescript file to load.\n * @param {Object} context the context to run the CoffeeScript code within.\n */\ncoffeeRequire = function (target, context) {\n  var file = {originalPath: target},\n      code = readFile(target, {encoding: 'utf8'})\n\n  coffeePreprocessor({\n    bare: true,\n    sourceMap: false\n  }, code, file, function (err, code) {\n    if (!err) {\n      runCodeInContext(code, context, target)\n    } else {\n      log.error(err)\n    }\n  })\n}\n","/* globals fileLoader: true, loadOrderSort: false */\n\nvar appPath = MeteorFilesHelpers.getAppPath(),\n    fs = Npm.require('fs'),\n    readDir = Meteor.wrapAsync(fs.readdir, fs),\n    path = Npm.require('path'),\n    glob = Meteor.wrapAsync(Npm.require('glob'))\n\nfileLoader = {\n  loadFiles: loadFiles,\n  loadFile: loadFile\n}\n\n/**\n * Loads a Meteor app's javascript and coffeescript files.\n * Matches Meteor core's load order.\n *\n * Excluded directories: private, public, programs, packages, tests\n *\n * @method loadFiles\n * @param {Object} context Global context\n * @param {Object} [options]\n * @param {Array|String} [options.ignoreDirs] Directories to ignore\n */\nfunction loadFiles(context, options) {\n  var files = getFiles(options)\n  files.sort(loadOrderSort([]))\n  log.debug('loadFiles', files)\n  _.each(files, function (file) {\n    loadFile(file, context)\n  })\n}\n\n/**\n * Get all files that should be loaded.\n * @param options\n * @returns {Array}\n */\nfunction getFiles(options) {\n  options = _.extend({\n    ignoreDirs: []\n  }, options)\n\n  var filePattern = '*.{js,coffee,litcoffee,coffee.md}';\n\n  // Find files in the root folder\n  var files = glob(filePattern,\n    {\n      cwd: appPath,\n      ignore: 'mobile-config.js'\n    }\n  )\n\n  // Find files in the sub folders that we don't ignore\n  var shouldIgnore = ['tests', 'private', 'public', 'programs', 'packages']\n  shouldIgnore = shouldIgnore.concat(options.ignoreDirs)\n\n  var relevantDirs = readdirNoDots(appPath)\n  relevantDirs = _.filter(relevantDirs, function (dir) {\n    return !_.contains(shouldIgnore, dir)\n  })\n\n  files = _.reduce(relevantDirs, function (files, dir) {\n    var newFiles = glob(filePattern,\n      {\n        cwd: path.join(appPath, dir),\n        matchBase: true\n      }\n    )\n    newFiles = _.map(newFiles, function (filePath) {\n      return path.join(dir, filePath);\n    });\n\n    return files.concat(newFiles)\n  }, files)\n\n  log.debug('getFiles has found the following files', files)\n\n  return files;\n}\n\nfunction readdirNoDots(path) {\n  var entries\n  try {\n    entries = readDir(path);\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return []\n    } else {\n      throw error;\n    }\n  }\n  return _.filter(entries, function (entry) {\n    return entry && entry[0] !== '.'\n  })\n}\n\n/**\n * Load and execute the target source file.\n * Will use node's 'require' if source file has a .js extension or\n * karma's coffeescript preprocessor if a .coffee/.litcoffee/.coffee.md extension\n *\n * @method loadFile\n * @param {String} target file path to load, relative to meteor app\n * @param {Object} context the context to load files within.\n *        If omitted the file will run in this context.\n */\nfunction loadFile (target, context) {\n  var filename = path.resolve(appPath, target),\n      ext\n\n  if (fs.existsSync(filename)) {\n    ext = path.extname(filename)\n    if ('.js' === ext) {\n      log.debug('loading source file:', filename)\n      runFileInContext(filename, context)\n    } else if (/\\.(coffee|litcoffee|coffee\\.md)$/.test(target)) {\n      log.debug('loading source file:', filename)\n      coffeeRequire(filename, context)\n    }\n  } else {\n    log.error(\n      'loadFile could not load \"' + filename + '\". ' +\n      'The file does not exist.'\n    );\n  }\n}\n","var path = Npm.require('path')\n\n/**\n * Returns a sort comparator to order files into Meteor app load order.\n * templateExtensions should be a list of extensions like 'html'\n * which should be loaded before other extensions.\n *\n * source: Meteor core file\n *   https://github.com/meteor/meteor/blob/devel/tools/packages.js#L47-L97\n *   May 5, 2014\n *\n * @method loadOrderSort\n * @param {Array} [templateExtensions} Optional array of extensions which will\n *                be loaded first.\n * @return {Number} Either 1 or -1 depending on sort result\n */\nloadOrderSort = function (templateExtensions) {\n  var templateExtnames = {}\n  _.each(templateExtensions, function (extension) {\n    templateExtnames['.' + extension] = true\n  })\n\n  return function (a, b) {\n    // XXX MODERATELY SIZED HACK --\n    // push template files ahead of everything else. this is\n    // important because the user wants to be able to say\n    //   Template.foo.events = { ... }\n    // in a JS file and not have to worry about ordering it\n    // before the corresponding .html file.\n    //\n    // maybe all of the templates should go in one file?\n    var isTemplate_a = _.has(templateExtnames, path.extname(a))\n    var isTemplate_b = _.has(templateExtnames, path.extname(b))\n    if (isTemplate_a !== isTemplate_b) {\n      return (isTemplate_a ? -1 : 1)\n    }\n\n    // main.* loaded last\n    var ismain_a = (path.basename(a).indexOf('main.') === 0)\n    var ismain_b = (path.basename(b).indexOf('main.') === 0)\n    if (ismain_a !== ismain_b) {\n      return (ismain_a ? 1 : -1)\n    }\n\n    // /lib/ loaded first\n    var islib_a = (a.indexOf(path.sep + 'lib' + path.sep) !== -1 ||\n                   a.indexOf('lib' + path.sep) === 0)\n    var islib_b = (b.indexOf(path.sep + 'lib' + path.sep) !== -1 ||\n                   b.indexOf('lib' + path.sep) === 0)\n    if (islib_a !== islib_b) {\n      return (islib_a ? -1 : 1)\n    }\n\n    // deeper paths loaded first.\n    var len_a = a.split(path.sep).length\n    var len_b = b.split(path.sep).length\n    if (len_a !== len_b) {\n      return (len_a < len_b ? 1 : -1)\n    }\n\n    // otherwise alphabetical\n    return (a < b ? -1 : 1)\n  }\n}\n","/* globals mockLoader: true */\n\nvar path = Npm.require('path'),\n    glob = Npm.require('glob')\n\nmockLoader = {\n  loadUserMocks: function (context) {\n    var basePath = path.join(Velocity.getAppPath(), 'tests/jasmine/server/unit')\n    this._getMockFiles(basePath).forEach(function (file) {\n      log.debug('loading mock file:', file)\n      fileLoader.loadFile(file, context)\n    })\n  },\n\n  _getMockFiles: function (basePath) {\n    var filenamePattern = '**/*-{stub,stubs,mock,mocks}.{js,coffee,litcoffee,coffee.md}'\n    var files = glob.sync(filenamePattern, {cwd: basePath})\n    files = files.map(function (file) {\n      return path.join(basePath, file)\n    })\n    return files\n  }\n}\n","/* globals packagesToIncludeInUnitTests: true */\n\n// Packages that should be included in unit test mode\n// and therefore should not be mocked\npackagesToIncludeInUnitTests = [\n  'lodash',\n  'stevezhu:lodash',\n  'erasaur:meteor-lodash',\n  'underscore',\n  'digilord:sugarjs',\n  'momentjs:moment',\n  'mrt:moment',\n  'rzymek:moment',\n  'xolvio:webdriver'\n]\n\nvar customIncludedPackages =\n  process.env.JASMINE_PACKAGES_TO_INCLUDE_IN_UNIT_TESTS\nif (customIncludedPackages) {\n  packagesToIncludeInUnitTests = packagesToIncludeInUnitTests\n    .concat(customIncludedPackages.split(','))\n}\n","/* globals MockGenerator: true */\n\n// goal: write all package metadata to file so we can create\n// the package mocks when running out-of-context\n//\n// Used to mock packages for the server unit test runner\n\nvar ComponentMocker = Npm.require('component-mocker'),\n    fs = Npm.require('fs'),\n    path = Npm.require('path'),\n    mkdirp = Npm.require('mkdirp'),\n    writeFile = Meteor.wrapAsync(fs.writeFile),\n    packageMetadata = {}\n\nfunction shouldIgnorePackage (packageName) {\n  var packagesToIgnore = [\n    'meteor',\n    'minifiers',\n    // Collides with expect of Jasmine\n    'spacejamio:chai',\n    'practicalmeteor:chai'\n  ]\n    .concat(getEnvironmentIgnoredPackages())\n    .concat(packagesToIncludeInUnitTests)\n\n  return _.contains(packagesToIgnore, packageName)\n}\n\nfunction getEnvironmentIgnoredPackages() {\n  var packagesToIgnore = process.env.JASMINE_IGNORE_PACKAGES\n  if (packagesToIgnore) {\n    return packagesToIgnore.split(',').map(function (packageName) {\n      return packageName.trim()\n    });\n  } else {\n    return []\n  }\n}\n\nfunction shouldIgnoreExport (exportName) {\n  var exportsToIgnore = ['MongoInternals', 'NpmModuleMongodb', 'WebAppInternals']\n\n  return _.contains(exportsToIgnore, exportName)\n}\n\nMockGenerator = {\n  // Mocks should only be generated once per app run\n  // because the app restarts when a server file has changed.\n  generateMocks: _.once(function () {\n\n    /*\n     Package = {\n     \"meteor\": {\n     \"Meteor\": {\n     // ...\n     }\n     }\n     \"roles\": {\n     \"Roles\": {...}\n     },\n     \"iron-router\": {\n     \"Router\": {...}\n     }\n     }\n     */\n\n    _.forEach(Package, function (packageObj, name) {\n      if (!shouldIgnorePackage(name)) {\n        var packageExports = {}\n\n        _.forEach(packageObj, function (packageExportObj, packageExportName) {\n          if (!shouldIgnoreExport(packageExportName)) {\n            try {\n              packageExports[packageExportName] = ComponentMocker.getMetadata(packageExportObj)\n            } catch (error) {\n              console.error('Could not mock the export ' + packageExportName +\n              ' of the package ' + name + '. Will continue anyway.', error, error.stack)\n            }\n          }\n        })\n\n        packageMetadata[name] = packageExports\n      }\n    })\n\n    // Initially load the global stubs for app code\n    writeMetadataToFile(\n      packageMetadata,\n      Assets.getText('src/server/unit/package-stubs.js.tpl'),\n      'tests/jasmine/server/unit/package-stubs.js'\n    )\n\n    // Mocks the globals after each tests\n    writeMetadataToFile(\n      packageMetadata,\n      Assets.getText('src/server/unit/metadata-reader.js.tpl'),\n      'tests/jasmine/server/unit/packageMocksSpec.js'\n    )\n\n    function writeMetadataToFile(metadata, template, destination) {\n      var output = _.template(template, {\n        METADATA: JSON.stringify(metadata, null, '  ')\n      })\n\n      var outputPath = path.join(MeteorFilesHelpers.getAppPath(), destination)\n      mkdirp.sync(path.dirname(outputPath))\n      writeFile(outputPath, output, {encoding: 'utf8'})\n    }\n  })\n}\n","/* globals ServerUnitTestFramework: true */\n\nvar path = Npm.require('path'),\n    fs = Npm.require('fs'),\n    vm = Npm.require('vm'),\n    Future = Npm.require(path.join('fibers', 'future')),\n    ComponentMocker = Npm.require('component-mocker'),\n    jasmineRequire = Npm.require('jasmine-core/lib/jasmine-core/jasmine.js')\n\nServerUnitTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-server-unit',\n    regex: '^tests/jasmine/server/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/server/unit/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/src/Player.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/server/unit/sample/src/Song.js',\n          contents: Assets.getText('src/server/unit/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    //regex: 'jasmine/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    jasmineRequire: jasmineRequire\n  })\n\n  JasmineTestFramework.call(this, options)\n}\n\nServerUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ServerUnitTestFramework.prototype, {\n\n  _getTestFilesCursor: function () {\n    return VelocityTestFiles.find({\n      targetFramework: this.name,\n      relativePath: {\n        $nin: [\n          'tests/jasmine/server/unit/packageMocksSpec.js',\n          'tests/jasmine/server/unit/package-stubs.js'\n        ]\n      }\n    })\n  },\n\n  start: function () {\n    var testFilesCursor = this._getTestFilesCursor()\n\n    var _runTests  = _.debounce(Meteor.bindEnvironment(this.runTests.bind(this),\n      '[JasmineTestFramework.start.runTests]'), 200)\n\n    this._observer = testFilesCursor.observe({\n      added: _runTests,\n      changed: _runTests,\n      removed: _runTests\n    });\n\n    // Always run tests at least once.\n    // The CI runner needs a completed event.\n    _runTests()\n  },\n\n  runTests: function executeSpecsUnitMode() {\n    Meteor.call('velocity/reports/reset', {framework: this.name})\n\n    if (this._getTestFilesCursor().count() === 0) {\n      this._reportCompleted()\n      return\n    }\n\n    MockGenerator.generateMocks()\n\n    var jasmine = this.jasmineRequire.core(this.jasmineRequire)\n    var jasmineInterface = new JasmineInterface({jasmine: jasmine})\n\n    var testFilePath = path.join(Velocity.getTestsPath(), 'jasmine', 'server', 'unit')\n\n    var globalContext = {\n      process: process,\n      console: console,\n      Buffer: Buffer,\n      Npm: Npm,\n      MeteorStubs: MeteorStubs,\n      ComponentMocker: ComponentMocker,\n      // Private state data that only we use\n      __jasmine: {\n        Meteor: {\n          settings: Meteor.settings\n        }\n      }\n    }\n\n    var getAsset = function (assetPath, encoding, callback) {\n      var fut;\n      if (! callback) {\n        fut = new Future();\n        callback = fut.resolver();\n      }\n      var _callback = Package.meteor.Meteor.bindEnvironment(function (err, result) {\n        if (result && ! encoding) {\n          // Sadly, this copies in Node 0.10.\n          result = new Uint8Array(result);\n        }\n        callback(err, result);\n      }, function (e) {\n        console.log('Exception in callback of getAsset', e.stack);\n      });\n\n      var filePath = path.join(Velocity.getAppPath(), 'private', assetPath);\n      fs.readFile(filePath, encoding, _callback);\n      if (fut) {\n        return fut.wait();\n      }\n    };\n\n    globalContext.__jasmine.Assets = {\n      getText: function (assetPath, callback) {\n        return getAsset(assetPath, 'utf8', callback);\n      },\n      getBinary: function (assetPath, callback) {\n        return getAsset(assetPath, undefined, callback);\n      }\n    };\n\n    // Add all available packages that should be included\n    packagesToIncludeInUnitTests.forEach(function (packageName) {\n      var packageGlobals = Package[packageName]\n      if (packageGlobals) {\n        _.forEach(packageGlobals, function (packageGlobal, packageGlobalName) {\n          if (!globalContext[packageGlobalName]) {\n            globalContext[packageGlobalName] = packageGlobal\n          }\n        })\n      }\n    })\n\n    globalContext.global = globalContext\n    _.extend(globalContext, jasmineInterface)\n\n    // Need to install Meteor here so the app code files don't throw an error\n    // when loaded\n    MeteorStubs.install(globalContext)\n\n    globalContext.Meteor.isServer = true\n    globalContext.Meteor.isClient = false\n    globalContext.Meteor.settings = Meteor.settings\n    globalContext.Meteor.npmRequire = Meteor.npmRequire\n    globalContext.Assets = globalContext.__jasmine.Assets\n\n    var context = vm.createContext(globalContext)\n\n    // Load mock helper\n    runCodeInContext(\n      Assets.getText('src/lib/mock.js'),\n      context\n    )\n\n    // load stubs\n    try {\n      mockLoader.loadUserMocks(context)\n    }\n    catch (ex) {\n      console.log('Error loading stubs', ex.message, ex.stack)\n    }\n\n    // load Meteor app source files prior to running tests\n    try {\n      fileLoader.loadFiles(context, {ignoreDirs: ['client']})\n    }\n    catch (ex) {\n      console.log('Error loading app files', ex.message, ex.stack)\n    }\n\n    // load MeteorStubs before and after each test\n    runCodeInContext(\n      Assets.getText('src/server/lib/contextSpec.js'),\n      context\n    )\n\n    // Load specs\n    var specs = getSpecFiles(testFilePath)\n    for (var i = 0; i < specs.length; i++) {\n      fileLoader.loadFile(specs[i], context)\n    }\n\n    var env = jasmine.getEnv()\n\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Server Unit',\n      framework: this.name,\n      env: env,\n      onComplete: this._reportCompleted.bind(this),\n      timer: new jasmine.Timer(),\n      isServer: true\n    })\n\n    env.addReporter(velocityReporter)\n    env.execute()\n  },\n\n  _reportCompleted: function () {\n    Meteor.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","/* globals ClientUnitTestFramework: true, __meteor_runtime_config__: false */\n\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\nvar mkdirp = Npm.require('mkdirp');\n\nClientUnitTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-client-unit',\n    regex: '^tests/jasmine/client/unit/.+\\\\.(js|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/client/unit/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/src/Player.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/client/unit/sample/src/Song.js',\n          contents: Assets.getText('src/client/unit/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: null\n  })\n\n  this.userKarmaConfig = {}\n\n  JasmineTestFramework.call(this, options)\n}\n\nClientUnitTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ClientUnitTestFramework.prototype, {\n\n  start: function () {\n    lazyStart(this.name, this.startKarma.bind(this))\n  },\n\n  startKarma: function () {\n    var self = this\n\n    self._restartKarma();\n\n    // Listen for message 'refresh:client' that signals incoming 'refreshable' autoupdate\n    process.on('message', Meteor.bindEnvironment(function (message) {\n      log.debug('client-refresh noticed, stopping Karma')\n      if (message && message.refresh === 'client') {\n        // Listen for message 'on-listening' that signals that the application has been rebuild\n        // and is ready to serve\n        // * This callback *must* be registered here in 'on-message-refresh-client'\n        // * because onListening is a short-lived registration that is removed after firing once\n        WebApp.onListening(function () {\n          log.debug('WebApp has been updated. Updating Karma config file and starting it up.');\n          self._restartKarma();\n        });\n      }\n    }));\n  },\n\n  _restartKarma: function () {\n    var self = this\n\n    var karmaConfig = this.getKarmaConfig();\n    if (Karma.isRunning(self.name)) {\n      Karma.reloadFileList(self.name, karmaConfig.files)\n    } else {\n      self._generateContextHtml()\n      self._generateDebugHtml()\n      Karma.start(self.name, karmaConfig)\n    }\n  },\n\n  _generateContextHtml: function () {\n    this._generateKarmaHtml('context')\n  },\n\n  _generateDebugHtml: function () {\n    this._generateKarmaHtml('debug')\n  },\n\n  _generateKarmaHtml: function (type) {\n    var fileName = type + '.html'\n    var htmlPath = this._getKarmaHtmlPath(type);\n    mkdirp.sync(path.dirname(htmlPath))\n    var headHtml = this._getHeadHtml() || ''\n    var contextHtml = Assets.getText('src/client/unit/assets/' + fileName)\n      .replace('%HEAD%', headHtml)\n    fs.writeFileSync(htmlPath, contextHtml, {encoding: 'utf8'})\n  },\n\n  _getKarmaHtmlPath: function (type) {\n    var fileName = type + '.html'\n    return path.join(\n      MeteorFilesHelpers.getAppPath(),\n      '.meteor/local/karma/',\n      this.name, fileName\n    )\n  },\n\n  setUserKarmaConfig: function (config) {\n    var blacklist = [\n      'autoWatch', 'autoWatchBatchDelay',\n      'basePath', 'browserDisconnectTimeout', 'browserDisconnectTolerance',\n      'browserNoActivityTimeout', 'browsers', 'captureTimeout', 'client',\n      'exclude', 'files', 'frameworks', 'hostname', 'port', 'proxies', 'singleRun',\n      'urlRoot'\n    ]\n    this.userKarmaConfig = _.omit(config, blacklist)\n  },\n\n  getKarmaConfig: function () {\n    var files = [];\n    var proxies = {};\n\n    this._addPreAppFiles(files, proxies)\n    this._addPackageFiles(files, proxies)\n    this._addHelperFiles(files, proxies)\n    this._addStubFiles(files, proxies)\n    this._addAppFiles(files, proxies)\n    this._addTestFiles(files, proxies)\n\n    var launcherPlugins = {\n      'Chrome': 'karma-chrome-launcher',\n      'HiddenChrome': 'karma-chrome-launcher',\n      'ChromeCanary': 'karma-chrome-launcher',\n      'Firefox': 'karma-firefox-launcher',\n      'PhantomJS': 'karma-phantomjs-launcher',\n      'SauceLabs': 'karma-sauce-launcher'\n    }\n\n    var browser = process.env.JASMINE_BROWSER || 'HiddenChrome';\n    var launcherPlugin = launcherPlugins[browser];\n\n    var basePath = Velocity.getAppPath()\n\n    /* jshint camelcase: false */\n    var startOptions = _.extend({}, this.userKarmaConfig, {\n      port: 9876,\n      basePath: basePath,\n      frameworks: ['jasmine'],\n      browsers: [browser],\n      customLaunchers: {\n        HiddenChrome: {\n          base: 'Chrome',\n          flags: ['--window-size=1024,768', '--window-position=-1024,0'],\n        }\n      },\n      plugins: [\n        'karma-jasmine',\n        launcherPlugin,\n        'karma-coffee-preprocessor'\n      ],\n      files: files,\n      proxies: proxies,\n      client: {\n        contextFile: this._getKarmaHtmlPath('context'),\n        debugFile: this._getKarmaHtmlPath('debug'),\n        args: [_.defaults({\n          // Make those values constant to avoid unnecessary Karma restarts\n          autoupdateVersion: 'unknown',\n          autoupdateVersionRefreshable: 'unknown',\n          autoupdateVersionCordova: 'none'\n\n        }, __meteor_runtime_config__)]\n      },\n      browserDisconnectTimeout: 10000,\n      browserNoActivityTimeout: 15000,\n\n      preprocessors: {\n        '**/*.{coffee,litcoffee,coffee.md}': ['coffee']\n      },\n\n      coffeePreprocessor: {\n        options: {\n          bare: true,\n          sourceMap: true\n        },\n        transformPath: function (path) {\n          return path.replace(/\\.(coffee|litcoffee|coffee\\\\.md)$/, '.js');\n        }\n      }\n    })\n    /* jshint camelcase: true */\n\n    if (this.userKarmaConfig.plugins) {\n      startOptions.plugins = startOptions.plugins.concat(this.userKarmaConfig.plugins)\n    }\n\n    if (this.userKarmaConfig.preprocessors) {\n      _.extend(startOptions.preprocessors, this.userKarmaConfig.preprocessors)\n    }\n\n    return startOptions\n  },\n\n  _addPreAppFiles: function (files) {\n    files.push(\n      this._getAssetPath('src/client/unit/assets/__meteor_runtime_config__.js')\n    )\n  },\n\n  _addPackageFiles: function (files, proxies) {\n    _.chain(WebApp.clientPrograms['web.browser'].manifest)\n      .filter(function (file) {\n        return file.path.indexOf('packages/') === 0\n      })\n      .filter(function (file) {\n        var ignoredFiles = [\n          'packages/sanjo_jasmine.js',\n          'packages/velocity_html-reporter.js'\n        ]\n        return !_.contains(ignoredFiles, file.path)\n      })\n      .forEach(function (file) {\n        var mockedFiles = [\n          'packages/autoupdate.js',\n          'packages/reload.js',\n          'packages/meteorhacks_fast-render.js'\n        ]\n\n        if (_.contains(mockedFiles, file.path)) {\n          files.push(this._getAssetPath('src/client/unit/assets/mocks/' + file.path))\n        } else {\n          this._addFile(file, files, proxies)\n        }\n      }, this)\n      .value()\n  },\n\n  _addAppFiles: function (files, proxies) {\n    return _.chain(WebApp.clientPrograms['web.browser'].manifest)\n      .filter(function (file) {\n        return file.path.indexOf('packages/') !== 0\n      })\n      .forEach(function (file) {\n        this._addFile(file, files, proxies)\n      }, this)\n      .value()\n  },\n\n  _addFile: function (file, files, proxies) {\n    var basePath = '.meteor/local/build/programs/web.browser/'\n    files.push({\n      pattern: basePath + file.path,\n      watched: false,\n      included: _.contains(['js', 'css'], file.type),\n      served: true\n    });\n\n    if (file.type === 'asset') {\n      proxies[file.url] = '/base/' + basePath + file.path\n    }\n  },\n\n  _addHelperFiles: function (files) {\n    files.push(\n      this._getAssetPath('src/client/unit/assets/jasmine-jquery.js'),\n      this._getAssetPath('.npm/package/node_modules/component-mocker/index.js'),\n      this._getAssetPath('src/lib/mock.js'),\n      this._getAssetPath('src/lib/VelocityTestReporter.js'),\n      this._getAssetPath('src/client/unit/assets/adapter.js'),\n      '.meteor/local/build/programs/server/assets/packages/velocity_meteor-stubs/index.js',\n      this._getAssetPath('src/client/unit/assets/helpers/iron_router.js')\n    )\n  },\n\n  _addStubFiles: function (files) {\n    files.push(\n      'tests/jasmine/client/unit/**/*-+(stub|stubs|mock|mocks).+(js|coffee|litcoffee|coffee.md)'\n    )\n  },\n\n  _addTestFiles: function (files) {\n    // Use a match pattern directly.\n    // That allows Karma to detect changes and rerun the tests.\n    files.push(\n      'tests/jasmine/client/unit/**/*.+(js|coffee|litcoffee|coffee.md)'\n    )\n  },\n\n  _getAssetPath: function (fileName) {\n    var assetsPath = '.meteor/local/build/programs/server/assets/packages/sanjo_jasmine/'\n    return assetsPath + fileName;\n  },\n\n  _getHeadHtml: function () {\n    try {\n      return fs.readFileSync(\n        path.join(Velocity.getAppPath(), '.meteor/local/build/programs/web.browser/head.html'),\n        {encoding: 'utf8'}\n      );\n    } catch (error) {\n      return null;\n    }\n  }\n});\n","/* globals ClientIntegrationTestFramework: true */\n\nClientIntegrationTestFramework = function (options) {\n  options = options || {}\n\n  _.defaults(options, {\n    name: 'jasmine-client-integration',\n    regex: '^tests/jasmine/client/integration/.+\\\\.(js|es6|jsx|coffee|litcoffee|coffee\\\\.md)$',\n    sampleTestGenerator: function () {\n      return [\n        {\n          path: 'jasmine/client/integration/sample/spec/PlayerSpec.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/PlayerSpec.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/spec/SpecMatchers.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/spec/SpecMatchers.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Player.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Player.js')\n        },\n        {\n          path: 'jasmine/client/integration/sample/src/Song.js',\n          contents: Assets.getText('src/client/integration/sample-tests/sample/src/Song.js')\n        }\n      ]\n    },\n    jasmineRequire: Meteor.isClient ? window.jasmineRequire : null\n  })\n\n  JasmineTestFramework.call(this, options)\n\n  if (Meteor.isClient) {\n    this._setup()\n  }\n}\n\nClientIntegrationTestFramework.prototype = Object.create(JasmineTestFramework.prototype)\n\n_.extend(ClientIntegrationTestFramework.prototype, {\n\n  _setup: function () {\n    this.jasmine = this.jasmineRequire.core(this.jasmineRequire)\n    this.jasmineInterface = new JasmineInterface({jasmine: this.jasmine})\n    _.extend(window, this.jasmineInterface)\n  },\n\n  startMirror: function () {\n    var self = this;\n    var mirrorStarter = new MirrorStarter(this.name)\n    var mirrorOptions = {}\n\n    if (isTestPackagesMode()) {\n      mirrorStarter.startSelfMirror(mirrorOptions)\n\n      process.on('message', Meteor.bindEnvironment(function (message) {\n        if (message && message.refresh === 'client') {\n          // Listen for message 'on-listening' that signals that the application has been rebuild\n          // and is ready to serve\n          // * This callback *must* be registered here in 'on-message-refresh-client'\n          // * because onListening is a short-lived registration that is removed after firing once\n          WebApp.onListening(function () {\n            Meteor.call('velocity/reports/reset', {framework: self.name})\n          })\n        }\n      }))\n    } else {\n      _.extend(mirrorOptions, {\n        port: this._getCustomPort(),\n        testsPath: 'jasmine/client/integration'\n      })\n\n      if (process.env.JASMINE_CLIENT_MIRROR_APP_PATH) {\n        mirrorOptions.args = [\n          '--test-app-path', process.env.JASMINE_CLIENT_MIRROR_APP_PATH\n        ]\n      }\n\n      mirrorStarter.lazyStartMirror(mirrorOptions)\n    }\n  },\n\n  _getCustomPort: function () {\n    var customPort = parseInt(process.env.JASMINE_MIRROR_PORT, 10)\n    if (!_.isNaN(customPort)) {\n      return customPort\n    }\n  },\n\n  shouldRunTests: function (mirrorInfo) {\n    return mirrorInfo.isTestPackagesMode ||\n           (mirrorInfo.isMirror && mirrorInfo.framework === this.name)\n  },\n\n  runTests: function () {\n    var self = this\n\n    Meteor.call('jasmine/environmentInfo', function (error, mirrorInfo) {\n      if (error) {\n        throw error\n      } else if (self.shouldRunTests(mirrorInfo)) {\n        Meteor.defer(function() {\n          log.info('Running Jasmine tests')\n\n          var ddpConnection = mirrorInfo.isTestPackagesMode ?\n            Meteor :\n            DDP.connect(mirrorInfo.parentUrl)\n          window.initJasmineJquery()\n          self._executeClientTests(ddpConnection)\n        })\n      } else if (!mirrorInfo.isMirror && !self.inIframe()) {\n        self.createMirrorIframe()\n      }\n    })\n  },\n\n  inIframe: function() {\n    try {\n      return window.self !== window.top;\n    } catch (error) {\n      return true;\n    }\n  },\n\n  createMirrorIframe: function () {\n    var self = this\n    var iframeId = 'jasmine-mirror'\n\n    var getMirrorUrl = function (mirrorInfo) {\n      return mirrorInfo.rootUrl;\n    }\n\n    var insertMirrorIframe = _.once(function (mirrorInfo) {\n      var iframe = document.createElement('iframe')\n      iframe.id = iframeId\n      iframe.src = getMirrorUrl(mirrorInfo);\n      // Make the iFrame invisible\n      iframe.style.display = 'block'\n      iframe.style.position = 'absolute'\n      iframe.style.width = 0\n      iframe.style.height = 0\n      iframe.style.border = 0\n      document.body.appendChild(iframe)\n    })\n\n    var updateMirrorIframe = function (mirrorInfo) {\n      var iframe = document.getElementById(iframeId)\n      if (iframe) {\n        iframe.src = getMirrorUrl(mirrorInfo)\n      } else {\n        insertMirrorIframe(mirrorInfo)\n      }\n    }\n\n    Tracker.autorun(function () {\n      var mirror = VelocityMirrors.findOne(\n        {framework: self.name, state: 'ready'},\n        {fields: {state: 1, rootUrl: 1, lastModified: 1}}\n      )\n      if (mirror) {\n        updateMirrorIframe(mirror)\n      }\n    })\n  },\n\n  _executeClientTests: function (ddpConnection) {\n    var self = this;\n\n    window.ddpParentConnection = ddpConnection\n\n    window.ddpParentConnection.call('velocity/reports/reset', {framework: self.name})\n\n    /**\n     * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n     */\n    self.jasmineRequire.html(self.jasmine)\n\n    /**\n     * Create the Jasmine environment. This is used to run all specs in a project.\n     */\n    var env = self.jasmine.getEnv()\n\n    /**\n     * ## Runner Parameters\n     *\n     * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n     */\n\n    var queryString = new self.jasmine.QueryString({\n      getWindowLocation: function () {\n        return window.location\n      }\n    })\n\n    var catchingExceptions = queryString.getParam('catch')\n    env.catchExceptions(typeof catchingExceptions === 'undefined' ? true : catchingExceptions)\n\n    /**\n     * ## Reporters\n     */\n    var velocityReporter = new VelocityTestReporter({\n      mode: 'Client Integration',\n      framework: self.name,\n      env: env,\n      timer: new self.jasmine.Timer(),\n      ddpParentConnection: window.ddpParentConnection,\n      isClient: true\n    })\n\n    /**\n     * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n     */\n    env.addReporter(self.jasmineInterface.jsApiReporter)\n    env.addReporter(velocityReporter)\n\n    /**\n     * Filter which specs will be run by matching the start of the full name against the `spec` query param.\n     */\n    var specFilter = new self.jasmine.HtmlSpecFilter({\n      filterString: function () {\n        return queryString.getParam('spec')\n      }\n    })\n\n    env.specFilter = function (spec) {\n      return specFilter.matches(spec.getFullName())\n    }\n\n    /**\n     * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n     */\n    window.setTimeout = window.setTimeout\n    window.setInterval = window.setInterval\n    window.clearTimeout = window.clearTimeout\n    window.clearInterval = window.clearInterval\n\n    env.execute()\n  },\n\n  _reportResults: function () {\n    Meteor.call('velocity/reports/completed', {framework: this.name})\n  }\n})\n","/* globals getSpecFiles: true */\n\nvar fs = Npm.require('fs')\n\nfunction getFiles(dir, matcher) {\n  var allFiles = []\n  var stat;\n\n  try {\n    stat = fs.statSync(dir)\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      console.error(error)\n    }\n    return allFiles;\n  }\n\n  if (stat.isFile() && dir.match(matcher)) {\n    allFiles.push(dir)\n  } else {\n    var files = fs.readdirSync(dir)\n    for (var i = 0, len = files.length; i < len; ++i) {\n      var filename = dir + '/' + files[i]\n      if (fs.statSync(filename).isFile() && filename.match(matcher)) {\n        allFiles.push(filename)\n      } else if (fs.statSync(filename).isDirectory()) {\n        var subfiles = getFiles(filename, matcher)\n        allFiles.push.apply(allFiles, subfiles)\n      }\n    }\n  }\n  return allFiles\n}\n\ngetSpecFiles = function (dir) {\n  return getFiles(dir, new RegExp('\\\\.(js|coffee|litcoffee|coffee\\\\.md)$'))\n}\n","/* globals frameworks: true */\n\nframeworks = {}\n\nisMirror = function () {\n  return !!process.env.IS_MIRROR;\n}\n\nisMainApp = function () {\n  return !isMirror();\n}\n\nisTestPackagesMode = function () {\n  return !!process.env.VELOCITY_TEST_PACKAGES;\n}\n\nshouldRunFramework = function (frameworkName) {\n  return process.env.FRAMEWORK === frameworkName || isTestPackagesMode();\n}\n\nif (process.env.VELOCITY !== '0') {\n\n  // Server Integration\n  if (process.env.JASMINE_SERVER_INTEGRATION !== '0') {\n    frameworks.serverIntegration = new ServerIntegrationTestFramework()\n\n    if (isMainApp()) {\n      frameworks.serverIntegration.registerWithVelocity()\n      if (!isTestPackagesMode()) {\n        Velocity.startup(function () {\n          frameworks.serverIntegration.startMirror()\n        })\n      }\n    }\n\n    if (shouldRunFramework('jasmine-server-integration')) {\n      Meteor.startup(function () {\n        // Queue our function after all other normal startup functions\n        Meteor.startup(function () {\n          Meteor.defer(function () {\n            frameworks.serverIntegration.start()\n          })\n        })\n      })\n    }\n  }\n\n\n  // Client Integration\n  if (process.env.JASMINE_CLIENT_INTEGRATION !== '0') {\n    frameworks.clientIntegration = new ClientIntegrationTestFramework()\n\n    if (isMainApp()) {\n      frameworks.clientIntegration.registerWithVelocity()\n      Velocity.startup(function () {\n        // In test packages mode this does not really create a new mirror\n        // It just registers the app as mirror.\n        frameworks.clientIntegration.startMirror()\n      })\n    }\n  }\n\n\n  // Client Unit\n  if (process.env.JASMINE_CLIENT_UNIT !== '0' && !isTestPackagesMode()) {\n    frameworks.clientUnit = new ClientUnitTestFramework()\n\n    if (isMainApp()) {\n      frameworks.clientUnit.registerWithVelocity()\n      Velocity.startup(function () {\n        frameworks.clientUnit.start()\n      })\n    }\n  }\n\n\n  // Server Unit\n  if (process.env.JASMINE_SERVER_UNIT === '1' && !isTestPackagesMode()) {\n    frameworks.serverUnit = new ServerUnitTestFramework()\n\n    if (isMainApp()) {\n      frameworks.serverUnit.registerWithVelocity()\n      Velocity.startup(function () {\n        frameworks.serverUnit.start()\n      })\n    }\n  }\n\n}\n\nJasmine.setKarmaConfig = function (config) {\n  if (frameworks.clientUnit && isMainApp()) {\n    frameworks.clientUnit.setUserKarmaConfig(config)\n  }\n}\n"]}