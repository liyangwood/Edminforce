{"version":3,"sources":["meteor://ðŸ’»app/packages/ihealth_users/lib/schemas.js","meteor://ðŸ’»app/packages/ihealth_users/lib/server/createUser.js"],"names":[],"mappingshMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E","file":"/packages/ihealth_users.js","sourcesContent":["\nSimpleSchema.extendOptions({\n  editable: Match.Optional(Boolean),\n  editableBy: Match.Optional([String])\n})\n\nIH.Schema.Address = new SimpleSchema({\n  street: {\n    type: String,\n    max: 100\n  },\n  city: {\n    type: String,\n    max: 50\n  },\n  state: {\n    type: String,\n    regEx: /^A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]$/\n  },\n  zip: {\n    type: String,\n    regEx: /^[0-9]{5}$/\n  }\n});\n\nIH.Schema.UserBasic = new SimpleSchema({\n  name: {\n    type: String,\n    optional: false,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  tel: {\n    type: Number,\n    optional: false,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\", \"patient\"]\n  },\n  address: {\n    type: IH.Schema.Address,\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\", \"patient\"]\n  }\n});\n\nIH.Schema.UserDoctor = new SimpleSchema({\n  verified: {\n    type: Boolean,\n    optional: false,\n    editable: false,\n    editableBy: [\"admin\"],\n    autoValue: function() {}\n  },\n  title: {\n    type: String,\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  specialties: {\n    type: [String],\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  languages: {\n    type: [String],\n    optional: true,\n    editable: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  rating: {\n    type: Number,\n    optional: true,\n    decimal: true,\n    editable: false,\n    editableBy: [\"admin\"]\n  },\n  patients: {\n    type: Object,\n    optional: true,\n    editable: false,\n    editableBy: [\"admin\", \"doctor\"]\n  }\n}, \"patients.regular\", {\n  type: [String],\n  optional: true\n}, \"patients.vip\", {\n  type: [String],\n  optional: true\n});\n\nIH.Schema.UserPatient = new SimpleSchema({\n  DOB: {\n    type: Date,\n    optional: true,\n    editable: true\n  },\n  height: {\n    type: Number,\n    decimal: true,\n    optional: true,\n    editable: true\n  },\n  weight: {\n    type: Number,\n    decimal: true,\n    optional: true,\n    editable: true\n  },\n  doctors: {\n    type: [String],\n    optional: true,\n    editableBy: [\"admin\", \"doctor\"]\n  },\n  devices: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nIH.Schema.iHealth = new SimpleSchema({\n  basic: {\n    type: IH.Schema.UserBasic,\n    optional: true\n  },\n  doctor: {\n    type: IH.Schema.UserDoctor,\n    optional: true\n  },\n  patient: {\n    type: IH.Schema.UserPatient,\n    optional: true\n  }\n});\n\nIH.Schema.Users = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    optional: true,\n  },\n  updatedAt: {\n    type: Date,\n    optional: true,\n    autoValue: function(){\n      if (this.isUpdate)\n        return new Date()\n      else\n        this.unset()\n    }\n  },\n  username: {\n    type: String,\n    optional: true\n  },\n  emails: {\n    type: [Object],\n    optional: true\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true\n  },\n  roles: {\n    type: [String],\n    allowedValues: [\"admin\", \"doctor\", \"patient\"],\n    optional: true\n  },\n  profile: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  ihealth: {\n    type: IH.Schema.iHealth,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n})\n\nMeteor.users.attachSchema(IH.Schema.Users)\n","/*\n  *Server-only*\n  Tentative hooks:\n    send verification emails?\n */\nvar setupUser;\n\nAccounts.onCreateUser(function(options, user) {\n  user = IH.Callbacks.Run(\"onCreateUser\", user, options);\n  return user;\n});\n\n\n/*\n  setupUser:\n    doctor: only set iHealth.doctor\n    patient: only set iHealth.patient\n */\n\nsetupUser = function(user, options) {\n  var userObj;\n  userObj = {\n    profile: options.profile || (options.profile = {})\n  };\n  _.extend(user, userObj);\n  return user;\n};\n\nIH.Callbacks.Add(\"onCreateUser\", setupUser);\n"]}