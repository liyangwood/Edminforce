{"version":3,"sources":["meteor://üíªapp/packages/cal_cart/shoppingCart.common.js","meteor://üíªapp/packages/cal_cart/shoppingCart.register.js","meteor://üíªapp/packages/cal_cart/shoppingCart.change.js","meteor://üíªapp/packages/cal_cart/shoppingCart.cancel.js","meteor://üíªapp/packages/cal_cart/shoppingCart.cron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uuH;;;;;;;;;;;;;;;;;;ACrnuuH;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sH","file":"/packages/cal_cart.js","sourcesContent":["/**\n * Created on 9/25/15.\n */\n\n\n\nshoppingCart = {};\n\n//a utils\nshopping_cart_export=function(obj){\n    for(var x in obj){\n\n        if(obj.hasOwnProperty(x)){\n\n            if(shoppingCart[x]){\n                throw x+\" is duplicated\";\n            }\n            shoppingCart[x] =obj[x]\n        }\n    }\n}\n/////////////////////////////////////////////////////////\n\n////package scope\n\n//{type:'register'}\ncommon_create_cart = function (params) {\n\n    App.info = App.info || DB.App.findOne()\n\n    var shoppingCart = {\n        status: 'active',\n        accountId: Meteor.userId(),\n        type: params.type,\n        sessionId: App.info.sessionRegister,\n        items: params.item ? [params.item] : []\n    }\n\n    var cartId = DB.ShoppingCart.insert(shoppingCart);\n\n    return DB.ShoppingCart.findOne({_id: cartId});\n\n}\n\n\n//{type:'register'}\ncommon_get_or_create_active_cart = function (params) {\n\n    var cart = DB.ShoppingCart.findOne({\n        accountId: Meteor.userId(),\n        status: 'active',\n        type: params.type,\n        lastModified: {$gt: new Date(+new Date() - 15 * 60 * 1000)}\n\n\n    })\n\n    return cart || create_cart({status: 'active', type: params.type})\n}\n\n\ncommon_check_cart_status =function (cartId, status) {\n\n    //todo Âä†ÂÖ•Êó∂Èó¥ËÆ°ÁÆó\n    var cart = DB.ShoppingCart.findOne({\n        _id: cartId,\n        accountId: Meteor.userId(),\n        status: status\n    })\n\n    return !!(cart && cart._id)\n\n}\n\n\n\n\n\n\n///////////////////old to delete///////////////////\ncreate_cart = function (item) {\n    App.info = App.info || DB.App.findOne()\n\n    var shoppingCart = {\n        status: 'active',\n        accountId: Meteor.userId(),\n        sessionId: App.info.sessionRegister,\n        items: item ? [item] : []\n    }\n\n    var cartId = DB.ShoppingCart.insert(shoppingCart);\n\n    return cartId;\n\n}\n\n//todo pending‰∏îÊú™Ë∂ÖÊó∂Áä∂ÊÄÅ‰∏ã ÊÅ¢Â§ç‰∏∫activeÁöÑÈÄªËæë\nget_active_cart_id =function (createIfNotExist) {\n\n    var cart = DB.ShoppingCart.findOne({ //todo Âä†ÂÖ•Êó∂Èó¥ËÆ°ÁÆó\n        accountId: Meteor.userId(),\n        status: 'active'\n    })\n\n    //console.log(cart)\n\n    return (cart && cart._id) || (createIfNotExist && create_cart());\n}\n\nget_carts = function (status) {\n    App.info = App.info || DB.App.findOne()\n\n    var options = {\n        accountId: Meteor.userId(),\n        sessionId: App.info.sessionRegister,\n    }\n    status = status | {}\n\n    options = _.extend(options, status)\n\n    var carts = DB.ShoppingCart.find(options).fetch()\n    return carts;\n}\n\n\n//package scope\ncheckCartStatus =function (cartId, status) {\n\n    //todo Âä†ÂÖ•Êó∂Èó¥ËÆ°ÁÆó\n    var cart = DB.ShoppingCart.findOne({\n        _id: cartId,\n        accountId: Meteor.userId(),\n        status: status\n    })\n\n    return !!(cart && cart._id)\n\n}\n\n\n\n\nshopping_cart_export({\n    //create_cart: create_cart,\n    get_or_create_active_cart: common_get_or_create_active_cart,\n    check_cart_status: common_check_cart_status,\n\n\n    ////////old/////\n    create_cart: create_cart,\n    get_active_cart_id: get_active_cart_id,\n    get_carts: get_carts,\n    checkCartStatus: checkCartStatus\n})\n\n\n","/**\n * Created on 9/25/15.\n */\n\n\n\nregister_add_class_to_cart = function (classId) {\n\n\n}\nregister_add_preference_to_cart = function () {\n\n\n}\n\nfunction add_item_to_cart(item) {\n\n\n}\n\n//cart‰∏≠ Âçï‰∏™swimmerÊ∑ªÂä†ÁöÑËØæÁ®ãÁöÑÊï∞Èáè\nfunction get_class_count_in_cart(cartId, swimmerId) {\n    var cart = DB.ShoppingCart.findOne({\n        _id: cartId\n    })\n    if (!cart)throw new Meteor.Error(500, 'in get_class_count_in_cart', 'cart not exist ' + cartId)\n\n    var items = cart.items\n    var count = 0\n\n    items.forEach(function (item) {\n        if (item.swimmerId == swimmerId) count++\n    })\n\n    return count;\n}\n//Áî®‰∫éÊ£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÊ≥®ÂÜåËøáËØ•ËØæÁ®ã\nfunction get_class_count_in_register(swimmerId, classId, sessionId) {\n    App.info = App.info || DB.App.findOne()\n\n    sessionId = sessionId || App.info.sessionRegister\n\n    var count = DB.ClassesRegister.find({\n        swimmerId:swimmerId,\n        classId:classId,\n        sessionId: sessionId\n    }).count()\n\n    return count;\n}\n\n//==============================================================\n//////////////////////old////////////////////////////\n//Ê≥®ÂÜåËØæÁ®ã ÂÖàÂç†Áî®ËØæÁ®ãÊï∞Èáè\n\n\n/////////////////////////////////////////////\n//{swimmerId,classId, quantity , swimmer,  class1, ...}\nfunction add_class_to_cart(item) {\n\n\n    //////////////////////////////////\n    //check ÂèÇÊï∞\n    if (!item || !item.classId) {\n        throw new Meteor.Error('param invalid', 'in add_class_to_cart', item);\n    }\n\n    ////////////////////////////////////\n    //check classÂèØÊ≥®ÂÜåÊï∞ÁõÆ\n    var classItem = DB.Classes.findOne({\n        _id: item.classId\n    })\n    if (classItem.seatsRemain < 1) {\n        throw new Meteor.Error('ERROR_CLASS_NOT_ENOUGH', 'in add_class_to_cart');\n    }\n\n\n    ///////////////////////////////////\n    //Ëé∑ÂèñÊàñÂàõÂª∫Ë¥≠Áâ©ËΩ¶\n    var cart_id = get_active_cart_id(true)\n    if (!cart_id) {\n        throw new Meteor.Error(500,\n            'add_class_to_cart  error',\n            'get_active_cart_id: ' + cart_id);\n    }\n    console.log('get_active_cart_id ' + cart_id);\n\n\n    //////////////////////////////////////////\n    //check Ê£ÄÊµãË¥≠Áâ©ËΩ¶ÊòØÂê¶Â∑≤ÊúâËØ•class\n    var cart = DB.ShoppingCart.findOne(\n        {\n            _id: cart_id,\n            status: 'active',\n            items: {\n                $elemMatch: {\n                    'swimmerId': item.swimmerId,\n                    'classId': item.classId\n\n                }\n            }\n        })\n\n    if (cart) {\n        throw new Meteor.Error('ERROR_CLASS_ALREADY_IN_CART', 'in add_class_to_cart');\n    }\n    console.log('check if cart exist', cart,item.swimmerId,item.classId)\n\n\n    //////////////////////////////////////////////////\n    /////////check ÂçïÊ¨° ‰∏Ä‰∏™swimmerÊúÄÂ§öÊ≥®ÂÜå3ËäÇ\n    var classCount = get_class_count_in_cart(cart_id, item.swimmerId);\n    if (classCount == 3) {\n        throw new Meteor.Error('ERROR_CLASS_ALREADY_3_IN_CART', 'in add_class_to_cart');\n    }\n\n    if(get_class_count_in_register(item.swimmerId, item.classId)){\n        throw new Meteor.Error('ERROR_CLASS_ALREADY_REGISTERED', 'in add_class_to_cart');\n\n    }\n\n\n    /////////////Âä†ÂÖ•Ë¥≠Áâ©ËΩ¶///////////\n    var result;\n    result = DB.ShoppingCart.update({//todo 1Èó®ËØæ‰ªÖÂèØÊ≥®ÂÜå‰∏Ä‰∏™Ôºõ ÊúÄÂ§öÊ≥®ÂÜå3Èó®\n        '_id': cart_id\n    }, {\n        '$set': {status: 'pending'},//Â∑≤ÂºÄÂßã‰∫ãÂä°Â§ÑÈáå ÁΩÆ‰∏∫pending\n        '$push': {\n            'items': item  //item.quantity==1 or -1\n        }\n    })\n\n    if (!result) {\n        throw new Meteor.Error(500, 'add_class_to_cart error', 'DB.ShoppingCart.update $push');\n    }\n    ;\n\n    //Ê≠§Êó∂Â§Ñ‰∫épendingÁä∂ÊÄÅ Ëã•Ê≠§Â§Ñ‰∏≠Êñ≠ Ëã•Ë∂ÖÊó∂Áî±ÂÆöÊó∂Á®ãÂ∫èÊ∏ÖÁêÜÔºåÁªßÁª≠ÂæÄ‰∏ãËøõË°å todoÊÅ¢Â§çÈÄªËæë\n\n    //ÂèØËÉΩÊï∞Èáè‰∏çÂ§ü //todo 1Èó®ËØæ‰ªÖÂèØÊ≥®ÂÜå‰∏Ä‰∏™Ôºõ ÊúÄÂ§öÊ≥®ÂÜå3Èó® ;Á°Æ‰øùÂ§öÊ¨°Êìç‰ΩúÁªìÊûúÂîØ‰∏Ä\n    result = DB.Classes.update(\n        {'_id': item.classId, 'seatsRemain': {'$gte': item.quantity}},\n        {\n            '$inc': {'seatsRemain': -item.quantity},\n            '$push': {\n                'carted': {\n                    'type': 'register',\n                    'cartId': cart_id,\n                    'swimmerId': item.swimmerId,\n                    'quantity': item.quantity,\n                    'timestamp': new Date()\n                }\n            }\n        })\n\n    //todo resultÂà§Êñ≠‰ªÖÈÄÇÁî®Á¨¨‰∏ÄÊ¨°Âä†ÂÖ• ÊÅ¢Â§çÊìç‰Ωú‰∏çÂÜçÈÄÇÁî®\n    if (!result) {\n        DB.ShoppingCart.update(\n            {'_id': cart_id},\n            {\n                '$set': {status: 'active'}, //ÈáçÁΩÆ‰∏∫active\n                '$pull': {\n                    'items': {\n                        //'type': 'register',\n                        'swimmerId': item.swimmerId,\n                        classId: item.classId\n                    }\n                }\n            })\n\n        throw new Meteor.Error(500,\n            'add_class_to_cart ' + cart_id + ' error. There is not enough class to register?',\n            'DB.Classes.update $push');\n\n    } else {\n        DB.ShoppingCart.update(\n            {'_id': cart_id},\n            {\n                '$set': {status: 'active'} //ÈáçÁΩÆ‰∏∫active\n            })\n        return {cartId: cart_id}\n    }\n\n}\n\n//Ê∑ªÂä†‰∏§‰∏™Â§áÈÄâ\n/*\n *\n * {\n * cartId\n *\n * classId,  ÂÆö‰ΩçÂà∞class\n * swimmerId ÂÆö‰ΩçÂà∞swimmer\n *\n * preferenceNum,\n * data {item}\n * ,\n * , }\n * */\nfunction add_preference_to_cart(p) {\n\n    //var cartId = get_active_cart_id();\n    var cartId = p.cartId\n    if (!checkCartStatus(cartId, 'active')) {\n        throw new Meteor.Error(500, cartId + ' is not active');\n    }\n\n\n    //console.log(p)\n\n    if (!cartId) return 'cartId not exist';\n\n\n    /*\n     http://docs.mongodb.org/manual/reference/operator/projection/positional/#proj._S_\n     {\n     '_id': p.cartId,\n     'items.swimmer._id': p.swimmer._id,\n     'items.class1._id': p.class1._id\n     }\n     Âú®‰∏Ä‰∏™swimmerÈÄâÊã©Â§ö‰∏™classÊó∂ÊÄªÊòØÂåπÈÖçÁ¨¨‰∏Ä‰∏™  $elemMatch‰∏çÂ≠òÂú®Ëøô‰∏™ÈóÆÈ¢ò\n     * */\n\n    if (p.preferenceNum == 2) {\n        DB.ShoppingCart.update({\n            '_id': cartId,\n            'items': {\n                $elemMatch: {\n                    'swimmerId': p.swimmerId,\n                    'classId': p.classId\n\n                }\n            }\n        }, {\n            $set: {\n                'items.$.class2': p.data  //class2\n            }\n        })\n    }\n    if (p.preferenceNum == 3) {\n        DB.ShoppingCart.update({\n            '_id': cartId,\n            'items': {\n                $elemMatch: {\n                    'swimmerId': p.swimmerId,\n                    'classId': p.classId\n                }\n            }\n        }, {\n            $set: {\n                'items.$.class3': p.data //class3\n            }\n        })\n    }\n}\n\n//ÂΩìÁî®Êà∑Ëß¶ÂèëpayÔºçnow Êàñ payÔºçinÔºçstoreÊó∂\nfunction move_to_checking(cartId, checkoutType) {\n    //todo check payType value\n\n    //var cartId = get_active_cart_id()\n    if (!checkCartStatus(cartId, 'active')) {\n        throw new Meteor.Error(500, cartId + ' is not active');\n    }\n\n\n    var result = DB.ShoppingCart.update({\n        '_id': cartId,\n        status: 'active'\n    }, {\n        '$set': {\n            'checkoutType': checkoutType,\n            'status': 'checking'\n        }\n\n    })\n\n    if (!result) {\n        throw new Meteor.Error(500, 'move_to_checking error');\n\n    }\n\n    return {status: 'success'}\n\n}\n\n//ÊîØ‰ªòÊàêÂäüÂêéË∞ÉÁî®Ê≠§ËøáÁ®ã\n//Âú®Â∫óÈáåÈÄöËøáÂêéÂè∞ ÊàñÊ†πÊçÆÊîØ‰ªòÁΩëÂÖ≥ÁöÑÂõûË∞É ËÆæÁΩÆ‰∏∫Â∑≤ÊîØ‰ªò  ÂêåÊó∂Ëß¶ÂèëÂêéÁª≠Â§ÑÁêÜËøáÁ®ã\nfunction move_to_applied(cartId) {\n    //todo check to make sure paied\n\n    if (!checkCartStatus(cartId, 'checking')) {\n        throw new Meteor.Error(500, cartId + ' is not in status of checking');\n    }\n\n\n    DB.ShoppingCart.update({\n        '_id': cartId,\n        'status': 'checking'\n    }, {\n        '$set': {status: 'applied'} //\n\n    })\n\n    move_to_done(cartId)\n}\n\nfunction move_to_done(cartId) {\n\n    if (!checkCartStatus(cartId, 'applied')) {\n        throw new Meteor.Error(500, cartId + ' is not in status of applied');\n    }\n\n    var cart = DB.ShoppingCart.findOne({ //todo optimize\n        _id: cartId\n    })\n\n    //console.log(cart)\n\n    _move_to_done(cart)\n}\n\n//private\n//cart status [apllied]=>[done]\nfunction _move_to_done(cart) {\n\n    if (typeof cart === 'string') {\n\n    }\n\n\n    //todo test  mongodb Â§ö‰∏™class ‰∏Ä‰∏™cartÊúâÂ§ö‰∏™itemÊòØÂê¶ÈÉΩÂèØ‰ª•Âà†Èô§\n    DB.Classes.update({\n        'carted.cartId': cart._id\n    }, {\n        '$pull': {\n            'carted': {cartId: cart._id}\n        }\n    }, {multi: true})\n\n\n    cart.items.forEach(function (item) {\n\n        if (item.quantity == 1) {//Ê≥®ÂÜå todo using type\n\n            //insert the document if it does not exist\n            DB.ClassesRegister.update({\n                swimmerId: item.swimmerId,\n                classId: item.classId,\n                status: 'normal',\n\n                accountId: cart.accountId,\n                sessionId: cart.sessionId,\n                cartId: cart._id\n            }, {\n                $set: {\n                    registerTime: cart.lastModified\n                }\n            }, {\n                upsert: true //insert if not found\n            })\n\n\n        } else if (item.quantity == -1) {//ÂèñÊ∂àÊ≥®ÂÜå todo using type\n            DB.ClassesRegister.remove({\n                swimmerId: item.swimmerId,\n                classId: item.classId,\n\n                sessionId: cart.sessionId,\n                cartId: cart._id\n            })\n\n        } else if (item.type == 'change') {\n\n\n        }\n    })\n\n    //‰ª•‰∏äËøáÁ®ãÈùûÂºÇÊ≠• ÂÆåÊàê‰πãÂêé\n    DB.ShoppingCart.update({\n        '_id': cart._id,\n        'status': 'applied'\n    }, {\n        '$set': {status: 'done'} //\n    })\n\n}\n\n\n//{cartId, swimmerId,classId}\nfunction delete_class_from_cart(params){\n\n    console.log('====delete_class_from_cart params=====:',params)\n\n\n    //ÊÅ¢Â§çclassÊï∞ÁõÆ\n    result = DB.Classes.update(\n        {'_id': params.classId},\n        {\n            '$inc': {'seatsRemain': 1},\n            '$pull': {\n                'carted': {\n                    'type': 'register',\n                    'cartId': params.cartId,\n                    'swimmerId': params.swimmerId,\n                    'quantity': 1,\n                    //'timestamp': new Date()\n                }\n            }\n        })\n    console.log('====delete_class_from_cart [restore class] step1=====:'+result)\n\n    //‰ªéË¥≠Áâ©ËΩ¶Âà†Èô§\n    var result = DB.ShoppingCart.update(\n        {'_id': params.cartId},\n        {\n            '$set': {status: 'active'}, //ÈáçÁΩÆ‰∏∫active\n            '$pull': {\n                'items': {\n                    //'type': 'register',\n                    'swimmerId': params.swimmerId,\n                    classId: params.classId\n                }\n            }\n        })\n    console.log('====delete_class_from_cart step2=====:'+result)\n\n\n\n\n}\n\n/*\n* cartId  Á°ÆÂÆöË¥≠Áâ©ËΩ¶\n* swimmerId classId   Á°ÆÂÆö‰∏Ä‰∏™item\n* preferenceNum   Á°ÆÂÆöpreference  1Ôºå2Ôºå3\n* classData     Êñ∞ÁöÑclassÊï∞ÊçÆ  classIdÔºü\n*\n* */\nfunction change_preference_in_cart(params){\n\n    console.log('change_preference_in_cart',params)\n\n    //check Â§Ñ‰∫éactiveÁä∂ÊÄÅ\n\n    if(params.preferenceNum==1) {\n\n\n        //Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ËØæÁ®ã ‰ª•ÂèäÁä∂ÊÄÅ\n        var result =DB.ShoppingCart.update({\n            '_id': params.cartId,\n            'items': {\n                $elemMatch: {\n                    'swimmerId': params.swimmerId,\n                    'classId': params.classId\n                }\n            }\n        }, {\n            $set: {\n                status: 'pending',\n                //'items.$.swimmerId': classData.swimmerId,\n                'items.$.classId': params.classData.classId,\n                'items.$.class1': params.classData //class3\n            }\n        })\n        console.log('--step1---result-----',result)\n\n        //ÊÅ¢Â§çÂ∑≤ÈÄâËØæÁ®ãÊï∞ÁõÆ\n        result = DB.Classes.update(\n            {'_id': params.classId},\n            {\n                '$inc': {'seatsRemain': 1},\n                '$pull': {\n                    'carted': {\n                        'type': 'register',\n                        'cartId': params.cartId,\n                        'swimmerId': params.swimmerId,\n                        'quantity': 1,\n                        //'timestamp': new Date()\n                    }\n                }\n            })\n        console.log('--step2---result-----',result)\n\n\n        //Âç†Áî®Êñ∞classÁöÑÊï∞ÁõÆ\n        result = DB.Classes.update(\n            {'_id': params.classId, 'seatsRemain': {'$gte': 1}},\n            {\n                '$inc': {'seatsRemain': -1},\n                '$push': {\n                    'carted': {\n                        'type': 'register',\n                        'cartId': params.cartId,\n                        'swimmerId': params.swimmerId,\n                        'quantity': 1,\n                        'timestamp': new Date()\n                    }\n                }\n            })\n\n\n        if (result)\n        {\n            DB.ShoppingCart.update(\n                {'_id': params.cartId},\n                {\n                    '$set': {status: 'active'} //ÈáçÁΩÆ‰∏∫active\n                })\n            return {cartId: params.cartId}\n\n        }else {\n\n            //DB.ShoppingCart.update(\n            //    {'_id': cart_id},\n            //    {\n            //        '$set': {status: 'active'}, //ÈáçÁΩÆ‰∏∫active\n            //        '$pull': {\n            //            'items': {\n            //                'type': 'register',\n            //                'swimmerId': item.swimmerId,\n            //                classId: item.classId\n            //            }\n            //        }\n            //    })\n            //todo ÂõûÈÄÄÈÄªËæë ‰ΩÜËøôÁßçÊÉÖÂÜµÊûÅÂ∞ëÂèëÁîü ‰∏ÄËà¨ÂâçÁ´ØÂèØÈÄâ Â∞±ÊúâÁõ∏Â∫îËØæÁ®ã\n\n            throw new Meteor.Error(500,\n                'change_preference 1' + params.cartId + ' error. There is not enough class you are changing to',\n                'DB.Classes.update $push');\n\n        }\n\n\n\n\n\n    } else if(params.preferenceNum==2){\n\n        DB.ShoppingCart.update({\n            '_id': params.cartId,\n            'items': {\n                $elemMatch: {\n                    'swimmerId': params.swimmerId,\n                    'classId': params.classId\n                }\n            }\n        }, {\n            $set: {\n                'items.$.class2': params.classData //class3\n            }\n        })\n\n\n    }else if(params.preferenceNum==3){\n\n        DB.ShoppingCart.update({\n            '_id': params.cartId,\n            'items': {\n                $elemMatch: {\n                    'swimmerId': params.swimmerId,\n                    'classId': params.classId\n                }\n            }\n        }, {\n            $set: {\n                'items.$.class3': params.classData //class3\n            }\n        })\n\n\n    }\n\n\n}\n\n\n//clear uncompletedShoppingCartItem\n//ÊµÅÁ®ã‰∏≠Êñ≠Êó∂ Ê∏ÖÈô§ËØæÁ®ãÂç†Áî®ÂèäÈÄâËØæËÆ∞ÂΩï\nfunction clear_uncompleted_item_in_cart(){\n\n    console.log('====clear_uncompleted_item_in_cart===')\n\n    var cart = DB.ShoppingCart.findOne(\n        {\n            status: 'active',\n            type:'register'\n        })\n\n    var items=[]\n\n    //ÊâæÂá∫Êú™ÂÆåÊàêÁöÑitem\n    if(cart && cart.items){\n        items=_.filter(cart.items,function(item){\n            return  !(item.class1 && item.class2 && item.class3)\n        })\n    }\n\n\n\n    items.forEach(function(item){\n\n        delete_class_from_cart({\n            cartId:cart._id,\n            swimmerId: item.swimmerId,\n            classId:item.classId\n\n        })\n    })\n}\n\nshopping_cart_export({\n\n    //add_class_register_to_cart: add_class_register_to_cart,\n    add_item_to_cart: add_item_to_cart,\n    add_class_to_cart: add_class_to_cart,\n    add_preference_to_cart: add_preference_to_cart,\n    move_to_checking: move_to_checking,\n    move_to_applied: move_to_applied,\n    move_to_done: move_to_done,\n\n    delete_class_from_cart:delete_class_from_cart,\n    change_preference_in_cart:change_preference_in_cart,\n    clear_uncompleted_item_in_cart:clear_uncompleted_item_in_cart\n\n})\n\n\n","/**\n * Created on 9/25/15.\n */\n\n\n//ËÆ°ÁÆóchange classÁöÑË¥πÁî®  Ê†πÊçÆÊ≠£Ë¥üËµ∞‰∏çÂêåÈÄªËæë\n//Ëã•Áî®Êà∑‰ªçÈúÄË°•‰∫§Ë¥πÁî® ÈúÄÈôêÊó∂   Âç†Áî®Êñ∞classÂêçÈ¢ù\n//\nchange_caculate_fee = function (swimmerId, fromClassId, toClassId) {\n\n\n    return -10 //ÂÅáÂÆöÈúÄÈÄÄÁî®Êà∑10ÂÖÉ\n    //return 10\n}\n\nchange_create_cart = function(item){\n    App.info = App.info || DB.App.findOne()\n\n    var shoppingCart = {\n        accountId: Meteor.userId(),\n        type: 'change',\n        status: 'active',\n        sessionId: App.info.sessionRegister,\n        items: item?[item]:[]\n    }\n\n    var cartId = DB.ShoppingCart.insert(shoppingCart);\n\n    return cartId;\n}\n\nchange_get_or_create_active_cart =function(){\n\n    var cart = DB.ShoppingCart.findOne({\n        _id: cartId,\n        accountId: Meteor.userId(),\n        type:'change',\n        //15ÂàÜ‰ª•ÂÜÖÁöÑ\n        lastModified: {$gt: new Date(+new Date() - 15 * 60 * 1000)}\n\n    })\n\n    return cart || change_create_cart()\n\n}\n\n\nchange_class=function(swimmerId, fromClassId, toClassId){\n    var fee = change_caculate_fee(swimmerId, fromClassId, toClassId)\n    if(fee>0){\n        change_class_due(swimmerId, fromClassId, toClassId)\n\n    }else{//<=0\n        change_class_refund(swimmerId, fromClassId, toClassId)\n    }\n\n}\n\n\nchange_class_due =function(swimmerId, fromClassId, toClassId){\n\n}\n\nchange_class_refund=function(swimmerId, fromClassId, toClassId){\n\n    ////////////check/////////\n    //Á°Æ‰øùswimmerIdÂ∑≤Ê≥®ÂÜåfromClassId Âπ∂‰∏îÊú™ËøõË°å cancelÊàñchangeÊìç‰Ωú\n    var registerItem =DB.ClassesRegister.findOne({\n        swimmerId:swimmerId,\n        classId:fromClassId\n    })\n    if(!registerItem){\n        throw new Meteor.Error(500, swimmerId+' did not register class '+fromClassId);\n    }else if(registerItem.status!='normal'){\n\n        throw new Meteor.Error(500, 'class is under status '+registerItem.status);\n    }\n\n    //check Êï∞ÁõÆ\n\n\n    //////////////////////\n\n\n    //var cart = change_get_or_create_active_cart()\n    //var cart_id = cart._id\n\n    var cart_id = change_create_cart()\n\n    console.log('1-----'+cart_id)\n\n\n    //ÊûÑÈÄ†ÊîπÂèòËØæÁ®ãÊó∂ÁöÑitem\n    var item = {\n        type: 'change',\n        swimmerId: swimmerId,\n        fromClassId: fromClassId,\n        toClassId: toClassId,\n\n        //extra info todo only pick special fields\n        swimmer: DB.Swimmers.findOne({_id: swimmerId}),\n        fromClass: DB.Classes.findOne({_id: fromClassId}),\n        toClass: DB.Classes.findOne({_id: toClassId})\n\n    }\n\n\n\n    ///////////////////////////////////////////////\n    //ÂÆåÊàêchange classË¥≠Áâ©ËΩ¶ÂàõÂª∫\n    var result = DB.ShoppingCart.update({\n        '_id': cart_id\n    }, {\n        '$set': {status: 'pending'},//Â∑≤ÂºÄÂßã‰∫ãÂä°Â§ÑÈáå ÁΩÆ‰∏∫pending  todo touchÊó∂Èó¥\n        '$push': {\n            'items': item  //item.quantity==1 or -1\n        }\n    })\n\n\n    console.log('2-----'+result)\n\n\n    ////////////////////change_move_pending_to_applied/////////////////\n\n    //Âç†Áî®‰∏Ä‰∏™class  todo Á°Æ‰øù$push ÂîØ‰∏Ä\n    //ÈúÄÂÖàÊü•ËØ¢ todo Á°Æ‰øù‰∏çÂ≠òÂú®‰ª•ÂâçÁöÑchangeÂéÜÂè≤ Âê¶ÂàôÊ∏ÖÁêÜ‰ª•ÂâçÁöÑÊìç‰Ωú\n\n\n    //ÂêéÈù¢Âü∫‰∫é ‰ª•ÂâçÊú™ÂÅöËøáÁõ∏ÂêåÁöÑchangeÂπ∂‰∏îÂõ†‰∏∫ÁâπÊÆäÂéüÂõ†ËÄå‰∏≠Êñ≠\n    result = DB.Classes.update(\n        {\n            '_id': toClassId,\n            'seatsRemain': {'$gte': 1}\n        },\n        {\n            '$inc': {'seatsRemain': -1},\n            '$push': {\n                'carted': {\n                    'cartId': cart_id,\n\n                    'type': 'change',\n                    'fromClassId': fromClassId,\n                    'toClassId': toClassId,\n\n                    'swimmerId': swimmerId,\n                    'quantity': 1,  //changeÊó∂Ë¥≠Áâ©ËΩ¶Êó†Êï∞Èáè classÈáåÈúÄË¶ÅÊï∞Èáè Áî®‰∫éÊÅ¢Â§çÊó∂Âå∫ÂàÜÊòØfromËøòÊòØto\n                    'timestamp': new Date()\n                }\n            }\n        })\n\n    console.log('3-----'+result)\n\n\n    if (!result) {//Âç†Áî®Â§±Ë¥• Êï∞ÁõÆ‰∏çÂ§üÊó∂\n        DB.ShoppingCart.update(\n            {'_id': cart_id},\n            {\n                '$set': {status: 'active'}, //ÈáçÁΩÆ‰∏∫active\n                '$pull': {\n                    'items': {\n                        'type': 'change',\n                        'fromClassId': fromClassId,\n                        'toClassId': toClassId,\n                    }\n                }\n            })\n        //todo Áõ¥Êé•Âà†Èô§Ë¥≠Áâ©ËΩ¶Ôºü\n\n        throw new Meteor.Error(500, 'add_class_to_cart error ËØæÁ®ãÂç†Áî®Â§±Ë¥•');\n\n    }\n\n    //else {\n    //    DB.ShoppingCart.update(\n    //        {'_id': cart_id},\n    //        {\n    //            '$set': {status: 'active'} //ÈáçÁΩÆ‰∏∫active\n    //        })\n    //    return {cartId: cart_id}\n    //}\n\n\n\n    //Ê†áËÆ∞oldclass\n    var oldRegister =DB.ClassesRegister.update({\n        swimmerId:swimmerId,\n        classId:fromClassId\n    },{\n        '$set': {status: 'changing'},\n        '$push': {\n            'carted':cart_id\n        }\n    })\n\n\n    console.log('4-----'+oldRegister)\n    App.info = App.info || DB.App.findOne()\n\n    // ÊèíÂÖ•Âπ∂Ê†áËÆ∞newclass\n    var newRegister =DB.ClassesRegister.insert({\n        sessionId: App.info.sessionRegister,\n        account:Meteor.userId(),\n        swimmerId:swimmerId,\n        classId:toClassId,\n        cartId:cart_id,\n        status: 'changing',\n        'carted':[cart_id]\n    })\n\n    console.log('5-----'+newRegister)\n\n\n    ////// Âà∞Ëææapplied Áä∂ÊÄÅ\n    result=DB.ShoppingCart.update(\n        {'_id': cart_id},\n        {\n            '$set': {status: 'applied'} //ÈáçÁΩÆ‰∏∫active\n        })\n\n    console.log('6-----'+result)\n\n\n    //Â∑≤ÊàêÂäüÈÄÄËØæ Ê∏ÖÈô§‰∫ãÂä°Á∫™ÂΩï\n    //change_move__applied_to_donejia\n    //todo Â¢ûÂä† changed canceled ÊÄÅ‰øùÊåÅÂéÜÂè≤Êìç‰ΩúÔºü\n\n\n    console.log('change_move__applied_to_done');\n\n    result =DB.ClassesRegister.remove({\n        swimmerId:swimmerId,\n        classId:fromClassId,\n        status:'changing'\n    });\n    console.log('7-----'+result)\n\n    result = DB.ClassesRegister.update({\n        swimmerId:swimmerId,\n        classId:toClassId,\n        status:'changing'\n    },{\n        $set:{status: 'normal'},\n        $pull:{'carted':cart_id}\n    })\n    console.log('8-----'+result)\n\n\n    //ÊóßËØæÁ®ãÊï∞ÁõÆÔºã1\n    result =DB.Classes.update(\n        {\n            '_id': fromClassId\n        },\n        {\n            '$inc': {'seatsRemain': 1}\n        })\n\n    console.log('9-----'+result)\n\n\n    //Êñ∞ËØæÁ®ã Ê∏ÖÈô§‰∫ãÂä°Á∫™ÂΩï\n    result =DB.Classes.update(\n        {\n            '_id': toClassId\n        },\n        {\n            '$pull': {\n                'carted': {\n                    'cartId': cart_id,\n\n                    'type': 'change',\n                    'fromClassId': fromClassId,\n                    'toClassId': toClassId,\n\n                    'swimmerId': swimmerId,\n                    'quantity': 1  //changeÊó∂Ë¥≠Áâ©ËΩ¶Êó†Êï∞Èáè classÈáåÈúÄË¶ÅÊï∞Èáè Áî®‰∫éÊÅ¢Â§çÊó∂Âå∫ÂàÜÊòØfromËøòÊòØto\n                }\n            }\n        })\n    console.log('10-----'+result)\n\n\n    result =DB.ShoppingCart.update(\n        {'_id': cart_id},\n        {\n            '$set': {status: 'done'} //ÈáçÁΩÆ‰∏∫active\n        })\n\n\n    console.log('11-----'+result)\n\n\n\n\n}\n\n\n//pending =>\nchange_add_class_to_cart = function (swimmerId, fromClassId, toClassId) {\n\n}\n\n\n/*\n    1.classes Âç†Áî®‰∏Ä‰∏™fromclassÂØπÂ∫îÁöÑÊï∞ÁõÆ\n    2.Ê†áËÆ∞classRegister‰∏≠ oldclassÂØπÂ∫îÈ°πÁä∂ÊÄÅ‰∏∫ changing\n\n    Ëã•Áî®Êà∑ÈúÄÊîØ‰ªòË¥πÁî® cartËøõÂÖ• checkingÁä∂ÊÄÅ Ê†πÊçÆÊîØ‰ªòÊÉÖÂÜµ‰ª•ÂèäÊòØÂê¶Ë∂ÖÊó∂ËøõË°åÂêéÈù¢Â§ÑÁêÜ\n\n    Ëã•ÈúÄÈÄÄÁî®Êà∑Ë¥πÁî® Áõ¥Êé•Ê†áËÆ∞‰∏∫applied Ëµ∞appliedÔºù„ÄãdoneÊ≠•È™§\n* */\nchange_move_pending_to_applied =function(){\n\n\n\n\n\n}\nchange_move__applied_to_done =function(){\n\n\n}\n\n\n///////////////due//////Áî®Êà∑Ê¨†Ë¥πÁöÑcase/////////////////////////////\n\nchange_move_pending_to_checking=function(){\n\n}\n//Áî±pendingÂõûÊªö  ÊîØ‰ªòË∂ÖÊó∂ ÊàñÁ®ãÂ∫èÂºÇÂ∏∏ ÂØºËá¥ÂÅúÁïôÂú®checkingÊÄÅ\nchange_rollback_from_pending =function(){\n\n}\n\nchange_rollback_from_checking=function(){\n\n}\n\nchange_checking_to_applied=function(){\n\n}\n\n\n\nshopping_cart_export({\n    //add_class_change_to_cart: change_add_class_to_cart\n    change_class:change_class\n})\n\n\n","/**\n * Created on 9/25/15.\n */\n\n\n\n/*\n\n    canceling<--[middle]--> applied-->done\n\n* */\n\n//canceling\ncancel_create_cart = function (item) {\n    var shoppingCart = {\n        accountId: Meteor.userId(),\n        type: 'cancel',\n        status: 'canceling',\n        sessionId: App.info.sessionRegister,\n        items: item?[item]:[]\n    }\n\n    var cartId = DB.ShoppingCart.insert(shoppingCart);\n\n    return cartId;\n\n    //return DB.ShoppingCart.findOne({_id: cartId});\n}\n\n//ÂèñÊ∂àËØæÁ®ã ÂÖàÈÄÄË¥πÂÜçÊÅ¢Â§çËØæÁ®ãÊï∞Èáè   cancel ‰ªòË¥πÂêéÂÜç ÊÅ¢Â§çclassÊï∞Èáè\ncancel_add_class_to_cart = function (swimmerId, classId) {\n    //check swimmer belong to current account todo\n    //check Áî®Êà∑Â∑≤Ê≥®ÂÜåËØ•ËØæÁ®ã\n    App.info = App.info || DB.App.findOne()\n\n    var classReg = DB.ClassesRegister.findOne({\n        swimmerId: swimmerId,\n        classId: classId,\n        sessionId: App.info.sessionRegister\n    })\n\n    if (!classReg) {\n        throw new Meteor.Error(500, 'add_class_cancel_to_cart:class not exist');\n    }\n\n    ////////create item data\n    var item = {\n        type: 'cancel',\n        classId: classId,\n        swimmerId: swimmerId,\n        quantity: -1,\n\n        //extra info todo only pick special fields\n        swimmer: DB.Swimmers.findOne({_id: swimmerId}),\n        class: DB.Classes.findOne({_id: classId})\n    }\n\n    /////step1 Âä†ÂÖ•Ë¥≠Áâ©ËΩ¶\n    var cart_id = cancel_create_cart(item)\n\n    //var result = DB.ShoppingCart.update({\n    //    '_id': cart_id\n    //}, {\n    //    '$set': {status: 'pending'},//Â∑≤ÂºÄÂßã‰∫ãÂä°Â§ÑÈáå ÁΩÆ‰∏∫pending\n    //    '$push': {\n    //        'items': item\n    //    }\n    //})\n\n\n    cancel_move_canceling_to_applied(cart_id, item)\n\n\n}\n\n\n//canceling=>applied Ëã•ÈúÄcancelingÊÅ¢Â§çÊâßË°åÂêåÊ†∑Ë∞ÉÁî®Ê≠§ÂáΩÊï∞\ncancel_move_canceling_to_applied = function (cart_id, item) {\n\n    //step2Êõ¥Êñ∞ÂïÜÂìÅÊï∞Èáè\n    var result = DB.Classes.update(\n        {\n            '_id': item.classId//,\n            //'carted.swimmerId' and type\n            //'seatsRemain': {'$gte': item.quantity}\n            //todo add condition to prevent duplicate $push\n        },\n        {\n            '$inc': {'seatsRemain': -item.quantity},\n            '$push': {\n                'carted': {\n                    'type': 'cancel',\n                    'cartId': cart_id,\n                    'swimmerId': item.swimmerId,\n                    'quantity': item.quantity,\n                    'timestamp': new Date()\n                }\n            }\n        })\n\n\n    /////Ê†áËÆ∞registerClassÈ°π‰∏∫ canceling\n    var result = DB.ClassesRegister.update({\n        'classId': item.classId,\n        'swimmerId': item.swimmerId\n    }, {\n        '$set': {status: 'canceling'}//Â∑≤ÂºÄÂßã‰∫ãÂä°Â§ÑÈáå ÁΩÆ‰∏∫pending\n    })\n\n\n}\n\n\n//cancelingÊú™Âà∞ËææappliedÁä∂ÊÄÅËÄå‰∏≠Êñ≠ ÂõûÊªöÈÄªËæë ÈÄÜÊìç‰Ωú\ncancel_move_canceling_to_applied_rollback =function(){\n\n\n}\n\n//applied_to_done  ÈÄÄÊ¨æÂêéÁöÑÊ∏ÖÁêÜÂ∑•‰Ωú\n//Âà†Èô§ classRegister È°π\n//Âà†Èô§ classRegister ‰∏≠ÁöÑcartedÈ°π\ncancel_move_applied_to_done = function () {\n\n\n}\n\n\nshopping_cart_export({\n    cancel_add_class_to_cart: cancel_add_class_to_cart\n})\n","/**\n * Created on 9/25/15.\n */\n\n\n//////////////////////ÂÆöÊó∂‰ªªÂä°/////////////////////////////\n//ÂêéÁª≠Â§ÑÁêÜ  Ê≠§ËøáÁ®ãËã•‰∏≠Êñ≠ ÂèØÁî±ÂÆöÊó∂Á®ãÂ∫èÁ°Æ‰øùÂÖ∂ÂÆåÊàê\nfunction cron_move_applied_to_done() {\n    if (this.connection) return;\n\n    var allCarts = get_carts({'status': 'applied'})\n\n    //ÂèØËÉΩÊúâÂ§ö‰∏™cart\n    allCarts.forEach(function (cart) {\n        _move_to_done(cart)\n    })\n}\n//ÂÆöÊó∂Á®ãÂ∫èË∞ÉÁî® Ëµ∞ expiredÁä∂ÊÄÅÊµÅÁ®ã\nfunction cron_expiring() {\n\n\n}\n\n\nshopping_cart_export({\n    cron_move_applied_to_done: cron_move_applied_to_done,\n    cron_expiring: cron_expiring\n})\n\n\n"]}