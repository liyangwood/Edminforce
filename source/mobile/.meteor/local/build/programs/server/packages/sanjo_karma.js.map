{"version":3,"sources":["meteor://ðŸ’»app/packages/sanjo_karma/main.js"],"names":[],"mappingssF","file":"/packages/sanjo_karma.js","sourcesContent":["var path = Npm.require('path')\nvar fs = Npm.require('fs-extra')\nvar readFile = Meteor.wrapAsync(fs.readFile, fs)\nvar outputFile = Meteor.wrapAsync(fs.outputFile, fs)\nvar requestRetry = Npm.require('requestretry')\nvar freeport = Meteor.wrapAsync(Npm.require('freeport'))\n\nvar packageName = 'sanjo:karma';\n\nlog = loglevel.createPackageLogger(\n  '[' + packageName + ']',\n  process.env.KARMA_LOG_LEVEL || 'info'\n)\n\nKarma = {\n  start: function (id, options) {\n    options = options || {}\n    log.debug('Karma.start', id)\n\n    return KarmaInternals.startKarmaServer(id, options)\n  },\n\n  isRunning: function (id) {\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    return karmaChild.isRunning()\n  },\n\n  stop: function (id) {\n    log.debug('Karma.stop', id)\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    if (karmaChild.isRunning()) {\n      karmaChild.kill()\n    }\n  },\n\n  run: function (id) {\n    log.debug('Karma.run', id)\n    KarmaInternals.apiRequest(id, 'run')\n  },\n\n  reloadFileList: function (id, patterns, excludes) {\n    log.debug('Karma.reloadFileList', id, patterns, excludes)\n\n    KarmaInternals.apiRequest(\n      id,\n      'reloadFileList',\n      {\n        patterns: patterns,\n        excludes: excludes\n      }\n    )\n  }\n}\n\nKarmaInternals = {\n  karmaChilds: {},\n\n  apiRequest: function (id, type, data) {\n    data = data || {}\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n\n    if (karmaChild.isRunning()) {\n      var request = requestRetry({\n        url: 'http://127.0.0.1:' + this.getPort(id) + '/' + type,\n        method: 'POST',\n        json: true,\n        body: data,\n        maxAttempts: 5,\n        retryDelay: 1000\n      }, function (error, response, body) {\n        if (error) {\n          log.error(type + ' request failed', error)\n        } else if (response.statusCode === 500) {\n          log.error(type + ' request failed', body.data.error)\n        }\n      })\n    } else {\n      throw new Error(\n        'You need to start the Karma server ' +\n        'before you can make an API request.'\n      )\n    }\n  },\n\n  getKarmaChild: function (id) {\n    var karmaChild = KarmaInternals.karmaChilds[id]\n    if (!karmaChild) {\n      karmaChild = new sanjo.LongRunningChildProcess(id)\n      KarmaInternals.setKarmaChild(id, karmaChild)\n    }\n\n    return karmaChild\n  },\n\n  setKarmaChild: function (id, karmaChild) {\n    KarmaInternals.karmaChilds[id] = karmaChild\n  },\n\n  startKarmaServer: function (id, options) {\n    log.debug('KarmaInternals.startKarmaServer(' + id + ')')\n    var karmaChild = KarmaInternals.getKarmaChild(id)\n    var karmaRunnerPath = KarmaInternals.getKarmaRunnerPath()\n    fs.chmodSync(karmaRunnerPath, parseInt('544', 8))\n    var apiServerPort = this.createPort(id)\n    var spawnOptions = {\n      command: process.execPath,\n      args: [karmaRunnerPath, apiServerPort, this.getKarmaModulePath()]\n    }\n    // It will only spawn when the process is not already running\n    karmaChild.spawn(spawnOptions)\n    KarmaInternals.apiRequest(id, 'start', options)\n\n    return karmaChild\n  },\n\n  getKarmaRunnerPath: function () {\n    return MeteorFilesHelpers.getPackageServerAssetPath(\n      packageName, 'karma_runner.js'\n    )\n  },\n\n  getKarmaModulePath: function () {\n    return MeteorFilesHelpers.getNodeModulePath(packageName, 'karma')\n  },\n\n  getPortFilePath: function (id) {\n    return path.resolve(MeteorFilesHelpers.getAppPath(),\n      '.meteor/local/run/' + id + '.port')\n  },\n\n  createPort: function (id) {\n    var port = freeport()\n    outputFile(this.getPortFilePath(id), port)\n\n    return port\n  },\n\n  getPort: _.memoize(function (id) {\n    return parseInt(readFile(this.getPortFilePath(id), {encoding: 'utf8'}), 10)\n  })\n}\n"]}