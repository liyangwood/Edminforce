{"version":3,"sources":["meteor://💻app/server/cron/main.js"],"names":[],"mappings":"efile":"/server/cron/main.js","sourcesContent":["/**\n * Created on 9/20/15.\n */\n\n\n\n//Todo using linux crontab for performance reason?\nMeteor.startup(function () {\n\n    //标记过期购物车\n    function changeStaus() {\n\n        //设置active为 expired\n        DB.ShoppingCart.update({\n            // 15分以内的 todo save time as config value\n            lastModified: {$lt: new Date(+new Date() - 15 * 60 * 1000)},\n            status: 'active'\n        }, {\n            $set: {\n                status: 'expiring'\n            }\n        }, {\n            multi: true\n        });\n    }\n\n    //expiring 购物车的处理  确保此过程反复执行结果不变\n    function clearShoppingCart() {\n\n        var carts = DB.ShoppingCart.find({\n            status: 'expiring'\n        })\n\n        //恢复class可用数量\n        carts.forEach(function (cart, i, a) {\n\n            var item = cart.items //获取购物车的购物项\n\n\n            var result;\n            var hasError = false;\n            cart.items.forEach(function (item, i_items, a_items) {\n\n\n                ///////////////恢复逻辑///////////////////////\n\n                if (cart.type == 'change') {//change课程\n\n\n                } else {//增加课程  取消课程\n\n                    //todo more test.  maybe $elemMatch is necessary\n                    result = DB.Classes.update({\n                        _id: item.classId,\n\n                        'carted.swimmerId': item.swimmerId,\n                        'carted.cart_id': cart['id'],\n                        'carted.qty': item['quantity']\n\n                    }, {\n                        '$inc': {seatsRemain: item.quantity},\n                        '$pull': {\n                            'carted': {'cartId': cart['id']}\n                        }\n                    })\n\n                    if (!result) {\n                        hasError = true;  //有项目未成功恢复\n                    }\n                }\n\n            })\n\n\n            //购物车所有项目皆恢复完毕\n            if (!hasError) {\n\n                DB.ShoppingCart.update({\n                    _id: cart._id\n                }, {\n                    $set: {\n                        status: 'expired'\n                    }\n                });\n            }\n\n        })\n\n        //清除过期购物车\n        //DB.ShoppingCart.remove({\n        //    status:'expired'\n        //})\n\n    }\n\n\n    //http://docs.mongodb.org/ecosystem/use-cases/inventory-management/\n    //清除所对应购物车已不存在的class register\n    //case  购物车expired 先删除注册信息 再删除购物车\n    //case class注册信息存在 对应购物车不存在\n    //todo check all case\n    SyncedCron.add({\n        name: 'Clear Shopping Cart',\n        schedule: function (parser) {\n\n            return parser.text('every 15 minutes');\n            //return parser.text('every 10 seconds');\n\n        },\n        job: function () {\n            changeStaus()\n            clearShoppingCart()\n\n        }\n    });\n\n\n    SyncedCron.start()\n\n})\n\n\n\n"]}