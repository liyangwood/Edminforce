{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Client Routes\n */\n\n{\n    //global router control\n\n    FlowRouter.LastRoute = [];\n    var savedRoute = null;\n\n    //define global triggers for test\n    FlowRouter.triggers.enter([function (context) {\n        //console.log('Router enter: path='+context.path,' name= '+FlowRouter.getRouteName())\n\n        //hack 从注册页跳过来 todo 系统处理url history\n        if (savedRoute == '/login') {\n            savedRoute = '/';\n        }\n\n        if (!FlowRouter.BackButton && savedRoute) FlowRouter.LastRoute.push(savedRoute);else if (FlowRouter.BackButton) FlowRouter.LastRoute.pop();\n\n        FlowRouter.BackButton = false;\n        //calphin logic\n        if (!(Meteor.loggingIn() || Meteor.userId())) {\n            //Todo hard code; should使用name ;等待 name path最终确定\n            if (context.path.indexOf(\"reset-password\") > -1) {\n                /* \n                 * This is for resetting password via email.\n                 * User will click on an URL contianing 'reset-password'.\n                 * At that time, user is not logged in, but he has the token to reset password\n                 * So, we send him to reset password page, instead of the login page.\n                 * Todo: make sure that the token is provided in the link, if not, we should still\n                 * direct user to login page.\n                 */\n                FlowRouter.go(context.path);\n            } else if (context.path != '/login') {\n                //用于登陆后回调  登陆应该以dispatch message方式\n                Session.set('redirectAfterLogin', context.path);\n                //var redirectAfterLogin =Session.get('redirectAfterLogin')\n                //if(redirectAfterLogin && 'redirectAfterLogin不是login page时'){\n                //    FlowRouter.go(redirectAfterLogin)\n                //}else{\n                //    //to verify\n                //    FlowRouter.go('/')\n                //}\n                FlowRouter.go('/login');\n            }\n        }\n    }]);\n\n    FlowRouter.triggers.exit([function (context) {\n        //console.log('Router exit: path='+context.path,' name= '+FlowRouter.getRouteName())\n\n        savedRoute = FlowRouter.current().path;\n        window.scrollTo(0, 0);\n    }]);\n}\n\n// Home Route\nDefaultRoutes.route('/', {\n    name: \"home\",\n    action: function (p) {\n        App.routeHandler(p, {\n            pageTitle: \"Home\",\n            headerNav: null,\n            leftNavToggle: true, //左侧导航触发按钮\n            bodyTmpl: React.createElement(Cal.Home, null),\n\n            hideBackButton: true,\n            leftNavToggle: true\n        });\n    }\n});\n\nDefaultRoutes.route('/ContactInfoPage', {\n    name: \"ContactInfoPage\",\n    action: function (p) {\n        App.routeHandler(p, {\n            pageTitle: \"ContactInfoPage\",\n            headerNav: null,\n            leftNavToggle: true, //左侧导航触发按钮\n            bodyTmpl: React.createElement(Cal.ContactInfoPage, null)\n        });\n    }\n});","ast":null,"map":{"version":3,"sources":["/client/lib/router/common.jsx"],"names":[],"mappings":";;;;AAKA;;;AAGI,cAAU,CAAC,SAAS,GAAG,EAAE,CAAA;AACzB,QAAI,UAAU,GAAG,IAAI,CAAA;;;AAGrB,cAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAS,OAAO,EAAC;;;;AAIxC,YAAG,UAAU,IAAI,QAAQ,EAAC;AACtB,sBAAU,GAAE,GAAG,CAAA;SAClB;;AAGD,YAAI,CAAC,UAAU,CAAC,UAAU,IAAI,UAAU,EACpC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA,KACpC,IAAI,UAAU,CAAC,UAAU,EAC1B,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAA;;AAE9B,kBAAU,CAAC,UAAU,GAAG,KAAK,CAAA;;AAE7B,YAAI,EAAE,MAAM,CAAC,SAAS,EAAE,IAAI,MAAM,CAAC,MAAM,EAAE,CAAA,AAAC,EAAE;;AAE1C,gBAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAC;;;;;;;;;AAS5C,0BAAU,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;aAC9B,MAAM,IAAI,OAAO,CAAC,IAAI,IAAI,QAAQ,EAAE;;AAEjC,uBAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;;;;;;;;AAQ/C,0BAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;aAC1B;SACJ;KAEJ,CAAC,CAAC,CAAC;;AAIJ,cAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAS,OAAO,EAAC;;;AAGvC,kBAAU,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,IAAI,CAAA;AACtC,cAAM,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;KACvB,CAAC,CAAC,CAAC;CAIP;;;AAOD,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;AACrB,QAAI,EAAE,MAAM;AACZ,UAAM,EAAE,UAAU,CAAC,EAAE;AACjB,WAAG,CAAC,YAAY,CAAC,CAAC,EAAE;AAChB,qBAAS,EAAE,MAAM;AACjB,qBAAS,EAAE,IAAI;AACf,yBAAa,EAAC,IAAI;AAClB,oBAAQ,EAAE,oBAAC,GAAG,CAAC,IAAI,OAAE;;AAErB,0BAAc,EAAC,IAAI;AACnB,yBAAa,EAAC,IAAI;SACrB,CAAC,CAAA;KACL;CACJ,CAAC,CAAA;;AAEF,aAAa,CAAC,KAAK,CAAC,kBAAkB,EAAE;AACpC,QAAI,EAAE,iBAAiB;AACvB,UAAM,EAAE,UAAU,CAAC,EAAE;AACjB,WAAG,CAAC,YAAY,CAAC,CAAC,EAAE;AAChB,qBAAS,EAAE,iBAAiB;AAC5B,qBAAS,EAAE,IAAI;AACf,yBAAa,EAAC,IAAI;AAClB,oBAAQ,EAAE,oBAAC,GAAG,CAAC,eAAe,OAAE;SACnC,CAAC,CAAA;KACL;CACJ,CAAC,CAAA","file":"/client/lib/router/common.jsx.map","sourcesContent":["/**\n * Client Routes\n */\n\n\n{\n    //global router control\n\n    FlowRouter.LastRoute = []\n    var savedRoute = null\n\n    //define global triggers for test\n    FlowRouter.triggers.enter([function(context){\n        //console.log('Router enter: path='+context.path,' name= '+FlowRouter.getRouteName())\n\n        //hack 从注册页跳过来 todo 系统处理url history\n        if(savedRoute == '/login'){\n            savedRoute ='/'\n        }\n\n\n        if (!FlowRouter.BackButton && savedRoute)\n            FlowRouter.LastRoute.push(savedRoute)\n        else if (FlowRouter.BackButton)\n            FlowRouter.LastRoute.pop()\n\n        FlowRouter.BackButton = false\n        //calphin logic\n        if (!(Meteor.loggingIn() || Meteor.userId())) {\n            //Todo hard code; should使用name ;等待 name path最终确定\n            if (context.path.indexOf(\"reset-password\") > -1){\n                /* \n                 * This is for resetting password via email.\n                 * User will click on an URL contianing 'reset-password'.\n                 * At that time, user is not logged in, but he has the token to reset password\n                 * So, we send him to reset password page, instead of the login page.\n                 * Todo: make sure that the token is provided in the link, if not, we should still\n                 * direct user to login page.\n                 */\n                FlowRouter.go(context.path)\n            } else if (context.path != '/login') {\n                //用于登陆后回调  登陆应该以dispatch message方式\n                Session.set('redirectAfterLogin', context.path)\n                //var redirectAfterLogin =Session.get('redirectAfterLogin')\n                //if(redirectAfterLogin && 'redirectAfterLogin不是login page时'){\n                //    FlowRouter.go(redirectAfterLogin)\n                //}else{\n                //    //to verify\n                //    FlowRouter.go('/')\n                //}\n                FlowRouter.go('/login')\n            }\n        }\n\n    }]);\n\n\n\n    FlowRouter.triggers.exit([function(context){\n        //console.log('Router exit: path='+context.path,' name= '+FlowRouter.getRouteName())\n\n        savedRoute = FlowRouter.current().path\n        window.scrollTo(0,0)\n    }]);\n\n\n\n}\n\n\n\n\n\n// Home Route\nDefaultRoutes.route('/', {\n    name: \"home\",\n    action: function (p) {\n        App.routeHandler(p, {\n            pageTitle: \"Home\",\n            headerNav: null,\n            leftNavToggle:true, //左侧导航触发按钮\n            bodyTmpl: <Cal.Home/>,\n\n            hideBackButton:true,\n            leftNavToggle:true\n        })\n    }\n})\n\nDefaultRoutes.route('/ContactInfoPage', {\n    name: \"ContactInfoPage\",\n    action: function (p) {\n        App.routeHandler(p, {\n            pageTitle: \"ContactInfoPage\",\n            headerNav: null,\n            leftNavToggle:true, //左侧导航触发按钮\n            bodyTmpl: <Cal.ContactInfoPage/>\n        })\n    }\n})\n\n\n\n\n\n"]},"hash":"ef7a69e6b2e09d3db575f2a39a8d7c8c86bc8729"}
