{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Created on 10/11/15.\n */\n\n{\n    //单体 在多个地方使用或在meteordata中被触发  仅初始化一次\n    //let _storeInstance=null;\n\n    Dependency.add('classRegister.CRSelectClassEditPage.store', new function () {\n\n        //if(_storeInstance) return _storeInstance;\n        //console.log('run Dependency CRSelectClassEditPage')\n        //_storeInstance = this;\n\n        var self = this;\n\n        ////props///\n\n        self.props = new ReactiveVar();\n        self.cart = new ReactiveVar();\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({ accountId: Meteor.userId() });\n        };\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar();\n        //当前的level\n        self.currentLevel = new ReactiveVar();\n        //选中的day\n        self.currentDay = new ReactiveVar();\n        self.currentTime = new ReactiveVar();\n        self.currentClass = new ReactiveVar();\n        //当前的步骤\n        self.currentStep = new ReactiveVar(1);\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([]);\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([]);\n\n        //Session.set('CART_ID')\n\n        /*\n         * 一次流程选择的class信息  3步\n         * 使用Immutable库进行对象修改\n         * {\n         *  swimmer:\n         *  class1:{classId, swimmerId}\n         *  class2:\n         *  class3:\n         * }\n         * */\n        self.selectedClasses = new ReactiveVar(Immutable.Map());\n\n        var undefinedSelectValueOption = { text: '', value: '' };\n        var undefinedSelectValue = '';\n\n        //暂存购物车ID 后端会验证其有效性\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue);\n            self.currentTime.set(undefinedSelectValue);\n        }\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"CRSelectClassEditPage_PROPS_UPDATE\":\n                    //get props\n                    {\n                        console.log('CRSelectClassEditPage_PROPS_UPDATE', payload.props);\n\n                        self.props.set(payload.props);\n\n                        self.currentDay.set();\n                        self.currentTime.set();\n                        self.currentClass.set();\n\n                        break;\n                    }\n\n                case \"CRSelectClassEditPage_DAY_CHANGE\":\n                    //选择day\n                    {\n                        console.log('day change ', payload.day);\n                        self.currentDay.set(payload.day);\n                        self.currentTime.set();\n                        break;\n                    }\n\n                case \"CRSelectClassEditPage_TIME_CHANGE\":\n                    //选择time  确定一个class\n                    {\n                        debugger;\n                        self.currentTime.set(payload.time);\n                        break;\n                    }\n\n                case \"CRSelectClassEditPage_CLASS_SELECT\":\n                    //select确定\n                    {\n                        debugger;\n\n                        var props = self.props.get();\n                        var currentClass = self.currentClass.get();\n                        /*\n                         * cartId  确定购物车\n                         * swimmerId classId   确定一个item\n                         * preferenceNum   确定preference  1，2，3\n                         * toClassData     新的class数据  classId？\n                         *\n                         * */\n                        Meteor.call('change_preference_in_cart', {\n                            cartId: props.cartId,\n                            swimmerId: props.swimmerId,\n                            classId: props.classId,\n                            preferenceNum: props.preferenceNum,\n\n                            classData: currentClass\n                        }, function (err, result) {\n                            debugger;\n                            if (err) {\n                                console.error(err);\n                                alert(err.error);\n                                return; //todo  prompt\n                            }\n\n                            //通知SelectClassPage.store 更新数据\n                            //Dispatcher.dispatch({\n                            //    actionType: 'CRSelectClassPage_SelectedClasses_CHANGE',\n                            //    preferenceNum:props.preferenceNum,\n                            //    classData:currentClass\n                            //});\n\n                            //回到上一页\n                            window.history.back();\n                        });\n\n                        break;\n                    }\n\n                case \"CRSelectClassEditPage_ComponentWillMount\":\n                    {\n                        //清空上一轮的选择\n\n                        self.currentDay.set(undefinedSelectValue);\n                        self.currentTime.set(undefinedSelectValue);\n                        self.currentClass.set(null);\n                        self.currentStep.set(1);\n                        //self.avaiableDays //依赖于 当前的currentLevel\n                        //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                        self.selectedClasses.set(Immutable.Map());\n\n                        break;\n                    }\n\n            }\n        });\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            //根据组件的props 初始化数据\n            Tracker.autorun(function (compution) {\n\n                debugger;\n\n                var props = self.props.get();\n                console.log(self.props.dep._dependentsById);\n\n                if (!props) return; //wait for props\n\n                console.log('autorun props', props);\n\n                //var cartId= props.cartId;\n\n                //todo classId swimmerId 条件\n                var cart;\n                if (props.cartId) {\n                    cart = DB.ShoppingCart.findOne({\n                        _id: props.cartId\n                    });\n                } else {\n                    cart = DB.ShoppingCart.findOne({\n                        status: 'active'\n                    });\n                }\n\n                var currentSwimmer = DB.Swimmers.findOne({\n                    _id: props.swimmerId\n                });\n\n                if (cart) {\n                    self.cart.set(cart);\n                    console.log(cart);\n                }\n\n                if (currentSwimmer) {\n                    self.currentSwimmer.set(currentSwimmer);\n                    //self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n                    //console.log('set currentLevel',currentSwimmer.level)\n                }\n            });\n\n            //计算level\n            Tracker.autorun(function () {\n                var currentSwimmer = self.currentSwimmer.get();\n                var appInfo = DB.App.findOne();\n\n                if (!appInfo) return;\n                if (!currentSwimmer) return;\n\n                Tracker.autorun(function () {\n\n                    var nowClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status: 'normal', //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionNow\n                    }).fetch();\n\n                    //self.nowClasses.set(nowClasses)\n\n                    if (nowClasses.length > 0) {\n                        self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level));\n                    } else {\n                        self.currentLevel.set(currentSwimmer.level);\n                    }\n                });\n            });\n\n            //days depend on level of swimmer\n            Tracker.autorun(function (compution) {\n\n                console.log(self.currentLevel.dep._dependentsById);\n\n                console.log('autorun get currentLevel');\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var level = self.currentLevel.get();\n                console.log('autorun get currentLevel', level, App.info.sessionRegister);\n\n                if (!level) return; // wait for level\n\n                var classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                console.log(level, App.info.sessionRegister, classes);\n\n                //debugger\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                var days = classes.map(function (v, n) {\n                    return { text: App.Config.week[v.day], value: v.day };\n                });\n                days.sort(function (a, b) {\n                    return a.value - b.value;\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption);\n\n                self.avaiableDays.set(days);\n\n                //重置day\n                //self.currentDay.set(days[0].value)\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var currentDay = self.currentDay.get();\n\n                var level;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                });\n\n                var classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                var times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    };\n                });\n                times.sort(function (a, b) {\n                    return a.value - b.value;\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption);\n\n                self.avaiableTimes.set(times);\n\n                //重置time\n                //self.currentTime.set(times[0].value)\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var time = self.currentTime.get();\n\n                var level = undefined,\n                    day = undefined;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                    day = self.currentDay.get();\n                });\n\n                var theClass = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                if (theClass.length > 1) {\n                    console.error('Multi class match when select class ');\n                }\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0]);\n\n                    console.log('selected class', theClass[0]);\n                }\n            });\n        });\n    }());\n}","ast":null,"map":{"version":3,"sources":["/client/app/class.register/SelectClassEditPage.store.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/SelectClassEditPage.store.jsx.map","sourcesContent":["/**\n * Created on 10/11/15.\n */\n\n{\n    //单体 在多个地方使用或在meteordata中被触发  仅初始化一次\n    //let _storeInstance=null;\n\n    Dependency.add('classRegister.CRSelectClassEditPage.store', new function () {\n\n        //if(_storeInstance) return _storeInstance;\n        //console.log('run Dependency CRSelectClassEditPage')\n        //_storeInstance = this;\n\n        var self = this;\n\n        ////props///\n\n        self.props = new ReactiveVar();\n        self.cart = new ReactiveVar();\n\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({accountId: Meteor.userId()})\n        }\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar()\n        //当前的level\n        self.currentLevel = new ReactiveVar()\n        //选中的day\n        self.currentDay = new ReactiveVar()\n        self.currentTime = new ReactiveVar()\n        self.currentClass = new ReactiveVar()\n        //当前的步骤\n        self.currentStep = new ReactiveVar(1)\n\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([])\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([])\n\n\n        //Session.set('CART_ID')\n\n\n        /*\n         * 一次流程选择的class信息  3步\n         * 使用Immutable库进行对象修改\n         * {\n         *  swimmer:\n         *  class1:{classId, swimmerId}\n         *  class2:\n         *  class3:\n         * }\n         * */\n        self.selectedClasses = new ReactiveVar(Immutable.Map())\n\n\n        var undefinedSelectValueOption = {text:'', value: ''};\n        var undefinedSelectValue = '';\n\n        //暂存购物车ID 后端会验证其有效性\n\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue)\n            self.currentTime.set(undefinedSelectValue)\n        }\n\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"CRSelectClassEditPage_PROPS_UPDATE\"://get props\n                {\n                    console.log('CRSelectClassEditPage_PROPS_UPDATE',payload.props)\n\n                    self.props.set(payload.props)\n\n                    self.currentDay.set()\n                    self.currentTime.set()\n                    self.currentClass.set()\n\n\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_DAY_CHANGE\"://选择day\n                {\n                    console.log('day change ', payload.day)\n                    self.currentDay.set(payload.day)\n                    self.currentTime.set()\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_TIME_CHANGE\"://选择time  确定一个class\n                {\n                    debugger\n                    self.currentTime.set(payload.time)\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_CLASS_SELECT\"://select确定\n                {\n                    debugger\n\n                    var props = self.props.get();\n                    var currentClass = self.currentClass.get()\n                    /*\n                     * cartId  确定购物车\n                     * swimmerId classId   确定一个item\n                     * preferenceNum   确定preference  1，2，3\n                     * toClassData     新的class数据  classId？\n                     *\n                     * */\n                    Meteor.call('change_preference_in_cart', {\n                        cartId:props.cartId,\n                        swimmerId: props.swimmerId,\n                        classId: props.classId,\n                        preferenceNum:props.preferenceNum,\n\n                        classData:currentClass\n                    }, function (err, result) {\n                        debugger\n                        if (err) {\n                            console.error(err)\n                            alert(err.error)\n                            return; //todo  prompt\n                        }\n\n                        //通知SelectClassPage.store 更新数据\n                        //Dispatcher.dispatch({\n                        //    actionType: 'CRSelectClassPage_SelectedClasses_CHANGE',\n                        //    preferenceNum:props.preferenceNum,\n                        //    classData:currentClass\n                        //});\n\n\n                        //回到上一页\n                        window.history.back();\n\n                    })\n\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_ComponentWillMount\":\n                {\n                    //清空上一轮的选择\n\n                    self.currentDay.set(undefinedSelectValue)\n                    self.currentTime.set(undefinedSelectValue)\n                    self.currentClass.set(null)\n                    self.currentStep.set(1)\n                    //self.avaiableDays //依赖于 当前的currentLevel\n                    //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                    self.selectedClasses.set(Immutable.Map())\n\n                    break;\n                }\n\n            }\n        });\n\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            //根据组件的props 初始化数据\n            Tracker.autorun(function (compution) {\n\n                debugger\n\n                var props = self.props.get();\n                console.log(self.props.dep._dependentsById)\n\n                if(!props) return; //wait for props\n\n                console.log('autorun props', props)\n\n                //var cartId= props.cartId;\n\n                //todo classId swimmerId 条件\n                var cart\n                if(props.cartId){\n                    cart= DB.ShoppingCart.findOne({\n                        _id:props.cartId\n                    })\n                }else{\n                    cart= DB.ShoppingCart.findOne({\n                        status:'active'\n                    })\n                }\n\n\n                var currentSwimmer= DB.Swimmers.findOne({\n                    _id:props.swimmerId\n                })\n\n                if(cart){\n                    self.cart.set(cart)\n                    console.log(cart)\n\n                }\n\n\n                if(currentSwimmer){\n                    self.currentSwimmer.set(currentSwimmer)\n                    //self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n                    //console.log('set currentLevel',currentSwimmer.level)\n\n                }\n\n\n            })\n\n\n\n            //计算level\n            Tracker.autorun(function () {\n                var currentSwimmer = self.currentSwimmer.get()\n                var appInfo = DB.App.findOne()\n\n                if(!appInfo) return;\n                if(!currentSwimmer) return;\n\n                Tracker.autorun(function () {\n\n                    var nowClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status:'normal',  //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionNow\n                    }).fetch();\n\n                    //self.nowClasses.set(nowClasses)\n\n                    if(nowClasses.length>0){\n                        self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n\n                    }else{\n                        self.currentLevel.set(currentSwimmer.level)\n                    }\n\n                })\n\n            })\n\n\n            //days depend on level of swimmer\n            Tracker.autorun(function (compution) {\n\n                console.log(self.currentLevel.dep._dependentsById)\n\n\n                console.log('autorun get currentLevel')\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n\n\n                var level = self.currentLevel.get();\n                console.log('autorun get currentLevel', level, App.info.sessionRegister)\n\n                if(!level) return;  // wait for level\n\n\n                let classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                console.log(level, App.info.sessionRegister, classes)\n\n                //debugger\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                let days = classes.map(function (v, n) {\n                    return {text: App.Config.week[v.day], value: v.day}\n                })\n                days.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption)\n\n                self.avaiableDays.set(days)\n\n\n                //重置day\n                //self.currentDay.set(days[0].value)\n\n\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n\n                var currentDay = self.currentDay.get();\n\n                var level\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                });\n\n                let classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                let times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    }\n                })\n                times.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption)\n\n                self.avaiableTimes.set(times)\n\n                //重置time\n                //self.currentTime.set(times[0].value)\n\n\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n                let time = self.currentTime.get()\n\n\n                let level, day;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                    day = self.currentDay.get()\n                });\n\n\n                let theClass = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                if (theClass.length > 1) {\n                    console.error('Multi class match when select class ')\n                }\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0])\n\n                    console.log('selected class', theClass[0])\n                }\n\n\n            });\n\n\n        })\n\n\n    });\n}\n\n"]},"hash":"502e661882a46efc656cf72a5270c1854cd024f0"}
