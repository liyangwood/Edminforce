{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"\n// class Chart extends React.Component {\nRC.Chart = React.createClass({\n  propTypes: {\n    type: React.PropTypes.string.isRequired,\n    data: React.PropTypes.object.isRequired,\n    options: React.PropTypes.object,\n    responsiveOptions: React.PropTypes.array\n  },\n\n  displayName: 'Chartist',\n\n  componentWillReceiveProps: function (newProps) {\n    this.updateChart(newProps);\n  },\n\n  componentWillUnmount: function () {\n    if (this.chartist) {\n      try {\n        this.chartist.detach();\n      } catch (err) {\n        throw new Error('Internal chartist error', err);\n      }\n    }\n  },\n\n  componentDidMount: function () {\n    this.updateChart(this.props);\n  },\n\n  updateChart: function (config) {\n    var type = config.type;\n    var data = config.data;\n\n    var options = config.options || {};\n    var responsiveOptions = config.responsiveOptions || [];\n    var event = undefined;\n\n    if (this.chartist) {\n      this.chartist.update(data, options, responsiveOptions);\n    } else {\n      this.chartist = new Chartist[type](React.findDOMNode(this), data, options, responsiveOptions);\n\n      if (config.listener) {\n        for (event in babelHelpers.sanitizeForInObject(config.listener)) {\n          if (config.listener.hasOwnProperty(event)) this.chartist.on(event, config.listener[event]);\n        }\n      }\n    }\n\n    return this.chartist;\n  },\n\n  render: function () {\n    return React.DOM.div({ className: 'ct-chart' });\n  }\n});","ast":null,"map":{"version":3,"sources":["/RC/chart.jsx"],"names":[],"mappings":";;AAEA,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC;AAC3B,WAAS,EAAE;AACT,QAAI,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;AACvC,QAAI,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;AACvC,WAAO,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC/B,qBAAiB,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK;GACzC;;AAED,aAAW,EAAE,UAAU;;AAEvB,2BAAyB,EAAA,UAAC,QAAQ,EAAE;AAClC,QAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;GAC5B;;AAED,sBAAoB,EAAA,YAAG;AACrB,QAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,UAAI;AACF,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;OACxB,CAAC,OAAO,GAAG,EAAE;AACZ,cAAM,IAAI,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;OACjD;KACF;GACF;;AAED,mBAAiB,EAAA,YAAG;AAClB,QAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC9B;;AAED,aAAW,EAAA,UAAC,MAAM,EAAE;QACZ,IAAI,GAAW,MAAM,CAArB,IAAI;QAAE,IAAI,GAAK,MAAM,CAAf,IAAI;;AAChB,QAAI,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACnC,QAAI,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;AACvD,QAAI,KAAK,YAAA,CAAC;;AAEV,QAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,UAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;KACxD,MAAM;AACL,UAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;;AAE9F,UAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,aAAK,KAAK,qCAAI,MAAM,CAAC,QAAQ,GAAE;AAC7B,cAAI,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;SAClD;OACF;KAEF;;AAED,WAAO,IAAI,CAAC,QAAQ,CAAC;GACtB;;AAED,QAAM,EAAA,YAAG;AACP,WAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC,CAAA;GAC9C;CACF,CAAC,CAAA","file":"/RC/chart.jsx.map","sourcesContent":["\n// class Chart extends React.Component {\nRC.Chart = React.createClass({\n  propTypes: {\n    type: React.PropTypes.string.isRequired,\n    data: React.PropTypes.object.isRequired,\n    options: React.PropTypes.object,\n    responsiveOptions: React.PropTypes.array\n  },\n\n  displayName: 'Chartist',\n\n  componentWillReceiveProps(newProps) {\n    this.updateChart(newProps);\n  },\n\n  componentWillUnmount() {\n    if (this.chartist) {\n      try {\n        this.chartist.detach();\n      } catch (err) {\n        throw new Error('Internal chartist error', err);\n      }\n    }\n  },\n\n  componentDidMount() {\n    this.updateChart(this.props);\n  },\n\n  updateChart(config) {\n    let { type, data } = config;\n    let options = config.options || {};\n    let responsiveOptions = config.responsiveOptions || [];\n    let event;\n\n    if (this.chartist) {\n      this.chartist.update(data, options, responsiveOptions);\n    } else {\n      this.chartist = new Chartist[type](React.findDOMNode(this), data, options, responsiveOptions);\n\n      if (config.listener) {\n        for (event in config.listener) {\n          if (config.listener.hasOwnProperty(event))\n            this.chartist.on(event, config.listener[event])\n        }\n      }\n\n    }\n\n    return this.chartist;\n  },\n\n  render() {\n    return React.DOM.div({className: 'ct-chart'})\n  }\n})\n"]},"hash":"a8e2d2a086b58c4aa012a24fa23195c0d3261cc4"}
