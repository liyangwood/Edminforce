{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Created on 9/19/15.\n */\n\n//@@@@@@@@@ TODO this file is not used now and will be deleted later.\n//All the logic have been moved to server side as meteor.methods\n\n//ShoppingCart  购物车操作函数\n//不是一个store 所以不接受消息，可暴露set函数。 在需要的地方直接引用和调用\n//todo 购物车的所有操作全部通过 Meteor.call 完成？ 检查哪些数据避免暴露到前端\n\n/******************购物车数据格式******************\n\n let shoppingCart = {\n status: 'active',\n accountId: 'account1',\n sessionId: 'testSession2',\n items: [item]\n }\n\n //swimmer._id  和 class1._id 确定一个item\n //class1会占用class名额\n //class2 class3为用户的备选class\n //这里不使用id是为了减少账单信息查询 也可以保存用户购物时各项目的信息\n item＝{\n    swimmer:object,\n    class1:object,\n    class2:object,\n    class3:object\n }\n\n****************************************/\n\n{\n    //用于获取用户当前的选择信息\n    var selectClassStore = undefined;\n    Dependency.autorun(function () {\n        selectClassStore = Dependency.get('classRegister.SelectClassPage.store');\n    });\n\n    Dependency.add('classRegister.ShoppingCart.model', new function () {\n\n        /////////public ///////////\n        function getShoppingCartId() {\n            //active\n            var cart = DB.ShoppingCart.findOne();\n            debugger;\n            return cart && cart._id;\n        }\n\n        //添加选课纪录 step1\n        function addClassRegister(cartId, item) {\n\n            DB.ClassesRegister.insert({\n                sessionId: App.info.sessionRegister,\n                swimmerId: item.swimmer._id,\n                classId: item.class1._id,\n                carted: {\n                    shoppingCardId: cartId\n                }\n\n            }, function (err, _id) {\n                err && console.error(err);\n\n                //self.currentStep.set(2)\n                //self.currentDay.set({value:false}) //重置时间\n            });\n        }\n\n        //{swimmerId ,classId}\n        function addShoppingItem(item) {\n            //是否重复逻辑\n            //push\n\n            var cartId = getShoppingCartId();\n            if (cartId) {\n\n                //todo !!!class是否重复的判断逻辑  一个swimmer对特定class只能选一个\n                //改用meteor.call 后台判断应更方便\n                DB.ShoppingCart.update({\n                    '_id': cartId\n                }, {\n                    '$push': {\n                        'items': item\n                    }\n                }, function (err, _id) {\n                    err && console.error(err);\n\n                    //添加选课纪录\n                    if (!err) addClassRegister(cartId, item);\n                });\n            } else {\n\n                var shoppingCart = {\n                    status: 'active',\n                    accountId: Meteor.userId(),\n                    sessionId: App.info.sessionRegister,\n                    items: [item]\n                };\n\n                //创建购物车\n                DB.ShoppingCart.insert(shoppingCart, function (err, cartId) {\n                    if (err) {\n                        console.error(err);\n                        return;\n                    }\n                    //添加选课纪录\n                    if (!err) addClassRegister(cartId, item);\n                });\n            }\n        }\n\n        /*******\n          preferenceNum: {Number}\n         paramObj:{\n            'swimmer': swimmer,\n             'class1':  class1,\n             data: currentClass\n         }\n         **/\n        function addClassPreference(preferenceNum, paramObj, callback) {\n            var cartId = getShoppingCartId();\n\n            paramObj.preferenceNum = preferenceNum;\n\n            if (cartId) {\n                paramObj.cartId = cartId;\n\n                Meteor.call('upsertClassPreference', paramObj, function (error, result) {\n                    callback && callback(error, result);\n                });\n            } else {\n                callback && callback({ info: 'there is no valid cart' });\n            }\n        }\n\n        /////////private ///////////\n\n        //interface\n        return {\n            getShoppingCartId: getShoppingCartId,\n            addClassRegister: addClassRegister,\n            addShoppingItem: addShoppingItem,\n            addClassPreference: addClassPreference\n        };\n    }());\n}","ast":null,"map":{"version":3,"sources":["/client/app/class.register/ShoppingCart.model.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/ShoppingCart.model.jsx.map","sourcesContent":["/**\n * Created on 9/19/15.\n */\n\n//@@@@@@@@@ TODO this file is not used now and will be deleted later.\n//All the logic have been moved to server side as meteor.methods\n\n//ShoppingCart  购物车操作函数\n//不是一个store 所以不接受消息，可暴露set函数。 在需要的地方直接引用和调用\n//todo 购物车的所有操作全部通过 Meteor.call 完成？ 检查哪些数据避免暴露到前端\n\n/******************购物车数据格式******************\n\n let shoppingCart = {\n status: 'active',\n accountId: 'account1',\n sessionId: 'testSession2',\n items: [item]\n }\n\n //swimmer._id  和 class1._id 确定一个item\n //class1会占用class名额\n //class2 class3为用户的备选class\n //这里不使用id是为了减少账单信息查询 也可以保存用户购物时各项目的信息\n item＝{\n    swimmer:object,\n    class1:object,\n    class2:object,\n    class3:object\n }\n\n****************************************/\n\n{\n    //用于获取用户当前的选择信息\n    let selectClassStore;\n    Dependency.autorun(function () {\n        selectClassStore = Dependency.get('classRegister.SelectClassPage.store');\n    });\n\n\n    Dependency.add('classRegister.ShoppingCart.model', new function () {\n\n\n        /////////public ///////////\n        function getShoppingCartId() {\n            //active\n            var cart = DB.ShoppingCart.findOne()\n            debugger\n            return cart && cart._id\n        }\n\n        //添加选课纪录 step1\n        function addClassRegister(cartId, item) {\n\n            DB.ClassesRegister.insert({\n                sessionId: App.info.sessionRegister,\n                swimmerId: item.swimmer._id,\n                classId: item.class1._id,\n                carted: {\n                    shoppingCardId: cartId\n                }\n\n            }, function (err, _id) {\n                err && console.error(err)\n\n                //self.currentStep.set(2)\n                //self.currentDay.set({value:false}) //重置时间\n            })\n        }\n\n        //{swimmerId ,classId}\n        function addShoppingItem(item) {\n            //是否重复逻辑\n            //push\n\n            var cartId = getShoppingCartId()\n            if (cartId) {\n\n                //todo !!!class是否重复的判断逻辑  一个swimmer对特定class只能选一个\n                //改用meteor.call 后台判断应更方便\n                DB.ShoppingCart.update({\n                        '_id': cartId\n                    }, {\n                        '$push': {\n                            'items': item\n                        }\n                    }\n                    , function (err, _id) {\n                        err && console.error(err)\n\n                        //添加选课纪录\n                        if(!err) addClassRegister(cartId, item)\n                    })\n\n            } else {\n\n                let shoppingCart = {\n                    status: 'active',\n                    accountId: Meteor.userId(),\n                    sessionId: App.info.sessionRegister,\n                    items: [item]\n                }\n\n                //创建购物车\n                DB.ShoppingCart.insert(shoppingCart, function (err, cartId) {\n                    if (err) {\n                        console.error(err)\n                        return\n                    }\n                    //添加选课纪录\n                    if(!err) addClassRegister(cartId, item)\n                })\n            }\n\n        }\n\n        /*******\n\n         preferenceNum: {Number}\n         paramObj:{\n            'swimmer': swimmer,\n             'class1':  class1,\n             data: currentClass\n         }\n         **/\n        function addClassPreference(preferenceNum, paramObj,callback) {\n            var cartId = getShoppingCartId()\n\n            paramObj.preferenceNum = preferenceNum\n\n            if (cartId) {\n                paramObj.cartId = cartId;\n\n                Meteor.call(\n                    'upsertClassPreference',\n                    paramObj,\n                    function (error, result) {\n                        callback && callback(error, result)\n                    })\n            } else {\n                callback && callback({info:'there is no valid cart'})\n            }\n        }\n\n\n        /////////private ///////////\n\n\n        //interface\n        return {\n            getShoppingCartId: getShoppingCartId,\n            addClassRegister: addClassRegister,\n            addShoppingItem: addShoppingItem,\n            addClassPreference: addClassPreference\n        }\n\n\n    })\n\n\n}\n\n"]},"hash":"1299d4449f614469b8aded23e55f59eaf5022d9f"}
