{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["extends"]},"ignored":false,"code":"/*\nRC.List = React.createClass({\n  getInitialState(){\n    return {\n      selected: null\n    }\n  },\n  getTheme(name){\n    let enableClick = _.isUndefined(this.props.enableClick) ? true : this.props.enableClick\n    let theme = _.contains([\"regular\",\"nav-list\",\"nav-list dark\"], name)\n      ? name : \"regular\"\n    return theme+\" \"+(this.props.className || \"\")+(enableClick ? \" click-enabled\" : \"\")\n  },\n  setSelectedState(n){\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick)\n      this.setState({selected: n})\n  },\n  render() {\n\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null\n\n    let self = this\n    let curState = this.state.selected\n    let enableClick = this.props.enableClick || true\n\n    return <ul className={\"rc-list \"+this.getTheme(this.props.theme)}>\n      {\n      this.props.list.map(function(item,n){\n\n        let itemTitle = null\n        let itemSubtitle = null\n\n        let cur = null\n        let avatar = null\n        let sub = null\n\n        let date = fw.getDateFromProps(item.date, item.dateFormat)\n\n        switch(item.type){\n          case \"title\":\n            cur = \"type-listTitle sub \"+(item.className || \"\")\n            itemTitle = item.label\n          break\n          default:\n            cur = \"transition listItem\"+(item.avatar || item.uiClass ? \" with-icon \" : \" \")+(n==curState ? \"cur \" : \"\")+(item.onClick || item.href || enableClick ? \"cursor \" : \"\")+(item.className || \"\")\n            avatar = <RC.Avatar src={item.avatar} theme=\"regular\" uiClass={item.uiClass} uiSize={item.uiSize>=0 ? item.uiSize : 1} uiColor={item.uiColor || \"white\"} />\n\n            let itemTitle = item.title ? <h4 className=\"textTitle ellipsis\">{item.title}</h4> : null\n            let itemSubtitle = item.subtitle || item.label\n              ? <p className=\"subtitle smaller ellipsis\">{item.label ? <strong className=\"label inline-block\">{item.label}</strong> : null}{item.subtitle}</p>\n              : null\n\n            sub = item.date ? <strong className=\"date sub\">{date}</strong> : null\n        }\n\n        return <li className={cur} key={n} onClick={item.onClick}>\n          {\n            item.href\n            ? <a href={item.href} onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</a>\n            : <span onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</span>\n          }\n        </li>\n      })\n      }\n    </ul>\n  }\n})\n*/\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n\nvar themes = [\"inset\"];\n\nRC.List = React.createClass({\n  displayName: \"List\",\n\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"list\",\n  themes: themes,\n  propTypes: {\n    list: React.PropTypes.array,\n\n    theme: React.PropTypes.string,\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    style: React.PropTypes.object\n  },\n  getInitialState: function () {\n    return {\n      selected: null\n    };\n  },\n  setSelectedState: function (n) {\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick) this.setState({ selected: n });\n  },\n  render: function () {\n\n    var list = !_.isArray(this.props.list) || !this.props.list.length ? [] : this.props.list;\n    var self = this;\n    var curState = this.state.selected;\n    var enableClick = this.props.enableClick || true;\n\n    return React.createElement(\n      \"ul\",\n      { className: this.getTheme() },\n      list.map(function (item, n) {\n        var listProps = _.omit(item, [\"value\"]);\n        return React.createElement(\n          RC.Item,\n          babelHelpers._extends({}, listProps, { tagName: listProps.tagName || \"li\", key: n }),\n          item.value\n        );\n      }),\n      this.props.children\n    );\n  }\n});\n\nif (h.nk(Meteor.settings, \"public.env\") != \"live\") RC.List.Help = {\n  Type: \"Canvas\",\n  Themes: themes,\n  PropTypes: {\n    list: \"Array\"\n  },\n  Description: \"Similar to RC.Card, this is another flexible canvas component.\",\n  Example: \"/List/Index\"\n};\n\n/*\n        return <li className={cur} key={n} onClick={item.onClick}>\n          {\n            item.href\n            ? <a href={item.href} onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</a>\n            : <span onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</span>\n          }\n        </li>\n*/","ast":null,"map":{"version":3,"sources":["/RC/list/list.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA,IAAI,MAAM,GAAG,CAAC,OAAO,CAAC,CAAA;;AAEtB,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;;;AAC1B,QAAM,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;AACzB,YAAU,EAAE,MAAM;AAClB,QAAM,EAAE,MAAM;AACd,WAAS,EAAE;AACT,QAAI,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK;;AAE3B,SAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC7B,MAAE,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC1B,aAAS,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AACjC,SAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;GAC9B;AACD,iBAAe,EAAA,YAAE;AACf,WAAO;AACL,cAAQ,EAAE,IAAI;KACf,CAAA;GACF;AACD,kBAAgB,EAAA,UAAC,CAAC,EAAC;AACjB,QAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EACjE,IAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAC,CAAC,CAAA;GAC/B;AACD,QAAM,EAAA,YAAG;;AAEP,QAAI,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAC7D,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;AACxB,QAAI,IAAI,GAAG,IAAI,CAAA;AACf,QAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA;AAClC,QAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,CAAA;;AAEhD,WAAO;;QAAI,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,AAAC;MAEpC,IAAI,CAAC,GAAG,CAAC,UAAS,IAAI,EAAC,CAAC,EAAC;AACvB,YAAI,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;AACvC,eAAO;AAAC,YAAE,CAAC,IAAI;oCAAM,SAAS,IAAE,OAAO,EAAE,SAAS,CAAC,OAAO,IAAI,IAAI,AAAC,EAAC,GAAG,EAAE,CAAC,AAAC;UACxE,IAAI,CAAC,KAAK;SACH,CAAA;OACX,CAAC;MAED,IAAI,CAAC,KAAK,CAAC,QAAQ;KACjB,CAAA;GACN;CACF,CAAC,CAAA;;AAEF,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAE,MAAM,EAC7C,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG;AACb,MAAI,EAAE,QAAQ;AACd,QAAM,EAAE,MAAM;AACd,WAAS,EAAE;AACT,QAAI,EAAE,OAAO;GACd;AACD,aAAW,EAAE,gEAAgE;AAC7E,SAAO,EAAE,aAAa;CACvB,CAAA","file":"/RC/list/list.jsx.map","sourcesContent":["/*\nRC.List = React.createClass({\n  getInitialState(){\n    return {\n      selected: null\n    }\n  },\n  getTheme(name){\n    let enableClick = _.isUndefined(this.props.enableClick) ? true : this.props.enableClick\n    let theme = _.contains([\"regular\",\"nav-list\",\"nav-list dark\"], name)\n      ? name : \"regular\"\n    return theme+\" \"+(this.props.className || \"\")+(enableClick ? \" click-enabled\" : \"\")\n  },\n  setSelectedState(n){\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick)\n      this.setState({selected: n})\n  },\n  render() {\n\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null\n\n    let self = this\n    let curState = this.state.selected\n    let enableClick = this.props.enableClick || true\n\n    return <ul className={\"rc-list \"+this.getTheme(this.props.theme)}>\n      {\n      this.props.list.map(function(item,n){\n\n        let itemTitle = null\n        let itemSubtitle = null\n\n        let cur = null\n        let avatar = null\n        let sub = null\n\n        let date = fw.getDateFromProps(item.date, item.dateFormat)\n\n        switch(item.type){\n          case \"title\":\n            cur = \"type-listTitle sub \"+(item.className || \"\")\n            itemTitle = item.label\n          break\n          default:\n            cur = \"transition listItem\"+(item.avatar || item.uiClass ? \" with-icon \" : \" \")+(n==curState ? \"cur \" : \"\")+(item.onClick || item.href || enableClick ? \"cursor \" : \"\")+(item.className || \"\")\n            avatar = <RC.Avatar src={item.avatar} theme=\"regular\" uiClass={item.uiClass} uiSize={item.uiSize>=0 ? item.uiSize : 1} uiColor={item.uiColor || \"white\"} />\n\n            let itemTitle = item.title ? <h4 className=\"textTitle ellipsis\">{item.title}</h4> : null\n            let itemSubtitle = item.subtitle || item.label\n              ? <p className=\"subtitle smaller ellipsis\">{item.label ? <strong className=\"label inline-block\">{item.label}</strong> : null}{item.subtitle}</p>\n              : null\n\n            sub = item.date ? <strong className=\"date sub\">{date}</strong> : null\n        }\n\n        return <li className={cur} key={n} onClick={item.onClick}>\n          {\n            item.href\n            ? <a href={item.href} onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</a>\n            : <span onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</span>\n          }\n        </li>\n      })\n      }\n    </ul>\n  }\n})\n*/\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n// @@@@@@@\n\nlet themes = [\"inset\"]\n\nRC.List = React.createClass({\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"list\",\n  themes: themes,\n  propTypes: {\n    list: React.PropTypes.array,\n\n    theme: React.PropTypes.string,\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    style: React.PropTypes.object,\n  },\n  getInitialState(){\n    return {\n      selected: null\n    }\n  },\n  setSelectedState(n){\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick)\n      this.setState({selected: n})\n  },\n  render() {\n\n    let list = !_.isArray(this.props.list) || !this.props.list.length\n      ? [] : this.props.list\n    let self = this\n    let curState = this.state.selected\n    let enableClick = this.props.enableClick || true\n\n    return <ul className={this.getTheme()}>\n      {\n      list.map(function(item,n){\n        let listProps = _.omit(item, [\"value\"])\n        return <RC.Item {... listProps} tagName={listProps.tagName || \"li\"} key={n}>\n          {item.value}\n        </RC.Item>\n      })\n      }\n      {this.props.children}\n    </ul>\n  }\n})\n\nif (h.nk(Meteor.settings, \"public.env\")!=\"live\")\n  RC.List.Help = {\n    Type: \"Canvas\",\n    Themes: themes,\n    PropTypes: {\n      list: \"Array\"\n    },\n    Description: \"Similar to RC.Card, this is another flexible canvas component.\",\n    Example: \"/List/Index\"\n  }\n\n\n/*\n        return <li className={cur} key={n} onClick={item.onClick}>\n          {\n            item.href\n            ? <a href={item.href} onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</a>\n            : <span onClick={self.setSelectedState.bind(null, n)}>{sub}{avatar}{itemTitle}{itemSubtitle}</span>\n          }\n        </li>\n*/\n"]},"hash":"50190088265755656f9fce81874e7633678b2441"}
