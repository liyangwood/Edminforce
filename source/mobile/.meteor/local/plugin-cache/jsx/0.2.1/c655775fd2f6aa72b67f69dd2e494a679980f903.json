{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Created on 9/16/15.\n */\n\n{\n    (function () {\n\n        var PageStore = undefined;\n        Dependency.autorun(function () {\n            PageStore = Dependency.get('classRegister.AddWaitingList.store');\n        });\n\n        Cal.CRAddWaitingListPage = React.createClass({\n            displayName: \"CRAddWaitingListPage\",\n\n            mixins: [ReactMeteorData],\n            getMeteorData: function () {\n\n                Meteor.subscribe(\"swimmersByAccountId\", Meteor.userId());\n                Meteor.subscribe(\"classes\");\n\n                var data = {\n                    account: Meteor.users.find().fetch(),\n\n                    //swimmers: PageStore.getSwimmers().fetch(),\n\n                    currentLevel: PageStore.currentLevel.get(), //next level\n\n                    currentSwimmer: PageStore.currentSwimmer.get(),\n\n                    //should wait for currentSwimmer\n                    avaiableDays: PageStore.avaiableDays.get(),\n                    avaiableTimes: PageStore.avaiableTimes.get(),\n                    currentDay: PageStore.currentDay.get(),\n                    currentTime: PageStore.currentTime.get()\n                };\n\n                return data;\n            },\n\n            swimmerChange: function (e) {\n                var value = this.refs.swimmer.getValue();\n\n                var swimmer = _.find(this.data.swimmers, function (v, n) {\n                    return v._id == value;\n                });\n\n                Dispatcher.dispatch({\n                    actionType: \"CRAddWaitingListPage_SWIMMER_CHANGE\",\n                    swimmer: swimmer\n                });\n            },\n            dayChange: function (e) {\n                var value = this.refs.day.getValue();\n                value = parseInt(value, 10);\n\n                Dispatcher.dispatch({\n                    actionType: \"CRAddWaitingListPage_DAY_CHANGE\",\n                    day: value\n                });\n            },\n            timeChange: function (e) {\n                var value = this.refs.time.getValue();\n                value = parseInt(value, 10);\n                Dispatcher.dispatch({\n                    actionType: \"CRAddWaitingListPage_TIME_CHANGE\",\n                    time: value\n                });\n            },\n\n            formSubmit: function (e) {\n                e.preventDefault();\n\n                var formData = this.refs.myForm.getFormData();\n\n                //todo validation info in ui\n                if (!this.data.currentSwimmer || !this.data.currentDay || !this.data.currentTime) {\n\n                    alert('please select a class');\n                    return;\n                }\n\n                Dispatcher.dispatch({\n                    actionType: \"CRAddWaitingListPage_CLASS_SELECT\",\n                    selectedClass: formData\n                });\n            },\n            componentWillMount: function () {\n                ///PASS  props value to store\n                Dispatcher.dispatch({\n                    actionType: 'CRAddWaitingListPage_PROPS_INIT',\n                    props: this.props\n                });\n            },\n\n            render: function () {\n\n                //let swimmers = this.data.swimmers.map(function (v, i) {\n                //    return {text: v['name'], value: v._id}\n                //})\n\n                var currentSwimmerValue = this.data.currentSwimmer && { value: this.data.currentSwimmer._id,\n                    text: this.data.currentSwimmer.name };\n\n                return React.createElement(\n                    \"div\",\n                    null,\n                    React.createElement(\n                        RC.Card,\n                        { key: Math.random(), className: \"padding\" },\n                        React.createElement(\n                            \"p\",\n                            null,\n                            \"Pick a time and you will be on our waiting list\"\n                        )\n                    ),\n                    React.createElement(\n                        RC.Form,\n                        { ref: \"myForm\", key: Math.random(), onSubmit: this.formSubmit },\n                        React.createElement(\n                            RC.List,\n                            { theme: \"inset\" },\n                            React.createElement(\n                                RC.Item,\n                                { uiColor: \"brand1\" },\n                                \"Swimmer: \",\n                                this.data.currentSwimmer && this.data.currentSwimmer.name\n                            ),\n                            React.createElement(\n                                RC.Item,\n                                { uiColor: \"brand1\" },\n                                \"Level: \",\n                                this.data.currentLevel\n                            ),\n                            React.createElement(RC.Select2, {\n                                ref: \"day\",\n                                options: this.data.avaiableDays,\n                                value: this.data.currentDay,\n                                name: \"day\",\n                                changeHandler: this.dayChange,\n                                label: \"Day\"\n                            }),\n                            React.createElement(RC.Select2, {\n                                ref: \"time\",\n                                options: this.data.avaiableTimes,\n                                value: this.data.currentTime,\n                                name: \"time\",\n                                changeHandler: this.timeChange,\n                                label: \"Time\"\n                            }),\n                            React.createElement(\n                                RC.Button,\n                                { name: \"button\", type: \"submit\",\n                                    onClick: this.formSubmit,\n                                    theme: \"full\", buttonColor: \"brand\" },\n                                \"Add Waiting List\"\n                            )\n                        )\n                    )\n                );\n            }\n        });\n    })();\n}","ast":null,"map":{"version":3,"sources":["/client/app/class.register/addWaitingList/AddWaitingListPage.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/addWaitingList/AddWaitingListPage.jsx.map","sourcesContent":["/**\n * Created on 9/16/15.\n */\n\n{\n\n\n    let PageStore;\n    Dependency.autorun(function () {\n        PageStore = Dependency.get('classRegister.AddWaitingList.store');\n    });\n\n\n    Cal.CRAddWaitingListPage = React.createClass({\n\n        mixins: [ReactMeteorData],\n        getMeteorData() {\n\n            Meteor.subscribe(\"swimmersByAccountId\", Meteor.userId());\n            Meteor.subscribe(\"classes\");\n\n\n            var data = {\n                account: Meteor.users.find().fetch(),\n\n                //swimmers: PageStore.getSwimmers().fetch(),\n\n                currentLevel:PageStore.currentLevel.get(), //next level\n\n\n                currentSwimmer: PageStore.currentSwimmer.get(),\n\n                //should wait for currentSwimmer\n                avaiableDays: PageStore.avaiableDays.get(),\n                avaiableTimes: PageStore.avaiableTimes.get(),\n                currentDay: PageStore.currentDay.get(),\n                currentTime: PageStore.currentTime.get(),\n            }\n\n            return data\n        },\n\n        swimmerChange(e){\n            var value = this.refs.swimmer.getValue()\n\n            var swimmer = _.find(this.data.swimmers, function (v, n) {\n                return v._id == value;\n            })\n\n            Dispatcher.dispatch({\n                actionType: \"CRAddWaitingListPage_SWIMMER_CHANGE\",\n                swimmer: swimmer\n            });\n\n        },\n        dayChange(e){\n            var value = this.refs.day.getValue()\n            value = parseInt(value, 10)\n\n            Dispatcher.dispatch({\n                actionType: \"CRAddWaitingListPage_DAY_CHANGE\",\n                day: value\n            });\n\n\n        },\n        timeChange(e){\n            var value = this.refs.time.getValue()\n            value = parseInt(value, 10)\n            Dispatcher.dispatch({\n                actionType: \"CRAddWaitingListPage_TIME_CHANGE\",\n                time: value\n            });\n\n        },\n\n        formSubmit (e) {\n            e.preventDefault()\n\n            var formData = this.refs.myForm.getFormData()\n\n\n\n            //todo validation info in ui\n            if (!this.data.currentSwimmer || !this.data.currentDay || !this.data.currentTime) {\n\n                alert('please select a class')\n                return;\n            }\n\n            Dispatcher.dispatch({\n                actionType: \"CRAddWaitingListPage_CLASS_SELECT\",\n                selectedClass: formData\n            });\n\n        },\n        componentWillMount(){\n             ///PASS  props value to store\n            Dispatcher.dispatch({\n                actionType: 'CRAddWaitingListPage_PROPS_INIT',\n                props: this.props\n            });\n\n        },\n\n        render() {\n\n            //let swimmers = this.data.swimmers.map(function (v, i) {\n            //    return {text: v['name'], value: v._id}\n            //})\n\n\n            let currentSwimmerValue = this.data.currentSwimmer\n                && {value:this.data.currentSwimmer._id,\n                    text:this.data.currentSwimmer.name}\n\n\n            return <div>\n\n                <RC.Card key={Math.random()} className=\"padding\">\n\n                    <p>\n                        Pick a time and you will be on our waiting list\n                    </p>\n\n                </RC.Card>\n\n                <RC.Form ref=\"myForm\" key={Math.random()} onSubmit={this.formSubmit}>\n                    <RC.List theme=\"inset\">\n\n\n                        <RC.Item uiColor=\"brand1\">\n                            Swimmer: {this.data.currentSwimmer\n                                        && this.data.currentSwimmer.name}\n                        </RC.Item>\n\n                        <RC.Item uiColor=\"brand1\">\n                            Level: {this.data.currentLevel}\n                        </RC.Item>\n\n                        <RC.Select2\n                            ref=\"day\"\n                            options={this.data.avaiableDays}\n                            value={this.data.currentDay}\n                            name=\"day\"\n                            changeHandler={this.dayChange}\n                            label=\"Day\"\n                            />\n\n                        <RC.Select2\n                            ref=\"time\"\n                            options={this.data.avaiableTimes}\n                            value={this.data.currentTime}\n                            name=\"time\"\n                            changeHandler={this.timeChange}\n                            label=\"Time\"\n                            />\n                        <RC.Button name=\"button\" type=\"submit\"\n                                   onClick={this.formSubmit}\n                                   theme=\"full\" buttonColor=\"brand\">\n                            Add Waiting List\n                        </RC.Button>\n\n\n                    </RC.List>\n                </RC.Form>\n            </div>\n        }\n    })\n\n}\n"]},"hash":"c655775fd2f6aa72b67f69dd2e494a679980f903"}
