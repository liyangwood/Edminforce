{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["extends"]},"ignored":false,"code":"\nvar themes = [\"regular\", \"opacity\", \"flat\"];\nRC.GlobalNav = React.createClass({\n  displayName: \"GlobalNav\",\n\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"\",\n  themes: themes,\n\n  propTypes: {\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    theme: React.PropTypes.string,\n\n    animate: React.PropTypes.bool,\n    isVisible: React.PropTypes.bool,\n    allowLongLabels: React.PropTypes.bool,\n    list: React.PropTypes.array\n  },\n\n  getInitialState: function () {\n    return {\n      selected: null\n    };\n  },\n  clickHandler: function (n, onClick) {\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick) this.setState({ selected: n });\n\n    if (_.isFunction(onClick)) onClick();\n  },\n  render: function () {\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null;\n\n    var self = this;\n    var curState = this.state.selected;\n    var curPath = FlowRouter.current().path;\n\n    _.every(this.props.list, function (link) {\n      var test = link.href == curPath;\n      if (test) curState = null;\n      return !test;\n    });\n\n    var location = _.contains([\"auto\", \"top\", \"bottom\"], this.props.location) ? this.props.location : \"auto\";\n    var isTop = location == \"top\" || location == \"auto\" && h.getPlatform(\"android\"); // This will match Web too\n\n    var classList = [\"global-nav\", \"center\", \"list-length-\" + Math.min(this.props.list.length, 5), isTop ? \"gnav-top\" : \"gnav-bottom\", this.props.animate ? \"animate\" : \"\", this.props.isVisible ? \"isVisible\" : \"isHidden\", this.props.allowLongLabels ? \"\" : \"even\", this.getTheme(), this.props.className || \"\"];\n\n    return React.createElement(\n      \"div\",\n      { className: \"gnav-spacer \" + (isTop && this.props.isVisible ? \"on\" : \"off\") },\n      React.createElement(\n        \"nav\",\n        { className: classList.join(\" \"), id: this.props.id },\n        this.props.list.map(function (item, n) {\n\n          var isCur = n == curState || item.href == curPath;\n          var itemClasses = [\"transition\", \"inline-block\", \"cursor\", \"menuItem\"];\n\n          if (isCur) itemClasses.push(\"cur\");\n          if (item.uiClass) itemClasses.push(\"with-icon\");\n          if (item.label) itemClasses.push(\"with-label\");\n\n          return React.createElement(\n            RC.URL,\n            babelHelpers._extends({}, _.omit(item, [\"className\", \"onClick\"]), { className: itemClasses.join(\" \"), onClick: self.clickHandler.bind(null, n, item.onClick), key: n }),\n            item.uiClass ? React.createElement(RC.uiIcon, { uiClass: isCur && item.uiClassCur ? item.uiClassCur : item.uiClass, uiColor: isCur && item.uiColorCur ? item.uiColorCur : item.uiColor, uiSize: item.uiSize }) : null,\n            item.label ? React.createElement(\n              \"span\",\n              { className: \"fn-label ellipsis\" },\n              item.label\n            ) : null\n          );\n        })\n      )\n    );\n  }\n});\n\nif (h.nk(Meteor.settings, \"public.env\") != \"live\") RC.GlobalNav.Help = {\n  Type: \"Unique/Canvas\",\n  Themes: themes,\n  PropTypes: {\n    animate: \"Boolean\",\n    isVisible: \"Boolean\",\n    allowLongLabels: \"Boolean\",\n    list: \"Array\"\n  },\n  Description: \"Automatic navigation based on the device type (IOS or Android). Top for Android and bottom for IOS.\"\n};","ast":null,"map":{"version":3,"sources":["/RC/globalNav/globalNav.jsx"],"names":[],"mappings":"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","file":"/RC/globalNav/globalNav.jsx.map","sourcesContent":["\nlet themes = [\"regular\", \"opacity\", \"flat\"]\nRC.GlobalNav = React.createClass({\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"\",\n  themes: themes,\n\n  propTypes: {\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    theme: React.PropTypes.string,\n\n    animate: React.PropTypes.bool,\n    isVisible: React.PropTypes.bool,\n    allowLongLabels: React.PropTypes.bool,\n    list: React.PropTypes.array,\n  },\n\n  getInitialState(){\n    return {\n      selected: null,\n    }\n  },\n  clickHandler(n, onClick){\n    if (_.isUndefined(this.props.enableClick) || this.props.enableClick)\n      this.setState({selected: n})\n\n    if (_.isFunction(onClick))\n      onClick()\n  },\n  render() {\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null\n\n    let self = this\n    let curState = this.state.selected\n    let curPath = FlowRouter.current().path\n\n    _.every(this.props.list, function(link){\n      let test = link.href==curPath\n      if (test)\n        curState = null\n      return !test\n    })\n\n    let location = _.contains([\"auto\",\"top\",\"bottom\"], this.props.location) ? this.props.location : \"auto\"\n    let isTop = location==\"top\" || (location==\"auto\" && h.getPlatform(\"android\")) // This will match Web too\n\n    var classList = [\n      \"global-nav\", \"center\", \"list-length-\"+Math.min(this.props.list.length, 5),\n      isTop ? \"gnav-top\" : \"gnav-bottom\",\n      this.props.animate ? \"animate\" : \"\",\n      this.props.isVisible ? \"isVisible\" : \"isHidden\",\n      this.props.allowLongLabels ? \"\" : \"even\",\n      this.getTheme(),\n      this.props.className || \"\",\n    ]\n\n    return <div className={\"gnav-spacer \"+(isTop && this.props.isVisible ? \"on\" : \"off\")}>\n      <nav className={classList.join(\" \")} id={this.props.id}>\n      {\n      this.props.list.map(function(item,n){\n\n        let isCur = n==curState || item.href==curPath\n        var itemClasses = [\"transition\",\"inline-block\",\"cursor\",\"menuItem\"]\n\n        if (isCur) itemClasses.push(\"cur\")\n        if (item.uiClass) itemClasses.push(\"with-icon\")\n        if (item.label) itemClasses.push(\"with-label\")\n\n        return <RC.URL {... _.omit(item,[\"className\",\"onClick\"])} className={itemClasses.join(\" \")} onClick={self.clickHandler.bind(null, n, item.onClick)} key={n}>\n          {item.uiClass ? <RC.uiIcon uiClass={isCur && item.uiClassCur ? item.uiClassCur : item.uiClass} uiColor={isCur && item.uiColorCur ? item.uiColorCur : item.uiColor} uiSize={item.uiSize} /> : null}\n          {item.label ? <span className=\"fn-label ellipsis\">{item.label}</span> : null}\n        </RC.URL>\n      })\n      }\n      </nav>\n    </div>\n  }\n})\n\nif (h.nk(Meteor.settings, \"public.env\")!=\"live\")\n  RC.GlobalNav.Help = {\n    Type: \"Unique/Canvas\",\n    Themes: themes,\n    PropTypes: {\n      animate: \"Boolean\",\n      isVisible: \"Boolean\",\n      allowLongLabels: \"Boolean\",\n      list: \"Array\",\n    },\n    Description: \"Automatic navigation based on the device type (IOS or Android). Top for Android and bottom for IOS.\"\n  }\n"]},"hash":"d63d9304ed1a61cf17848119cb4bd2616e46e158"}
