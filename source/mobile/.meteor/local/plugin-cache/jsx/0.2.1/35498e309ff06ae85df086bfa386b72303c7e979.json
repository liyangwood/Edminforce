{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["extends"]},"ignored":false,"code":"var themes_input = [\"stacked-label\", \"small-label\", \"overlay-light\", \"overlay-dark\"];\nRC.PasswordInput = React.createClass({\n  displayName: \"PasswordInput\",\n\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"item\",\n  themes: themes_input,\n\n  propTypes: {\n    id: React.PropTypes.string,\n    theme: React.PropTypes.string,\n    value: React.PropTypes.string,\n    name: React.PropTypes.string,\n    placeholder: React.PropTypes.string,\n    className: React.PropTypes.string,\n    changeHandler: React.PropTypes.func,\n    label: React.PropTypes.string,\n    labelColor: React.PropTypes.string,\n    error: React.PropTypes.bool,\n    style: React.PropTypes.object,\n    disabled: React.PropTypes.bool\n  },\n  reset: function () {\n    this.setState({\n      value: this.props.value || false,\n      showPWGuide: false\n    });\n  },\n\n  getInitialState: function () {\n    return {\n      showPWGuide: false,\n      value: false\n    };\n  },\n\n  getValue: function () {\n    var val = (this.state.value !== false ? this.state.value : this.props.value) || \"\";\n    return h.ltrim(val);\n  },\n  changeHandler: function (e) {\n    this.setState({ value: e.target.value });\n    if (_.isFunction(this.props.changeHandler)) this.props.changeHandler(e);\n  },\n  showPasswordGuide: function (e) {\n    e.preventDefault();\n    this.setState({ showPWGuide: true });\n  },\n  showQuestionMark: function (e) {\n    e.preventDefault();\n    this.setState({ showPWGuide: false });\n  },\n\n  passwordGuide: function () {\n    //if (this.state.showPWGuide) {\n    //\n    //  return 'Password shoud have at least 8 characters, containing Capital Letters AND Numbers.'\n    //\n    //\n    //} else\n    {\n\n      return React.createElement(\n        \"span\",\n        { className: \"password-guide-wrap\" },\n        React.createElement(\"img\", { style: { margin: 0 },\n          border: \"0\", src: \"/assets/help.png\", align: \"middle\", width: \"16\", height: \"16\" }),\n        \"this.state.showPWGuide?\",\n        React.createElement(\n          \"span\",\n          { className: \"password-guide cal-text-wrap\" },\n          \"Password shoud have at least 8 characters, containing Capital Letters AND Numbers.\"\n        ),\n        \":''\"\n      );\n    }\n  },\n\n  render: function () {\n\n    // var passwordGuide = 'FORMAT?'\n    // if (this.state.showPWGuide)\n    //   passwordGuide = 'Password shoud have at least 8 characters, containing Capital Letters AND Numbers.'\n\n    var inputProps = _.omit(this.props, [\"changeHandler\", \"value\", \"type\", \"labelColor\"]);\n    var classes = this.getTheme() + (this.props.error ? \" has-error\" : \"\") + \" item-input\";\n\n    return React.createElement(\n      \"label\",\n      { className: classes },\n      this.props.label ? React.createElement(\n        \"span\",\n        { onMouseOver: this.showPasswordGuide,\n          onMouseOut: this.showQuestionMark,\n          className: \"input-label inline-block\" + (h.checkColorClass(this.props.labelColor) ? \" colored \" + this.props.labelColor : \"\") },\n        this.props.label,\n        this.passwordGuide()\n      ) : null,\n      React.createElement(\"input\", babelHelpers._extends({}, inputProps, { type: this.props.type || \"text\", value: this.getValue(), onChange: this.changeHandler }))\n    );\n  }\n});","ast":null,"map":{"version":3,"sources":["/RC/form/passwordInput.jsx"],"names":[],"mappings":"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","file":"/RC/form/passwordInput.jsx.map","sourcesContent":["let themes_input = [\"stacked-label\",\"small-label\",\"overlay-light\",\"overlay-dark\"]\nRC.PasswordInput = React.createClass({\n  mixins: [RC.Mixins.Theme],\n  themeGroup: \"item\",\n  themes: themes_input,\n\n  propTypes: {\n    id: React.PropTypes.string,\n    theme: React.PropTypes.string,\n    value: React.PropTypes.string,\n    name: React.PropTypes.string,\n    placeholder: React.PropTypes.string,\n    className: React.PropTypes.string,\n    changeHandler: React.PropTypes.func,\n    label: React.PropTypes.string,\n    labelColor: React.PropTypes.string,\n    error: React.PropTypes.bool,\n    style: React.PropTypes.object,\n    disabled: React.PropTypes.bool,\n  },\n  reset(){\n    this.setState({ \n      value: this.props.value || false,\n      showPWGuide: false\n    })\n  },\n\n  getInitialState(){\n    return {\n      showPWGuide: false,\n      value: false\n    }\n  },\n\n  getValue(){\n    let val = (this.state.value!==false ? this.state.value : this.props.value) || \"\"\n    return h.ltrim(val)\n  },\n  changeHandler: function(e) {\n    this.setState({value: e.target.value})\n    if (_.isFunction(this.props.changeHandler))\n      this.props.changeHandler(e)\n  },\n  showPasswordGuide(e){\n    e.preventDefault()\n    this.setState({showPWGuide: true});\n  },\n  showQuestionMark(e){\n    e.preventDefault()\n    this.setState({showPWGuide: false});\n  },\n\n  passwordGuide(){\n    //if (this.state.showPWGuide) {\n    //\n    //  return 'Password shoud have at least 8 characters, containing Capital Letters AND Numbers.'\n    //\n    //\n    //} else\n    {\n\n      return <span className=\"password-guide-wrap\">\n          <img   style={{margin:0}}\n               border=\"0\" src=\"/assets/help.png\" align=\"middle\" width=\"16\" height=\"16\"/>\n           this.state.showPWGuide?<span className=\"password-guide cal-text-wrap\">Password shoud have at least 8 characters, containing Capital Letters AND Numbers.</span>:''\n      </span>\n    }\n  },\n\n  render() {\n    \n    // var passwordGuide = 'FORMAT?'\n    // if (this.state.showPWGuide)\n    //   passwordGuide = 'Password shoud have at least 8 characters, containing Capital Letters AND Numbers.'\n\n    let inputProps = _.omit(this.props, [\"changeHandler\",\"value\",\"type\",\"labelColor\"])\n    var classes = this.getTheme() + (this.props.error ? \" has-error\" : \"\") + \" item-input\"\n\n    return <label className={classes}>\n      {this.props.label ? <span onMouseOver={this.showPasswordGuide}\n                                onMouseOut={this.showQuestionMark}\n                                className={\"input-label inline-block\"+(h.checkColorClass(this.props.labelColor) ? \" colored \"+this.props.labelColor\n                                : \"\")} >\n      {this.props.label}{this.passwordGuide()}\n\n      </span> : null}\n\n      <input {... inputProps} type={this.props.type || \"text\"} value={this.getValue()} onChange={this.changeHandler} />\n    </label>\n  }\n})"]},"hash":"35498e309ff06ae85df086bfa386b72303c7e979"}
