{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Created on 10/2/15.\n */\n\n/**\n * Created on 9/15/15.\n */\n\n{\n    //let ShoppingCart;\n    //Dependency.autorun(function () {\n    //    ShoppingCart = Dependency.get('classRegister.ShoppingCart.model');\n    //});\n\n    Dependency.add('classRegister.AddWaitingList.store', new function () {\n\n        var self = this;\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({ accountId: Meteor.userId() });\n        };\n\n        self.props = new ReactiveVar();\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar();\n        //当前的level\n        self.currentLevel = new ReactiveVar();\n        //选中的day\n        self.currentDay = new ReactiveVar();\n        self.currentTime = new ReactiveVar();\n        self.currentClass = new ReactiveVar();\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([]);\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([]);\n\n        var undefinedSelectValueOption = { text: '', value: '' };\n        var undefinedSelectValue = '';\n\n        //暂存购物车ID 后端会验证其有效性\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue);\n            self.currentTime.set(undefinedSelectValue);\n        }\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"CRAddWaitingListPage_PROPS_INIT\":\n                    //get props\n                    {\n\n                        self.props.set(payload.props);\n\n                        self.currentDay.set();\n                        self.currentTime.set();\n                        self.currentClass.set();\n\n                        break;\n                    }\n\n                case \"CRAddWaitingListPage_SWIMMER_CHANGE\":\n                    //选择swimmer  level可能会变\n                    {\n                        var swimmer = payload.swimmer;\n\n                        self.currentSwimmer.set(swimmer);\n                        //self.currentLevel.set(App.getNextClassLevel(swimmer.level))//todo\n\n                        self.currentDay.set();\n                        self.currentTime.set();\n\n                        break;\n                    }\n                case \"CRAddWaitingListPage_DAY_CHANGE\":\n                    //选择day\n                    {\n\n                        self.currentDay.set(payload.day);\n                        break;\n                    }\n\n                case \"CRAddWaitingListPage_TIME_CHANGE\":\n                    //选择time  确定一个class\n                    {\n\n                        self.currentTime.set(payload.time);\n                        break;\n                    }\n\n                case \"CRAddWaitingListPage_CLASS_SELECT\":\n                    //select确定\n                    {\n\n                        var currentSwimmer = self.currentSwimmer.get();\n                        var currentClass = self.currentClass.get();\n\n                        Meteor.call('add_waiting_list', currentSwimmer._id, currentClass._id, function (err, result) {\n                            if (err) {\n                                console.error(err);\n                                return;\n                            }\n\n                            FlowRouter.go('/classRegister/AddWaitingListConfirm');\n                        });\n\n                        break;\n                    }\n\n                case \"GOTO_CRAddWaitingListPage\":\n                    {\n                        //清空上一轮的选择\n\n                        self.currentDay.set(undefinedSelectValue);\n                        self.currentTime.set(undefinedSelectValue);\n                        self.currentClass.set(null);\n                        //self.currentStep.set(1)\n                        //self.avaiableDays //依赖于 当前的currentLevel\n                        //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                        self.selectedClasses.set(Immutable.Map());\n                    }\n\n            }\n        });\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            Tracker.autorun(function (compution) {\n                var props = self.props.get();\n\n                if (!props) return;\n                console.log('autorun props', props);\n\n                var currentSwimmer = DB.Swimmers.findOne({\n                    _id: props.swimmerId\n                });\n\n                var currentLevel = props.classLevel;\n\n                self.currentSwimmer.set(currentSwimmer);\n                self.currentLevel.set(currentLevel);\n            });\n\n            //days depend on level of swimmer\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var level = self.currentLevel.get();\n\n                //Tracker.nonreactive(function () {\n\n                //todo  计算可用数目报名数\n                var classes = DB.Classes.find({\n                    sessionId: App.info && App.info.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain: { $lte: 0 }\n                }).fetch();\n\n                //\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                var days = classes.map(function (v, n) {\n                    return { text: App.Config.week[v.day], value: v.day };\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption);\n\n                self.avaiableDays.set(days);\n\n                //设置默认值\n                //if (days.length) {\n                //    self.currentDay.set(days[0].value)\n                //}\n\n                //});\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var currentDay = self.currentDay.get();\n\n                var level;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                });\n\n                var classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain: { $lte: 0 }\n\n                }).fetch();\n\n                var times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    };\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption);\n\n                self.avaiableTimes.set(times);\n\n                //初始化time\n                //if (times.length) {\n                //    self.currentTime.set(times[0].value)\n                //}\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne();\n                if (!App.info) return;\n\n                var time = self.currentTime.get();\n\n                var level = undefined;\n                var day = undefined;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                    day = self.currentDay.get();\n                });\n\n                var theClass = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain: { $lte: 0 }\n\n                }).fetch();\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0]);\n                }\n            });\n\n            //初始化swimmer and level\n            //Tracker.autorun(function () {\n            //    //if(!DB.Swimmers) return;\n            //\n            //    var swimmers = self.getSwimmers().fetch()\n            //    if (swimmers.length) {\n            //        self.currentSwimmer.set(swimmers[0])\n            //        self.currentLevel.set(App.getNextClassLevel(swimmers[0].level))\n            //    }\n            //\n            //})\n        });\n    }());\n}","ast":null,"map":{"version":3,"sources":["/client/app/class.register/addWaitingList/AddWaitingListPage.Store.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/addWaitingList/AddWaitingListPage.Store.jsx.map","sourcesContent":["/**\n * Created on 10/2/15.\n */\n\n/**\n * Created on 9/15/15.\n */\n\n\n{\n    //let ShoppingCart;\n    //Dependency.autorun(function () {\n    //    ShoppingCart = Dependency.get('classRegister.ShoppingCart.model');\n    //});\n\n\n    Dependency.add('classRegister.AddWaitingList.store', new function () {\n\n        var self = this;\n\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({accountId: Meteor.userId()})\n        }\n\n        self.props = new ReactiveVar();\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar()\n        //当前的level\n        self.currentLevel = new ReactiveVar()\n        //选中的day\n        self.currentDay = new ReactiveVar()\n        self.currentTime = new ReactiveVar()\n        self.currentClass = new ReactiveVar()\n\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([])\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([])\n\n\n\n        var undefinedSelectValueOption = {text:'', value: ''};\n        var undefinedSelectValue = '';\n\n\n        //暂存购物车ID 后端会验证其有效性\n\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue)\n            self.currentTime.set(undefinedSelectValue)\n        }\n\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"CRAddWaitingListPage_PROPS_INIT\"://get props\n                {\n\n                    self.props.set(payload.props)\n\n                    self.currentDay.set()\n                    self.currentTime.set()\n                    self.currentClass.set()\n\n\n                    break;\n                }\n\n                case \"CRAddWaitingListPage_SWIMMER_CHANGE\": //选择swimmer  level可能会变\n                {\n                    let swimmer = payload.swimmer\n\n                    self.currentSwimmer.set(swimmer)\n                    //self.currentLevel.set(App.getNextClassLevel(swimmer.level))//todo\n\n                    self.currentDay.set()\n                    self.currentTime.set()\n\n\n\n                    break;\n                }\n                case \"CRAddWaitingListPage_DAY_CHANGE\"://选择day\n                {\n\n\n                    self.currentDay.set(payload.day)\n                    break;\n                }\n\n                case \"CRAddWaitingListPage_TIME_CHANGE\"://选择time  确定一个class\n                {\n\n                    self.currentTime.set(payload.time)\n                    break;\n                }\n\n\n                case \"CRAddWaitingListPage_CLASS_SELECT\"://select确定\n                {\n\n\n                    var currentSwimmer=self.currentSwimmer.get()\n                    var currentClass = self.currentClass.get()\n\n                    Meteor.call('add_waiting_list',currentSwimmer._id,\n                        currentClass._id,function(err, result){\n                            if(err){\n                                console.error(err)\n                                return;\n                            }\n\n                            FlowRouter.go('/classRegister/AddWaitingListConfirm');\n                        })\n\n                    break;\n                }\n\n                case \"GOTO_CRAddWaitingListPage\":\n                {\n                    //清空上一轮的选择\n\n                    self.currentDay.set(undefinedSelectValue)\n                    self.currentTime.set(undefinedSelectValue)\n                    self.currentClass.set(null)\n                    //self.currentStep.set(1)\n                    //self.avaiableDays //依赖于 当前的currentLevel\n                    //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                    self.selectedClasses.set(Immutable.Map())\n\n\n                }\n\n            }\n        });\n\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n\n            Tracker.autorun(function (compution) {\n                var props = self.props.get();\n\n                if(!props) return;\n                console.log('autorun props', props)\n\n\n                var currentSwimmer= DB.Swimmers.findOne({\n                    _id:props.swimmerId\n                })\n\n                var currentLevel =props.classLevel\n\n                self.currentSwimmer.set(currentSwimmer)\n                self.currentLevel.set(currentLevel)\n\n\n            })\n\n\n                //days depend on level of swimmer\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n\n                var level = self.currentLevel.get();\n\n                //Tracker.nonreactive(function () {\n\n                //todo  计算可用数目报名数\n                let classes = DB.Classes.find({\n                    sessionId: App.info && App.info.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain:{$lte:0}\n                }).fetch()\n\n                //\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                let days = classes.map(function (v, n) {\n                    return {text: App.Config.week[v.day], value: v.day}\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption)\n\n                self.avaiableDays.set(days)\n\n                //设置默认值\n                //if (days.length) {\n                //    self.currentDay.set(days[0].value)\n                //}\n\n\n                //});\n\n\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n                var currentDay = self.currentDay.get();\n\n                var level\n                Tracker.nonreactive(function(){\n                    level = self.currentLevel.get()\n                });\n\n                let classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain:{$lte:0}\n\n                }).fetch()\n\n                let times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    }\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption)\n\n                self.avaiableTimes.set(times)\n\n                //初始化time\n                //if (times.length) {\n                //    self.currentTime.set(times[0].value)\n                //}\n\n\n\n\n\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n                let time = self.currentTime.get()\n\n\n                let level\n                let day\n                Tracker.nonreactive(function(){\n                    level = self.currentLevel.get()\n                    day = self.currentDay.get()\n                });\n\n                let theClass = DB.Classes.find({\n                    sessionId:  App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain:{$lte:0}\n\n                }).fetch()\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0])\n                }\n\n\n            });\n\n\n            //初始化swimmer and level\n            //Tracker.autorun(function () {\n            //    //if(!DB.Swimmers) return;\n            //\n            //    var swimmers = self.getSwimmers().fetch()\n            //    if (swimmers.length) {\n            //        self.currentSwimmer.set(swimmers[0])\n            //        self.currentLevel.set(App.getNextClassLevel(swimmers[0].level))\n            //    }\n            //\n            //})\n        })\n\n\n    });\n}\n\n"]},"hash":"8893b988a2a8cd7126dc27b0beea1b6ebe2074e0"}
