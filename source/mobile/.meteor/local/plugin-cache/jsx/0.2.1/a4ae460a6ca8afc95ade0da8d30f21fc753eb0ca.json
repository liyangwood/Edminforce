{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/*\n\n\n//\n//var _incrementalMessageLimit = 20;\n//\n//var incrementalScroll = function (e) {\n//\n//  var scrollY = (this.y || window.pageYOffset) - window.pageYOffset;\n//  this.y = window.pageYOffset;\n//\n//  _triggerLoadMore(scrollY, window.pageYOffset);\n//};\n//\n//var _triggerLoadMore = function(scrollY, offsetY) {\n//  var directionY = !scrollY ? \"NONE\" : scrollY > 0 ? \"UP\" : \"DOWN\"\n//  if (directionY === \"UP\" && offsetY <= 20 ) {\n//    console.log(\"window.scroll passed this line\", directionY, offsetY, typeof offsetY)\n//\n//    _resetMessageSubLimit()\n//  }\n//};\n//\n//var _resetMessageSubLimit = function (){\n//\n//  console.log(\"_resetMessageSubLimit\")\n//\n//  var before = Session.get(\"Message_Sub_Limit\");\n//  var after = before + _incrementalMessageLimit;\n//  Session.set(\"Message_Sub_Limit\", after)\n//};\n\n\nIH.RC.ChatMessageList = React.createClass({\n\n  //sendNewMessage(msg) {\n  //  let message = {\n  //    type: \"txt\",\n  //    content: msg,\n  //    SID: Meteor.userId(),\n  //    CHID: this.props.channelID   // ????\n  //  };\n  //  IH.Action.ChatMessages.createMessage(message, this.props.channelID)\n  //},\n\n  //componentWillMount() {\n  //  this.shouldScrollBottom = true;\n  //},\n  //componentDidMount() {\n  //\n  //  var node = this.refs.messageContainer.getDOMNode();\n  //  self = this;\n  //\n  //  window.addEventListener(\"scroll\", incrementalScroll);\n  //\n  //  console.log(\"walalalalallalalalallall\")\n  //  //window.scrollTo(0, node.scrollHeight);\n  //},\n  //componentWillUpdate() {\n  //  var node = this.refs.messageContainer.getDOMNode();\n  //  this.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;\n  //},\n  //componentDidUpdate() {\n  //  if (this.shouldScrollBottom) {\n  //    var node = this.refs.messageContainer.getDOMNode();\n  //\n  //    console.log(\"node.scrollHeight in update \", node.scrollHeight);\n  //    node.scrollTop = node.scrollHeight\n  //  }\n  //},\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\")\n  },\n  render() {\n\n    var lastMsg = {}\n    let userId = Meteor.userId();\n\n    return <div ref=\"messageContainer\">\n      {\n        _.map(this.props.messages, function(m, n){\n          let first = n===0 ? true : !(h.nk(lastMsg, \"m.name\")==h.nk(m, \"m.name\"));\n          let dateBreak = moment(m.date).format(\"MM/DD/YY\");\n          let lastBreak = n===0 || !lastMsg.date ? null : moment(lastMsg.date).format(\"MM/DD/YY\");\n          lastMsg = m;\n\n          return <RC.ChatBubble\n            key={n}\n            isUser={userId==m.from}\n            showDateBreak={dateBreak!=lastBreak}\n            firstOfGroup={first}\n            message={m.msg}\n            date={m.date}\n            avatar={m.avatar}\n            name={m.name}\n            gender={m.gender}\n            />\n        })\n      }\n      <RC.ChatTextArea name=\"message\" onSubmit={this.sendNewMessage} />\n    </div>\n  }\n})\n\n  */","ast":null,"map":{"version":3,"sources":[],"names":[],"mappings":"","file":"/components/ChatMessageList.jsx.map","sourcesContent":[]},"hash":"a4ae460a6ca8afc95ade0da8d30f21fc753eb0ca"}
