{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Created on 9/20/15.\n */\n\n{\n    //let ShoppingCart;\n    //Dependency.autorun(function () {\n    //    ShoppingCart = Dependency.get('classRegister.ShoppingCart.model');\n    //});\n\n    //subscribes\n    Meteor.subscribe('accountWithSwimmersAndClasses');\n\n    Dependency.add('classRegister.bookTheSameTimePage.store', new function () {\n\n        var self = this;\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({ accountId: Meteor.userId() });\n        };\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar();\n        //当前的level\n        self.currentLevel = new ReactiveVar();\n        //选中的day\n        self.currentDay = new ReactiveVar();\n        self.currentTime = new ReactiveVar();\n        self.currentClass = new ReactiveVar();\n        //当前的步骤\n        self.currentStep = new ReactiveVar(1);\n\n        //注册信息\n        self.nowClasses = new ReactiveVar([]);\n        self.registeredClasses = new ReactiveVar([]);\n        self.historyClasses = new ReactiveVar([]);\n\n        self.shoppingCartClasses = new ReactiveVar([]);\n\n        self.isFirstTime = new ReactiveVar(false);\n\n        //当前用户正在进行的课程\n        //self.currentSwimmerClassesRegisterInfo=new ReactiveVar([]) //当前正在上的课程的注册信息\n\n        self.currentSwimmerClasses = new ReactiveVar([]); //当前正在上的课程的详细信息\n        self.currentSwimmerSameClasses = new ReactiveVar([]); //classes for book the same time\n\n        self.currentSwimmerAvaibleSameClasses = new ReactiveVar([]); //除去了购物车已有的项\n\n        self.currentSwimmerType = new ReactiveVar(); //标记当前的类型\n\n        //self.classes= new ReactiveVar({})  //by swimmerId\n        //self.classesRegister = new ReactiveVar([])\n        //self.swimmerClasses = new ReactiveVar({})\n        //self.selectClassView = new ReactiveVar({})  //'bookTheSameTime','common'\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([]);\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([]);\n\n        //Session.set('CART_ID')\n\n        /*\n         * 一次流程选择的class信息  3步\n         * 使用Immutable库进行对象修改\n         * {\n         *  swimmer:\n         *  class1:{classId, swimmerId}\n         *  class2:\n         *  class3:\n         * }\n         * */\n        self.selectedClasses = new ReactiveVar(Immutable.Map());\n\n        var undefinedSelectValueOption = { text: '', value: '' };\n        var undefinedSelectValue = '';\n\n        //暂存购物车ID 后端会验证其有效性\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue);\n            self.currentTime.set(undefinedSelectValue);\n        }\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"BookTheSameTime_SWIMMER_CHANGE\":\n                    //选择swimmer  level可能会变\n                    {\n                        var swimmer = payload.swimmer;\n\n                        self.currentSwimmer.set(swimmer);\n\n                        //当前swimmer returnback new swimmer区别处理\n                        //self.currentLevel.set(App.getNextClassLevel(swimmer.level))\n\n                        self.currentDay.set(undefinedSelectValue);\n                        self.currentTime.set(undefinedSelectValue);\n\n                        //var swimmerClasses = self.swimmerClasses.get()\n                        //var swimmerId = swimmer._id\n                        //if (swimmerClasses && swimmerId) {\n                        //    if (swimmerClasses[swimmerId] && swimmerClasses[swimmerId] > 0) {\n                        //        self.selectClassView.set('bookTheSameTime')\n                        //    } else {\n                        //        self.selectClassView.set('common')\n                        //    }\n                        //\n                        //}\n\n                        break;\n                    }\n                case \"BookTheSameTime_DAY_CHANGE\":\n                    //选择day\n                    {\n\n                        self.currentDay.set(payload.day);\n                        self.currentTime.set();\n                        break;\n                    }\n\n                case \"BookTheSameTime_TIME_CHANGE\":\n                    //选择time  确定一个class\n                    {\n\n                        self.currentTime.set(payload.time);\n                        break;\n                    }\n\n                //sibling 三步  可能是current swimmer BookTheSame time后的选择 也可能是return back用户 也可能是新用户\n                case \"BookTheSameTime_CLASS_SELECT_FOR_SIBLING\":\n                    //select确定\n                    {\n\n                        if (payload.currentStep == 1) {\n                            var currentClass;\n\n                            (function () {\n\n                                var currentSwimmer = self.currentSwimmer.get();\n\n                                currentClass = self.currentClass.get(); //sibling first step\n\n                                var isFistTime = self.isFirstTime.get();\n\n                                Meteor.call('add_class_to_cart', {\n                                    swimmerId: currentSwimmer._id,\n                                    classId: currentClass._id,\n                                    quantity: 1,\n                                    swimmer: currentSwimmer,\n                                    class1: currentClass,\n                                    type: 'register',\n\n                                    isFistTime: isFistTime\n\n                                }, function (err, result) {\n\n                                    if (err) {\n                                        alert(err.error);\n                                        return; //todo  prompt\n                                    }\n\n                                    //selectedClasses\n                                    var map = self.selectedClasses.get();\n                                    map = map.set('swimmer', currentSwimmer);\n                                    map = map.set('class1', currentClass);\n                                    self.selectedClasses.set(map);\n\n                                    Session.set('CART_ID', result.cartId);\n\n                                    console.log('step1', currentSwimmer, currentClass);\n\n                                    self.currentStep.set(2);\n\n                                    resetDateAndTime();\n                                });\n                            })();\n                        }\n\n                        if (payload.currentStep == 2) {\n                            (function () {\n\n                                var currentClass = self.currentClass.get();\n\n                                var map = self.selectedClasses.get();\n                                map = map.set('class2', currentClass);\n                                self.selectedClasses.set(map);\n\n                                var swimmer = map.get('swimmer');\n                                var class1 = map.get('class1');\n\n                                //ShoppingCart.addClassPreference(2,{\n                                //    'swimmer': swimmer,\n                                //    'class1':  class1,\n                                //    data: currentClass\n                                //},function(err,result){\n                                //    if(err) return;\n                                //\n                                //    self.currentStep.set(3),\n                                //    resetDateAndTime()\n                                //})\n\n                                Meteor.call('add_preference_to_cart', {\n                                    cartId: Session.get('CART_ID'),\n\n                                    preferenceNum: 2,\n\n                                    classId: class1._id,\n                                    swimmerId: swimmer._id,\n                                    data: currentClass\n                                }, function (err) {\n                                    if (err) return; //todo  prompt\n\n                                    console.log('step2', currentClass);\n\n                                    self.currentStep.set(3);\n                                    resetDateAndTime();\n                                });\n                            })();\n                        }\n\n                        if (payload.currentStep == 3) {\n                            (function () {\n\n                                //todo unify with currentStep == 2\n\n                                var currentClass = self.currentClass.get();\n\n                                var map = self.selectedClasses.get();\n                                map = map.set('class3', currentClass);\n                                self.selectedClasses.set(map);\n\n                                var swimmer = map.get('swimmer');\n                                var class1 = map.get('class1');\n\n                                //ShoppingCart.addClassPreference(3,{\n                                //    'swimmer': swimmer,\n                                //    'class1':   class1,\n                                //    data:currentClass\n                                //},function(err,result){\n                                //    if(err) return;\n                                //\n                                //    FlowRouter.go('/classRegister/SelectClassReady');\n                                //\n                                //})\n\n                                Meteor.call('add_preference_to_cart', {\n                                    cartId: Session.get('CART_ID'),\n\n                                    preferenceNum: 3,\n\n                                    classId: class1._id,\n                                    swimmerId: swimmer._id,\n                                    data: currentClass\n                                }, function (err) {\n                                    if (err) return; //todo  prompt\n\n                                    console.log('step3', currentClass);\n\n                                    var href = \"/classRegister/BookTheSameTimeSelectClassReady\" + \"?cartId=\" + Session.get('CART_ID') + \"&swimmerId=\" + swimmer._id + \"&classId=\" + class1._id;\n                                    FlowRouter.go(href);\n                                });\n                            })();\n                        }\n\n                        break;\n                    }\n\n                //正在进行用户 四步  todo和以上合并?\n                case \"BookTheSameTime_CLASS_SELECT_FOR_CURRENT\":\n                    {\n                        payload;\n\n                        if (payload.currentStep == 1) {\n                            var currentClass;\n\n                            (function () {\n\n                                var currentSwimmer = self.currentSwimmer.get();\n\n                                currentClass = payload.selectedClass;\n                                // special; book the same time\n\n                                //todo获取一个classId\n\n                                //ShoppingCart.addShoppingItem(\n                                //    {\n                                //        swimmer: currentSwimmer,\n                                //        class1: currentClass\n                                //    }\n                                //);\n\n                                Meteor.call('add_class_to_cart', {\n                                    swimmerId: currentSwimmer._id,\n                                    classId: currentClass._id,\n                                    quantity: 1,\n                                    swimmer: currentSwimmer,\n                                    class1: currentClass,\n\n                                    isBookTheSameTime: true,\n\n                                    type: 'register'\n                                }, function (err, result) {\n\n                                    if (err) {\n                                        alert(err.error);\n                                        return; //todo  prompt\n                                    }\n\n                                    //selectedClasses\n                                    var map = self.selectedClasses.get();\n                                    map = map.set('swimmer', currentSwimmer);\n                                    map = map.set('class1', currentClass);\n                                    self.selectedClasses.set(map);\n\n                                    Session.set('CART_ID', result.cartId);\n\n                                    console.log('step1', currentSwimmer, currentClass);\n\n                                    //self.currentStep.set('1-1') //\n                                    self.currentStep.set(2);\n\n                                    resetDateAndTime();\n                                });\n                            })();\n                        }\n\n                        if (payload.currentStep == '1-1') {\n                            //confirm  此步骤后来取消  todo delete\n\n                            self.currentStep.set(2);\n                        }\n\n                        if (payload.currentStep == 2) {\n                            (function () {\n\n                                var currentClass = self.currentClass.get();\n\n                                var map = self.selectedClasses.get();\n                                map = map.set('class2', currentClass);\n                                self.selectedClasses.set(map);\n\n                                var swimmer = map.get('swimmer');\n                                var class1 = map.get('class1');\n\n                                //ShoppingCart.addClassPreference(2,{\n                                //    'swimmer': swimmer,\n                                //    'class1':  class1,\n                                //    data: currentClass\n                                //},function(err,result){\n                                //    if(err) return;\n                                //\n                                //    self.currentStep.set(3),\n                                //    resetDateAndTime()\n                                //})\n\n                                Meteor.call('add_preference_to_cart', {\n                                    cartId: Session.get('CART_ID'),\n\n                                    preferenceNum: 2,\n\n                                    classId: class1._id,\n                                    swimmerId: swimmer._id,\n                                    data: currentClass\n                                }, function (err) {\n                                    if (err) return; //todo  prompt\n\n                                    console.log('step2', currentClass);\n\n                                    self.currentStep.set(3);\n                                    resetDateAndTime();\n                                });\n                            })();\n                        }\n\n                        if (payload.currentStep == 3) {\n                            (function () {\n\n                                //todo unify with currentStep == 2\n\n                                var currentClass = self.currentClass.get();\n\n                                var map = self.selectedClasses.get();\n                                map = map.set('class3', currentClass);\n                                self.selectedClasses.set(map);\n\n                                var swimmer = map.get('swimmer');\n                                var class1 = map.get('class1');\n\n                                //ShoppingCart.addClassPreference(3,{\n                                //    'swimmer': swimmer,\n                                //    'class1':   class1,\n                                //    data:currentClass\n                                //},function(err,result){\n                                //    if(err) return;\n                                //\n                                //    FlowRouter.go('/classRegister/SelectClassReady');\n                                //\n                                //})\n\n                                Meteor.call('add_preference_to_cart', {\n                                    cartId: Session.get('CART_ID'),\n\n                                    preferenceNum: 3,\n\n                                    classId: class1._id,\n                                    swimmerId: swimmer._id,\n                                    data: currentClass\n                                }, function (err) {\n                                    if (err) return; //todo  prompt\n\n                                    console.log('step3', currentClass);\n\n                                    //FlowRouter.go('/classRegister/BookTheSameTimeSelectClassReady');\n                                    var href = \"/classRegister/BookTheSameTimeSelectClassReady\" + \"?cartId=\" + Session.get('CART_ID') + \"&swimmerId=\" + swimmer._id + \"&classId=\" + class1._id;\n                                    FlowRouter.go(href);\n                                });\n                            })();\n                        }\n\n                        break;\n                    }\n\n                case \"componentWillMount_CRBookTheSameTimePage\":\n                    {\n                        //\n                        console.log('componentWillMount_CRBookTheSameTimePage');\n                        //清空上一轮的选择\n\n                        self.currentDay.set(undefinedSelectValue);\n                        self.currentTime.set(undefinedSelectValue);\n                        self.currentClass.set(null);\n                        self.currentStep.set(1);\n                        //self.avaiableDays //依赖于 当前的currentLevel\n                        //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                        self.selectedClasses.set(Immutable.Map());\n\n                        break;\n                    }\n\n            }\n        });\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            //初始化swimmer\n            Tracker.autorun(function () {\n\n                var swimmers = self.getSwimmers().fetch();\n\n                if (swimmers.length) {\n                    console.log('set currentSwimmer', swimmers[0]._id);\n\n                    self.currentSwimmer.set(swimmers[0]);\n                    //self.currentLevel.set(App.getNextClassLevel(swimmers[0].level))\n                }\n            });\n\n            //获取当前swimmer的课数 用于判断swimmer的类型\n            Tracker.autorun(function () {\n                var currentSwimmer = self.currentSwimmer.get();\n                var appInfo = DB.App.findOne();\n\n                if (!appInfo) return;\n                if (!currentSwimmer) return;\n\n                Tracker.autorun(function () {\n\n                    var nowClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status: 'normal', //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionNow\n                    }).fetch();\n\n                    self.nowClasses.set(nowClasses);\n\n                    //self.currentSwimmerClassesRegisterInfo.set(currentSwimmerClassesRegisterInfo)\n                });\n                Tracker.autorun(function () {\n\n                    var registeredClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status: 'normal', //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionRegister\n                    }).fetch();\n                    self.registeredClasses.set(registeredClasses);\n                });\n                Tracker.autorun(function () {\n\n                    var historyClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status: 'normal', //不显示cancel中的和 change中的\n                        sessionId: { $nin: [App.info.sessionNow, App.info.sessionRegister] }\n\n                    }).fetch();\n                    self.historyClasses.set(historyClasses);\n                });\n\n                //shoppingCartClasses\n                Tracker.autorun(function () {\n\n                    var shoppingCart = DB.ShoppingCart.findOne({\n                        status: 'active',\n                        type: 'register'\n                    });\n\n                    var classItems = [];\n                    if (shoppingCart && shoppingCart.items.length) {\n                        classItems = _.filter(shoppingCart.items, function (item) {\n                            return item.class1 && item.class2 && item.class3 //完整的注册\n                             && item.swimmerId == currentSwimmer._id;\n                        });\n                    }\n\n                    self.shoppingCartClasses.set(classItems);\n                    console.log(classItems);\n                });\n            });\n\n            //判断swimmer是不是第一次注册\n            Tracker.autorun(function () {\n                var nowClasses = self.nowClasses.get();\n                var registeredClasses = self.registeredClasses.get();\n\n                var historyClasses = self.historyClasses.get();\n\n                var shoppingCartClasses = self.shoppingCartClasses.get();\n\n                if (nowClasses.length == 0 && registeredClasses.length == 0 && historyClasses.length == 0\n                //&& shoppingCartClasses.length>0\n                ) {\n\n                        self.isFirstTime.set(true);\n                    } else {\n                    self.isFirstTime.set(false);\n                }\n            });\n\n            //确定课程注册level\n            //对于return back 和 new swimmer  Level即当前level\n            //对于正在游的level＋1\n            Tracker.autorun(function () {\n                var nowClasses = self.nowClasses.get();\n                var currentSwimmer = self.currentSwimmer.get();\n\n                if (!currentSwimmer) return;\n\n                //当前session正在游\n                if (nowClasses.length > 0) {\n                    self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level));\n                } else {\n                    self.currentLevel.set(currentSwimmer.level);\n                }\n            });\n\n            //days depend on level of swimmer\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n                var level = self.currentLevel.get();\n                var appInfo = DB.App.findOne();\n\n                if (!appInfo || !level) return;\n\n                var classes = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                //\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                var days = classes.map(function (v, n) {\n                    return { text: App.Config.week[v.day], value: v.day };\n                });\n\n                days.sort(function (a, b) {\n                    return a.value - b.value;\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption);\n\n                self.avaiableDays.set(days);\n\n                //设置默认值\n                //if (days.length) {\n                //    self.currentDay.set(days[0].value)\n                //}\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n\n                var currentDay = self.currentDay.get();\n                var appInfo = DB.App.findOne();\n\n                if (!appInfo) return;\n\n                var level;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                });\n\n                var classes = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                var times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    };\n                });\n                times.sort(function (a, b) {\n                    return a.value - b.value;\n                });\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption);\n\n                self.avaiableTimes.set(times);\n\n                //初始化time\n                //if (times.length) {\n                //    self.currentTime.set(times[0].value)\n                //}\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n\n                var time = self.currentTime.get();\n                var appInfo = DB.App.findOne();\n\n                if (!appInfo) return;\n\n                var level = undefined;\n                var day = undefined;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get();\n                    day = self.currentDay.get();\n                });\n\n                var theClass = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain: { $gt: 0 }\n                }).fetch();\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0]);\n                }\n            });\n\n            /*\n             若无sameclass 显示正常选择页\n             * */\n            Tracker.autorun(function () {\n                App.info = App.info || DB.App.findOne();\n                var nowClasses = self.nowClasses.get();\n\n                var currentLevel = self.currentLevel.get();\n\n                if (!App.info) return;\n                if (!currentLevel) return;\n\n                Tracker.autorun(function () {\n                    //获取当前class详细信息\n\n                    var ids = [];\n                    _.each(nowClasses, function (item) {\n                        ids.push(item.classId);\n                    });\n                    var currentClasses = DB.Classes.find({\n                        _id: { $in: ids }\n                    }).fetch();\n\n                    self.currentSwimmerClasses.set(currentClasses);\n\n                    //console.log(currentClasses)\n\n                    Tracker.autorun(function () {\n                        //获取类似class\n                        var sameClasses = [];\n\n                        _.each(currentClasses, function (currentClass) {\n\n                            var sameClass = DB.Classes.findOne({\n                                sessionId: App.info.sessionRegister,\n                                levels: currentLevel,\n\n                                day: currentClass.day,\n                                startTime: currentClass.startTime,\n                                seatsRemain: { $gt: 0 }\n                            });\n\n                            if (sameClass) {\n                                sameClasses.push(sameClass);\n                            }\n                        });\n\n                        self.currentSwimmerSameClasses.set(sameClasses);\n\n                        console.log('currentSwimmerSameClasses', sameClasses);\n                    });\n                });\n            });\n\n            //sameclass 已在购物车中则不显示该项\n            //sameclass 除去购物车已有的后数目为0 则显示正常选择页面\n            //若已经注册过该class 也要除去\n            //由于bookthesametime 在一个流程的第一步 所以不需考虑重复 后面的步骤需要考虑\n            Tracker.autorun(function () {\n\n                var currentSwimmer = self.currentSwimmer.get();\n                var currentSwimmerSameClasses = self.currentSwimmerSameClasses.get(); //can be []\n\n                var registeredClasses = self.registeredClasses.get();\n                var shoppingCartClasses = self.shoppingCartClasses.get();\n\n                if (!currentSwimmer) return;\n\n                var registeredClassesIds = registeredClasses.map(function (item) {\n                    return item.classId;\n                });\n                var shoppingCartClassesIds = shoppingCartClasses.map(function (item) {\n                    return item.classId;\n                });\n\n                var exceptionIds = _.union(registeredClassesIds, shoppingCartClassesIds);\n\n                console.log('registeredClasses', registeredClassesIds);\n                console.log('shoppingCartClasses', shoppingCartClassesIds);\n                console.log('exceptionIds', exceptionIds);\n\n                var avaibleSameClasses = _.filter(currentSwimmerSameClasses, function (item) {\n                    return exceptionIds.indexOf(item._id) == -1;\n                });\n                self.currentSwimmerAvaibleSameClasses.set(avaibleSameClasses);\n\n                console.log('currentSwimmerAvaibleSameClasses', avaibleSameClasses);\n\n                //avaibleSameClasses\n            });\n\n            //view  bookthesame time or common\n            Tracker.autorun(function () {\n                var avaibleSameClasses = self.currentSwimmerAvaibleSameClasses.get();\n\n                if (avaibleSameClasses.length > 0) {\n                    self.currentSwimmerType.set('swimmer-ongoing');\n                } else {\n                    self.currentSwimmerType.set('swimmer-sibling');\n                }\n            });\n        });\n    }());\n}","ast":null,"map":{"version":3,"sources":["/client/app/class.register/bookTheSameTime/bookTheSameTimePage.store.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/bookTheSameTime/bookTheSameTimePage.store.jsx.map","sourcesContent":["/**\n * Created on 9/20/15.\n */\n\n\n{\n    //let ShoppingCart;\n    //Dependency.autorun(function () {\n    //    ShoppingCart = Dependency.get('classRegister.ShoppingCart.model');\n    //});\n\n    //subscribes\n    Meteor.subscribe('accountWithSwimmersAndClasses');\n\n\n    Dependency.add('classRegister.bookTheSameTimePage.store', new function () {\n\n        var self = this;\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({accountId: Meteor.userId()})\n        }\n\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //选中的swimmer\n        self.currentSwimmer = new ReactiveVar()\n        //当前的level\n        self.currentLevel = new ReactiveVar()\n        //选中的day\n        self.currentDay = new ReactiveVar()\n        self.currentTime = new ReactiveVar()\n        self.currentClass = new ReactiveVar()\n        //当前的步骤\n        self.currentStep = new ReactiveVar(1)\n\n        //注册信息\n        self.nowClasses =new ReactiveVar([])\n        self.registeredClasses =new ReactiveVar([])\n        self.historyClasses =new ReactiveVar([])\n\n        self.shoppingCartClasses= new ReactiveVar([])\n\n        self.isFirstTime =new ReactiveVar(false)\n\n\n\n        //当前用户正在进行的课程\n        //self.currentSwimmerClassesRegisterInfo=new ReactiveVar([]) //当前正在上的课程的注册信息\n\n        self.currentSwimmerClasses = new ReactiveVar([]) //当前正在上的课程的详细信息\n        self.currentSwimmerSameClasses = new ReactiveVar([])  //classes for book the same time\n\n        self.currentSwimmerAvaibleSameClasses = new ReactiveVar([]) //除去了购物车已有的项\n\n\n        self.currentSwimmerType=new ReactiveVar()  //标记当前的类型\n\n\n\n\n        //self.classes= new ReactiveVar({})  //by swimmerId\n        //self.classesRegister = new ReactiveVar([])\n       //self.swimmerClasses = new ReactiveVar({})\n       //self.selectClassView = new ReactiveVar({})  //'bookTheSameTime','common'\n\n\n\n\n\n\n        //可选days 依赖于 当前的currentLevel\n        self.avaiableDays = new ReactiveVar([])\n        //可选时间   依赖于 当前选中的currentDay\n        self.avaiableTimes = new ReactiveVar([])\n\n\n        //Session.set('CART_ID')\n\n\n        /*\n         * 一次流程选择的class信息  3步\n         * 使用Immutable库进行对象修改\n         * {\n         *  swimmer:\n         *  class1:{classId, swimmerId}\n         *  class2:\n         *  class3:\n         * }\n         * */\n        self.selectedClasses = new ReactiveVar(Immutable.Map())\n\n\n        var undefinedSelectValueOption = {text:'', value: ''};\n        var undefinedSelectValue = '';\n\n        //暂存购物车ID 后端会验证其有效性\n\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue)\n            self.currentTime.set(undefinedSelectValue)\n        }\n\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"BookTheSameTime_SWIMMER_CHANGE\": //选择swimmer  level可能会变\n                {\n                    let swimmer = payload.swimmer\n\n                    self.currentSwimmer.set(swimmer)\n\n                    //当前swimmer returnback new swimmer区别处理\n                    //self.currentLevel.set(App.getNextClassLevel(swimmer.level))\n\n                    self.currentDay.set(undefinedSelectValue)\n                    self.currentTime.set(undefinedSelectValue)\n\n                    //var swimmerClasses = self.swimmerClasses.get()\n                    //var swimmerId = swimmer._id\n                    //if (swimmerClasses && swimmerId) {\n                    //    if (swimmerClasses[swimmerId] && swimmerClasses[swimmerId] > 0) {\n                    //        self.selectClassView.set('bookTheSameTime')\n                    //    } else {\n                    //        self.selectClassView.set('common')\n                    //    }\n                    //\n                    //}\n\n\n\n                    break;\n                }\n                case \"BookTheSameTime_DAY_CHANGE\"://选择day\n                {\n\n\n                    self.currentDay.set(payload.day)\n                    self.currentTime.set()\n                    break;\n                }\n\n                case \"BookTheSameTime_TIME_CHANGE\"://选择time  确定一个class\n                {\n\n                    self.currentTime.set(payload.time)\n                    break;\n                }\n\n\n                //sibling 三步  可能是current swimmer BookTheSame time后的选择 也可能是return back用户 也可能是新用户\n                case \"BookTheSameTime_CLASS_SELECT_FOR_SIBLING\"://select确定\n                {\n\n\n                    if (payload.currentStep == 1) {\n\n                        let currentSwimmer = self.currentSwimmer.get()\n\n                        var currentClass;\n\n                        currentClass = self.currentClass.get() //sibling first step\n\n\n                        let isFistTime = self.isFirstTime.get()\n\n\n\n                        Meteor.call('add_class_to_cart', {\n                            swimmerId: currentSwimmer._id,\n                            classId: currentClass._id,\n                            quantity: 1,\n                            swimmer: currentSwimmer,\n                            class1: currentClass,\n                            type:'register',\n\n                            isFistTime:isFistTime\n\n                        }, function (err, result) {\n\n                            if (err) {\n                                alert(err.error)\n                                return; //todo  prompt\n                            }\n\n\n                            //selectedClasses\n                            let map = self.selectedClasses.get()\n                            map = map.set('swimmer', currentSwimmer)\n                            map = map.set('class1', currentClass)\n                            self.selectedClasses.set(map)\n\n\n\n                            Session.set('CART_ID', result.cartId)\n\n\n                            console.log('step1', currentSwimmer, currentClass)\n\n                            self.currentStep.set(2)\n\n\n                            resetDateAndTime();\n                        })\n\n\n                    }\n\n                    if (payload.currentStep == 2) {\n\n                        let currentClass = self.currentClass.get()\n\n                        let map = self.selectedClasses.get()\n                        map = map.set('class2', currentClass)\n                        self.selectedClasses.set(map)\n\n\n                        let swimmer = map.get('swimmer')\n                        let class1 = map.get('class1')\n\n\n                        //ShoppingCart.addClassPreference(2,{\n                        //    'swimmer': swimmer,\n                        //    'class1':  class1,\n                        //    data: currentClass\n                        //},function(err,result){\n                        //    if(err) return;\n                        //\n                        //    self.currentStep.set(3),\n                        //    resetDateAndTime()\n                        //})\n\n                        Meteor.call('add_preference_to_cart', {\n                            cartId: Session.get('CART_ID'),\n\n                            preferenceNum: 2,\n\n                            classId: class1._id,\n                            swimmerId: swimmer._id,\n                            data: currentClass\n                        }, function (err) {\n                            if (err) return; //todo  prompt\n\n                            console.log('step2', currentClass)\n\n\n                            self.currentStep.set(3)\n                            resetDateAndTime()\n                        })\n\n\n                    }\n\n                    if (payload.currentStep == 3) {\n\n                        //todo unify with currentStep == 2\n\n                        let currentClass = self.currentClass.get()\n\n                        let map = self.selectedClasses.get()\n                        map = map.set('class3', currentClass)\n                        self.selectedClasses.set(map)\n\n\n                        let swimmer = map.get('swimmer')\n                        let class1 = map.get('class1')\n\n                        //ShoppingCart.addClassPreference(3,{\n                        //    'swimmer': swimmer,\n                        //    'class1':   class1,\n                        //    data:currentClass\n                        //},function(err,result){\n                        //    if(err) return;\n                        //\n                        //    FlowRouter.go('/classRegister/SelectClassReady');\n                        //\n                        //})\n\n                        Meteor.call('add_preference_to_cart', {\n                            cartId: Session.get('CART_ID'),\n\n                            preferenceNum: 3,\n\n                            classId: class1._id,\n                            swimmerId: swimmer._id,\n                            data: currentClass\n                        }, function (err) {\n                            if (err) return; //todo  prompt\n\n                            console.log('step3', currentClass)\n\n                            var href=\"/classRegister/BookTheSameTimeSelectClassReady\"\n                                +\"?cartId=\"+Session.get('CART_ID')\n                                +\"&swimmerId=\"+swimmer._id\n                                +\"&classId=\"+class1._id\n                            FlowRouter.go(href);\n\n                        })\n\n                    }\n\n                    break;\n                }\n\n                //正在进行用户 四步  todo和以上合并?\n                case \"BookTheSameTime_CLASS_SELECT_FOR_CURRENT\":{\n                    payload\n\n\n                    if (payload.currentStep == 1) {\n\n                        let currentSwimmer = self.currentSwimmer.get()\n\n\n                        var currentClass =  payload.selectedClass  // special; book the same time\n\n\n                        //todo获取一个classId\n\n\n\n\n                        //ShoppingCart.addShoppingItem(\n                        //    {\n                        //        swimmer: currentSwimmer,\n                        //        class1: currentClass\n                        //    }\n                        //);\n\n\n\n                        Meteor.call('add_class_to_cart', {\n                            swimmerId: currentSwimmer._id,\n                            classId: currentClass._id,\n                            quantity: 1,\n                            swimmer: currentSwimmer,\n                            class1: currentClass,\n\n                            isBookTheSameTime:true,\n\n                            type:'register'\n                        }, function (err, result) {\n\n                            if (err) {\n                                alert(err.error)\n                                return; //todo  prompt\n                            }\n\n                            //selectedClasses\n                            let map = self.selectedClasses.get()\n                            map = map.set('swimmer', currentSwimmer)\n                            map = map.set('class1', currentClass)\n                            self.selectedClasses.set(map)\n\n\n\n                            Session.set('CART_ID', result.cartId)\n\n\n                            console.log('step1', currentSwimmer, currentClass)\n\n                            //self.currentStep.set('1-1') //\n                            self.currentStep.set(2)\n\n                            resetDateAndTime();\n                        })\n\n\n                    }\n\n                    if (payload.currentStep == '1-1'){ //confirm  此步骤后来取消  todo delete\n\n\n                        self.currentStep.set(2)\n\n                    }\n\n                    if (payload.currentStep == 2) {\n\n                        let currentClass = self.currentClass.get()\n\n                        let map = self.selectedClasses.get()\n                        map = map.set('class2', currentClass)\n                        self.selectedClasses.set(map)\n\n\n                        let swimmer = map.get('swimmer')\n                        let class1 = map.get('class1')\n\n\n\n                        //ShoppingCart.addClassPreference(2,{\n                        //    'swimmer': swimmer,\n                        //    'class1':  class1,\n                        //    data: currentClass\n                        //},function(err,result){\n                        //    if(err) return;\n                        //\n                        //    self.currentStep.set(3),\n                        //    resetDateAndTime()\n                        //})\n\n                        Meteor.call('add_preference_to_cart', {\n                            cartId: Session.get('CART_ID'),\n\n                            preferenceNum: 2,\n\n                            classId: class1._id,\n                            swimmerId: swimmer._id,\n                            data: currentClass\n                        }, function (err) {\n                            if (err) return; //todo  prompt\n\n                            console.log('step2', currentClass)\n\n\n                            self.currentStep.set(3)\n                            resetDateAndTime()\n                        })\n\n\n                    }\n\n                    if (payload.currentStep == 3) {\n\n                        //todo unify with currentStep == 2\n\n                        let currentClass = self.currentClass.get()\n\n                        let map = self.selectedClasses.get()\n                        map = map.set('class3', currentClass)\n                        self.selectedClasses.set(map)\n\n\n                        let swimmer = map.get('swimmer')\n                        let class1 = map.get('class1')\n\n\n\n                        //ShoppingCart.addClassPreference(3,{\n                        //    'swimmer': swimmer,\n                        //    'class1':   class1,\n                        //    data:currentClass\n                        //},function(err,result){\n                        //    if(err) return;\n                        //\n                        //    FlowRouter.go('/classRegister/SelectClassReady');\n                        //\n                        //})\n\n                        Meteor.call('add_preference_to_cart', {\n                            cartId: Session.get('CART_ID'),\n\n                            preferenceNum: 3,\n\n                            classId: class1._id,\n                            swimmerId: swimmer._id,\n                            data: currentClass\n                        }, function (err) {\n                            if (err) return; //todo  prompt\n\n                            console.log('step3', currentClass)\n\n\n                            //FlowRouter.go('/classRegister/BookTheSameTimeSelectClassReady');\n                            var href=\"/classRegister/BookTheSameTimeSelectClassReady\"\n                                +\"?cartId=\"+Session.get('CART_ID')\n                                +\"&swimmerId=\"+swimmer._id\n                                +\"&classId=\"+class1._id\n                            FlowRouter.go(href);\n                        })\n\n                    }\n\n\n\n                    break;\n                }\n\n                case \"componentWillMount_CRBookTheSameTimePage\":\n                {\n                    //\n                    console.log('componentWillMount_CRBookTheSameTimePage')\n                    //清空上一轮的选择\n\n                    self.currentDay.set(undefinedSelectValue)\n                    self.currentTime.set(undefinedSelectValue)\n                    self.currentClass.set(null)\n                    self.currentStep.set(1)\n                    //self.avaiableDays //依赖于 当前的currentLevel\n                    //self.avaiableTimes //依赖于 当前选中的currentDay\n\n                    self.selectedClasses.set(Immutable.Map())\n\n                    break;\n                }\n\n            }\n        });\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            //初始化swimmer\n            Tracker.autorun(function () {\n\n                var swimmers = self.getSwimmers().fetch()\n\n                if (swimmers.length) {\n                    console.log('set currentSwimmer',swimmers[0]._id)\n\n                    self.currentSwimmer.set(swimmers[0])\n                    //self.currentLevel.set(App.getNextClassLevel(swimmers[0].level))\n\n                }\n\n            })\n\n            //获取当前swimmer的课数 用于判断swimmer的类型\n            Tracker.autorun(function () {\n                var currentSwimmer = self.currentSwimmer.get()\n                var appInfo = DB.App.findOne()\n\n                if(!appInfo) return;\n                if(!currentSwimmer) return;\n\n                Tracker.autorun(function () {\n\n                    var nowClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status:'normal',  //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionNow\n                    }).fetch();\n\n                    self.nowClasses.set(nowClasses)\n\n                    //self.currentSwimmerClassesRegisterInfo.set(currentSwimmerClassesRegisterInfo)\n\n\n                })\n                Tracker.autorun(function () {\n\n                    var registeredClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status:'normal',  //不显示cancel中的和 change中的\n                        sessionId: App.info.sessionRegister\n                    }).fetch();\n                    self.registeredClasses.set(registeredClasses)\n\n\n                })\n                Tracker.autorun(function () {\n\n                    var historyClasses=DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status:'normal',  //不显示cancel中的和 change中的\n                        sessionId:{$nin:[ App.info.sessionNow , App.info.sessionRegister]}\n\n                    }).fetch();\n                    self.historyClasses.set(historyClasses)\n\n                })\n\n                //shoppingCartClasses\n                Tracker.autorun(function () {\n\n                    var shoppingCart= DB.ShoppingCart.findOne({\n                        status:'active',\n                        type:'register'\n                    })\n\n                    var classItems=[];\n                    if(shoppingCart && shoppingCart.items.length){\n                        classItems = _.filter(shoppingCart.items,function(item){\n                            return item.class1 && item.class2 && item.class3   //完整的注册\n                                &&  item.swimmerId == currentSwimmer._id\n\n                        })\n                    }\n\n                    self.shoppingCartClasses.set(classItems)\n                    console.log(classItems)\n\n                })\n\n            })\n\n            //判断swimmer是不是第一次注册\n            Tracker.autorun(function () {\n                let nowClasses =self.nowClasses.get()\n                let registeredClasses =self.registeredClasses.get()\n\n                let historyClasses =self.historyClasses.get()\n\n                let shoppingCartClasses =self.shoppingCartClasses.get()\n\n\n                if(nowClasses.length==0\n                    && registeredClasses.length ==0\n                    && historyClasses.length ==0\n                //&& shoppingCartClasses.length>0\n                ){\n\n                    self.isFirstTime.set(true)\n                }else{\n                    self.isFirstTime.set(false)\n                }\n\n\n            })\n\n\n            //确定课程注册level\n            //对于return back 和 new swimmer  Level即当前level\n            //对于正在游的level＋1\n            Tracker.autorun(function(){\n                var nowClasses =self.nowClasses.get()\n                var currentSwimmer = self.currentSwimmer.get()\n\n                if(!currentSwimmer) return;\n\n                //当前session正在游\n                if(nowClasses.length>0){\n                    self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n\n                }else{\n                    self.currentLevel.set(currentSwimmer.level)\n                }\n\n            })\n\n            //days depend on level of swimmer\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n                var level = self.currentLevel.get();\n                var appInfo = DB.App.findOne()\n\n                if(!appInfo || !level) return;\n\n\n                let classes = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                //\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                let days = classes.map(function (v, n) {\n                    return {text: App.Config.week[v.day], value: v.day}\n                })\n\n                days.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption)\n\n                self.avaiableDays.set(days)\n\n                //设置默认值\n                //if (days.length) {\n                //    self.currentDay.set(days[0].value)\n                //}\n\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n\n                var currentDay = self.currentDay.get();\n                var appInfo = DB.App.findOne()\n\n                if(!appInfo) return;\n\n\n                var level\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                });\n\n                let classes = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                let times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    }\n                })\n                times.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption)\n\n                self.avaiableTimes.set(times)\n\n                //初始化time\n                //if (times.length) {\n                //    self.currentTime.set(times[0].value)\n                //}\n\n\n            });\n\n            //time确定后class就确定了\n            //level + day+ time  确定一个class\n            Tracker.autorun(function () {\n                //if (!DB.Classes) return;\n\n                let time = self.currentTime.get()\n                let appInfo = DB.App.findOne()\n\n                if(!appInfo) return;\n\n\n\n                let level\n                let day\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                    day = self.currentDay.get()\n                });\n\n                let theClass = DB.Classes.find({\n                    sessionId: appInfo.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0])\n                }\n\n\n            });\n\n\n\n\n            /*\n             若无sameclass 显示正常选择页\n\n            * */\n            Tracker.autorun(function () {\n                App.info = App.info || DB.App.findOne()\n                var nowClasses= self.nowClasses.get()\n\n                var currentLevel = self.currentLevel.get()\n\n                if(!App.info) return;\n                if(!currentLevel) return;\n\n\n\n                Tracker.autorun(function () {//获取当前class详细信息\n\n                    var ids=[]\n                    _.each(nowClasses,function(item){\n                        ids.push(item.classId)\n                    })\n                    var currentClasses =  DB.Classes.find({\n                        _id:{$in:ids}\n                    }).fetch()\n\n                    self.currentSwimmerClasses.set(currentClasses)\n\n\n                     //console.log(currentClasses)\n\n                    Tracker.autorun(function () {//获取类似class\n                        var sameClasses =[]\n\n                        _.each(currentClasses,function(currentClass){\n\n                            var sameClass = DB.Classes.findOne({\n                                sessionId: App.info.sessionRegister,\n                                levels:currentLevel,\n\n                                day:currentClass.day,\n                                startTime:currentClass.startTime,\n                                seatsRemain:{$gt:0}\n                            })\n\n                            if(sameClass){\n                                sameClasses.push(sameClass)\n                            }\n\n                        })\n\n                        self.currentSwimmerSameClasses.set(sameClasses)\n\n                        console.log('currentSwimmerSameClasses',sameClasses)\n\n                    })\n\n\n                })\n\n\n\n            })\n\n\n            //sameclass 已在购物车中则不显示该项\n            //sameclass 除去购物车已有的后数目为0 则显示正常选择页面\n            //若已经注册过该class 也要除去\n            //由于bookthesametime 在一个流程的第一步 所以不需考虑重复 后面的步骤需要考虑\n            Tracker.autorun(function (){\n\n                var currentSwimmer = self.currentSwimmer.get()\n                var currentSwimmerSameClasses = self.currentSwimmerSameClasses.get() //can be []\n\n                var registeredClasses = self.registeredClasses.get()\n                var shoppingCartClasses= self.shoppingCartClasses.get()\n\n\n                if(!currentSwimmer) return;\n\n\n                var registeredClassesIds = registeredClasses.map(function(item){\n                    return item.classId\n                });\n                var shoppingCartClassesIds = shoppingCartClasses.map(function(item){\n                    return item.classId\n                })\n\n                var exceptionIds=_.union(registeredClassesIds,shoppingCartClassesIds)\n\n                console.log('registeredClasses',registeredClassesIds)\n                console.log('shoppingCartClasses',shoppingCartClassesIds)\n                console.log('exceptionIds',exceptionIds)\n\n\n\n\n                var avaibleSameClasses = _.filter(currentSwimmerSameClasses,function(item){\n                    return exceptionIds.indexOf(item._id)==-1\n                })\n                self.currentSwimmerAvaibleSameClasses.set(avaibleSameClasses)\n\n\n                console.log('currentSwimmerAvaibleSameClasses',avaibleSameClasses)\n\n\n                //avaibleSameClasses\n\n\n            })\n\n\n            //view  bookthesame time or common\n            Tracker.autorun(function () {\n                var avaibleSameClasses = self.currentSwimmerAvaibleSameClasses.get()\n\n                if(avaibleSameClasses.length>0){\n                    self.currentSwimmerType.set('swimmer-ongoing')\n                }else{\n                    self.currentSwimmerType.set('swimmer-sibling')\n                }\n            })\n\n\n\n\n\n\n\n        })\n\n\n    });\n}"]},"hash":"1eb94cf67d93faeedfc816dcdc3c2335d9b078cf"}
