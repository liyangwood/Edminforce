{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"\nRC.NavList = React.createClass({\n  displayName: \"NavList\",\n\n  getTheme: function (name) {\n    var theme = _.contains([\"regular\", \"dark\"], name) ? name : \"regular\";\n    return theme + \" \" + (this.props.className || \"\");\n  },\n  render: function () {\n\n    var self = this;\n    var curPath = FlowRouter.current().path;\n    var showCurrent = _.isUndefined(this.props.showCurrent) ? true : this.props.showCurrent;\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null;\n\n    return React.createElement(\n      \"ul\",\n      { className: \"unselect nav-list alt \" + this.getTheme(this.props.theme) },\n      this.props.list.map(function (item, n) {\n\n        var itemRender = null;\n        var cur = null;\n        var uiIcon = null;\n\n        switch (item.type) {\n          case \"title\":\n            itemRender = React.createElement(\n              \"h4\",\n              { className: \"type-listTitle sub\" },\n              item.text\n            );\n            break;\n          default:\n            cur = \"transition link\" + (item.uiClass ? \" with-icon\" : \"\") + (showCurrent && item.href == curPath ? \" cur\" : \"\");\n            uiIcon = React.createElement(RC.uiIcon, { uiClass: item.uiClass, uiSize: 0 });\n            itemRender = item.href ? React.createElement(\n              \"a\",\n              { href: item.href, className: \"block cursor\" },\n              item.text\n            ) : React.createElement(\n              \"span\",\n              { onClick: item.onClick, className: \"block cursor\" },\n              item.text\n            );\n        }\n\n        return React.createElement(\n          \"li\",\n          { className: cur, key: n },\n          uiIcon,\n          itemRender\n        );\n      })\n    );\n  }\n});","ast":null,"map":{"version":3,"sources":["/RC/navList/navList.jsx"],"names":[],"mappings":";AACA,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;;;AAC7B,UAAQ,EAAA,UAAC,IAAI,EAAC;AACZ,QAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAC,MAAM,CAAC,EAAE,IAAI,CAAC,GAC5C,IAAI,GAAG,SAAS,CAAA;AACpB,WAAO,KAAK,GAAC,GAAG,IAAE,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAA,AAAC,CAAA;GAC9C;AACD,QAAM,EAAA,YAAG;;AAEP,QAAI,IAAI,GAAG,IAAI,CAAA;AACf,QAAI,OAAO,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,IAAI,CAAA;AACvC,QAAI,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAA;AACvF,QAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,CAAA;;AAEvE,WAAO;;QAAI,SAAS,EAAE,wBAAwB,GAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,AAAC;MAE7E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAS,IAAI,EAAC,CAAC,EAAC;;AAElC,YAAI,UAAU,GAAG,IAAI,CAAA;AACrB,YAAI,GAAG,GAAG,IAAI,CAAA;AACd,YAAI,MAAM,GAAG,IAAI,CAAA;;AAEjB,gBAAO,IAAI,CAAC,IAAI;AACd,eAAK,OAAO;AACV,sBAAU,GAAG;;gBAAI,SAAS,EAAC,oBAAoB;cAAE,IAAI,CAAC,IAAI;aAAM,CAAA;AAClE,kBAAK;AAAA,AACL;AACE,eAAG,GAAG,iBAAiB,IAAE,IAAI,CAAC,OAAO,GAAG,YAAY,GAAG,EAAE,CAAA,AAAC,IAAE,WAAW,IAAI,IAAI,CAAC,IAAI,IAAE,OAAO,GAAG,MAAM,GAAG,EAAE,CAAA,AAAC,CAAA;AAC5G,kBAAM,GAAG,oBAAC,EAAE,CAAC,MAAM,IAAC,OAAO,EAAE,IAAI,CAAC,OAAO,AAAC,EAAC,MAAM,EAAE,CAAC,AAAC,GAAG,CAAA;AACxD,sBAAU,GAAG,IAAI,CAAC,IAAI,GAClB;;gBAAG,IAAI,EAAE,IAAI,CAAC,IAAI,AAAC,EAAC,SAAS,EAAC,cAAc;cAAE,IAAI,CAAC,IAAI;aAAK,GAC5D;;gBAAM,OAAO,EAAE,IAAI,CAAC,OAAO,AAAC,EAAC,SAAS,EAAC,cAAc;cAAE,IAAI,CAAC,IAAI;aAAQ,CAAA;AAAA,SAC/E;;AAED,eAAO;;YAAI,SAAS,EAAE,GAAG,AAAC,EAAC,GAAG,EAAE,CAAC,AAAC;UAAE,MAAM;UAAE,UAAU;SAAM,CAAA;OAC7D,CAAC;KAEC,CAAA;GACN;CACF,CAAC,CAAA","file":"/RC/navList/navList.jsx.map","sourcesContent":["\nRC.NavList = React.createClass({\n  getTheme(name){\n    let theme = _.contains([\"regular\",\"dark\"], name)\n      ? name : \"regular\"\n    return theme+\" \"+(this.props.className || \"\")\n  },\n  render() {\n\n    let self = this\n    let curPath = FlowRouter.current().path\n    let showCurrent = _.isUndefined(this.props.showCurrent) ? true : this.props.showCurrent\n    if (!_.isArray(this.props.list) || !this.props.list.length) return null\n\n    return <ul className={\"unselect nav-list alt \"+this.getTheme(this.props.theme)}>\n      {\n      this.props.list.map(function(item,n){\n\n        let itemRender = null\n        let cur = null\n        let uiIcon = null\n\n        switch(item.type){\n          case \"title\":\n            itemRender = <h4 className=\"type-listTitle sub\">{item.text}</h4>\n          break\n          default:\n            cur = \"transition link\"+(item.uiClass ? \" with-icon\" : \"\")+(showCurrent && item.href==curPath ? \" cur\" : \"\")\n            uiIcon = <RC.uiIcon uiClass={item.uiClass} uiSize={0} />\n            itemRender = item.href\n              ? <a href={item.href} className=\"block cursor\">{item.text}</a>\n              : <span onClick={item.onClick} className=\"block cursor\">{item.text}</span>\n        }\n\n        return <li className={cur} key={n}>{uiIcon}{itemRender}</li>\n      })\n      }\n    </ul>\n  },\n})\n"]},"hash":"ff24236ae424e1347d2071b004e5c0435a4d76b4"}
