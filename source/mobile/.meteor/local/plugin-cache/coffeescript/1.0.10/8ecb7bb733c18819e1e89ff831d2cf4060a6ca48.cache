{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _fetchAllOtherChannelUsers, _getStatusID;\n\nIH.Coll.ChatStatus = new Mongo.Collection(\"chat_status\");\n\nIH.Schema.ChatStatus = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    index: -1,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        return this.unset();\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    },\n    optional: true,\n    denyInsert: true\n  },\n  UID: {\n    type: String,\n    label: \"User ID\"\n  },\n  CHID: {\n    type: String,\n    label: \"Channel ID\"\n  },\n  active: {\n    type: Boolean,\n    label: \"Channel is active\",\n    autoValue: function() {\n      if (this.isInsert) {\n        return false;\n      }\n    }\n  },\n  numUnread: {\n    type: Number,\n    label: \"Number of unread message per User+Channel\",\n    optional: true,\n    autoValue: function() {\n      if (this.isInsert) {\n        return 0;\n      }\n    }\n  }\n});\n\nIH.Coll.ChatStatus.attachSchema(IH.Schema.ChatStatus);\n\nIH.Coll.ChatStatus.allow({\n  insert: function() {\n    return true;\n  },\n  update: function(userId, doc) {\n    return userId && userId === doc.UID;\n  },\n  remove: function() {\n    return false;\n  }\n});\n\n_fetchAllOtherChannelUsers = function(cid, uid) {\n  var chnl;\n  chnl = IH.Coll.ChatChannels.findOne(cid);\n  return allChannelUsers;\n};\n\n_getStatusID = function(action) {\n  var channelID, status, statusID;\n  channelID = action.message != null ? action.message.CHID : action.channelID;\n  status = IH.Coll.ChatStatus.findOne({\n    UID: Meteor.userId(),\n    CHID: channelID\n  });\n  if (status != null) {\n    statusID = status._id;\n  }\n  return statusID;\n};\n\nIH.Store.ChatStatus = {\n  incUnreadCount: function(sid) {\n    var status;\n    status = IH.Coll.ChatStatus.findOne(sid);\n    if (!status.active) {\n      return IH.Coll.ChatStatus.update(sid, {\n        $inc: {\n          numUnread: 1\n        }\n      });\n    }\n  },\n  clearUnreadCount: function(sid) {\n    return IH.Coll.ChatStatus.update(sid, {\n      $set: {\n        active: true,\n        numUnread: 0\n      }\n    });\n  },\n  deActivate: function(sid) {\n    return IH.Coll.ChatStatus.update(sid, {\n      $set: {\n        active: false\n      }\n    });\n  }\n};\n\nIH.Store.ChatStatus.dispatchToken = ChatDispatcher.register(function(action) {\n  var statusID;\n  statusID = _getStatusID(action);\n  if (statusID == null) {\n    console.error(\"channel status not found\");\n  }\n  switch (action.type) {\n    case \"CREATE_NEW_MESSAGE\":\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken]);\n      return IH.Store.ChatStatus.incUnreadCount(statusID);\n    case \"USER_ACTIVATE_CHANNEL\":\n      return IH.Store.ChatStatus.clearUnreadCount(statusID);\n    case \"USER_LEFT_CHANNEL\":\n      return IH.Store.ChatStatus.deActivate(statusID);\n  }\n});\n","sourceMap":{"version":3,"file":"/stores/statusStore.coffee.js","sourceRoot":"","sources":["/packages/ihealth_chat-engine/stores/statusStore.coffee"],"names":[],"mappings":"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","sourcesContent":["\nIH.Coll.ChatStatus = new Mongo.Collection(\"chat_status\")\nIH.Schema.ChatStatus = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n\n  updatedAt:\n    type: Date\n    autoValue: ->\n      if @isUpdate\n        new Date()\n    optional: true\n    denyInsert: true\n\n  UID:\n    type: String\n    label: \"User ID\"\n\n  CHID:\n    type: String\n    label: \"Channel ID\"\n\n  active:\n    type: Boolean\n    label: \"Channel is active\"\n    autoValue: ->\n      if @isInsert\n        false\n\n  numUnread:\n    type: Number\n    label: \"Number of unread message per User+Channel\"\n    optional: true\n    autoValue: ->\n      if @isInsert\n        return 0\n\n\n\n#TODO: put in users collections (related to this.active)\n#  status:\n#    type: String\n#    label: \"\"\n\nIH.Coll.ChatStatus.attachSchema IH.Schema.ChatStatus\n\n\nIH.Coll.ChatStatus.allow\n\n  insert: ->\n    true\n\n  update: (userId, doc) ->\n    userId and userId is doc.UID\n\n  remove: ->\n    false\n\n# methods\n\n_fetchAllOtherChannelUsers = (cid, uid) ->\n  chnl = IH.Coll.ChatChannels.findOne(cid)\n#   _.filter allChannelUsers, (user) ->\n#    return user isnt cid\n  return allChannelUsers\n\n_getStatusID = (action) ->\n  channelID = if action.message? then action.message.CHID else action.channelID\n  status = IH.Coll.ChatStatus.findOne({UID: Meteor.userId(), CHID: channelID})\n  if status?\n    statusID = status._id\n  return statusID\n\n\n# TODO: sid should be a list of all user_status in this channel\n\nIH.Store.ChatStatus =\n\n  incUnreadCount: (sid) ->\n    # _fetchAllOtherChannelUsers (except uid)\n    status = IH.Coll.ChatStatus.findOne(sid)\n    unless status.active\n      IH.Coll.ChatStatus.update(sid, {$inc: {numUnread: 1}})\n\n  clearUnreadCount: (sid) ->\n    IH.Coll.ChatStatus.update(sid, {$set: {active: true, numUnread: 0}})\n\n  deActivate: (sid) ->\n    IH.Coll.ChatStatus.update(sid, {$set: {active: false}})\n\n\n# dispatcher token\nIH.Store.ChatStatus.dispatchToken = ChatDispatcher.register (action)->\n\n  statusID = _getStatusID(action)\n  unless statusID?\n    console.error \"channel status not found\"\n\n  switch action.type\n\n    when \"CREATE_NEW_MESSAGE\"\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken])\n      IH.Store.ChatStatus.incUnreadCount(statusID)\n\n    when \"USER_ACTIVATE_CHANNEL\"\n      IH.Store.ChatStatus.clearUnreadCount(statusID)\n\n    when \"USER_LEFT_CHANNEL\"\n      IH.Store.ChatStatus.deActivate(statusID)\n\n\n\n"]}}