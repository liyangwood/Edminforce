{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nIH.Coll.ChatMessages = new Mongo.Collection(\"chat_message\");\n\nIH.Schema.ChatMessages = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    index: -1,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        return this.unset();\n      }\n    },\n    denyUpdate: true\n  },\n  SID: {\n    type: String,\n    label: \"Sender ID\"\n  },\n  CHID: {\n    type: String,\n    label: \"Channel ID\",\n    index: true\n  },\n  type: {\n    type: String,\n    label: \"Message Type\",\n    autoValue: function() {\n      if (!this.isSet) {\n        return \"txt\";\n      }\n    },\n    optional: true\n  },\n  content: {\n    type: String\n  }\n});\n\nIH.Coll.ChatMessages.attachSchema(IH.Schema.ChatMessages);\n\nIH.Coll.ChatMessages.allow({\n  insert: function(userId, doc) {\n    return userId && userId === doc.SID;\n  },\n  update: function(userId, doc, fields, modifier) {\n    return false;\n  },\n  remove: function(userId, doc, fields, modifier) {\n    return false;\n  },\n  fetch: [\"senderId\"]\n});\n\nIH.Store.ChatMessages = {};\n\nIH.Store.ChatMessages.dispatchToken = ChatDispatcher.register(function(action) {\n  var insertObj;\n  switch (action.type) {\n    case \"CREATE_NEW_MESSAGE\":\n      return IH.Coll.ChatMessages.insert(action.message);\n    case \"DOCTOR_JOINED_CHANNEL\":\n      insertObj = {\n        SID: \"system\",\n        CHID: action.channelID,\n        type: \"note\",\n        content: action.doctor + \" joined channel\"\n      };\n      return IH.Coll.ChatMessages.insert(insertObj);\n  }\n});\n","sourceMap":{"version":3,"file":"/stores/messageStore.coffee.js","sourceRoot":"","sources":["/packages/ihealth_chat-engine/stores/messageStore.coffee"],"names":[],"mappings":";AACA,EAAE,CAAC,IAAI,CAAC,YAAR,GAA2B,IAAA,KAAK,CAAC,UAAN,CAAiB,cAAjB,CAA3B,CAAA;;AAAA,EACE,CAAC,MAAM,CAAC,YAAV,GAA6B,IAAA,YAAA,CAE3B;AAAA,EAAA,SAAA,EACE;AAAA,IAAA,IAAA,EAAM,IAAN;AAAA,IACA,KAAA,EAAO,CAAA,CADP;AAAA,IAEA,SAAA,EAAW,SAAA,GAAA;AACT,MAAA,IAAG,IAAC,CAAA,QAAJ;eACM,IAAA,IAAA,CAAA,EADN;OAAA,MAEK,IAAG,IAAC,CAAA,QAAJ;eACH;AAAA,UAAA,YAAA,EAAkB,IAAA,IAAA,CAAA,CAAlB;UADG;OAAA,MAAA;eAGH,IAAC,CAAA,KAAD,CAAA,EAHG;OAHI;IAAA,CAFX;AAAA,IASA,UAAA,EAAY,IATZ;GADF;AAAA,EAYA,GAAA,EACE;AAAA,IAAA,IAAA,EAAM,MAAN;AAAA,IACA,KAAA,EAAO,WADP;GAbF;AAAA,EAgBA,IAAA,EACE;AAAA,IAAA,IAAA,EAAM,MAAN;AAAA,IACA,KAAA,EAAO,YADP;AAAA,IAEA,KAAA,EAAO,IAFP;GAjBF;AAAA,EAqBA,IAAA,EACE;AAAA,IAAA,IAAA,EAAM,MAAN;AAAA,IACA,KAAA,EAAO,cADP;AAAA,IAEA,SAAA,EAAW,SAAA,GAAA;AACT,MAAA,IAAA,CAAA,IAAQ,CAAA,KAAR;eACE,MADF;OADS;IAAA,CAFX;AAAA,IAKA,QAAA,EAAU,IALV;GAtBF;AAAA,EA6BA,OAAA,EACE;AAAA,IAAA,IAAA,EAAM,MAAN;GA9BF;CAF2B,CAD7B,CAAA;;AAAA,EAqCE,CAAC,IAAI,CAAC,YAAY,CAAC,YAArB,CAAkC,EAAE,CAAC,MAAM,CAAC,YAA5C,CArCA,CAAA;;AAAA,EAuCE,CAAC,IAAI,CAAC,YAAY,CAAC,KAArB,CACE;AAAA,EAAA,MAAA,EAAQ,SAAC,MAAD,EAAS,GAAT,GAAA;WACN,MAAA,IAAW,MAAA,KAAU,GAAG,CAAC,IADnB;EAAA,CAAR;AAAA,EAGA,MAAA,EAAQ,SAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAsB,QAAtB,GAAA;WACN,MADM;EAAA,CAHR;AAAA,EAMA,MAAA,EAAQ,SAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAsB,QAAtB,GAAA;WACN,MADM;EAAA,CANR;AAAA,EASA,KAAA,EAAO,CAAC,UAAD,CATP;CADF,CAvCA,CAAA;;AAAA,EAwDE,CAAC,KAAK,CAAC,YAAT,GAAwB,EAxDxB,CAAA;;AAAA,EA0DE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAtB,GAAsC,cAAc,CAAC,QAAf,CAAwB,SAAC,MAAD,GAAA;AAE5D,MAAA,SAAA;AAAA,UAAO,MAAM,CAAC,IAAd;AAAA,SAEO,oBAFP;aAGI,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,MAAM,CAAC,OAAnC,EAHJ;AAAA,SAKO,uBALP;AAOI,MAAA,SAAA,GACE;AAAA,QAAA,GAAA,EAAK,QAAL;AAAA,QACA,IAAA,EAAM,MAAM,CAAC,SADb;AAAA,QAEA,IAAA,EAAM,MAFN;AAAA,QAGA,OAAA,EAAY,MAAM,CAAC,MAAR,GAAe,iBAH1B;OADF,CAAA;aAKA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAArB,CAA4B,SAA5B,EAZJ;AAAA,GAF4D;AAAA,CAAxB,CA1DtC,CAAA","sourcesContent":["\nIH.Coll.ChatMessages = new Mongo.Collection \"chat_message\"\nIH.Schema.ChatMessages = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n    denyUpdate: true\n\n  SID:\n    type: String\n    label: \"Sender ID\"\n\n  CHID:\n    type: String\n    label: \"Channel ID\"\n    index: true\n\n  type:\n    type: String\n    label: \"Message Type\"    # \"txt\", \"img\", \"file\", \"note\", \"audio\", \"video\", etc\n    autoValue: ->\n      unless @isSet\n        \"txt\"\n    optional: true\n\n  content:\n    type: String    # ?\n\n\n\nIH.Coll.ChatMessages.attachSchema IH.Schema.ChatMessages\n\nIH.Coll.ChatMessages.allow\n  insert: (userId, doc) ->\n    userId and userId is doc.SID\n\n  update: (userId, doc, fields, modifier) ->\n    false\n\n  remove: (userId, doc, fields, modifier) ->\n    false\n\n  fetch: [\"senderId\"]\n\n#\n#IH.Coll.ChatMessages.before.insert (userId, doc) ->\n#  _.extend doc, {from: userId, read: false}\n#  return doc\n\nIH.Store.ChatMessages = {}\n\nIH.Store.ChatMessages.dispatchToken = ChatDispatcher.register (action)->\n\n  switch action.type\n\n    when \"CREATE_NEW_MESSAGE\"\n      IH.Coll.ChatMessages.insert(action.message)\n\n    when \"DOCTOR_JOINED_CHANNEL\"\n#      username =  # need to fetch username from ID\n      insertObj =\n        SID: \"system\"\n        CHID: action.channelID\n        type: \"note\"\n        content: \"#{action.doctor} joined channel\"\n      IH.Coll.ChatMessages.insert(insertObj)\n\n\n"]}}