{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.publish(\"ChatMessageList\", function(channelID, limit) {\n  if (!this.userId) {\n    return this.error(\"Not logged in\");\n  } else {\n    console.log(limit);\n    check(channelID, String);\n    check(limit, Number);\n    return IH.Coll.ChatMessages.find({\n      CHID: channelID\n    }, {\n      sort: {\n        createdAt: -1\n      },\n      limit: limit\n    });\n  }\n});\n\nMeteor.publishComposite(\"ChatMessageUser\", function(channelID) {\n  if (!this.userId) {\n    return this.error(\"Not logged in\");\n  } else {\n    check(channelID, String);\n    return {\n      find: function() {\n        return IH.Coll.ChatStatus.find({\n          CHID: channelID\n        });\n      },\n      children: [\n        {\n          find: function(status) {\n            return Meteor.users.find({\n              _id: status.UID\n            }, {\n              fields: {\n                \"profile.name\": 1,\n                \"profile.avatar\": 1,\n                \"profile.gender\": 1\n              }\n            });\n          }\n        }, {\n          find: function(status) {\n            return IH.Coll.ChatChannels.find(channelID);\n          }\n        }\n      ]\n    };\n  }\n});\n\nMeteor.publishComposite(\"ChatChannelList\", function() {\n  if (!this.userId) {\n    return this.error(\"Not logged in\");\n  } else {\n    return {\n      find: function() {\n        return IH.Coll.ChatStatus.find({\n          UID: this.userId\n        });\n      },\n      children: [\n        {\n          find: function(status) {\n            return IH.Coll.ChatChannels.find(status.CHID);\n          },\n          children: [\n            {\n              find: function(channel, status) {\n                var uid;\n                uid = channel.DID === this.userId ? channel.PID : channel.DID;\n                return Meteor.users.find({\n                  _id: uid\n                }, {\n                  fields: {\n                    \"profile.name\": 1,\n                    \"profile.avatar\": 1\n                  }\n                });\n              }\n            }\n          ]\n        }\n      ]\n    };\n  }\n});\n","sourceMap":{"version":3,"file":"/publications.coffee.js","sourceRoot":"","sources":["/packages/ihealth_chat-engine/publications.coffee"],"names":[],"mappings":"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","sourcesContent":["\nMeteor.publish \"ChatMessageList\", (channelID, limit)->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n\n    console.log limit\n    check(channelID, String)\n    check(limit, Number)\n\n    IH.Coll.ChatMessages.find(\n      CHID: channelID\n    ,\n      sort: { createdAt: -1 }\n      limit: limit\n    )\n\nMeteor.publishComposite \"ChatMessageUser\", (channelID)->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n    check(channelID, String)\n\n    find: ->\n      IH.Coll.ChatStatus.find({CHID: channelID})\n    children: [\n      find: (status) ->\n        Meteor.users.find(\n          _id: status.UID\n        ,\n          fields: {\"profile.name\":1, \"profile.avatar\":1,\"profile.gender\":1}\n        )\n    ,\n      find: (status) ->\n        IH.Coll.ChatChannels.find(channelID)\n    ]\n\nMeteor.publishComposite \"ChatChannelList\", ->\n  unless @userId\n    @error(\"Not logged in\")\n  else\n    find: ->\n      IH.Coll.ChatStatus.find({UID:@userId})\n    children: [\n      find: (status)->\n        IH.Coll.ChatChannels.find(status.CHID)\n      children: [\n        find: (channel, status)->\n          uid = if channel.DID is @userId then channel.PID else channel.DID   # temp solutions\n          Meteor.users.find(\n            _id: uid\n          ,\n            fields: {\"profile.name\":1,\"profile.avatar\":1}\n          )\n      ]\n    ]\n"]}}