{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar LastMsgSchema;\n\nLastMsgSchema = new SimpleSchema({\n  createdAt: {\n    type: Date\n  },\n  from: {\n    type: String,\n    label: \"Sender ID\"\n  },\n  content: {\n    type: String\n  }\n});\n\nIH.Coll.ChatChannels = new Mongo.Collection(\"chat_channel\");\n\nIH.Schema.ChatChannels = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    index: -1,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        return this.unset();\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    },\n    optional: true,\n    denyInsert: true\n  },\n  PID: {\n    type: String,\n    label: \"Patient ID\"\n  },\n  DID: {\n    type: String,\n    label: \"Primary Doctor of this Channel\"\n  },\n  others: {\n    type: [String],\n    label: \"List of Other Doctors' IDs\",\n    autoValue: function() {\n      if (this.isInsert && !this.isSet) {\n        return [];\n      }\n    }\n  },\n  lastMsg: {\n    type: LastMsgSchema,\n    label: \"last message of channel\",\n    optional: true\n  }\n});\n\nIH.Coll.ChatChannels.attachSchema(IH.Schema.ChatChannels);\n\nIH.Coll.ChatChannels.allow({\n  insert: function() {\n    return true;\n  },\n  update: function() {\n    return true;\n  },\n  remove: function() {\n    return false;\n  }\n});\n\nIH.Store.ChatChannels = {\n  create: function(patient, doctor) {\n    var newChannel;\n    newChannel = {\n      PID: patient,\n      DID: doctor,\n      others: []\n    };\n    return IH.Coll.ChatChannels.insert(newChannel);\n  },\n  addUser: function(channelID, doctor) {\n    return IH.Coll.ChatChannels.update(channelID, {\n      $push: {\n        others: doctor\n      }\n    });\n  },\n  removeUser: function(channelID, doctor) {\n    return IH.Coll.ChatChannels.update(channelID, {\n      $pull: {\n        others: doctor\n      }\n    });\n  },\n  updateLastMsg: function(m) {\n    var updateMsg;\n    updateMsg = {\n      createdAt: new Date(),\n      from: m.SID,\n      content: m.content\n    };\n    return IH.Coll.ChatChannels.update(m.CHID, {\n      $set: {\n        lastMsg: updateMsg\n      }\n    });\n  }\n};\n\nIH.Store.ChatChannels.dispatchToken = ChatDispatcher.register(function(action) {\n  switch (action.type) {\n    case \"NEW_CONTACTS_CREATED\":\n      return IH.Store.ChatChannels.create(action.patient, action.doctor);\n    case \"DOCTOR_JOINED_CHANNEL\":\n      return IH.Store.ChatChannels.addUser(action.channelID, action.doctor);\n    case \"DOCTOR_LEFT_CHANNEL\":\n      return IH.Store.ChatChannels.removeUser(action.channelID, action.doctor);\n    case \"USER_ACTIVATE_CHANNEL\":\n      if (Meteor.isClient) {\n        return Session.set(\"ACTIVE_CHAT_CHANNEL\", action.channelID);\n      }\n      break;\n    case \"CREATE_NEW_MESSAGE\":\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken]);\n      if (Meteor.isClient) {\n        return IH.Store.ChatChannels.updateLastMsg(action.message);\n      }\n  }\n});\n","sourceMap":{"version":3,"file":"/stores/channelStore.coffee.js","sourceRoot":"","sources":["/packages/ihealth_chat-engine/stores/channelStore.coffee"],"names":[],"mappings":"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","sourcesContent":["\n\nLastMsgSchema = new SimpleSchema\n  createdAt:\n    type: Date\n\n  from:\n    type: String\n    label: \"Sender ID\"\n\n  content:\n    type: String\n\n\nIH.Coll.ChatChannels = new Mongo.Collection(\"chat_channel\")\nIH.Schema.ChatChannels = new SimpleSchema\n\n  createdAt:\n    type: Date\n    index: -1\n    autoValue: ->\n      if @isInsert\n        new Date()\n      else if @isUpsert\n        $setOnInsert: new Date()\n      else\n        @unset()\n\n  updatedAt:\n    type: Date\n    autoValue: ->\n      if @isUpdate\n        new Date()\n    optional: true\n    denyInsert: true\n\n  PID:\n    type: String\n    label: \"Patient ID\"\n\n  DID:\n    type: String\n    label: \"Primary Doctor of this Channel\"\n\n  others:\n    type: [ String ]\n    label: \"List of Other Doctors' IDs\"\n    autoValue: ->\n      if @isInsert and not @isSet\n        return []\n\n  lastMsg:\n    type: LastMsgSchema\n    label: \"last message of channel\"\n    optional: true\n\n\nIH.Coll.ChatChannels.attachSchema IH.Schema.ChatChannels\n\n\nIH.Coll.ChatChannels.allow\n\n  insert: ->\n    true\n\n  update: ->\n    true\n\n  remove: ->\n    false\n\n\nIH.Store.ChatChannels =\n\n  create: (patient, doctor) ->\n    newChannel =\n      PID: patient\n      DID: doctor\n      others: []\n    IH.Coll.ChatChannels.insert(newChannel)\n\n  addUser: (channelID, doctor) ->\n    IH.Coll.ChatChannels.update(channelID, {$push: {others: doctor}})\n\n  removeUser: (channelID, doctor) ->\n    IH.Coll.ChatChannels.update(channelID, {$pull: {others: doctor}})\n\n  updateLastMsg: (m) ->\n    updateMsg =\n      createdAt: new Date()\n      from: m.SID\n      content: m.content\n\n    IH.Coll.ChatChannels.update(m.CHID, {$set: {lastMsg: updateMsg}})\n\n\n# dispatcher token\nIH.Store.ChatChannels.dispatchToken = ChatDispatcher.register (action)->\n\n  switch action.type\n\n    when \"NEW_CONTACTS_CREATED\"\n      IH.Store.ChatChannels.create(action.patient, action.doctor)\n\n    when \"DOCTOR_JOINED_CHANNEL\"\n      IH.Store.ChatChannels.addUser(action.channelID, action.doctor)\n\n    when \"DOCTOR_LEFT_CHANNEL\"\n      IH.Store.ChatChannels.removeUser(action.channelID, action.doctor)\n\n    when \"USER_ACTIVATE_CHANNEL\"\n      if Meteor.isClient\n        Session.set(\"ACTIVE_CHAT_CHANNEL\", action.channelID)\n\n    when \"CREATE_NEW_MESSAGE\"\n      ChatDispatcher.waitFor([IH.Store.ChatMessages.dispatchToken])\n      if Meteor.isClient\n        IH.Store.ChatChannels.updateLastMsg(action.message)\n"]}}