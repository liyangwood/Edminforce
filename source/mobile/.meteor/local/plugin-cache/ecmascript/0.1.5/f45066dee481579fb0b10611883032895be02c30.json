{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/* globals DEBUG: true, _: true */\n\nvar DEBUG = !!process.env.VELOCITY_DEBUG;\nvar _ = Npm.require('lodash');\nvar url = Npm.require('url');\nvar mongodbUri = Npm.require('mongodb-uri');\nvar freeport = Npm.require('freeport');\nvar tmp = Npm.require('tmp');\nvar files = VelocityMeteorInternals.files;\nvar _mirrorChildProcesses = {};\nNpm.require('colors');\n\n// Specifies the Meteor release that we use for mirrors\nVelocity.mirrorMeteorReleaseName = 'velocity:METEOR';\nVelocity.mirrorMeteorVersion = '1.2.0.2_1';\nVelocity.mirrorMeteorRelease = process.env.VELOCITY_MIRROR_METEOR_RELEASE || Velocity.mirrorMeteorReleaseName + '@' + Velocity.mirrorMeteorVersion;\nVelocity.mirrorMeteorToolReleaseName = 'velocity:meteor-tool';\nVelocity.mirrorMeteorToolVersion = '1.1.9_1';\nVelocity.mirrorMeteorToolRelease = process.env.VELOCITY_MIRROR_METEOR_TOOL_RELEASE || Velocity.mirrorMeteorToolReleaseName + '@' + Velocity.mirrorMeteorToolVersion;\n\n/**\n * Starts a new mirror if it has not already been started, and reuses an\n * existing one if it is already started.\n *\n * This method will update the `Velocity.Collections.Mirrors` collection with once the mirror is ready.\n *\n * @method velocity/mirrors/request\n * @for Meteor.methods\n * @param {Object} options                  Options for the mirror.\n * @param {String} options.framework        The name of the calling framework\n * @param {String} [options.testsPath]      The path to tests for this framework.\n *                                          For example 'jasmine/server/unit'.\n *                                          Don't include a leading or trailing slash.\n * @param {String} [options.args]           Additional arguments that the mirror is called with\n *                                          It accepts all the options that are available for `meteor run`.\n * @param {Object} [options.env]            Additional environment variables that the mirror is called with.\n * @param {Number} [options.port]           Use a specific port.  Default is random, free port.\n * @param {String} [options.rootUrlPath]    Adds this string to the end of the root url in the\n *                                          Velocity.Collections.Mirrors collection. eg. `/?jasmine=true`\n * @param {Number} [options.nodes]          The number of mirrors required. This is used by\n *                                          distributable frameworks. Default is 1\n * @param {Boolean} [options.handshake]     Specifies whether or not this mirror should perform\n *                                          a DDP handshake with the parent. Distributable\n *                                          frameworks can use this to get mirrors to behave\n *                                          like workers. The default is true\n *\n */\nVelocity.Methods['velocity/mirrors/request'] = function (options) {\n  check(options, {\n    framework: String,\n    testsPath: Match.Optional(String),\n    args: Match.Optional([Match.Any]),\n    env: Match.Optional(Object),\n    port: Match.Optional(Number),\n    rootUrlPath: Match.Optional(String),\n    nodes: Match.Optional(Number),\n    handshake: Match.Optional(Boolean)\n  });\n\n  this.unblock();\n\n  _startMirrors(options);\n};\n\nfunction _startMirrors(options) {\n  options = _.extend({\n    nodes: 1\n  }, options);\n  DEBUG && console.log('[velocity]', options.nodes, 'mirror(s) requested');\n  // only respect a provided port if a single mirror is requested\n  if (options.port && options.nodes === 1) {\n    _startMirror(options);\n  } else {\n    _reuseMirrors();\n    _startUninitializedMirrorsWithFreePorts();\n  }\n\n  function _reuseMirrors() {\n    options.unitializedNodes = options.nodes;\n    var _reusableMirrorsForFramework = _.filter(Velocity.reusableMirrors, function (rmp) {\n      return rmp.framework === options.framework && rmp.reused === false;\n    });\n\n    _reusableMirrorsForFramework.forEach(function (rmff) {\n      rmff.reused = true;\n\n      options.port = rmff.port;\n      _startMirror(options);\n\n      options.unitializedNodes--;\n    });\n  }\n\n  function _startUninitializedMirrorsWithFreePorts() {\n    var startWithFreePort = Meteor.bindEnvironment(function (err, port) {\n      options.port = port;\n      _startMirror(options);\n    });\n\n    for (var i = 0; i < options.unitializedNodes; i++) {\n      freeport(startWithFreePort);\n    }\n  }\n}\n\nvar _generateSettingsFile = _.memoize(function () {\n  var tmpObject = tmp.fileSync();\n  files.writeFile(tmpObject.name, JSON.stringify(Meteor.settings));\n  return tmpObject.name;\n});\n\nfunction _startMirror(options) {\n\n  // TODO, options is passed as a reference, maybe we should pass a copy instead\n\n  options.handshake = options.handshake === undefined ? true : options.handshake;\n  options.rootUrlPath = options.rootUrlPath || '';\n  options.host = _getMirrorUrl(options.port);\n  options.rootUrl = options.host;\n\n  var environment = _getEnvironmentVariables(options);\n\n  // append the port to the mirror log if there are multiple mirrors\n  var processName = environment.FRAMEWORK;\n  if (options.nodes > 1) {\n    processName = environment.FRAMEWORK + '_' + environment.PORT;\n  }\n\n  var mirrorChild = _getMirrorChild(environment.FRAMEWORK, processName);\n  if (mirrorChild.isRunning()) {\n    return;\n  }\n\n  var command = VelocityInternals.isWindows() ? 'meteor.bat' : 'meteor';\n  var args = ['run', '--test-app', '--port', String(environment.PORT)];\n\n  if (options.testsPath) {\n    args.push('--include-tests', files.convertToStandardPath(options.testsPath));\n  }\n\n  if (VelocityInternals.isEnvironmentVariableTrue(process.env.VELOCITY_CI, false)) {\n    args.push('--once');\n  }\n\n  if (Meteor.settings) {\n    var settingsPath = _generateSettingsFile();\n    args.push('--settings', settingsPath);\n  }\n\n  if (options.args) {\n    args.push.apply(args, options.args);\n  }\n\n  // Make it possible to debug a mirror\n  if (process.env.VELOCITY_DEBUG_MIRROR && process.env.VELOCITY_DEBUG_MIRROR === environment.FRAMEWORK && !_.contains(options.args, '--debug-port')) {\n    var debugPort = '5858';\n    args.push('--debug-port', debugPort);\n    console.log('[velocity] Your mirror is now paused and ready for debugging!');\n    console.log();\n    console.log('[velocity] To debug the server process using a graphical debugging interface,');\n    console.log('[velocity] visit this URL in your web browser:');\n    console.log('[velocity] http://localhost:8080/debug?port=' + debugPort);\n  }\n\n  // Allow to use checked out meteor for spawning mirrors\n  // for development on our Meteor fork\n  if (!process.env.VELOCITY_USE_CHECKED_OUT_METEOR) {\n    args.push('--release', Velocity.mirrorMeteorRelease);\n  }\n\n  mirrorChild.spawn({\n    command: command,\n    args: args,\n    options: {\n      cwd: process.env.VELOCITY_APP_PATH || process.env.PWD,\n      env: environment\n    }\n  });\n\n  DEBUG && console.log('[velocity] Mirror process forked with pid', mirrorChild.getPid());\n\n  console.log(('[velocity] ' + environment.FRAMEWORK + ' is starting a mirror at ' + environment.ROOT_URL + '.').yellow);\n\n  var isMeteorToolInstalled = MeteorFilesHelpers.isPackageInstalled(Velocity.mirrorMeteorToolReleaseName, Velocity.mirrorMeteorToolVersion);\n  if (!isMeteorToolInstalled) {\n    console.log('[velocity] *** Meteor Tools is installing ***', '\\nThis takes a few minutes the first time.'.yellow);\n  }\n\n  console.log(('[velocity] You can see the mirror logs at: tail -f ' + files.convertToOSPath(files.pathJoin(Velocity.getAppPath(), '.meteor', 'local', 'log', processName + '.log'))).yellow);\n\n  Meteor.call('velocity/mirrors/init', {\n    framework: environment.FRAMEWORK,\n    port: environment.PORT,\n    mongoUrl: environment.MONGO_URL,\n    host: environment.HOST,\n    rootUrl: environment.ROOT_URL,\n    rootUrlPath: environment.ROOT_URL_PATH,\n    pid: mirrorChild.getPid()\n  });\n}\n\n/**\n * Return URL for the mirror with the given port.\n *\n * @method _getMirrorUrl\n * @param {Number} port Mirror port\n * @return {String} Mirror URL\n * @private\n */\nfunction _getMirrorUrl(port) {\n  var rootUrlParts = url.parse(Meteor.absoluteUrl());\n  return url.format({\n    protocol: rootUrlParts.protocol,\n    slashes: rootUrlParts.slashes,\n    hostname: rootUrlParts.hostname,\n    port: port,\n    pathname: rootUrlParts.pathname\n  });\n}\n\n/**\n * Return the environment variables that a mirror should run with\n *\n * @method _getEnvironmentVariables\n * @param {Object} options Required fields:\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {Number} options.port The port this mirror is running on\n *   @param {String} options.host The root url of this mirror without any\n *                        additional paths. Used for making DDP connections\n *   @param {String} options.rootUrl The root url of this mirror, which also\n *                           includes the path and params\n *   @param {String} options.rootUrlPath Adds this string to the end of\n *                           the root url in the Velocity.Collections.Mirrors\n *                           collection. To be used by test frameworks to\n *                           recognize when they are executing in a mirror.\n *                           eg. `/?jasmine=true`\n *   @param {Boolean} options.handshake Specifies whether or not this mirror\n *                                      should perform a DDP handshake with\n *                                      the parent. Distributable frameworks\n *                                      can use this to get mirrors to behave\n *                                      like workers.\n *   @param {Object} [options.env] Additional environment variables that the\n *                                 mirror is called with.\n * @return {Object} environment variables\n * @private\n */\nfunction _getEnvironmentVariables(options) {\n  var env = {\n    PORT: options.port,\n    // PORT gets overridden by Meteor so we save the mirror port in\n    // MIRROR_PORT too.\n    MIRROR_PORT: options.port,\n    HOST: options.host,\n    ROOT_URL_PATH: options.rootUrlPath,\n    ROOT_URL: options.rootUrl,\n    FRAMEWORK: options.framework,\n    MONGO_URL: _getMongoUrl(options.framework),\n    PARENT_URL: process.env.ROOT_URL,\n    IS_MIRROR: true,\n    HANDSHAKE: options.handshake,\n    VELOCITY_MAIN_APP_PATH: Velocity.getAppPath(),\n    METEOR_SETTINGS: JSON.stringify(_.extend({}, Meteor.settings))\n  };\n\n  if (options.env) {\n    _.defaults(env, options.env);\n  }\n\n  _.defaults(env, process.env);\n\n  return env;\n}\n\n/**\n * Returns the MongoDB URL for the given database.\n *\n * @method _getMongoUrl\n * @param {Object} database\n * @return {String} MongoDB Url\n * @private\n */\nfunction _getMongoUrl(database) {\n  var parts = mongodbUri.parse(process.env.VELOCITY_MONGO_URL || process.env.MONGO_URL);\n  parts.database += '-' + database;\n  return mongodbUri.format(parts);\n}\n\nfunction _getMirrorChild(framework, processName) {\n  var _processName = processName || framework;\n  var mirrorChild = _mirrorChildProcesses[_processName];\n  if (!mirrorChild) {\n    mirrorChild = new sanjo.LongRunningChildProcess(_processName);\n    _mirrorChildProcesses[_processName] = mirrorChild;\n  }\n  return mirrorChild;\n}","ast":null,"map":{"version":3,"sources":["/src/methods/mirrors/mirror_request.js"],"names":[],"mappings":"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","file":"/src/methods/mirrors/mirror_request.js.map","sourcesContent":["/* globals DEBUG: true, _: true */\n\nvar DEBUG = !!process.env.VELOCITY_DEBUG;\nvar _ = Npm.require('lodash');\nvar url = Npm.require('url');\nvar mongodbUri = Npm.require('mongodb-uri');\nvar freeport = Npm.require('freeport');\nvar tmp = Npm.require('tmp');\nvar files = VelocityMeteorInternals.files;\nvar _mirrorChildProcesses = {};\nNpm.require('colors');\n\n\n// Specifies the Meteor release that we use for mirrors\nVelocity.mirrorMeteorReleaseName = 'velocity:METEOR';\nVelocity.mirrorMeteorVersion = '1.2.0.2_1';\nVelocity.mirrorMeteorRelease = process.env.VELOCITY_MIRROR_METEOR_RELEASE ||\n  Velocity.mirrorMeteorReleaseName + '@' + Velocity.mirrorMeteorVersion;\nVelocity.mirrorMeteorToolReleaseName = 'velocity:meteor-tool';\nVelocity.mirrorMeteorToolVersion = '1.1.9_1';\nVelocity.mirrorMeteorToolRelease = process.env.VELOCITY_MIRROR_METEOR_TOOL_RELEASE ||\n  Velocity.mirrorMeteorToolReleaseName + '@' + Velocity.mirrorMeteorToolVersion;\n\n\n/**\n * Starts a new mirror if it has not already been started, and reuses an\n * existing one if it is already started.\n *\n * This method will update the `Velocity.Collections.Mirrors` collection with once the mirror is ready.\n *\n * @method velocity/mirrors/request\n * @for Meteor.methods\n * @param {Object} options                  Options for the mirror.\n * @param {String} options.framework        The name of the calling framework\n * @param {String} [options.testsPath]      The path to tests for this framework.\n *                                          For example 'jasmine/server/unit'.\n *                                          Don't include a leading or trailing slash.\n * @param {String} [options.args]           Additional arguments that the mirror is called with\n *                                          It accepts all the options that are available for `meteor run`.\n * @param {Object} [options.env]            Additional environment variables that the mirror is called with.\n * @param {Number} [options.port]           Use a specific port.  Default is random, free port.\n * @param {String} [options.rootUrlPath]    Adds this string to the end of the root url in the\n *                                          Velocity.Collections.Mirrors collection. eg. `/?jasmine=true`\n * @param {Number} [options.nodes]          The number of mirrors required. This is used by\n *                                          distributable frameworks. Default is 1\n * @param {Boolean} [options.handshake]     Specifies whether or not this mirror should perform\n *                                          a DDP handshake with the parent. Distributable\n *                                          frameworks can use this to get mirrors to behave\n *                                          like workers. The default is true\n *\n */\nVelocity.Methods['velocity/mirrors/request'] = function (options) {\n  check(options, {\n    framework: String,\n    testsPath: Match.Optional(String),\n    args: Match.Optional([Match.Any]),\n    env: Match.Optional(Object),\n    port: Match.Optional(Number),\n    rootUrlPath: Match.Optional(String),\n    nodes: Match.Optional(Number),\n    handshake: Match.Optional(Boolean)\n  });\n\n  this.unblock();\n\n  _startMirrors(options);\n};\n\n\nfunction _startMirrors (options) {\n  options = _.extend({\n    nodes: 1\n  }, options);\n  DEBUG && console.log('[velocity]', options.nodes, 'mirror(s) requested');\n  // only respect a provided port if a single mirror is requested\n  if (options.port && options.nodes === 1) {\n    _startMirror(options);\n  } else {\n    _reuseMirrors();\n    _startUninitializedMirrorsWithFreePorts();\n  }\n\n  function _reuseMirrors() {\n    options.unitializedNodes = options.nodes;\n    var _reusableMirrorsForFramework = _.filter(Velocity.reusableMirrors, function(rmp) {\n      return rmp.framework === options.framework && rmp.reused === false;\n    });\n\n    _reusableMirrorsForFramework.forEach(function(rmff) {\n      rmff.reused = true;\n\n      options.port = rmff.port;\n      _startMirror(options);\n\n      options.unitializedNodes--;\n\n    });\n\n  }\n\n  function _startUninitializedMirrorsWithFreePorts() {\n    var startWithFreePort = Meteor.bindEnvironment(function(err, port) {\n      options.port = port;\n      _startMirror(options);\n    });\n\n    for (var i = 0; i < options.unitializedNodes; i++) {\n      freeport(startWithFreePort);\n    }\n  }\n}\n\n\nvar _generateSettingsFile = _.memoize(function () {\n  var tmpObject = tmp.fileSync();\n  files.writeFile(tmpObject.name, JSON.stringify(Meteor.settings));\n  return tmpObject.name;\n});\n\n\nfunction _startMirror (options) {\n\n  // TODO, options is passed as a reference, maybe we should pass a copy instead\n\n  options.handshake = options.handshake === undefined ? true : options.handshake;\n  options.rootUrlPath = (options.rootUrlPath || '');\n  options.host = _getMirrorUrl(options.port);\n  options.rootUrl = options.host;\n\n  var environment = _getEnvironmentVariables(options);\n\n  // append the port to the mirror log if there are multiple mirrors\n  var processName = environment.FRAMEWORK;\n  if (options.nodes > 1) {\n    processName = environment.FRAMEWORK + '_' + environment.PORT;\n  }\n\n  var mirrorChild = _getMirrorChild(environment.FRAMEWORK, processName);\n  if (mirrorChild.isRunning()) {\n    return;\n  }\n\n  var command = VelocityInternals.isWindows() ? 'meteor.bat' : 'meteor';\n  var args = [\n    'run',\n    '--test-app',\n    '--port', String(environment.PORT)\n  ];\n\n  if (options.testsPath) {\n    args.push('--include-tests', files.convertToStandardPath(options.testsPath));\n  }\n\n  if (VelocityInternals.isEnvironmentVariableTrue(process.env.VELOCITY_CI, false)) {\n    args.push('--once');\n  }\n\n  if (Meteor.settings) {\n    var settingsPath = _generateSettingsFile();\n    args.push('--settings', settingsPath);\n  }\n\n  if (options.args) {\n    args.push.apply(args, options.args);\n  }\n\n  // Make it possible to debug a mirror\n  if (\n    process.env.VELOCITY_DEBUG_MIRROR &&\n    process.env.VELOCITY_DEBUG_MIRROR === environment.FRAMEWORK &&\n    !_.contains(options.args, '--debug-port')\n  ) {\n    var debugPort = '5858';\n    args.push('--debug-port', debugPort);\n    console.log('[velocity] Your mirror is now paused and ready for debugging!');\n    console.log();\n    console.log('[velocity] To debug the server process using a graphical debugging interface,');\n    console.log('[velocity] visit this URL in your web browser:');\n    console.log('[velocity] http://localhost:8080/debug?port=' + debugPort);\n  }\n\n  // Allow to use checked out meteor for spawning mirrors\n  // for development on our Meteor fork\n  if (!process.env.VELOCITY_USE_CHECKED_OUT_METEOR) {\n    args.push('--release', Velocity.mirrorMeteorRelease);\n  }\n\n  mirrorChild.spawn({\n    command: command,\n    args: args,\n    options: {\n      cwd: process.env.VELOCITY_APP_PATH || process.env.PWD,\n      env: environment\n    }\n  });\n\n  DEBUG && console.log(\n    '[velocity] Mirror process forked with pid',\n    mirrorChild.getPid()\n  );\n\n\n  console.log(('[velocity] ' +\n    environment.FRAMEWORK + ' is starting a mirror at ' +\n    environment.ROOT_URL + '.'\n  ).yellow);\n\n  var isMeteorToolInstalled = MeteorFilesHelpers.isPackageInstalled(\n    Velocity.mirrorMeteorToolReleaseName,\n    Velocity.mirrorMeteorToolVersion\n  );\n  if (!isMeteorToolInstalled) {\n    console.log(\n      '[velocity] *** Meteor Tools is installing ***',\n      '\\nThis takes a few minutes the first time.'.yellow\n    );\n  }\n\n  console.log(('[velocity] You can see the mirror logs at: tail -f ' +\n  files.convertToOSPath(files.pathJoin(Velocity.getAppPath(),\n    '.meteor', 'local', 'log', processName + '.log'))).yellow);\n\n  Meteor.call('velocity/mirrors/init', {\n    framework: environment.FRAMEWORK,\n    port: environment.PORT,\n    mongoUrl: environment.MONGO_URL,\n    host: environment.HOST,\n    rootUrl: environment.ROOT_URL,\n    rootUrlPath: environment.ROOT_URL_PATH,\n    pid: mirrorChild.getPid()\n  });\n}\n\n\n/**\n * Return URL for the mirror with the given port.\n *\n * @method _getMirrorUrl\n * @param {Number} port Mirror port\n * @return {String} Mirror URL\n * @private\n */\nfunction _getMirrorUrl (port) {\n  var rootUrlParts = url.parse(Meteor.absoluteUrl());\n  return url.format({\n    protocol: rootUrlParts.protocol,\n    slashes: rootUrlParts.slashes,\n    hostname: rootUrlParts.hostname,\n    port: port,\n    pathname: rootUrlParts.pathname\n  });\n}\n\n\n/**\n * Return the environment variables that a mirror should run with\n *\n * @method _getEnvironmentVariables\n * @param {Object} options Required fields:\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {Number} options.port The port this mirror is running on\n *   @param {String} options.host The root url of this mirror without any\n *                        additional paths. Used for making DDP connections\n *   @param {String} options.rootUrl The root url of this mirror, which also\n *                           includes the path and params\n *   @param {String} options.rootUrlPath Adds this string to the end of\n *                           the root url in the Velocity.Collections.Mirrors\n *                           collection. To be used by test frameworks to\n *                           recognize when they are executing in a mirror.\n *                           eg. `/?jasmine=true`\n *   @param {Boolean} options.handshake Specifies whether or not this mirror\n *                                      should perform a DDP handshake with\n *                                      the parent. Distributable frameworks\n *                                      can use this to get mirrors to behave\n *                                      like workers.\n *   @param {Object} [options.env] Additional environment variables that the\n *                                 mirror is called with.\n * @return {Object} environment variables\n * @private\n */\nfunction _getEnvironmentVariables (options) {\n  var env = {\n    PORT: options.port,\n    // PORT gets overridden by Meteor so we save the mirror port in\n    // MIRROR_PORT too.\n    MIRROR_PORT: options.port,\n    HOST: options.host,\n    ROOT_URL_PATH: options.rootUrlPath,\n    ROOT_URL: options.rootUrl,\n    FRAMEWORK: options.framework,\n    MONGO_URL: _getMongoUrl(options.framework),\n    PARENT_URL: process.env.ROOT_URL,\n    IS_MIRROR: true,\n    HANDSHAKE: options.handshake,\n    VELOCITY_MAIN_APP_PATH: Velocity.getAppPath(),\n    METEOR_SETTINGS: JSON.stringify(_.extend({}, Meteor.settings))\n  };\n\n  if (options.env) {\n    _.defaults(env, options.env);\n  }\n\n  _.defaults(env, process.env);\n\n  return env;\n}\n\n\n/**\n * Returns the MongoDB URL for the given database.\n *\n * @method _getMongoUrl\n * @param {Object} database\n * @return {String} MongoDB Url\n * @private\n */\nfunction _getMongoUrl (database) {\n  var parts = mongodbUri.parse(process.env.VELOCITY_MONGO_URL || process.env.MONGO_URL);\n  parts.database += '-' + database;\n  return mongodbUri.format(parts);\n}\n\n\nfunction _getMirrorChild (framework, processName) {\n  var _processName = processName || framework;\n  var mirrorChild = _mirrorChildProcesses[_processName];\n  if (!mirrorChild) {\n    mirrorChild = new sanjo.LongRunningChildProcess(_processName);\n    _mirrorChildProcesses[_processName] = mirrorChild;\n  }\n  return mirrorChild;\n}\n"]},"hash":"f45066dee481579fb0b10611883032895be02c30"}
