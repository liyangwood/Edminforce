{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var files = VelocityMeteorInternals.files;\nvar fs = Npm.require('fs-extra');\nvar mkdirp = Meteor.wrapAsync(fs.mkdirp, fs);\n\n/**\n * Copy sample tests from frameworks `sample-tests` directories\n * to the user's application's `tests` directory.\n *\n * @method velocity/copySampleTests\n *\n * @param {Object} options\n *   @param {String} options.framework Framework name. Ex. 'jasmine', 'mocha'\n */\nVelocity.Methods['velocity/copySampleTests'] = function (options) {\n  var sampleTestGenerator, sampleTests;\n\n  options = options || {};\n  check(options, {\n    framework: String\n  });\n\n  this.unblock();\n\n  sampleTestGenerator = VelocityInternals.frameworkConfigs[options.framework].sampleTestGenerator;\n  if (sampleTestGenerator) {\n    sampleTests = sampleTestGenerator(options);\n\n    DEBUG && console.log('[velocity] found ', sampleTests.length, 'sample test files for', options.framework);\n\n    sampleTests.forEach(function (testFile) {\n      var fullTestPath = files.pathJoin(Velocity.getTestsPath(), testFile.path),\n          testDir = files.pathDirname(fullTestPath);\n\n      mkdirp(files.convertToOSPath(testDir));\n      files.writeFile(fullTestPath, testFile.contents);\n    });\n  }\n};","ast":null,"map":{"version":3,"sources":["/src/methods/copySampleTests.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,GAAG,uBAAuB,CAAC,KAAK,CAAC;AAC1C,IAAI,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;;;;;;;;;;;AAW7C,QAAQ,CAAC,OAAO,CAAC,0BAA0B,CAAC,GAAG,UAAU,OAAO,EAAE;AAChE,MAAI,mBAAmB,EACrB,WAAW,CAAC;;AAEd,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,OAAK,CAAC,OAAO,EAAE;AACb,aAAS,EAAE,MAAM;GAClB,CAAC,CAAC;;AAEH,MAAI,CAAC,OAAO,EAAE,CAAC;;AAEf,qBAAmB,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC;AAChG,MAAI,mBAAmB,EAAE;AACvB,eAAW,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;;AAE3C,SAAK,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,WAAW,CAAC,MAAM,EAC1D,uBAAuB,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;;AAE9C,eAAW,CAAC,OAAO,CAAC,UAAU,QAAQ,EAAE;AACtC,UAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC;UACvE,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;;AAE5C,YAAM,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;AACvC,WAAK,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAClD,CAAC,CAAC;GACJ;CACF,CAAC","file":"/src/methods/copySampleTests.js.map","sourcesContent":["var files = VelocityMeteorInternals.files;\nvar fs = Npm.require('fs-extra');\nvar mkdirp = Meteor.wrapAsync(fs.mkdirp, fs);\n\n/**\n * Copy sample tests from frameworks `sample-tests` directories\n * to the user's application's `tests` directory.\n *\n * @method velocity/copySampleTests\n *\n * @param {Object} options\n *   @param {String} options.framework Framework name. Ex. 'jasmine', 'mocha'\n */\nVelocity.Methods['velocity/copySampleTests'] = function (options) {\n  var sampleTestGenerator,\n    sampleTests;\n\n  options = options || {};\n  check(options, {\n    framework: String\n  });\n\n  this.unblock();\n\n  sampleTestGenerator = VelocityInternals.frameworkConfigs[options.framework].sampleTestGenerator;\n  if (sampleTestGenerator) {\n    sampleTests = sampleTestGenerator(options);\n\n    DEBUG && console.log('[velocity] found ', sampleTests.length,\n      'sample test files for', options.framework);\n\n    sampleTests.forEach(function (testFile) {\n      var fullTestPath = files.pathJoin(Velocity.getTestsPath(), testFile.path),\n        testDir = files.pathDirname(fullTestPath);\n\n      mkdirp(files.convertToOSPath(testDir));\n      files.writeFile(fullTestPath, testFile.contents);\n    });\n  }\n};\n"]},"hash":"b2dd989a5c15f4a3e0127d99df3bd22177fd374f"}
