{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Log a message to the Velocity log store.  This provides a central\n * location for different reporters to query for test framework log\n * entries.\n *\n * @method velocity/logs/submit\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *   @param {String} options.message The message to log\n *   @param {String} [options.level] Log level.  Ex. 'error'. Default: 'info'\n *   @param {Date} [options.timestamp]\n */\nVelocity.Methods['velocity/logs/submit'] = function (options) {\n  check(options, {\n    framework: String,\n    message: String,\n    level: Match.Optional(String),\n    timestamp: Match.Optional(Match.OneOf(Date, String))\n  });\n\n  Velocity.Collections.Logs.insert({\n    framework: options.framework,\n    message: options.message,\n    level: options.level || 'info',\n    timestamp: options.timestamp ? new Date(options.timestamp) : new Date()\n  });\n};","ast":null,"map":{"version":3,"sources":["/src/methods/logs/logs_submit.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,QAAQ,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,UAAU,OAAO,EAAE;AAC5D,OAAK,CAAC,OAAO,EAAE;AACb,aAAS,EAAE,MAAM;AACjB,WAAO,EAAE,MAAM;AACf,SAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC7B,aAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;GACrD,CAAC,CAAC;;AAEH,UAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;AAC/B,aAAS,EAAE,OAAO,CAAC,SAAS;AAC5B,WAAO,EAAE,OAAO,CAAC,OAAO;AACxB,SAAK,EAAE,OAAO,CAAC,KAAK,IAAI,MAAM;AAC9B,aAAS,EAAE,OAAO,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE;GACxE,CAAC,CAAC;CACJ,CAAC","file":"/src/methods/logs/logs_submit.js.map","sourcesContent":["/**\n * Log a message to the Velocity log store.  This provides a central\n * location for different reporters to query for test framework log\n * entries.\n *\n * @method velocity/logs/submit\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *   @param {String} options.message The message to log\n *   @param {String} [options.level] Log level.  Ex. 'error'. Default: 'info'\n *   @param {Date} [options.timestamp]\n */\nVelocity.Methods['velocity/logs/submit'] = function (options) {\n  check(options, {\n    framework: String,\n    message: String,\n    level: Match.Optional(String),\n    timestamp: Match.Optional(Match.OneOf(Date, String))\n  });\n\n  Velocity.Collections.Logs.insert({\n    framework: options.framework,\n    message: options.message,\n    level: options.level || 'info',\n    timestamp: options.timestamp ? new Date(options.timestamp) : new Date()\n  });\n};\n"]},"hash":"9597be4172b8ba374c88e34049ffffb23e8e7f4a"}
