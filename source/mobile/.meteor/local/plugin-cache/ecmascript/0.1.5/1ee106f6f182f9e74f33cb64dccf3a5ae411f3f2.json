{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/* globals\n DEBUG: true,\n CONTINUOUS_INTEGRATION: true\n */\n\nDEBUG = !!process.env.VELOCITY_DEBUG;\nCONTINUOUS_INTEGRATION = process.env.VELOCITY_CI;\n\n/**\n * @module Velocity\n * @class Velocity\n */\n(function () {\n  'use strict';\n\n  //////////////////////////////////////////////////////////////////////\n  // Init\n  //\n\n  DEBUG && console.log('[velocity] adding velocity core');\n  CONTINUOUS_INTEGRATION && console.log('[velocity] is in continuous integration mode');\n\n  var _ = Npm.require('lodash');\n  var files = VelocityMeteorInternals.files;\n  VelocityInternals.frameworkConfigs = {};\n  var _watcher;\n  var _velocityStarted = false;\n  var _velocityStartupFunctions = [];\n  var FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$');\n\n  _removeTerminatedMirrors();\n\n  _setReusableMirrors();\n\n  if (process.env.NODE_ENV === 'development' && process.env.VELOCITY !== '0' && !process.env.IS_MIRROR) {\n    Meteor.startup(function () {\n      Meteor.defer((function () {\n        function initializeVelocity() {\n          DEBUG && console.log('[velocity] Server startup');\n          DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());\n          DEBUG && console.log('[velocity] config =', JSON.stringify(VelocityInternals.frameworkConfigs, null, 2));\n\n          //kick-off everything\n          _resetAll();\n\n          _initFileWatcher(VelocityInternals.frameworkConfigs, _triggerVelocityStartupFunctions);\n        }\n\n        return initializeVelocity;\n      })());\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////////\n  // Public Methods\n  //\n\n  _.extend(Velocity, {\n\n    /**\n     * Run code when Velocity is started.\n     *\n     * Velocity is considered started when the file watcher has\n     * completed the scan of the file system.\n     *\n     * @method startup\n     * @return {function} A function to run on startup\n     */\n    startup: function (func) {\n      if (_velocityStarted) {\n        DEBUG && console.log('[velocity] Velocity already started. Immediately calling func');\n        Meteor.defer(func);\n      } else {\n        DEBUG && console.log('[velocity] Velocity not started. Queueing func');\n        _velocityStartupFunctions.push(func);\n      }\n    },\n\n    /**\n     * Get the application root path.\n     *\n     * @method getAppPath\n     * @return {String} app root path\n     */\n    getAppPath: _.memoize(function () {\n      var appPath = files.findAppDir();\n      if (appPath) {\n        appPath = files.pathResolve(appPath);\n      }\n\n      return files.convertToOSPath(appPath);\n    }),\n\n    /**\n     * Get path to application's or application package's 'tests' directory\n     *\n     * @method getTestsPath\n     * @param {String} packageName optional package name\n     * @return {String} application's tests directory\n     */\n    getTestsPath: function (packageName) {\n      return files.convertToOSPath(files.pathJoin(packageName ? Velocity.getPackagePath(packageName) : Velocity.getAppPath(), 'tests'));\n    },\n\n    /**\n     * Get path to application's 'packages' directory\n     *\n     * @method getPackagesPath\n     * @return {String} application's packages directory\n     */\n    getPackagesPath: function () {\n      return files.convertToOSPath(files.pathJoin(Velocity.getAppPath(), 'packages'));\n    },\n\n    /**\n     * Get path to application's package directory\n     *\n     * @method getPackagesPath\n     * @param {String} packageName package name\n     * @return {String} application's packages directory\n     */\n    getPackagePath: function (packageName) {\n      return files.convertToOSPath(files.pathJoin(Velocity.getPackagesPath(), packageName));\n    },\n\n    /**\n     * A collection of callbacks to be executed after all tests have completed\n     * and the aggregate test results have been reported.\n     *\n     * See {{#crossLink 'Velocity/addPostProcessor:method'}}{{/crossLink}}\n     *\n     * @property postProcessors\n     * @type Array\n     * @default []\n     */\n    postProcessors: [],\n\n    /**\n     * Add a callback which will execute after all tests have completed\n     * and after the aggregate test results have been reported.\n     *\n     * @method addPostProcessor\n     * @param {Function} processor\n     */\n    addPostProcessor: function (processor) {\n      Velocity.postProcessors.push(processor);\n    },\n\n    /**\n     * Get a message that displays where bugs in Velocity core itself should\n     * be reported.\n     *\n     * @method getReportGithubIssueMessage\n     * @return {String} message with bug repo url\n     */\n    getReportGithubIssueMessage: function () {\n      return 'Please report the issue here: ' + 'https://github.com/meteor-velocity/velocity/issues';\n    },\n\n    /**\n     * Registers a testing framework plugin.\n     *\n     * @method registerTestingFramework\n     * @param {String} name The name of the testing framework.\n     * @param {Object} [options] Options for the testing framework.\n     *   @param {String} [options.regex] The regular expression for test files\n     *                    that should be assigned to the testing framework.\n     *                    The path relative to the tests folder is matched\n     *                    against it. Default: 'name/.+\\.js$' (name is\n     *                    the testing framework name).\n     *   @param {String} [options.disableAutoReset]   Velocity's reset cycle\n     *                    will skip reports and logs for this framework.\n     *                    It is up to the framework to clean up its ****!\n     *   @param {Function} [options.sampleTestGenerator] sampleTestGenerator\n     *                    returns an array of fileObjects with the following\n     *                    fields:\n     *                      path - String - relative path to place test files\n     *                                      (from PROJECT/tests)\n     *                      contents - String - contents to put in the test file\n     *                                          at the corresponding path\n     */\n    registerTestingFramework: function (name, options) {\n      DEBUG && console.log('[velocity] Register framework ' + name + ' with regex ' + options.regex);\n      VelocityInternals.frameworkConfigs[name] = VelocityInternals.parseTestingFrameworkOptions(name, options);\n      // make sure the appropriate aggregate records are added\n      Velocity.Collections.AggregateReports.insert({\n        name: name,\n        result: 'pending'\n      });\n    },\n\n    /**\n     * Unregister a testing framework.  Mostly used for internal testing\n     * of core Velocity functions.\n     *\n     * @method unregisterTestingFramework\n     * @param {String} name Name of framework to unregister\n     */\n    unregisterTestingFramework: function (name) {\n      Velocity.Collections.TestReports.remove({ framework: name });\n      Velocity.Collections.Logs.remove({ framework: name });\n      Velocity.Collections.AggregateReports.remove({ name: name });\n      Velocity.Collections.TestFiles.remove({ targetFramework: name });\n\n      delete VelocityInternals.frameworkConfigs[name];\n    }\n  });\n\n  //////////////////////////////////////////////////////////////////////\n  // Private functions\n  //\n\n  function _triggerVelocityStartupFunctions() {\n    _velocityStarted = true;\n    DEBUG && console.log('[velocity] Triggering queued startup functions');\n\n    while (_velocityStartupFunctions.length) {\n      var func = _velocityStartupFunctions.pop();\n      Meteor.defer(func);\n    }\n  }\n\n  VelocityInternals.parseTestingFrameworkOptions = function (name, options) {\n    options = options || {};\n    _.defaults(options, {\n      name: name,\n      regex: name + '/.+\\\\.js$'\n    });\n\n    options._regexp = new RegExp(options.regex);\n\n    return options;\n  };\n\n  /**\n   * Initialize the directory/file watcher.\n   *\n   * @method _initFileWatcher\n   * @param {Object} config See {{#crossLink 'Velocity/registerTestingFramework:method'}}{{/crossLink}}\n   * @param {function} callback  Called after the watcher completes its first scan and is ready\n   * @private\n   */\n  function _initFileWatcher(config, callback) {\n    var paths, packagesPath;\n\n    Velocity.Collections.TestFiles.remove({});\n    Velocity.Collections.FixtureFiles.remove({});\n\n    paths = [Velocity.getTestsPath()];\n    packagesPath = Velocity.getPackagesPath();\n\n    if (VelocityInternals.isDirectory(packagesPath)) {\n      var packageNames = files.readdir(packagesPath),\n          packageTestsPaths = _.chain(packageNames).filter(_isPackageWithTests).map(Velocity.getTestsPath).value();\n      paths.push.apply(paths, packageTestsPaths);\n    }\n\n    paths = _.map(paths, files.convertToOSPath);\n\n    DEBUG && console.log('[velocity] Add paths to watcher', paths);\n\n    _watcher = chokidar.watch(paths, {\n      ignored: /[\\/\\\\](\\.|node_modules)/,\n      persistent: true\n    });\n    _watcher.on('add', Meteor.bindEnvironment(function (filePath) {\n      var relativePath, packageRelativePath, targetFramework, data;\n\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      relativePath = _getRelativePath(filePath);\n\n      // if this is a fixture file, put it in the fixtures collection\n      if (FIXTURE_REG_EXP.test(relativePath)) {\n        DEBUG && console.log('[velocity] Found fixture file', relativePath);\n        Velocity.Collections.FixtureFiles.insert({\n          _id: filePath,\n          absolutePath: filePath,\n          relativePath: relativePath,\n          lastModified: Date.now()\n        });\n        // bail early\n        return;\n      }\n\n      DEBUG && console.log('[velocity] Search framework for path', relativePath);\n\n      packageRelativePath = relativePath.indexOf('packages') === 0 ? relativePath.split('/').slice(2).join('/') : relativePath;\n\n      // test against each test framework's regexp matcher, use first one that matches\n      targetFramework = _.find(config, function (framework) {\n        return framework._regexp.test(packageRelativePath);\n      });\n\n      if (targetFramework) {\n        DEBUG && console.log('[velocity] Target framework for', relativePath, 'is', targetFramework.name);\n\n        data = {\n          _id: filePath,\n          name: files.pathBasename(filePath),\n          absolutePath: filePath,\n          relativePath: relativePath,\n          targetFramework: targetFramework.name,\n          lastModified: Date.now()\n        };\n\n        Velocity.Collections.TestFiles.insert(data);\n      } else {\n        DEBUG && console.log('[velocity] No framework registered for', relativePath);\n      }\n    })); // end watcher.on 'add'\n\n    _watcher.on('change', Meteor.bindEnvironment(function (filePath) {\n      DEBUG && console.log('[velocity] File changed:', _getRelativePath(filePath));\n\n      // Since we key on filePath and we only add files we're interested in,\n      // we don't have to worry about inadvertently updating records for files\n      // we don't care about.\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      Velocity.Collections.TestFiles.update(filePath, { $set: { lastModified: Date.now() } });\n    }));\n\n    _watcher.on('unlink', Meteor.bindEnvironment(function (filePath) {\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      DEBUG && console.log('[velocity] File removed:', _getRelativePath(filePath));\n\n      Velocity.Collections.TestFiles.remove(filePath);\n    }));\n\n    _watcher.on('ready', Meteor.bindEnvironment(function () {\n      DEBUG && console.log('[velocity] File scan complete, now watching', Velocity.getTestsPath().substring(Velocity.getAppPath().length));\n\n      callback && callback();\n    }));\n  } // end _initFileWatcher\n\n  function _isPackageWithTests(packageName) {\n    return packageName !== 'tests-proxy' && VelocityInternals.isDirectory(Velocity.getTestsPath(packageName));\n  }\n\n  /**\n   * Clear test reports, aggregate reports, and logs for a specific framework.\n   *\n   * @method VelocityInternals.reset\n   * @param {String} name Framework to reset\n   */\n  VelocityInternals.reset = function (name) {\n    DEBUG && console.log('[velocity] resetting', name);\n\n    Velocity.Collections.Logs.remove({ framework: name });\n    Velocity.Collections.TestReports.remove({ framework: name });\n    Velocity.Collections.AggregateReports.remove({ name: name });\n\n    Velocity.Collections.AggregateReports.insert({\n      name: name,\n      result: 'pending'\n    });\n  };\n\n  /**\n   * Clear all test reports, aggregate reports, and logs.\n   *\n   * @method _resetAll\n   * @param {Object} config See {{#crossLink 'Velocity/registerTestingFramework:method'}}{{/crossLink}}\n   * @private\n   */\n  function _resetAll() {\n    var allFrameworks, frameworksToIgnore;\n\n    DEBUG && console.log('[velocity] resetting the world');\n\n    allFrameworks = _getTestFrameworkNames();\n\n    // ignore frameworks that have opted-out\n    frameworksToIgnore = _(VelocityInternals.frameworkConfigs).where({ disableAutoReset: true }).pluck('_resetAllname').value();\n\n    DEBUG && console.log('[velocity] frameworks with disable auto reset:', frameworksToIgnore);\n\n    Velocity.Collections.AggregateReports.remove({});\n    Velocity.Collections.Logs.remove({ framework: { $nin: frameworksToIgnore } });\n    Velocity.Collections.TestReports.remove({ framework: { $nin: frameworksToIgnore } });\n\n    _.forEach(allFrameworks, function (testFramework) {\n      Velocity.Collections.AggregateReports.insert({\n        name: testFramework,\n        result: 'pending'\n      });\n    });\n  }\n\n  /**\n   * If any one test has failed, mark the aggregate test result as failed.\n   *\n   * @method VelocityInternals.updateAggregateReports\n   */\n  VelocityInternals.updateAggregateReports = function () {\n    var aggregateResult,\n        completedFrameworksCount,\n        allFrameworks = _getTestFrameworkNames();\n\n    Velocity.Collections.AggregateReports.upsert({ name: 'aggregateResult' }, { $set: { result: 'pending' } });\n    Velocity.Collections.AggregateReports.upsert({ name: 'aggregateComplete' }, { $set: { result: 'pending' } });\n\n    // if all of our test reports have valid results\n    if (!Velocity.Collections.TestReports.findOne({ result: '' })) {\n\n      // pessimistically set passed state, ensuring all other states\n      // take precedence in order below\n      aggregateResult = Velocity.Collections.TestReports.findOne({ result: 'failed' }) || Velocity.Collections.TestReports.findOne({ result: 'undefined' }) || Velocity.Collections.TestReports.findOne({ result: 'skipped' }) || Velocity.Collections.TestReports.findOne({ result: 'pending' }) || Velocity.Collections.TestReports.findOne({ result: 'passed' }) || { result: 'pending' };\n\n      // update the global status\n      Velocity.Collections.AggregateReports.update({ name: 'aggregateResult' }, { $set: { result: aggregateResult.result } });\n    }\n\n    // Check if all test frameworks have completed successfully\n    completedFrameworksCount = Velocity.Collections.AggregateReports.find({\n      name: { $in: allFrameworks },\n      result: 'completed'\n    }).count();\n\n    if (allFrameworks.length === completedFrameworksCount) {\n      Velocity.Collections.AggregateReports.update({ name: 'aggregateComplete' }, { $set: { 'result': 'completed' } });\n      _.each(Velocity.postProcessors, function (processor) {\n        processor();\n      });\n    }\n  };\n\n  function _getRelativePath(filePath) {\n    var relativePath = filePath.substring(Velocity.getAppPath().length);\n\n    if (relativePath[0] === '/') {\n      relativePath = relativePath.substring(1);\n    }\n    return relativePath;\n  }\n\n  function _getTestFrameworkNames() {\n    return _.pluck(VelocityInternals.frameworkConfigs, 'name');\n  }\n\n  function _removeTerminatedMirrors() {\n    // Remove terminated mirrors from previous runs\n    // This is needed for `meteor --test` to work properly\n    Velocity.Collections.Mirrors.find({}).forEach(function (mirror) {\n      try {\n        process.kill(mirror.pid, 0);\n      } catch (error) {\n        Velocity.Collections.Mirrors.remove({ pid: mirror.pid });\n      }\n    });\n  }\n\n  function _setReusableMirrors() {\n    Velocity.reusableMirrors = [];\n    Velocity.Collections.Mirrors.find({}).forEach(function (mirror) {\n      mirror.reused = false;\n      Velocity.reusableMirrors.push(mirror);\n    });\n  }\n})();","ast":null,"map":{"version":3,"sources":["/src/core.js"],"names":[],"mappings":"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","file":"/src/core.js.map","sourcesContent":["/* globals\n DEBUG: true,\n CONTINUOUS_INTEGRATION: true\n */\n\nDEBUG = !!process.env.VELOCITY_DEBUG;\nCONTINUOUS_INTEGRATION = process.env.VELOCITY_CI;\n\n/**\n * @module Velocity\n * @class Velocity\n */\n(function () {\n  'use strict';\n\n//////////////////////////////////////////////////////////////////////\n// Init\n//\n\n  DEBUG && console.log('[velocity] adding velocity core');\n  CONTINUOUS_INTEGRATION && console.log('[velocity] is in continuous integration mode');\n\n  var _ = Npm.require('lodash');\n  var files = VelocityMeteorInternals.files;\n  VelocityInternals.frameworkConfigs = {};\n  var _watcher;\n  var _velocityStarted = false;\n  var _velocityStartupFunctions = [];\n  var FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$');\n\n\n  _removeTerminatedMirrors();\n\n  _setReusableMirrors();\n\n  if (process.env.NODE_ENV === 'development' &&\n    process.env.VELOCITY !== '0' &&\n    !process.env.IS_MIRROR\n  ) {\n    Meteor.startup(function () {\n      Meteor.defer(function initializeVelocity () {\n        DEBUG && console.log('[velocity] Server startup');\n        DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());\n        DEBUG && console.log('[velocity] config =', JSON.stringify(VelocityInternals.frameworkConfigs, null, 2));\n\n        //kick-off everything\n        _resetAll();\n\n        _initFileWatcher(VelocityInternals.frameworkConfigs, _triggerVelocityStartupFunctions);\n\n      });\n    });\n  }\n\n//////////////////////////////////////////////////////////////////////\n// Public Methods\n//\n\n  _.extend(Velocity, {\n\n    /**\n     * Run code when Velocity is started.\n     *\n     * Velocity is considered started when the file watcher has\n     * completed the scan of the file system.\n     *\n     * @method startup\n     * @return {function} A function to run on startup\n     */\n    startup: function (func) {\n      if (_velocityStarted) {\n        DEBUG && console.log('[velocity] Velocity already started. Immediately calling func');\n        Meteor.defer(func);\n      } else {\n        DEBUG && console.log('[velocity] Velocity not started. Queueing func');\n        _velocityStartupFunctions.push(func);\n      }\n    },\n\n    /**\n     * Get the application root path.\n     *\n     * @method getAppPath\n     * @return {String} app root path\n     */\n    getAppPath: _.memoize(function () {\n      var appPath = files.findAppDir();\n      if (appPath) {\n        appPath = files.pathResolve(appPath);\n      }\n\n      return files.convertToOSPath(appPath);\n    }),\n\n\n    /**\n     * Get path to application's or application package's 'tests' directory\n     *\n     * @method getTestsPath\n     * @param {String} packageName optional package name\n     * @return {String} application's tests directory\n     */\n    getTestsPath: function (packageName) {\n      return files.convertToOSPath(\n        files.pathJoin(packageName ? Velocity.getPackagePath(packageName) : Velocity.getAppPath(), 'tests')\n      );\n    },\n\n    /**\n     * Get path to application's 'packages' directory\n     *\n     * @method getPackagesPath\n     * @return {String} application's packages directory\n     */\n    getPackagesPath: function () {\n      return files.convertToOSPath(files.pathJoin(Velocity.getAppPath(), 'packages'));\n    },\n\n    /**\n     * Get path to application's package directory\n     *\n     * @method getPackagesPath\n     * @param {String} packageName package name\n     * @return {String} application's packages directory\n     */\n    getPackagePath: function (packageName) {\n      return files.convertToOSPath(files.pathJoin(Velocity.getPackagesPath(), packageName));\n    },\n\n\n    /**\n     * A collection of callbacks to be executed after all tests have completed\n     * and the aggregate test results have been reported.\n     *\n     * See {{#crossLink 'Velocity/addPostProcessor:method'}}{{/crossLink}}\n     *\n     * @property postProcessors\n     * @type Array\n     * @default []\n     */\n    postProcessors: [],\n\n    /**\n     * Add a callback which will execute after all tests have completed\n     * and after the aggregate test results have been reported.\n     *\n     * @method addPostProcessor\n     * @param {Function} processor\n     */\n    addPostProcessor: function (processor) {\n      Velocity.postProcessors.push(processor);\n    },\n\n    /**\n     * Get a message that displays where bugs in Velocity core itself should\n     * be reported.\n     *\n     * @method getReportGithubIssueMessage\n     * @return {String} message with bug repo url\n     */\n    getReportGithubIssueMessage: function () {\n      return 'Please report the issue here: ' +\n        'https://github.com/meteor-velocity/velocity/issues';\n    },\n\n    /**\n     * Registers a testing framework plugin.\n     *\n     * @method registerTestingFramework\n     * @param {String} name The name of the testing framework.\n     * @param {Object} [options] Options for the testing framework.\n     *   @param {String} [options.regex] The regular expression for test files\n     *                    that should be assigned to the testing framework.\n     *                    The path relative to the tests folder is matched\n     *                    against it. Default: 'name/.+\\.js$' (name is\n     *                    the testing framework name).\n     *   @param {String} [options.disableAutoReset]   Velocity's reset cycle\n     *                    will skip reports and logs for this framework.\n     *                    It is up to the framework to clean up its ****!\n     *   @param {Function} [options.sampleTestGenerator] sampleTestGenerator\n     *                    returns an array of fileObjects with the following\n     *                    fields:\n     *                      path - String - relative path to place test files\n     *                                      (from PROJECT/tests)\n     *                      contents - String - contents to put in the test file\n     *                                          at the corresponding path\n     */\n    registerTestingFramework: function (name, options) {\n      DEBUG && console.log('[velocity] Register framework ' + name + ' with regex ' + options.regex);\n      VelocityInternals.frameworkConfigs[name] = VelocityInternals.parseTestingFrameworkOptions(name, options);\n      // make sure the appropriate aggregate records are added\n      Velocity.Collections.AggregateReports.insert({\n        name: name,\n        result: 'pending'\n      });\n    },\n\n    /**\n     * Unregister a testing framework.  Mostly used for internal testing\n     * of core Velocity functions.\n     *\n     * @method unregisterTestingFramework\n     * @param {String} name Name of framework to unregister\n     */\n    unregisterTestingFramework: function (name) {\n      Velocity.Collections.TestReports.remove({framework: name});\n      Velocity.Collections.Logs.remove({framework: name});\n      Velocity.Collections.AggregateReports.remove({name: name});\n      Velocity.Collections.TestFiles.remove({targetFramework: name});\n\n      delete VelocityInternals.frameworkConfigs[name];\n    }\n  });\n\n\n//////////////////////////////////////////////////////////////////////\n// Private functions\n//\n\n  function _triggerVelocityStartupFunctions () {\n    _velocityStarted = true;\n    DEBUG && console.log('[velocity] Triggering queued startup functions');\n\n    while (_velocityStartupFunctions.length) {\n      var func = _velocityStartupFunctions.pop();\n      Meteor.defer(func);\n    }\n  }\n\n   VelocityInternals.parseTestingFrameworkOptions = function (name, options) {\n    options = options || {};\n    _.defaults(options, {\n      name: name,\n      regex: name + '/.+\\\\.js$'\n    });\n\n    options._regexp = new RegExp(options.regex);\n\n    return options;\n  };\n\n  /**\n   * Initialize the directory/file watcher.\n   *\n   * @method _initFileWatcher\n   * @param {Object} config See {{#crossLink 'Velocity/registerTestingFramework:method'}}{{/crossLink}}\n   * @param {function} callback  Called after the watcher completes its first scan and is ready\n   * @private\n   */\n  function _initFileWatcher (config, callback) {\n    var paths,\n        packagesPath;\n\n    Velocity.Collections.TestFiles.remove({});\n    Velocity.Collections.FixtureFiles.remove({});\n\n    paths = [Velocity.getTestsPath()];\n    packagesPath = Velocity.getPackagesPath();\n\n    if (VelocityInternals.isDirectory(packagesPath)) {\n      var packageNames = files.readdir(packagesPath),\n          packageTestsPaths = _.chain(packageNames)\n            .filter(_isPackageWithTests)\n            .map(Velocity.getTestsPath)\n            .value();\n      paths.push.apply(paths, packageTestsPaths);\n    }\n\n    paths = _.map(paths, files.convertToOSPath);\n\n    DEBUG && console.log('[velocity] Add paths to watcher', paths);\n\n    _watcher = chokidar.watch(paths, {\n      ignored: /[\\/\\\\](\\.|node_modules)/,\n      persistent: true\n    });\n    _watcher.on('add', Meteor.bindEnvironment(function (filePath) {\n      var relativePath,\n          packageRelativePath,\n          targetFramework,\n          data;\n\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      relativePath = _getRelativePath(filePath);\n\n      // if this is a fixture file, put it in the fixtures collection\n      if (FIXTURE_REG_EXP.test(relativePath)) {\n        DEBUG && console.log('[velocity] Found fixture file', relativePath);\n        Velocity.Collections.FixtureFiles.insert({\n          _id: filePath,\n          absolutePath: filePath,\n          relativePath: relativePath,\n          lastModified: Date.now()\n        });\n        // bail early\n        return;\n      }\n\n      DEBUG && console.log('[velocity] Search framework for path', relativePath);\n\n      packageRelativePath = (relativePath.indexOf('packages') === 0) ?\n        relativePath.split('/').slice(2).join('/') :\n        relativePath;\n\n      // test against each test framework's regexp matcher, use first one that matches\n      targetFramework = _.find(config, function (framework) {\n        return framework._regexp.test(packageRelativePath);\n      });\n\n      if (targetFramework) {\n        DEBUG && console.log('[velocity] Target framework for', relativePath, 'is', targetFramework.name);\n\n        data = {\n          _id: filePath,\n          name: files.pathBasename(filePath),\n          absolutePath: filePath,\n          relativePath: relativePath,\n          targetFramework: targetFramework.name,\n          lastModified: Date.now()\n        };\n\n        Velocity.Collections.TestFiles.insert(data);\n      } else {\n        DEBUG && console.log('[velocity] No framework registered for', relativePath);\n      }\n    }));  // end watcher.on 'add'\n\n    _watcher.on('change', Meteor.bindEnvironment(function (filePath) {\n      DEBUG && console.log('[velocity] File changed:', _getRelativePath(filePath));\n\n      // Since we key on filePath and we only add files we're interested in,\n      // we don't have to worry about inadvertently updating records for files\n      // we don't care about.\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      Velocity.Collections.TestFiles.update(filePath, {$set: {lastModified: Date.now()}});\n    }));\n\n    _watcher.on('unlink', Meteor.bindEnvironment(function (filePath) {\n      filePath = files.convertToStandardPath(files.pathNormalize(filePath));\n      DEBUG && console.log('[velocity] File removed:',\n        _getRelativePath(filePath));\n\n      Velocity.Collections.TestFiles.remove(filePath);\n    }));\n\n    _watcher.on('ready', Meteor.bindEnvironment(function () {\n      DEBUG && console.log('[velocity] File scan complete, now watching',\n        Velocity.getTestsPath().substring(Velocity.getAppPath().length));\n\n      callback && callback();\n    }));\n\n  }  // end _initFileWatcher\n\n\n  function _isPackageWithTests(packageName) {\n    return packageName !== 'tests-proxy' &&\n      VelocityInternals.isDirectory(Velocity.getTestsPath(packageName));\n  }\n\n\n  /**\n   * Clear test reports, aggregate reports, and logs for a specific framework.\n   *\n   * @method VelocityInternals.reset\n   * @param {String} name Framework to reset\n   */\n  VelocityInternals.reset = function (name) {\n    DEBUG && console.log('[velocity] resetting', name);\n\n    Velocity.Collections.Logs.remove({framework: name});\n    Velocity.Collections.TestReports.remove({framework: name});\n    Velocity.Collections.AggregateReports.remove({name: name});\n\n    Velocity.Collections.AggregateReports.insert({\n      name: name,\n      result: 'pending'\n    });\n  };\n\n  /**\n   * Clear all test reports, aggregate reports, and logs.\n   *\n   * @method _resetAll\n   * @param {Object} config See {{#crossLink 'Velocity/registerTestingFramework:method'}}{{/crossLink}}\n   * @private\n   */\n  function _resetAll () {\n    var allFrameworks,\n        frameworksToIgnore;\n\n    DEBUG && console.log('[velocity] resetting the world');\n\n    allFrameworks = _getTestFrameworkNames();\n\n    // ignore frameworks that have opted-out\n    frameworksToIgnore = _(VelocityInternals.frameworkConfigs)\n      .where({disableAutoReset: true})\n      .pluck('_resetAllname')\n      .value();\n\n    DEBUG && console.log('[velocity] frameworks with disable auto reset:',\n      frameworksToIgnore);\n\n    Velocity.Collections.AggregateReports.remove({});\n    Velocity.Collections.Logs.remove({framework: {$nin: frameworksToIgnore}});\n    Velocity.Collections.TestReports.remove({framework: {$nin: frameworksToIgnore}});\n\n    _.forEach(allFrameworks, function (testFramework) {\n      Velocity.Collections.AggregateReports.insert({\n        name: testFramework,\n        result: 'pending'\n      });\n    });\n  }\n\n\n  /**\n   * If any one test has failed, mark the aggregate test result as failed.\n   *\n   * @method VelocityInternals.updateAggregateReports\n   */\n  VelocityInternals.updateAggregateReports = function  () {\n    var aggregateResult,\n        completedFrameworksCount,\n        allFrameworks = _getTestFrameworkNames();\n\n    Velocity.Collections.AggregateReports.upsert({name: 'aggregateResult'},\n      {$set: {result: 'pending'}});\n    Velocity.Collections.AggregateReports.upsert({name: 'aggregateComplete'},\n      {$set: {result: 'pending'}});\n\n    // if all of our test reports have valid results\n    if (!Velocity.Collections.TestReports.findOne({result: ''})) {\n\n      // pessimistically set passed state, ensuring all other states\n      // take precedence in order below\n      aggregateResult =\n        Velocity.Collections.TestReports.findOne({result: 'failed'}) ||\n        Velocity.Collections.TestReports.findOne({result: 'undefined'}) ||\n        Velocity.Collections.TestReports.findOne({result: 'skipped'}) ||\n        Velocity.Collections.TestReports.findOne({result: 'pending'}) ||\n        Velocity.Collections.TestReports.findOne({result: 'passed'}) ||\n        {result: 'pending'};\n\n      // update the global status\n      Velocity.Collections.AggregateReports.update({name: 'aggregateResult'},\n        {$set: {result: aggregateResult.result}});\n    }\n\n\n    // Check if all test frameworks have completed successfully\n    completedFrameworksCount = Velocity.Collections.AggregateReports.find({\n      name: {$in: allFrameworks},\n      result: 'completed'\n    }).count();\n\n    if (allFrameworks.length === completedFrameworksCount) {\n      Velocity.Collections.AggregateReports.update({name: 'aggregateComplete'},\n        {$set: {'result': 'completed'}});\n      _.each(Velocity.postProcessors, function (processor) {\n        processor();\n      });\n    }\n  };\n\n  function _getRelativePath (filePath) {\n    var relativePath = filePath.substring(Velocity.getAppPath().length);\n\n    if (relativePath[0] === '/') {\n      relativePath = relativePath.substring(1);\n    }\n    return relativePath;\n  }\n\n  function _getTestFrameworkNames () {\n    return _.pluck(VelocityInternals.frameworkConfigs, 'name');\n  }\n\n  function _removeTerminatedMirrors() {\n    // Remove terminated mirrors from previous runs\n    // This is needed for `meteor --test` to work properly\n    Velocity.Collections.Mirrors.find({}).forEach(function(mirror) {\n      try {\n        process.kill(mirror.pid, 0);\n      } catch (error) {\n        Velocity.Collections.Mirrors.remove({pid: mirror.pid});\n      }\n    });\n  }\n\n  function _setReusableMirrors() {\n    Velocity.reusableMirrors = [];\n    Velocity.Collections.Mirrors.find({}).forEach(function(mirror) {\n      mirror.reused = false;\n      Velocity.reusableMirrors.push(mirror);\n    });\n  }\n\n})();\n"]},"hash":"1ee106f6f182f9e74f33cb64dccf3a5ae411f3f2"}
