{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"//////////////////////////////////////////////////////////////////////\n// Reports\n//\n\n/**\n * Record the results of an individual test run; a simple collector of\n * test data.\n *\n * The `data` object is stored in its entirety; any field may be passed in.\n * The optional fields documented here are suggestions based on what the\n * standard html-reporter supports.  Whether or not a field is actually\n * used is up to the specific test reporter that the user has installed.\n *\n * @method velocity/reports/submit\n * @param {Object} data\n *   @param {String} data.name Name of the test that was executed.\n *   @param {String} data.framework Name of a testing framework.\n *                                  For example, 'jasmine' or 'mocha'.\n *   @param {String} data.result The results of the test.  Standard values\n *                               are 'passed' and 'failed'.  Different test\n *                               reporters can support other values.  For\n *                               example, the aggregate tests collection uses\n *                               'pending' to indicate that results are still\n *                               coming in.\n *   @param {String} [data.id] Used to update a specific test result.  If not\n *                             provided, frameworks can use the\n *                             `velocity/reports/reset` Meteor method to\n *                             clear all tests.\n *   @param {Array} [data.ancestors] The hierarchy of suites and blocks above\n *                                   this test. For example,\n *                                ['Template', 'leaderboard', 'selected_name']\n *   @param {Date} [data.timestamp] The time that the test started for this\n *                                  result.\n *   @param {Number} [data.duration] The test duration in milliseconds.\n *   @param {String} [data.browser] Which browser did the test run in?\n *   @param {String} [data.failureType] For example, 'expect' or 'assert'\n *   @param {String} [data.failureMessage]\n *   @param {String} [data.failureStackTrace] The stack trace associated with\n *                                            the failure\n */\nVelocity.Methods['velocity/reports/submit'] = function (data) {\n  check(data, Match.ObjectIncluding({\n    name: String,\n    framework: String,\n    result: String,\n    id: Match.Optional(String),\n    ancestors: Match.Optional([String]),\n    timestamp: Match.Optional(Match.OneOf(Date, String)),\n    duration: Match.Optional(Number),\n    browser: Match.Optional(String),\n    failureType: Match.Optional(Match.Any),\n    failureMessage: Match.Optional(String),\n    failureStackTrace: Match.Optional(Match.Any)\n  }));\n\n  data.timestamp = data.timestamp ? new Date(data.timestamp) : new Date();\n  data.id = data.id || Random.id();\n\n  Velocity.Collections.TestReports.upsert(data.id, { $set: data });\n\n  VelocityInternals.updateAggregateReports();\n};","ast":null,"map":{"version":3,"sources":["/src/methods/reports/reports_submit.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,QAAQ,CAAC,OAAO,CAAC,yBAAyB,CAAC,GAAG,UAAU,IAAI,EAAE;AAC5D,OAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,CAAC;AAChC,QAAI,EAAE,MAAM;AACZ,aAAS,EAAE,MAAM;AACjB,UAAM,EAAE,MAAM;AACd,MAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC1B,aAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;AACnC,aAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpD,YAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAChC,WAAO,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC/B,eAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;AACtC,kBAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AACtC,qBAAiB,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;GAC7C,CAAC,CAAC,CAAC;;AAEJ,MAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxE,MAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;;AAEjC,UAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;;AAE/D,mBAAiB,CAAC,sBAAsB,EAAE,CAAC;CAC5C,CAAC","file":"/src/methods/reports/reports_submit.js.map","sourcesContent":["//////////////////////////////////////////////////////////////////////\n// Reports\n//\n\n/**\n * Record the results of an individual test run; a simple collector of\n * test data.\n *\n * The `data` object is stored in its entirety; any field may be passed in.\n * The optional fields documented here are suggestions based on what the\n * standard html-reporter supports.  Whether or not a field is actually\n * used is up to the specific test reporter that the user has installed.\n *\n * @method velocity/reports/submit\n * @param {Object} data\n *   @param {String} data.name Name of the test that was executed.\n *   @param {String} data.framework Name of a testing framework.\n *                                  For example, 'jasmine' or 'mocha'.\n *   @param {String} data.result The results of the test.  Standard values\n *                               are 'passed' and 'failed'.  Different test\n *                               reporters can support other values.  For\n *                               example, the aggregate tests collection uses\n *                               'pending' to indicate that results are still\n *                               coming in.\n *   @param {String} [data.id] Used to update a specific test result.  If not\n *                             provided, frameworks can use the\n *                             `velocity/reports/reset` Meteor method to\n *                             clear all tests.\n *   @param {Array} [data.ancestors] The hierarchy of suites and blocks above\n *                                   this test. For example,\n *                                ['Template', 'leaderboard', 'selected_name']\n *   @param {Date} [data.timestamp] The time that the test started for this\n *                                  result.\n *   @param {Number} [data.duration] The test duration in milliseconds.\n *   @param {String} [data.browser] Which browser did the test run in?\n *   @param {String} [data.failureType] For example, 'expect' or 'assert'\n *   @param {String} [data.failureMessage]\n *   @param {String} [data.failureStackTrace] The stack trace associated with\n *                                            the failure\n */\nVelocity.Methods['velocity/reports/submit'] = function (data) {\n  check(data, Match.ObjectIncluding({\n    name: String,\n    framework: String,\n    result: String,\n    id: Match.Optional(String),\n    ancestors: Match.Optional([String]),\n    timestamp: Match.Optional(Match.OneOf(Date, String)),\n    duration: Match.Optional(Number),\n    browser: Match.Optional(String),\n    failureType: Match.Optional(Match.Any),\n    failureMessage: Match.Optional(String),\n    failureStackTrace: Match.Optional(Match.Any)\n  }));\n\n  data.timestamp = data.timestamp ? new Date(data.timestamp) : new Date();\n  data.id = data.id || Random.id();\n\n  Velocity.Collections.TestReports.upsert(data.id, {$set: data});\n\n  VelocityInternals.updateAggregateReports();\n};\n"]},"hash":"25e920bb6f29c157625fe87df412884f23a4af4d"}
