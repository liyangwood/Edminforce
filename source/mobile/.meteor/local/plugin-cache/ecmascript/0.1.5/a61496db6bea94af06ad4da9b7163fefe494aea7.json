{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Stores metadata about the mirror.\n * Before a mirror implementation starts, it needs to call\n * this method to let Velocity know it is starting up.\n *\n * @method velocity/mirrors/init\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {Number} options.port The port this mirror is running on\n *   @param {String} options.mongoUrl The mongo url this mirror is using\n *   @param {String} options.host The root url of this mirror without any\n *                        additional paths. Used for making DDP connections\n *   @param {String} options.rootUrl The root url of this mirror, which also\n *                           includes the path and params\n *   @param {String} options.rootUrlPath Adds this string to the end of\n *                           the root url in the Velocity.Collections.Mirrors\n *                           collection. To be used by test frameworks to\n *                           recognize when they are executing in a mirror.\n *                           eg. `/?jasmine=true`\n * @param {Object} [extra] Any additional metadata the implementing mirror\n *                         would like to store in the Velocity mirrors\n *                         collection.\n */\nVelocity.Methods['velocity/mirrors/init'] = function (options, extra) {\n  check(options, {\n    framework: String,\n    port: Number,\n    mongoUrl: String,\n    host: String,\n    rootUrl: String,\n    rootUrlPath: String,\n    pid: Number\n  });\n  check(extra, Match.Optional(Object));\n\n  if (extra) {\n    _.extend(options, extra);\n  }\n\n  var _upsertQuery = {\n    framework: options.framework,\n    port: options.port\n  };\n\n  var _options = _.extend(options, {\n    state: 'starting'\n  });\n\n  Velocity.Collections.Mirrors.upsert(_upsertQuery, _options);\n};","ast":null,"map":{"version":3,"sources":["/src/methods/mirrors/mirror_init.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA,QAAQ,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,UAAU,OAAO,EAAE,KAAK,EAAE;AACpE,OAAK,CAAC,OAAO,EAAE;AACb,aAAS,EAAE,MAAM;AACjB,QAAI,EAAE,MAAM;AACZ,YAAQ,EAAE,MAAM;AAChB,QAAI,EAAE,MAAM;AACZ,WAAO,EAAE,MAAM;AACf,eAAW,EAAE,MAAM;AACnB,OAAG,EAAE,MAAM;GACZ,CAAC,CAAC;AACH,OAAK,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;AAErC,MAAI,KAAK,EAAE;AACT,KAAC,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;GAC1B;;AAGD,MAAI,YAAY,GAAG;AACjB,aAAS,EAAE,OAAO,CAAC,SAAS;AAC5B,QAAI,EAAE,OAAO,CAAC,IAAI;GACnB,CAAC;;AAEF,MAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE;AAC/B,SAAK,EAAE,UAAU;GAClB,CAAC,CAAC;;AAEH,UAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAC9C,QAAQ,CAAC,CAAC;CACb,CAAC","file":"/src/methods/mirrors/mirror_init.js.map","sourcesContent":["/**\n * Stores metadata about the mirror.\n * Before a mirror implementation starts, it needs to call\n * this method to let Velocity know it is starting up.\n *\n * @method velocity/mirrors/init\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {Number} options.port The port this mirror is running on\n *   @param {String} options.mongoUrl The mongo url this mirror is using\n *   @param {String} options.host The root url of this mirror without any\n *                        additional paths. Used for making DDP connections\n *   @param {String} options.rootUrl The root url of this mirror, which also\n *                           includes the path and params\n *   @param {String} options.rootUrlPath Adds this string to the end of\n *                           the root url in the Velocity.Collections.Mirrors\n *                           collection. To be used by test frameworks to\n *                           recognize when they are executing in a mirror.\n *                           eg. `/?jasmine=true`\n * @param {Object} [extra] Any additional metadata the implementing mirror\n *                         would like to store in the Velocity mirrors\n *                         collection.\n */\nVelocity.Methods['velocity/mirrors/init'] = function (options, extra) {\n  check(options, {\n    framework: String,\n    port: Number,\n    mongoUrl: String,\n    host: String,\n    rootUrl: String,\n    rootUrlPath: String,\n    pid: Number\n  });\n  check(extra, Match.Optional(Object));\n\n  if (extra) {\n    _.extend(options, extra);\n  }\n\n\n  var _upsertQuery = {\n    framework: options.framework,\n    port: options.port\n  };\n\n  var _options = _.extend(options, {\n    state: 'starting'\n  });\n\n  Velocity.Collections.Mirrors.upsert(_upsertQuery,\n    _options);\n};\n"]},"hash":"a61496db6bea94af06ad4da9b7163fefe494aea7"}
