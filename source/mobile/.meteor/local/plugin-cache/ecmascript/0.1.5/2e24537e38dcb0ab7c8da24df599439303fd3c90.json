{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Registers a testing framework plugin via a Meteor method.\n *\n * @method velocity/register/framework\n * @param {String} name The name of the testing framework.\n * @param {Object} [options] Options for the testing framework.\n *   @param {String} [options.regex] The regular expression for test files\n *                    that should be assigned to the testing framework.\n *                    The path relative to the tests folder is matched\n *                    against it. Default: 'name/.+\\.js$' (name is\n *                    the testing framework name).\n *   @param {String} [options.disableAutoReset]   Velocity's reset cycle\n *                    will skip reports and logs for this framework.\n *                    It is up to the framework to clean up its ****!\n *   @param {Function} [options.sampleTestGenerator] sampleTestGenerator\n *                    returns an array of fileObjects with the following\n *                    fields:\n *                      path - String - relative path to place test files\n *                                      (from PROJECT/tests)\n *                      contents - String - contents to put in the test file\n *                                          at the corresponding path\n */\nVelocity.Methods['velocity/register/framework'] = function (name, options) {\n  options = options || {};\n  check(name, String);\n  check(options, {\n    disableAutoReset: Match.Optional(Boolean),\n    regex: Match.Optional(RegExp),\n    sampleTestGenerator: Match.Optional(Function)\n  });\n\n  VelocityInternals.frameworkConfigs[name] = VelocityInternals.parseTestingFrameworkOptions(name, options);\n\n  // make sure the appropriate aggregate records are added\n  VelocityInternals.reset(name);\n};","ast":null,"map":{"version":3,"sources":["/src/methods/register_framework.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA,QAAQ,CAAC,OAAO,CAAC,6BAA6B,CAAC,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AACzE,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,OAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpB,OAAK,CAAC,OAAO,EAAE;AACb,oBAAgB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;AACzC,SAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC7B,uBAAmB,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;GAC9C,CAAC,CAAC;;AAEH,mBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,4BAA4B,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;AAGzG,mBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CAC/B,CAAC","file":"/src/methods/register_framework.js.map","sourcesContent":["/**\n * Registers a testing framework plugin via a Meteor method.\n *\n * @method velocity/register/framework\n * @param {String} name The name of the testing framework.\n * @param {Object} [options] Options for the testing framework.\n *   @param {String} [options.regex] The regular expression for test files\n *                    that should be assigned to the testing framework.\n *                    The path relative to the tests folder is matched\n *                    against it. Default: 'name/.+\\.js$' (name is\n *                    the testing framework name).\n *   @param {String} [options.disableAutoReset]   Velocity's reset cycle\n *                    will skip reports and logs for this framework.\n *                    It is up to the framework to clean up its ****!\n *   @param {Function} [options.sampleTestGenerator] sampleTestGenerator\n *                    returns an array of fileObjects with the following\n *                    fields:\n *                      path - String - relative path to place test files\n *                                      (from PROJECT/tests)\n *                      contents - String - contents to put in the test file\n *                                          at the corresponding path\n */\nVelocity.Methods['velocity/register/framework'] = function (name, options) {\n  options = options || {};\n  check(name, String);\n  check(options, {\n    disableAutoReset: Match.Optional(Boolean),\n    regex: Match.Optional(RegExp),\n    sampleTestGenerator: Match.Optional(Function)\n  });\n\n  VelocityInternals.frameworkConfigs[name] = VelocityInternals.parseTestingFrameworkOptions(name, options);\n\n  // make sure the appropriate aggregate records are added\n  VelocityInternals.reset(name);\n};\n"]},"hash":"2e24537e38dcb0ab7c8da24df599439303fd3c90"}
