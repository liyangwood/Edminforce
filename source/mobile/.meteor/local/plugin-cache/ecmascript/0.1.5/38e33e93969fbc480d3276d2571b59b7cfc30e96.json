{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Clear test and aggregate reports, either for a specific framework or for\n * all frameworks.\n *\n * @method velocity/reports/reset\n * @param {Object} [options]\n *   @param {String} [options.framework] The name of a specific framework\n *                    to clear results for.  Ex. 'jasmine' or 'mocha'\n *   @param {Array} [options.notIn] A list of test Ids which should be kept\n *                                  (not cleared).  These Ids must match the\n *                                  ones passed to `velocity/reports/submit`.\n */\nVelocity.Methods['velocity/reports/reset'] = function (options) {\n  var query = {};\n\n  options = options || {};\n  check(options, {\n    framework: Match.Optional(String),\n    notIn: Match.Optional([String])\n  });\n\n  if (options.framework) {\n    query.framework = options.framework;\n    Velocity.Collections.AggregateReports.upsert({ name: options.framework }, { $set: { result: 'pending' } });\n  }\n\n  if (options.notIn) {\n    query = _.assign(query, { _id: { $nin: options.notIn } });\n  }\n\n  Velocity.Collections.TestReports.remove(query);\n\n  VelocityInternals.updateAggregateReports();\n};","ast":null,"map":{"version":3,"sources":["/src/methods/reports/reports_reset.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,QAAQ,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,UAAU,OAAO,EAAE;AAC9D,MAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,OAAK,CAAC,OAAO,EAAE;AACb,aAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AACjC,SAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;GAChC,CAAC,CAAC;;AAEH,MAAI,OAAO,CAAC,SAAS,EAAE;AACrB,SAAK,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AACpC,YAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,OAAO,CAAC,SAAS,EAAC,EACpE,EAAC,IAAI,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC;GAChC;;AAED,MAAI,OAAO,CAAC,KAAK,EAAE;AACjB,SAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,EAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAC,EAAC,CAAC,CAAC;GACvD;;AAED,UAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;AAE/C,mBAAiB,CAAC,sBAAsB,EAAE,CAAC;CAC5C,CAAC","file":"/src/methods/reports/reports_reset.js.map","sourcesContent":["/**\n * Clear test and aggregate reports, either for a specific framework or for\n * all frameworks.\n *\n * @method velocity/reports/reset\n * @param {Object} [options]\n *   @param {String} [options.framework] The name of a specific framework\n *                    to clear results for.  Ex. 'jasmine' or 'mocha'\n *   @param {Array} [options.notIn] A list of test Ids which should be kept\n *                                  (not cleared).  These Ids must match the\n *                                  ones passed to `velocity/reports/submit`.\n */\nVelocity.Methods['velocity/reports/reset'] = function (options) {\n  var query = {};\n\n  options = options || {};\n  check(options, {\n    framework: Match.Optional(String),\n    notIn: Match.Optional([String])\n  });\n\n  if (options.framework) {\n    query.framework = options.framework;\n    Velocity.Collections.AggregateReports.upsert({name: options.framework},\n      {$set: {result: 'pending'}});\n  }\n\n  if (options.notIn) {\n    query = _.assign(query, {_id: {$nin: options.notIn}});\n  }\n\n  Velocity.Collections.TestReports.remove(query);\n\n  VelocityInternals.updateAggregateReports();\n};\n"]},"hash":"38e33e93969fbc480d3276d2571b59b7cfc30e96"}
