{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Lets Velocity know the mirror has started successfully\n *\n * @method velocity/mirrors/register\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {String} options.host The root url of this mirror without any\n *                                additional paths. Must include port. Used\n *                                for making DDP connections\n */\nVelocity.Methods['velocity/mirrors/register'] = function (options) {\n  check(options, Match.ObjectIncluding({\n    framework: String,\n    host: String\n  }));\n\n  DEBUG && console.log('[velocity] Mirror registered. Handshaking with mirror...', options);\n\n  this.unblock();\n\n  // TODO: Should the host really include the port?\n  var mirrorConnection = DDP.connect(options.host, {\n    onConnected: function () {\n      DEBUG && console.log('[velocity] Connected to mirror, setting state to ready', options);\n      mirrorConnection.call('velocity/parentHandshake', function (error, response) {\n        DEBUG && console.log('[velocity] Parent Handshake response', error, response);\n        var _updateQuery = {\n          framework: options.framework,\n          port: parseInt(options.port)\n        };\n        Velocity.Collections.Mirrors.update(_updateQuery, {\n          $set: {\n            state: 'ready',\n            lastModified: Date.now()\n          }\n        });\n        mirrorConnection.disconnect();\n      });\n    }\n  });\n};","ast":null,"map":{"version":3,"sources":["/src/methods/mirrors/mirror_register.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,QAAQ,CAAC,OAAO,CAAC,2BAA2B,CAAC,GAAG,UAAU,OAAO,EAAE;AACjE,OAAK,CAAC,OAAO,EAAE,KAAK,CAAC,eAAe,CAAC;AACnC,aAAS,EAAE,MAAM;AACjB,QAAI,EAAE,MAAM;GACb,CAAC,CAAC,CAAC;;AAEJ,OAAK,IAAI,OAAO,CAAC,GAAG,CAAC,0DAA0D,EAAE,OAAO,CAAC,CAAC;;AAE1F,MAAI,CAAC,OAAO,EAAE,CAAC;;;AAGf,MAAI,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;AAC/C,eAAW,EAAE,YAAY;AACvB,WAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wDAAwD,EAAE,OAAO,CAAC,CAAC;AACxF,sBAAgB,CAAC,IAAI,CAAC,0BAA0B,EAAE,UAAU,KAAK,EAAE,QAAQ,EAAE;AAC3E,aAAK,IAAI,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC9E,YAAI,YAAY,GAAG;AACjB,mBAAS,EAAE,OAAO,CAAC,SAAS;AAC5B,cAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;SAC7B,CAAC;AACF,gBAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE;AAChD,cAAI,EAAE;AACJ,iBAAK,EAAE,OAAO;AACd,wBAAY,EAAE,IAAI,CAAC,GAAG,EAAE;WACzB;SACF,CAAC,CAAC;AACH,wBAAgB,CAAC,UAAU,EAAE,CAAC;OAC/B,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ,CAAC","file":"/src/methods/mirrors/mirror_register.js.map","sourcesContent":["/**\n * Lets Velocity know the mirror has started successfully\n *\n * @method velocity/mirrors/register\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {String} options.host The root url of this mirror without any\n *                                additional paths. Must include port. Used\n *                                for making DDP connections\n */\nVelocity.Methods['velocity/mirrors/register'] = function (options) {\n  check(options, Match.ObjectIncluding({\n    framework: String,\n    host: String\n  }));\n\n  DEBUG && console.log('[velocity] Mirror registered. Handshaking with mirror...', options);\n\n  this.unblock();\n\n  // TODO: Should the host really include the port?\n  var mirrorConnection = DDP.connect(options.host, {\n    onConnected: function () {\n      DEBUG && console.log('[velocity] Connected to mirror, setting state to ready', options);\n      mirrorConnection.call('velocity/parentHandshake', function (error, response) {\n        DEBUG && console.log('[velocity] Parent Handshake response', error, response);\n        var _updateQuery = {\n          framework: options.framework,\n          port: parseInt(options.port)\n        };\n        Velocity.Collections.Mirrors.update(_updateQuery, {\n          $set: {\n            state: 'ready',\n            lastModified: Date.now()\n          }\n        });\n        mirrorConnection.disconnect();\n      });\n    }\n  });\n};\n"]},"hash":"2c94b3bdaf43efe5cc4694c31b1dcc064c004b1b"}
