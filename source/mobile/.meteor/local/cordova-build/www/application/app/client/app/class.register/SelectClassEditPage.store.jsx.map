{"version":3,"sources":["meteor://üíªapp/client/app/class.register/SelectClassEditPage.store.jsx"],"names":[],"mappings":"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","file":"/client/app/class.register/SelectClassEditPage.store.jsx","sourcesContent":["/**\n * Created on 10/11/15.\n */\n\n{\n    //Âçï‰Ωì Âú®Â§ö‰∏™Âú∞Êñπ‰ΩøÁî®ÊàñÂú®meteordata‰∏≠Ë¢´Ëß¶Âèë  ‰ªÖÂàùÂßãÂåñ‰∏ÄÊ¨°\n    //let _storeInstance=null;\n\n    Dependency.add('classRegister.CRSelectClassEditPage.store', new function () {\n\n        //if(_storeInstance) return _storeInstance;\n        //console.log('run Dependency CRSelectClassEditPage')\n        //_storeInstance = this;\n\n        var self = this;\n\n        ////props///\n\n        self.props = new ReactiveVar();\n        self.cart = new ReactiveVar();\n\n\n        //this function may be called in Tracker.autorun and before  DB.Swimmers loaded\n        //so should take care\n        self.getSwimmers = function () {\n            return DB.Swimmers.find({accountId: Meteor.userId()})\n        }\n\n        //////////////////////////////////////////////////////\n        ///////////////////selection info\n        // should reset after add to\n        //ÈÄâ‰∏≠ÁöÑswimmer\n        self.currentSwimmer = new ReactiveVar()\n        //ÂΩìÂâçÁöÑlevel\n        self.currentLevel = new ReactiveVar()\n        //ÈÄâ‰∏≠ÁöÑday\n        self.currentDay = new ReactiveVar()\n        self.currentTime = new ReactiveVar()\n        self.currentClass = new ReactiveVar()\n        //ÂΩìÂâçÁöÑÊ≠•È™§\n        self.currentStep = new ReactiveVar(1)\n\n\n        //ÂèØÈÄâdays ‰æùËµñ‰∫é ÂΩìÂâçÁöÑcurrentLevel\n        self.avaiableDays = new ReactiveVar([])\n        //ÂèØÈÄâÊó∂Èó¥   ‰æùËµñ‰∫é ÂΩìÂâçÈÄâ‰∏≠ÁöÑcurrentDay\n        self.avaiableTimes = new ReactiveVar([])\n\n\n        //Session.set('CART_ID')\n\n\n        /*\n         * ‰∏ÄÊ¨°ÊµÅÁ®ãÈÄâÊã©ÁöÑclass‰ø°ÊÅØ  3Ê≠•\n         * ‰ΩøÁî®ImmutableÂ∫ìËøõË°åÂØπË±°‰øÆÊîπ\n         * {\n         *  swimmer:\n         *  class1:{classId, swimmerId}\n         *  class2:\n         *  class3:\n         * }\n         * */\n        self.selectedClasses = new ReactiveVar(Immutable.Map())\n\n\n        var undefinedSelectValueOption = {text:'', value: ''};\n        var undefinedSelectValue = '';\n\n        //ÊöÇÂ≠òË¥≠Áâ©ËΩ¶ID ÂêéÁ´Ø‰ºöÈ™åËØÅÂÖ∂ÊúâÊïàÊÄß\n\n\n        function resetDateAndTime() {\n            self.currentDay.set(undefinedSelectValue)\n            self.currentTime.set(undefinedSelectValue)\n        }\n\n\n        self.tokenId = Dispatcher.register(function (payload) {\n            switch (payload.actionType) {\n\n                case \"CRSelectClassEditPage_PROPS_UPDATE\"://get props\n                {\n                    console.log('CRSelectClassEditPage_PROPS_UPDATE',payload.props)\n\n                    self.props.set(payload.props)\n\n                    self.currentDay.set()\n                    self.currentTime.set()\n                    self.currentClass.set()\n\n\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_DAY_CHANGE\"://ÈÄâÊã©day\n                {\n                    console.log('day change ', payload.day)\n                    self.currentDay.set(payload.day)\n                    self.currentTime.set()\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_TIME_CHANGE\"://ÈÄâÊã©time  Á°ÆÂÆö‰∏Ä‰∏™class\n                {\n\n                    self.currentTime.set(payload.time)\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_CLASS_SELECT\"://selectÁ°ÆÂÆö\n                {\n\n\n                    var props = self.props.get();\n                    var currentClass = self.currentClass.get()\n                    /*\n                     * cartId  Á°ÆÂÆöË¥≠Áâ©ËΩ¶\n                     * swimmerId classId   Á°ÆÂÆö‰∏Ä‰∏™item\n                     * preferenceNum   Á°ÆÂÆöpreference  1Ôºå2Ôºå3\n                     * toClassData     Êñ∞ÁöÑclassÊï∞ÊçÆ  classIdÔºü\n                     *\n                     * */\n                    Meteor.call('change_preference_in_cart', {\n                        cartId:props.cartId,\n                        swimmerId: props.swimmerId,\n                        classId: props.classId,\n                        preferenceNum:props.preferenceNum,\n\n                        classData:currentClass\n                    }, function (err, result) {\n\n                        if (err) {\n                            console.error(err)\n                            alert(err.error)\n                            return; //todo  prompt\n                        }\n\n                        //ÈÄöÁü•SelectClassPage.store Êõ¥Êñ∞Êï∞ÊçÆ\n                        //Dispatcher.dispatch({\n                        //    actionType: 'CRSelectClassPage_SelectedClasses_CHANGE',\n                        //    preferenceNum:props.preferenceNum,\n                        //    classData:currentClass\n                        //});\n\n\n                        //ÂõûÂà∞‰∏ä‰∏ÄÈ°µ\n                        window.history.back();\n\n                    })\n\n                    break;\n                }\n\n                case \"CRSelectClassEditPage_ComponentWillMount\":\n                {\n                    //Ê∏ÖÁ©∫‰∏ä‰∏ÄËΩÆÁöÑÈÄâÊã©\n\n                    self.currentDay.set(undefinedSelectValue)\n                    self.currentTime.set(undefinedSelectValue)\n                    self.currentClass.set(null)\n                    self.currentStep.set(1)\n                    //self.avaiableDays //‰æùËµñ‰∫é ÂΩìÂâçÁöÑcurrentLevel\n                    //self.avaiableTimes //‰æùËµñ‰∫é ÂΩìÂâçÈÄâ‰∏≠ÁöÑcurrentDay\n\n                    self.selectedClasses.set(Immutable.Map())\n\n                    break;\n                }\n\n            }\n        });\n\n\n        /*\n         *\n         * ********************* wait for ******************\n         * wrap in Meteor.startup for Tracker.autorun can run before cellections loaded\n         *\n         * */\n\n        Meteor.startup(function () {\n\n            //Ê†πÊçÆÁªÑ‰ª∂ÁöÑprops ÂàùÂßãÂåñÊï∞ÊçÆ\n            Tracker.autorun(function (compution) {\n\n\n\n                var props = self.props.get();\n                console.log(self.props.dep._dependentsById)\n\n                if(!props) return; //wait for props\n\n                console.log('autorun props', props)\n\n                //var cartId= props.cartId;\n\n                //todo classId swimmerId Êù°‰ª∂\n                var cart\n                if(props.cartId){\n                    cart= DB.ShoppingCart.findOne({\n                        _id:props.cartId\n                    })\n                }else{\n                    cart= DB.ShoppingCart.findOne({\n                        status:'active'\n                    })\n                }\n\n\n                var currentSwimmer= DB.Swimmers.findOne({\n                    _id:props.swimmerId\n                })\n\n                if(cart){\n                    self.cart.set(cart)\n                    console.log(cart)\n\n                }\n\n\n                if(currentSwimmer){\n                    self.currentSwimmer.set(currentSwimmer)\n                    //self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n                    //console.log('set currentLevel',currentSwimmer.level)\n\n                }\n\n\n            })\n\n\n\n            //ËÆ°ÁÆólevel\n            Tracker.autorun(function () {\n                var currentSwimmer = self.currentSwimmer.get()\n                var appInfo = DB.App.findOne()\n\n                if(!appInfo) return;\n                if(!currentSwimmer) return;\n\n                Tracker.autorun(function () {\n\n                    var nowClasses = DB.ClassesRegister.find({\n                        swimmerId: currentSwimmer._id,\n                        status:'normal',  //‰∏çÊòæÁ§∫cancel‰∏≠ÁöÑÂíå change‰∏≠ÁöÑ\n                        sessionId: App.info.sessionNow\n                    }).fetch();\n\n                    //self.nowClasses.set(nowClasses)\n\n                    if(nowClasses.length>0){\n                        self.currentLevel.set(App.getNextClassLevel(currentSwimmer.level))\n\n                    }else{\n                        self.currentLevel.set(currentSwimmer.level)\n                    }\n\n                })\n\n            })\n\n\n            //days depend on level of swimmer\n            Tracker.autorun(function (compution) {\n\n                console.log(self.currentLevel.dep._dependentsById)\n\n\n                console.log('autorun get currentLevel')\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n\n\n                var level = self.currentLevel.get();\n                console.log('autorun get currentLevel', level, App.info.sessionRegister)\n\n                if(!level) return;  // wait for level\n\n\n                let classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, //level session\n                    levels: level,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                console.log(level, App.info.sessionRegister, classes)\n\n                //\n                classes = _.uniq(classes, function (item, key, a) {\n                    return item.day;\n                });\n\n                let days = classes.map(function (v, n) {\n                    return {text: App.Config.week[v.day], value: v.day}\n                })\n                days.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n                //add an empty value to prevent browser init select value  use the first item\n                days.unshift(undefinedSelectValueOption)\n\n                self.avaiableDays.set(days)\n\n\n                //ÈáçÁΩÆday\n                //self.currentDay.set(days[0].value)\n\n\n            });\n\n            /// time depend on day\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n\n                var currentDay = self.currentDay.get();\n\n                var level\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                });\n\n                let classes = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: currentDay,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                let times = classes.map(function (v, n) {\n                    return {\n                        text: App.num2time(v.startTime) + \"-\" + App.num2time(v.endTime),\n                        value: v.startTime\n                    }\n                })\n                times.sort(function (a, b) {\n                    return (a.value - b.value);\n                })\n\n\n                //add an empty value to prevent browser init select value  use the first item\n                times.unshift(undefinedSelectValueOption)\n\n                self.avaiableTimes.set(times)\n\n                //ÈáçÁΩÆtime\n                //self.currentTime.set(times[0].value)\n\n\n            });\n\n            //timeÁ°ÆÂÆöÂêéclassÂ∞±Á°ÆÂÆö‰∫Ü\n            //level + day+ time  Á°ÆÂÆö‰∏Ä‰∏™class\n            Tracker.autorun(function () {\n\n                //wait for App.info ready\n                App.info = App.info || DB.App.findOne()\n                if (!App.info) return;\n\n                let time = self.currentTime.get()\n\n\n                let level, day;\n                Tracker.nonreactive(function () {\n                    level = self.currentLevel.get()\n                    day = self.currentDay.get()\n                });\n\n\n                let theClass = DB.Classes.find({\n                    sessionId: App.info.sessionRegister, // session level day\n                    levels: level,\n                    day: day,\n                    startTime: time,\n                    seatsRemain:{$gt:0}\n                }).fetch()\n\n                if (theClass.length > 1) {\n                    console.error('Multi class match when select class ')\n                }\n\n                if (theClass[0]) {\n                    self.currentClass.set(theClass[0])\n\n                    console.log('selected class', theClass[0])\n                }\n\n\n            });\n\n\n        })\n\n\n    });\n}\n\n"]}