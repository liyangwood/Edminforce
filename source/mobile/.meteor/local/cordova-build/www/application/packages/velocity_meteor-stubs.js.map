{"version":3,"sources":["meteor://ðŸ’»app/packages/velocity_meteor-stubs/packages/velocity_meteor-stubs.js"],"names":[],"mappingsgG","file":"/packages/velocity_meteor-stubs.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/velocity:meteor-stubs/index.js                                         //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\n/*jshint -W020, -W079 */                                                           // 1\n/*global MeteorStubs: true*/                                                       // 2\n\"use strict\";                                                                      // 3\n                                                                                   // 4\n// TODO: Blaze?                                                                    // 5\n// TODO: ReactiveVar                                                               // 6\n// TODO: EJSON?                                                                    // 7\n                                                                                   // 8\n//////////////////////////////////////////////////////////////////////             // 9\n// Meteor Stubs                                                                    // 10\n//                                                                                 // 11\n// Stubs for the core Meteor objects.                                              // 12\n//                                                                                 // 13\n// Usage:                                                                          // 14\n//                                                                                 // 15\n//   MeteorStubs.install()   - installs stubs into the global object               // 16\n//                             (either `global` or `window`)                       // 17\n//   MeteorStubs.uninstall() - restore global object fields to their               // 18\n//                             previous values                                     // 19\n//                                                                                 // 20\n// A note about the structure of this package:                                     // 21\n//   Having everything all in a single file is not ideal but it makes              // 22\n//   it much easier to include client-side.  Please see the ToC below              // 23\n//   to ease browsing.  Each section has a unique id which you can                 // 24\n//   search on.                                                                    // 25\n//                                                                                 // 26\n//                                                                                 // 27\n// Table of Contents:                                                              // 28\n//                                                                                 // 29\n//   MS00 - MeteorStubs                                                            // 30\n//   MS01 - Common prototypes                                                      // 31\n//          Collection, Cursor, ObjectId                                           // 32\n//   MS05 - Meteor                                                                 // 33\n//     MS05-1 - Meteor.Collection                                                  // 34\n//     MS05-2 - Meteor.Collection.ObjectID                                         // 35\n//     MS05-3 - Meteor.users                                                       // 36\n//   MS06 - Check                                                                  // 37\n//   MS10 - Npm                                                                    // 38\n//   MS15 - Tracker                                                                // 39\n//   MS20 - Package                                                                // 40\n//   MS25 - Random                                                                 // 41\n//   MS30 - Session                                                                // 42\n//   MS35 - Templates                                                              // 43\n//   MS40 - Handlebars                                                             // 44\n//   MS45 - Accounts                                                               // 45\n//   MS48 - ServiceConfiguration                                                   // 46\n//   MS50 - __meteor_bootstrap__                                                   // 47\n//   MS55 - share                                                                  // 48\n//   MS60 - Mongo                                                                  // 49\n//   MS62 - HTTP                                                                   // 50\n//   MS63 - Email                                                                  // 51\n//   MS65 - Assets                                                                 // 52\n//   MS70 - Cordova                                                                // 53\n//                                                                                 // 54\n//////////////////////////////////////////////////////////////////////             // 55\n                                                                                   // 56\n                                                                                   // 57\n// Factory methods are used so that each time `MeteorStubs.install` is             // 58\n// called, a clean object will be returned.                                        // 59\n// Each stub has one factory associated with it.                                   // 60\n                                                                                   // 61\nvar stubFactories = {},                                                            // 62\n    emptyFn = function () {},                                                      // 63\n    stringFn = function () { return '' },                                          // 64\n    callbackFn = function (fn) { fn() };                                           // 65\n                                                                                   // 66\n                                                                                   // 67\n                                                                                   // 68\n                                                                                   // 69\n//////////////////////////////////////////////////////////////////////             // 70\n// MS00 - MeteorStubs                                                              // 71\n//////////////////////////////////////////////////////////////////////             // 72\n                                                                                   // 73\n;(function (global) {                                                              // 74\n  var _context = global,                                                           // 75\n      _originals = {};                                                             // 76\n                                                                                   // 77\n  var meteorStubs = {                                                              // 78\n                                                                                   // 79\n    /**                                                                            // 80\n     * Install Meteor stubs into global context                                    // 81\n     *                                                                             // 82\n     * @method install                                                             // 83\n     * @param {Object} [context] Optional. The context to attach                   // 84\n     *                 stubs to.  Default: the global context.                     // 85\n     */                                                                            // 86\n    install: function (context) {                                                  // 87\n                                                                                   // 88\n      if ('object' == typeof context && null !== context) {                        // 89\n        // place stubs on user-defined context                                     // 90\n        _context = context;                                                        // 91\n      }                                                                            // 92\n                                                                                   // 93\n      for (var key in stubFactories) {                                             // 94\n        if (_context[key] && !_originals[key]) {                                   // 95\n          _originals[key] = _context[key];                                         // 96\n        }                                                                          // 97\n        _context[key] = stubFactories[key]();                                      // 98\n      }                                                                            // 99\n                                                                                   // 100\n    },                                                                             // 101\n                                                                                   // 102\n                                                                                   // 103\n    /**                                                                            // 104\n     * Remove stubs by restoring context's original fields                         // 105\n     *                                                                             // 106\n     * @method uninstall                                                           // 107\n     */                                                                            // 108\n    uninstall: function () {                                                       // 109\n      for (var key in stubFactories) {                                             // 110\n        if ('undefined' == typeof _originals[key]) {                               // 111\n          delete _context[key];                                                    // 112\n        } else {                                                                   // 113\n          _context[key] = _originals[key];                                         // 114\n        }                                                                          // 115\n      }                                                                            // 116\n    }                                                                              // 117\n                                                                                   // 118\n  };  // end global.MeteorStubs                                                    // 119\n                                                                                   // 120\n  if (typeof Meteor === 'undefined') {                                             // 121\n    global.MeteorStubs = meteorStubs;                                              // 122\n  } else {                                                                         // 123\n    try {                                                                          // 124\n      MeteorStubs = meteorStubs;                                                   // 125\n    } catch (error) {                                                              // 126\n      global.MeteorStubs = meteorStubs;                                            // 127\n    }                                                                              // 128\n    if (Meteor.isClient) {                                                         // 129\n      global.MeteorStubs = meteorStubs;                                            // 130\n    }                                                                              // 131\n  }                                                                                // 132\n                                                                                   // 133\n})(typeof global === 'undefined' ? window : global);                               // 134\n                                                                                   // 135\n                                                                                   // 136\n                                                                                   // 137\n//////////////////////////////////////////////////////////////////////             // 138\n// Common Prototypes - MS01                                                        // 139\n//////////////////////////////////////////////////////////////////////             // 140\n                                                                                   // 141\nvar prototypes = {                                                                 // 142\n                                                                                   // 143\n  Collection: {                                                                    // 144\n    find: function () {                                                            // 145\n      var Mongo = stubFactories.Mongo();                                           // 146\n      return new Mongo.Cursor();                                                   // 147\n    },                                                                             // 148\n    findOne: emptyFn,                                                              // 149\n    insert: emptyFn,                                                               // 150\n    update: emptyFn,                                                               // 151\n    upsert: emptyFn,                                                               // 152\n    remove: emptyFn,                                                               // 153\n    allow: emptyFn,                                                                // 154\n    deny: emptyFn,                                                                 // 155\n    // TODO: Still needed?                                                         // 156\n    _ensureIndex: emptyFn                                                          // 157\n  },  // end Collection                                                            // 158\n                                                                                   // 159\n  Cursor: {                                                                        // 160\n    forEach: emptyFn,                                                              // 161\n    map: emptyFn,                                                                  // 162\n    fetch: emptyFn,                                                                // 163\n    count: emptyFn,                                                                // 164\n    observe: emptyFn,                                                              // 165\n    observeChanges: emptyFn                                                        // 166\n  },                                                                               // 167\n                                                                                   // 168\n  ObjectID: {                                                                      // 169\n    getTimestamp: stringFn,                                                        // 170\n    toHexString: stringFn,                                                         // 171\n    toJSONValue: stringFn                                                          // 172\n  }                                                                                // 173\n                                                                                   // 174\n};  // end prototypes                                                              // 175\n                                                                                   // 176\n                                                                                   // 177\n//////////////////////////////////////////////////////////////////////             // 178\n// Meteor - MS05                                                                   // 179\n//////////////////////////////////////////////////////////////////////             // 180\n                                                                                   // 181\nstubFactories.Meteor = function () {                                               // 182\n  var _instantiationCounts = {},                                                   // 183\n      Meteor;                                                                      // 184\n                                                                                   // 185\n  function collectionFn (collectionName) {                                         // 186\n    var current = _instantiationCounts[collectionName];                            // 187\n                                                                                   // 188\n    if (!current) {                                                                // 189\n      _instantiationCounts[collectionName] = 1                                     // 190\n    } else {                                                                       // 191\n      _instantiationCounts[collectionName] = current + 1                           // 192\n    }                                                                              // 193\n  }                                                                                // 194\n                                                                                   // 195\n  Meteor = {                                                                       // 196\n    // Core                                                                        // 197\n    isClient: true,                                                                // 198\n    isServer: true,                                                                // 199\n    isCordova: false,                                                              // 200\n    startup: function (newStartupFunction) {                                       // 201\n      this.startupFunctions.push(newStartupFunction);                              // 202\n    },                                                                             // 203\n    wrapAsync: emptyFn,                                                            // 204\n    absoluteUrl: emptyFn,                                                          // 205\n    settings: { public: {} },                                                      // 206\n    release: undefined,                                                            // 207\n                                                                                   // 208\n    // Publish and subscribe                                                       // 209\n    publish: function (modelName, publishFunction) {                               // 210\n      this.publishFunctions[modelName] = publishFunction;                          // 211\n    },                                                                             // 212\n    subscribe: function (modelName, subscribeFunction) {                           // 213\n      this.subscribeFunctions[modelName] = subscribeFunction;                      // 214\n      return {                                                                     // 215\n        ready: function () {                                                       // 216\n          return true;                                                             // 217\n        }                                                                          // 218\n      };                                                                           // 219\n    },                                                                             // 220\n                                                                                   // 221\n    // Methods                                                                     // 222\n    methods: function (map) {                                                      // 223\n      for (var name in map) {                                                      // 224\n        //noinspection JSUnfilteredForInLoop                                       // 225\n        this.methodMap[name] = map[name];                                          // 226\n      }                                                                            // 227\n    },                                                                             // 228\n    Error: function(error, reason, details) {                                      // 229\n      if (error) this.error = error;                                               // 230\n      if (reason) this.reason = reason;                                            // 231\n      if (details) this.details = details;                                         // 232\n    },                                                                             // 233\n    call: function(name /* .. [arguments] .. callback */) {                        // 234\n      // if it's a function, the last argument is the result callback,             // 235\n      // not a parameter to the remote method.                                     // 236\n      var args = Array.prototype.slice.call(arguments, 1);                         // 237\n      if (args.length && typeof args[args.length - 1] === \"function\") {            // 238\n        var callback = args.pop();                                                 // 239\n      }                                                                            // 240\n                                                                                   // 241\n      return Meteor.apply(name, args, callback)                                    // 242\n    },                                                                             // 243\n    callInContext: function(name, context /* .. [arguments] .. callback */) {      // 244\n      // if it's a function, the last argument is the result callback,             // 245\n      // not a parameter to the remote method.                                     // 246\n      var args = Array.prototype.slice.call(arguments, 2);                         // 247\n      if (args.length && typeof args[args.length - 1] === \"function\") {            // 248\n        var callback = args.pop();                                                 // 249\n      }                                                                            // 250\n                                                                                   // 251\n      return Meteor.applyInContext(name, context, args, callback)                  // 252\n    },                                                                             // 253\n    // TODO: Support options.onResultReceived                                      // 254\n    apply: function(name, args, options, callback) {                               // 255\n      var context = {                                                              // 256\n        userId: null,                                                              // 257\n        setUserId: emptyFn,                                                        // 258\n        isSimulation: false,                                                       // 259\n        unblock: emptyFn,                                                          // 260\n        connection: null                                                           // 261\n      };                                                                           // 262\n                                                                                   // 263\n      return Meteor.applyInContext(name, context, args, options, callback);        // 264\n    },                                                                             // 265\n    // TODO: Support options.onResultReceived                                      // 266\n    applyInContext: function(name, context, args, options, callback) {             // 267\n      // We were passed 4 arguments.                                               // 268\n      // They may be either (name, context, args, options)                         // 269\n      // or (name, context, args, callback)                                        // 270\n      if (!callback && typeof options === 'function') {                            // 271\n        callback = options;                                                        // 272\n        //options = {};                                                            // 273\n      }                                                                            // 274\n      //options = options || {};                                                   // 275\n                                                                                   // 276\n      return Meteor.executeFunction(function() {                                   // 277\n        return Meteor.methodMap[name].apply(context, args);                        // 278\n      }, callback);                                                                // 279\n    },                                                                             // 280\n                                                                                   // 281\n    // Server connections                                                          // 282\n    status: function () {                                                          // 283\n      return {                                                                     // 284\n        connected: true,                                                           // 285\n        status: 'connected',                                                       // 286\n        retryCount: 0,                                                             // 287\n        retryTime: undefined,                                                      // 288\n        reason: undefined                                                          // 289\n      }                                                                            // 290\n    },                                                                             // 291\n    reconnect: emptyFn,                                                            // 292\n    disconnect: emptyFn,                                                           // 293\n    onConnection: emptyFn,                                                         // 294\n    // TODO: DDP.connect                                                           // 295\n                                                                                   // 296\n    // Collections                                                                 // 297\n    /*                                                                             // 298\n     * @Deprecated Use Mongo.Collection                                            // 299\n     */                                                                            // 300\n    Collection: collectionFn,                                                      // 301\n    /*                                                                             // 302\n     * @Deprecated Use Mongo.Collection                                            // 303\n     */                                                                            // 304\n    SmartCollection: collectionFn,                                                 // 305\n                                                                                   // 306\n    // Accounts                                                                    // 307\n    user: function () {                                                            // 308\n      return {                                                                     // 309\n        emails: []                                                                 // 310\n      };                                                                           // 311\n    },                                                                             // 312\n    userId: function () {                                                          // 313\n      return null;                                                                 // 314\n    },                                                                             // 315\n    loggingIn: emptyFn,                                                            // 316\n    logout: emptyFn,                                                               // 317\n    logoutOtherClients: emptyFn,                                                   // 318\n    loginWithMeteorDeveloperAccount: emptyFn,                                      // 319\n    loginWithFacebook: emptyFn,                                                    // 320\n    loginWithGithub: emptyFn,                                                      // 321\n    loginWithGoogle: emptyFn,                                                      // 322\n    loginWithMeetup: emptyFn,                                                      // 323\n    loginWithTwitter: emptyFn,                                                     // 324\n    loginWithWeibo: emptyFn,                                                       // 325\n                                                                                   // 326\n    // Timers                                                                      // 327\n    setTimeout: emptyFn,                                                           // 328\n    setInterval: emptyFn,                                                          // 329\n    clearTimeout: emptyFn,                                                         // 330\n    clearInterval: emptyFn,                                                        // 331\n                                                                                   // 332\n    // Internal stub state                                                         // 333\n    instantiationCounts: _instantiationCounts,                                     // 334\n    startupFunctions: [],                                                          // 335\n    publishFunctions: {},                                                          // 336\n    subscribeFunctions: {},                                                        // 337\n    methodMap: {},                                                                 // 338\n                                                                                   // 339\n    // Methods of the stub                                                         // 340\n    executeFunction: function(func, callback) {                                    // 341\n      var exception = null;                                                        // 342\n      var result = null;                                                           // 343\n                                                                                   // 344\n      try {                                                                        // 345\n        result = func();                                                           // 346\n      } catch (ex) {                                                               // 347\n        exception = ex;                                                            // 348\n      }                                                                            // 349\n                                                                                   // 350\n      // if we specify the callback function execute it                            // 351\n      if (callback) {                                                              // 352\n        callback(exception, result);                                               // 353\n      } else {                                                                     // 354\n        if (exception != null) {                                                   // 355\n          // rethrow exception                                                     // 356\n          throw exception;                                                         // 357\n        } else if (Meteor.isServer) {                                              // 358\n          return result;                                                           // 359\n        }                                                                          // 360\n      }                                                                            // 361\n    },                                                                             // 362\n                                                                                   // 363\n    runStartupMethods: function () {                                               // 364\n      for (var i = 0; i < this.startupFunctions.length; i += 1) {                  // 365\n        this.startupFunctions[i]();                                                // 366\n      }                                                                            // 367\n    }                                                                              // 368\n  };                                                                               // 369\n                                                                                   // 370\n                                                                                   // 371\n  //////////////////////////////////////////////////////////////////////           // 372\n  // Meteor.Collection - MS05.1                                                    // 373\n  //////////////////////////////////////////////////////////////////////           // 374\n                                                                                   // 375\n  Meteor.Collection.prototype = prototypes.Collection;                             // 376\n                                                                                   // 377\n                                                                                   // 378\n                                                                                   // 379\n                                                                                   // 380\n  //////////////////////////////////////////////////////////////////////           // 381\n  // Meteor.Collection.ObjectID - MS05.2                                           // 382\n  //////////////////////////////////////////////////////////////////////           // 383\n                                                                                   // 384\n  Meteor.Collection.ObjectID = function () {                                       // 385\n    return { _str: '' };                                                           // 386\n  };                                                                               // 387\n  Meteor.Collection.ObjectID.prototype = prototypes.ObjectID                       // 388\n                                                                                   // 389\n                                                                                   // 390\n                                                                                   // 391\n  //////////////////////////////////////////////////////////////////////           // 392\n  // Meteor.users - MS05.3                                                         // 393\n  //                                                                               // 394\n  // Instantiate the users default collection                                      // 395\n  //////////////////////////////////////////////////////////////////////           // 396\n                                                                                   // 397\n  Meteor.users = new Meteor.Collection('users');                                   // 398\n                                                                                   // 399\n                                                                                   // 400\n                                                                                   // 401\n                                                                                   // 402\n  return Meteor;                                                                   // 403\n                                                                                   // 404\n};  // Meteor                                                                      // 405\n                                                                                   // 406\n                                                                                   // 407\n//////////////////////////////////////////////////////////////////////             // 408\n// MS06 - Check                                                                    // 409\n//////////////////////////////////////////////////////////////////////             // 410\n                                                                                   // 411\nstubFactories.check = function () {                                                // 412\n  return emptyFn;                                                                  // 413\n};                                                                                 // 414\n                                                                                   // 415\nstubFactories.Match = function () {                                                // 416\n  return {                                                                         // 417\n    test: emptyFn                                                                  // 418\n  };                                                                               // 419\n};                                                                                 // 420\n                                                                                   // 421\n                                                                                   // 422\n//////////////////////////////////////////////////////////////////////             // 423\n// MS10 - Npm                                                                      // 424\n//////////////////////////////////////////////////////////////////////             // 425\n                                                                                   // 426\nstubFactories.Npm = function () {                                                  // 427\n  return {                                                                         // 428\n    depends: emptyFn,                                                              // 429\n    require: emptyFn                                                               // 430\n  };                                                                               // 431\n};                                                                                 // 432\n                                                                                   // 433\n                                                                                   // 434\n//////////////////////////////////////////////////////////////////////             // 435\n// MS15 - Deps / Tracker                                                           // 436\n//////////////////////////////////////////////////////////////////////             // 437\n                                                                                   // 438\n// TODO: Tracker.Computation (if needed)                                           // 439\n// TODO: Tracker.Dependency (if needed)                                            // 440\n                                                                                   // 441\nstubFactories.Tracker = function () {                                              // 442\n  return {                                                                         // 443\n    autorun: callbackFn,                                                           // 444\n    flush: emptyFn,                                                                // 445\n    nonreactive: callbackFn,                                                       // 446\n    active: false,                                                                 // 447\n    currentComputation: emptyFn,                                                   // 448\n    onInvalidate: emptyFn,                                                         // 449\n    afterFlush: emptyFn                                                            // 450\n  };                                                                               // 451\n};                                                                                 // 452\nstubFactories.Deps = stubFactories.Tracker                                         // 453\n                                                                                   // 454\n                                                                                   // 455\n//////////////////////////////////////////////////////////////////////             // 456\n// MS20 - Package                                                                  // 457\n//////////////////////////////////////////////////////////////////////             // 458\n                                                                                   // 459\nstubFactories.Package = function () {                                              // 460\n  return {                                                                         // 461\n    describe: emptyFn,                                                             // 462\n    onUse: emptyFn,                                                                // 463\n    onTest: emptyFn,                                                               // 464\n    registerBuildPlugin: emptyFn                                                   // 465\n  };                                                                               // 466\n};                                                                                 // 467\n                                                                                   // 468\n                                                                                   // 469\n                                                                                   // 470\n//////////////////////////////////////////////////////////////////////             // 471\n// MS25 - Random                                                                   // 472\n//////////////////////////////////////////////////////////////////////             // 473\n                                                                                   // 474\nstubFactories.Random = function () {                                               // 475\n  return {                                                                         // 476\n    id: emptyFn,                                                                   // 477\n    secret: emptyFn,                                                               // 478\n    fraction: emptyFn,                                                             // 479\n    choice: emptyFn,                                                               // 480\n    hexString: emptyFn                                                             // 481\n  };                                                                               // 482\n};                                                                                 // 483\n                                                                                   // 484\n                                                                                   // 485\n                                                                                   // 486\n//////////////////////////////////////////////////////////////////////             // 487\n// MS30 - Session                                                                  // 488\n//////////////////////////////////////////////////////////////////////             // 489\n                                                                                   // 490\nstubFactories.Session = function () {                                              // 491\n  return {                                                                         // 492\n    store: {},                                                                     // 493\n    set: function (key, value) {                                                   // 494\n      this.store[key] = value;                                                     // 495\n    },                                                                             // 496\n    setDefault: function (key, value) {                                            // 497\n      if (typeof this.get(key) === 'undefined') {                                  // 498\n        this.set(key, value);                                                      // 499\n      }                                                                            // 500\n    },                                                                             // 501\n    get: function (key) {                                                          // 502\n      return this.store[key];                                                      // 503\n    },                                                                             // 504\n    equals: function (key, value) {                                                // 505\n      return this.store[key] === value;                                            // 506\n    }                                                                              // 507\n  };                                                                               // 508\n};                                                                                 // 509\n                                                                                   // 510\n                                                                                   // 511\n//////////////////////////////////////////////////////////////////////             // 512\n// MS35 - Templates                                                                // 513\n//////////////////////////////////////////////////////////////////////             // 514\n                                                                                   // 515\nfunction TemplateClass () {}                                                       // 516\nTemplateClass.prototype = {                                                        // 517\n  stub: function (templateName) {                                                  // 518\n    TemplateClass.prototype[templateName] = {                                      // 519\n      eventMap: {},                                                                // 520\n      events: function (eventMap) {                                                // 521\n        for (var event in eventMap) {                                              // 522\n          //noinspection JSUnfilteredForInLoop                                     // 523\n          TemplateClass.prototype[templateName].eventMap[event] = eventMap[event]; // 524\n        }                                                                          // 525\n      },                                                                           // 526\n      helpers: function (helperMap) {                                              // 527\n        for (var helper in helperMap) {                                            // 528\n          //noinspection JSUnfilteredForInLoop                                     // 529\n          TemplateClass.prototype[templateName][helper] = helperMap[helper];       // 530\n        }                                                                          // 531\n      },                                                                           // 532\n      fireEvent: function (key) {                                                  // 533\n        if (arguments.length > 1) {                                                // 534\n          var args = Array.prototype.slice.call(arguments, 1);                     // 535\n          TemplateClass.prototype[templateName].eventMap[key].apply(null, args);   // 536\n        } else {                                                                   // 537\n          TemplateClass.prototype[templateName].eventMap[key]();                   // 538\n        }                                                                          // 539\n      },                                                                           // 540\n      // Allows you to set an attribute in the event 'this' context                // 541\n      addContextAttribute: function (key, value) {                                 // 542\n        TemplateClass.prototype[templateName].eventMap[key] = value;               // 543\n      }                                                                            // 544\n    };                                                                             // 545\n  }                                                                                // 546\n};                                                                                 // 547\n                                                                                   // 548\nstubFactories.Template = function () {                                             // 549\n  var Template = new TemplateClass();                                              // 550\n                                                                                   // 551\n  Template.registerHelper = emptyFn;                                               // 552\n  Template.instance = emptyFn;                                                     // 553\n  Template.currentData = emptyFn;                                                  // 554\n  Template.parentData = emptyFn;                                                   // 555\n  Template.body = {};                                                              // 556\n                                                                                   // 557\n  return Template;                                                                 // 558\n};                                                                                 // 559\n                                                                                   // 560\n                                                                                   // 561\n//////////////////////////////////////////////////////////////////////             // 562\n// MS40 - Handlebars                                                               // 563\n//////////////////////////////////////////////////////////////////////             // 564\n                                                                                   // 565\nfunction HandlebarsClass () {}                                                     // 566\nHandlebarsClass.prototype = {                                                      // 567\n  helpers: {},                                                                     // 568\n  registerHelper: function (name, method) {                                        // 569\n    this.helpers[name] = method;                                                   // 570\n  }                                                                                // 571\n};                                                                                 // 572\n                                                                                   // 573\nstubFactories.Handlebars = function () {                                           // 574\n  return new HandlebarsClass();                                                    // 575\n};                                                                                 // 576\n                                                                                   // 577\n                                                                                   // 578\n                                                                                   // 579\n//////////////////////////////////////////////////////////////////////             // 580\n// MS45 - Accounts                                                                 // 581\n//////////////////////////////////////////////////////////////////////             // 582\n                                                                                   // 583\nstubFactories.Accounts = function () {                                             // 584\n  return {                                                                         // 585\n    // Accounts                                                                    // 586\n    config: emptyFn,                                                               // 587\n    ui: {                                                                          // 588\n      config: emptyFn                                                              // 589\n    },                                                                             // 590\n    validateNewUser: emptyFn,                                                      // 591\n    onCreateUser: emptyFn,                                                         // 592\n    validateLoginAttempt: emptyFn,                                                 // 593\n    onLogin: emptyFn,                                                              // 594\n    onLoginFailure: emptyFn,                                                       // 595\n                                                                                   // 596\n    // Passwords                                                                   // 597\n    createUser: emptyFn,                                                           // 598\n    changePassword: emptyFn,                                                       // 599\n    forgotPassword: emptyFn,                                                       // 600\n    resetPassword: emptyFn,                                                        // 601\n    setPassword: emptyFn,                                                          // 602\n    verifyEmail: emptyFn,                                                          // 603\n                                                                                   // 604\n    sendResetPasswordEmail: emptyFn,                                               // 605\n    sendEnrollmentEmail: emptyFn,                                                  // 606\n    sendVerificationEmail: emptyFn,                                                // 607\n                                                                                   // 608\n    onResetPasswordLink: emptyFn,                                                  // 609\n    onEnrollmentLink: emptyFn,                                                     // 610\n    onEmailVerificationLink: emptyFn,                                              // 611\n                                                                                   // 612\n    emailTemplates: {                                                              // 613\n      resetPassword: {},                                                           // 614\n      enrollAccount: {},                                                           // 615\n      verifyEmail: {}                                                              // 616\n    }                                                                              // 617\n  };                                                                               // 618\n};                                                                                 // 619\n                                                                                   // 620\n                                                                                   // 621\n//////////////////////////////////////////////////////////////////////             // 622\n// MS48 - ServiceConfiguration                                                     // 623\n//////////////////////////////////////////////////////////////////////             // 624\n                                                                                   // 625\nfunction ServiceConfiguration () {}                                                // 626\nServiceConfiguration.configurations = {                                            // 627\n    remove: emptyFn,                                                               // 628\n    insert: emptyFn                                                                // 629\n};                                                                                 // 630\nServiceConfiguration.configurations.prototype = {                                  // 631\n    constructor: ServiceConfiguration,                                             // 632\n    remove: emptyFn,                                                               // 633\n    insert: emptyFn,                                                               // 634\n    extend: emptyFn                                                                // 635\n};                                                                                 // 636\n                                                                                   // 637\nstubFactories.ServiceConfiguration = function () {                                 // 638\n  return new ServiceConfiguration()                                                // 639\n};                                                                                 // 640\n                                                                                   // 641\n                                                                                   // 642\n//////////////////////////////////////////////////////////////////////             // 643\n// MS50 - __meteor_bootstrap__                                                     // 644\n//////////////////////////////////////////////////////////////////////             // 645\n                                                                                   // 646\nstubFactories.__meteor_bootstrap__ = function () {                                 // 647\n  return {                                                                         // 648\n    deployConfig: {                                                                // 649\n      packages: { 'mongo-livedata': { url: '' } }                                  // 650\n    }                                                                              // 651\n  };                                                                               // 652\n};                                                                                 // 653\n                                                                                   // 654\n//////////////////////////////////////////////////////////////////////             // 655\n// MS55 - share                                                                    // 656\n//////////////////////////////////////////////////////////////////////             // 657\n                                                                                   // 658\nstubFactories.share = function () {                                                // 659\n  return {};                                                                       // 660\n};                                                                                 // 661\n                                                                                   // 662\n                                                                                   // 663\n//////////////////////////////////////////////////////////////////////             // 664\n// MS60 - Mongo                                                                    // 665\n//////////////////////////////////////////////////////////////////////             // 666\n                                                                                   // 667\nstubFactories.Mongo = function () {                                                // 668\n  var _instantiationCounts = {},                                                   // 669\n      Mongo;                                                                       // 670\n                                                                                   // 671\n  function collectionFn (collectionName) {                                         // 672\n    var current = _instantiationCounts[collectionName];                            // 673\n                                                                                   // 674\n    if (!current) {                                                                // 675\n      _instantiationCounts[collectionName] = 1                                     // 676\n    } else {                                                                       // 677\n      _instantiationCounts[collectionName] = current + 1                           // 678\n    }                                                                              // 679\n  }                                                                                // 680\n                                                                                   // 681\n  Mongo = {                                                                        // 682\n    instantiationCounts: _instantiationCounts,                                     // 683\n    Collection: collectionFn,                                                      // 684\n    Cursor: emptyFn,                                                               // 685\n    ObjectID: function () {                                                        // 686\n      return { _str: '' };                                                         // 687\n    }                                                                              // 688\n  };                                                                               // 689\n                                                                                   // 690\n  Mongo.Collection.prototype = prototypes.Collection;                              // 691\n  Mongo.Cursor.prototype = prototypes.Cursor;                                      // 692\n  Mongo.ObjectID.prototype = prototypes.ObjectID;                                  // 693\n                                                                                   // 694\n  return Mongo;                                                                    // 695\n};                                                                                 // 696\n                                                                                   // 697\n                                                                                   // 698\n//////////////////////////////////////////////////////////////////////             // 699\n// MS62 - HTTP                                                                     // 700\n//////////////////////////////////////////////////////////////////////             // 701\nstubFactories.HTTP = function () {                                                 // 702\n  return {                                                                         // 703\n    call: emptyFn,                                                                 // 704\n    get: emptyFn,                                                                  // 705\n    post: emptyFn,                                                                 // 706\n    put: emptyFn,                                                                  // 707\n    del: emptyFn                                                                   // 708\n  };                                                                               // 709\n};                                                                                 // 710\n                                                                                   // 711\n                                                                                   // 712\n//////////////////////////////////////////////////////////////////////             // 713\n// MS63 - Email                                                                    // 714\n//////////////////////////////////////////////////////////////////////             // 715\nstubFactories.Email = function () {                                                // 716\n  return {                                                                         // 717\n    send: emptyFn                                                                  // 718\n  };                                                                               // 719\n};                                                                                 // 720\n                                                                                   // 721\n                                                                                   // 722\n//////////////////////////////////////////////////////////////////////             // 723\n// MS65 - Assets                                                                   // 724\n//////////////////////////////////////////////////////////////////////             // 725\n                                                                                   // 726\nstubFactories.Assets = function () {                                               // 727\n  return {                                                                         // 728\n    getText: stringFn,                                                             // 729\n    getBinary: emptyFn                                                             // 730\n  };                                                                               // 731\n};                                                                                 // 732\n                                                                                   // 733\n                                                                                   // 734\n//////////////////////////////////////////////////////////////////////             // 735\n// MS70 - Cordova                                                                  // 736\n//////////////////////////////////////////////////////////////////////             // 737\nstubFactories.Cordova = function () {                                              // 738\n  return {                                                                         // 739\n    depends: emptyFn                                                               // 740\n  };                                                                               // 741\n}                                                                                  // 742\n                                                                                   // 743\n                                                                                   // 744\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}